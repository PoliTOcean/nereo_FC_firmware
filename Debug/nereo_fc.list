
nereo_fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019ee0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014d8  0801a0a0  0801a0a0  0001b0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b578  0801b578  0001d7a4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b578  0801b578  0001c578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b580  0801b580  0001d7a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801b580  0801b580  0001c580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b590  0801b590  0001c590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000007a4  20000000  0801b594  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d7a4  2**0
                  CONTENTS
 10 .bss          00014ed4  200007a8  200007a8  0001d7a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001567c  2001567c  0001d7a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d7a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fc7a  00000000  00000000  0001d7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000522a  00000000  00000000  0003d44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00042678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b1  00000000  00000000  00043f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003037e  00000000  00000000  000451d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021480  00000000  00000000  0007554f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110417  00000000  00000000  000969cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ef  00000000  00000000  001a6de6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007568  00000000  00000000  001a6ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001ae440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000959  00000000  00000000  001ae4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  001aee0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200007a8 	.word	0x200007a8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801a088 	.word	0x0801a088

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200007ac 	.word	0x200007ac
 80001fc:	0801a088 	.word	0x0801a088

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_ldivmod>:
 8000c1c:	b97b      	cbnz	r3, 8000c3e <__aeabi_ldivmod+0x22>
 8000c1e:	b972      	cbnz	r2, 8000c3e <__aeabi_ldivmod+0x22>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bfbe      	ittt	lt
 8000c24:	2000      	movlt	r0, #0
 8000c26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c2a:	e006      	blt.n	8000c3a <__aeabi_ldivmod+0x1e>
 8000c2c:	bf08      	it	eq
 8000c2e:	2800      	cmpeq	r0, #0
 8000c30:	bf1c      	itt	ne
 8000c32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c3a:	f000 b9b5 	b.w	8000fa8 <__aeabi_idiv0>
 8000c3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c46:	2900      	cmp	r1, #0
 8000c48:	db09      	blt.n	8000c5e <__aeabi_ldivmod+0x42>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1a      	blt.n	8000c84 <__aeabi_ldivmod+0x68>
 8000c4e:	f000 f84d 	bl	8000cec <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4770      	bx	lr
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db1b      	blt.n	8000ca0 <__aeabi_ldivmod+0x84>
 8000c68:	f000 f840 	bl	8000cec <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	4770      	bx	lr
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	f000 f82f 	bl	8000cec <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4240      	negs	r0, r0
 8000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f821 	bl	8000cec <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd0:	f000 b96a 	b.w	8000fa8 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14e      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	458c      	cmp	ip, r1
 8000cfc:	4686      	mov	lr, r0
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	d962      	bls.n	8000dca <__udivmoddi4+0xde>
 8000d04:	b14a      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f f68c 	uxth.w	r6, ip
 8000d22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb04 f106 	mul.w	r1, r4, r6
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d42:	f080 8112 	bcs.w	8000f6a <__udivmoddi4+0x27e>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 810f 	bls.w	8000f6a <__udivmoddi4+0x27e>
 8000d4c:	3c02      	subs	r4, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	fa1f f38e 	uxth.w	r3, lr
 8000d56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f606 	mul.w	r6, r0, r6
 8000d66:	429e      	cmp	r6, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x94>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d72:	f080 80fc 	bcs.w	8000f6e <__udivmoddi4+0x282>
 8000d76:	429e      	cmp	r6, r3
 8000d78:	f240 80f9 	bls.w	8000f6e <__udivmoddi4+0x282>
 8000d7c:	4463      	add	r3, ip
 8000d7e:	3802      	subs	r0, #2
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d86:	2100      	movs	r1, #0
 8000d88:	b11d      	cbz	r5, 8000d92 <__udivmoddi4+0xa6>
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d905      	bls.n	8000da6 <__udivmoddi4+0xba>
 8000d9a:	b10d      	cbz	r5, 8000da0 <__udivmoddi4+0xb4>
 8000d9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	4608      	mov	r0, r1
 8000da4:	e7f5      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000da6:	fab3 f183 	clz	r1, r3
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d146      	bne.n	8000e3c <__udivmoddi4+0x150>
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xcc>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f0c0 80f0 	bcc.w	8000f98 <__udivmoddi4+0x2ac>
 8000db8:	1a86      	subs	r6, r0, r2
 8000dba:	eb64 0303 	sbc.w	r3, r4, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d0e6      	beq.n	8000d92 <__udivmoddi4+0xa6>
 8000dc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc8:	e7e3      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__udivmoddi4+0x204>
 8000dd0:	eba1 040c 	sub.w	r4, r1, ip
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000de2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dee:	fb07 f006 	mul.w	r0, r7, r6
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x11c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x11a>
 8000e00:	4298      	cmp	r0, r3
 8000e02:	f200 80cd 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e06:	4626      	mov	r6, r4
 8000e08:	1a1c      	subs	r4, r3, r0
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e12:	fb08 4410 	mls	r4, r8, r0, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb00 f707 	mul.w	r7, r0, r7
 8000e1e:	429f      	cmp	r7, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x148>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x146>
 8000e2c:	429f      	cmp	r7, r3
 8000e2e:	f200 80b0 	bhi.w	8000f92 <__udivmoddi4+0x2a6>
 8000e32:	4620      	mov	r0, r4
 8000e34:	1bdb      	subs	r3, r3, r7
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0x9c>
 8000e3c:	f1c1 0620 	rsb	r6, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 f706 	lsr.w	r7, r2, r6
 8000e46:	431f      	orrs	r7, r3
 8000e48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e50:	ea43 030c 	orr.w	r3, r3, ip
 8000e54:	40f4      	lsrs	r4, r6
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	0c38      	lsrs	r0, r7, #16
 8000e5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e60:	fbb4 fef0 	udiv	lr, r4, r0
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	fb00 441e 	mls	r4, r0, lr, r4
 8000e6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e70:	fb0e f90c 	mul.w	r9, lr, ip
 8000e74:	45a1      	cmp	r9, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x1a6>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e82:	f080 8084 	bcs.w	8000f8e <__udivmoddi4+0x2a2>
 8000e86:	45a1      	cmp	r9, r4
 8000e88:	f240 8081 	bls.w	8000f8e <__udivmoddi4+0x2a2>
 8000e8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	eba4 0409 	sub.w	r4, r4, r9
 8000e96:	fa1f f983 	uxth.w	r9, r3
 8000e9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ea2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x1d2>
 8000eae:	193c      	adds	r4, r7, r4
 8000eb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb4:	d267      	bcs.n	8000f86 <__udivmoddi4+0x29a>
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d965      	bls.n	8000f86 <__udivmoddi4+0x29a>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ec2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec6:	eba4 040c 	sub.w	r4, r4, ip
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	46ce      	mov	lr, r9
 8000ece:	469c      	mov	ip, r3
 8000ed0:	d351      	bcc.n	8000f76 <__udivmoddi4+0x28a>
 8000ed2:	d04e      	beq.n	8000f72 <__udivmoddi4+0x286>
 8000ed4:	b155      	cbz	r5, 8000eec <__udivmoddi4+0x200>
 8000ed6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eda:	eb64 040c 	sbc.w	r4, r4, ip
 8000ede:	fa04 f606 	lsl.w	r6, r4, r6
 8000ee2:	40cb      	lsrs	r3, r1
 8000ee4:	431e      	orrs	r6, r3
 8000ee6:	40cc      	lsrs	r4, r1
 8000ee8:	e9c5 6400 	strd	r6, r4, [r5]
 8000eec:	2100      	movs	r1, #0
 8000eee:	e750      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa24 f303 	lsr.w	r3, r4, r3
 8000f00:	4094      	lsls	r4, r2
 8000f02:	430c      	orrs	r4, r1
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f0c:	fa1f f78c 	uxth.w	r7, ip
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3110 	mls	r1, r8, r0, r3
 8000f18:	0c23      	lsrs	r3, r4, #16
 8000f1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1e:	fb00 f107 	mul.w	r1, r0, r7
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x24c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2e:	d22c      	bcs.n	8000f8a <__udivmoddi4+0x29e>
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d92a      	bls.n	8000f8a <__udivmoddi4+0x29e>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f40:	fb08 3311 	mls	r3, r8, r1, r3
 8000f44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f48:	fb01 f307 	mul.w	r3, r1, r7
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x276>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f58:	d213      	bcs.n	8000f82 <__udivmoddi4+0x296>
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	d911      	bls.n	8000f82 <__udivmoddi4+0x296>
 8000f5e:	3902      	subs	r1, #2
 8000f60:	4464      	add	r4, ip
 8000f62:	1ae4      	subs	r4, r4, r3
 8000f64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f68:	e739      	b.n	8000dde <__udivmoddi4+0xf2>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	e6f0      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e706      	b.n	8000d80 <__udivmoddi4+0x94>
 8000f72:	45c8      	cmp	r8, r9
 8000f74:	d2ae      	bcs.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7e:	3801      	subs	r0, #1
 8000f80:	e7a8      	b.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f82:	4631      	mov	r1, r6
 8000f84:	e7ed      	b.n	8000f62 <__udivmoddi4+0x276>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e799      	b.n	8000ebe <__udivmoddi4+0x1d2>
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	e7d4      	b.n	8000f38 <__udivmoddi4+0x24c>
 8000f8e:	46d6      	mov	lr, sl
 8000f90:	e77f      	b.n	8000e92 <__udivmoddi4+0x1a6>
 8000f92:	4463      	add	r3, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e74d      	b.n	8000e34 <__udivmoddi4+0x148>
 8000f98:	4606      	mov	r6, r0
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e70f      	b.n	8000dc0 <__udivmoddi4+0xd4>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	e730      	b.n	8000e08 <__udivmoddi4+0x11c>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fb8:	f006 fbe6 	bl	8007788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fc4:	f000 f986 	bl	80012d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fc8:	4b58      	ldr	r3, [pc, #352]	@ (800112c <pvPortMallocMicroROS+0x180>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 8090 	bne.w	80010f6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01e      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fdc:	2208      	movs	r2, #8
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f023 0307 	bic.w	r3, r3, #7
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001006:	f383 8811 	msr	BASEPRI, r3
 800100a:	f3bf 8f6f 	isb	sy
 800100e:	f3bf 8f4f 	dsb	sy
 8001012:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	e7fd      	b.n	8001016 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d06a      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
 8001020:	4b43      	ldr	r3, [pc, #268]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d865      	bhi.n	80010f6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800102a:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 800102c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800102e:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001034:	e004      	b.n	8001040 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d903      	bls.n	8001052 <pvPortMallocMicroROS+0xa6>
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f1      	bne.n	8001036 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001052:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001058:	429a      	cmp	r2, r3
 800105a:	d04c      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2208      	movs	r2, #8
 8001062:	4413      	add	r3, r2
 8001064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	2308      	movs	r3, #8
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	429a      	cmp	r2, r3
 800107c:	d920      	bls.n	80010c0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800107e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001094:	f383 8811 	msr	BASEPRI, r3
 8001098:	f3bf 8f6f 	isb	sy
 800109c:	f3bf 8f4f 	dsb	sy
 80010a0:	613b      	str	r3, [r7, #16]
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010ba:	69b8      	ldr	r0, [r7, #24]
 80010bc:	f000 f96c 	bl	8001398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d203      	bcs.n	80010e2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a16      	ldr	r2, [pc, #88]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <pvPortMallocMicroROS+0x180>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010f6:	f006 fb55 	bl	80077a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	60fb      	str	r3, [r7, #12]
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800111c:	69fb      	ldr	r3, [r7, #28]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20007cfc 	.word	0x20007cfc
 800112c:	20007d08 	.word	0x20007d08
 8001130:	20007d00 	.word	0x20007d00
 8001134:	20007cf4 	.word	0x20007cf4
 8001138:	20007d04 	.word	0x20007d04

0800113c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d04a      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800114e:	2308      	movs	r3, #8
 8001150:	425b      	negs	r3, r3
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10b      	bne.n	8001182 <vPortFreeMicroROS+0x46>
	__asm volatile
 800116a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800116e:	f383 8811 	msr	BASEPRI, r3
 8001172:	f3bf 8f6f 	isb	sy
 8001176:	f3bf 8f4f 	dsb	sy
 800117a:	60fb      	str	r3, [r7, #12]
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800118a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800118e:	f383 8811 	msr	BASEPRI, r3
 8001192:	f3bf 8f6f 	isb	sy
 8001196:	f3bf 8f4f 	dsb	sy
 800119a:	60bb      	str	r3, [r7, #8]
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d019      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d115      	bne.n	80011e4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011c8:	f006 fade 	bl	8007788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011da:	6938      	ldr	r0, [r7, #16]
 80011dc:	f000 f8dc 	bl	8001398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011e0:	f006 fae0 	bl	80077a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20007d08 	.word	0x20007d08
 80011f0:	20007d00 	.word	0x20007d00

080011f4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001200:	2308      	movs	r3, #8
 8001202:	425b      	negs	r3, r3
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <getBlockSize+0x38>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	43db      	mvns	r3, r3
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]

	return count;
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20007d08 	.word	0x20007d08

08001230 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800123a:	f006 faa5 	bl	8007788 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff feb4 	bl	8000fac <pvPortMallocMicroROS>
 8001244:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d017      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d014      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffce 	bl	80011f4 <getBlockSize>
 8001258:	4603      	mov	r3, r0
 800125a:	2208      	movs	r2, #8
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d201      	bcs.n	800126c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f017 fe30 	bl	8018ed6 <memcpy>

		vPortFreeMicroROS(pv);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff60 	bl	800113c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800127c:	f006 fa92 	bl	80077a4 <xTaskResumeAll>

	return newmem;
 8001280:	68bb      	ldr	r3, [r7, #8]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001294:	f006 fa78 	bl	8007788 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff fe82 	bl	8000fac <pvPortMallocMicroROS>
 80012a8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ae:	e004      	b.n	80012ba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	613a      	str	r2, [r7, #16]
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f5      	bne.n	80012b0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012c4:	f006 fa6e 	bl	80077a4 <xTaskResumeAll>
  	return mem;
 80012c8:	68fb      	ldr	r3, [r7, #12]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012da:	f247 5330 	movw	r3, #30000	@ 0x7530
 80012de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012e0:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <prvHeapInit+0xac>)
 80012e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00c      	beq.n	8001308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3307      	adds	r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f023 0307 	bic.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <prvHeapInit+0xac>)
 8001304:	4413      	add	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800130c:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <prvHeapInit+0xb0>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <prvHeapInit+0xb0>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001320:	2208      	movs	r2, #8
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f023 0307 	bic.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <prvHeapInit+0xb4>)
 8001334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <prvHeapInit+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <prvHeapInit+0xb4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	1ad2      	subs	r2, r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <prvHeapInit+0xb4>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <prvHeapInit+0xb8>)
 8001362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <prvHeapInit+0xbc>)
 800136a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <prvHeapInit+0xc0>)
 800136e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	200007c4 	.word	0x200007c4
 8001384:	20007cf4 	.word	0x20007cf4
 8001388:	20007cfc 	.word	0x20007cfc
 800138c:	20007d04 	.word	0x20007d04
 8001390:	20007d00 	.word	0x20007d00
 8001394:	20007d08 	.word	0x20007d08

08001398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <prvInsertBlockIntoFreeList+0xac>)
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e002      	b.n	80013ac <prvInsertBlockIntoFreeList+0x14>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8f7      	bhi.n	80013a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d108      	bne.n	80013da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	441a      	add	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d118      	bne.n	8001420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d00d      	beq.n	8001416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	441a      	add	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e008      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e003      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	d002      	beq.n	8001436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20007cf4 	.word	0x20007cf4
 8001448:	20007cfc 	.word	0x20007cfc

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <MX_DMA_Init+0x4c>)
 800145c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	203a      	movs	r0, #58	@ 0x3a
 8001474:	f002 f820 	bl	80034b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001478:	203a      	movs	r0, #58	@ 0x3a
 800147a:	f002 f839 	bl	80034f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2046      	movs	r0, #70	@ 0x46
 8001484:	f002 f818 	bl	80034b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001488:	2046      	movs	r0, #70	@ 0x46
 800148a:	f002 f831 	bl	80034f0 <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b0:	4904      	ldr	r1, [pc, #16]	@ (80014c4 <cubemx_transport_open+0x28>)
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f003 fe64 	bl	8005180 <HAL_UART_Receive_DMA>
    return true;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20007d0c 	.word	0x20007d0c

080014c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f003 fe76 	bl	80051ca <HAL_UART_DMAStop>
    return true;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	d11c      	bne.n	8001544 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f003 fdc4 	bl	80050a0 <HAL_UART_Transmit_DMA>
 8001518:	4603      	mov	r3, r0
 800151a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800151c:	e002      	b.n	8001524 <cubemx_transport_write+0x3c>
            osDelay(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f005 f8f0 	bl	8006704 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001524:	7cfb      	ldrb	r3, [r7, #19]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <cubemx_transport_write+0x4e>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	d1f3      	bne.n	800151e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001536:	7cfb      	ldrb	r3, [r7, #19]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <cubemx_transport_write+0x58>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	e002      	b.n	8001546 <cubemx_transport_write+0x5e>
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001544:	2300      	movs	r3, #0
    }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001564:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156a:	b672      	cpsid	i
}
 800156c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <cubemx_transport_read+0x9c>)
 800157c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800157e:	b662      	cpsie	i
}
 8001580:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001588:	2001      	movs	r0, #1
 800158a:	f005 f8bb 	bl	8006704 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <cubemx_transport_read+0xa0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <cubemx_transport_read+0x9c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d103      	bne.n	80015a2 <cubemx_transport_read+0x52>
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbe3      	blt.n	800156a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015a6:	e011      	b.n	80015cc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	440b      	add	r3, r1
 80015b2:	4910      	ldr	r1, [pc, #64]	@ (80015f4 <cubemx_transport_read+0xa4>)
 80015b4:	5c8a      	ldrb	r2, [r1, r2]
 80015b6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015c4:	6013      	str	r3, [r2, #0]
        wrote++;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <cubemx_transport_read+0x9c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d003      	beq.n	80015e0 <cubemx_transport_read+0x90>
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3e3      	bcc.n	80015a8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80015e0:	69bb      	ldr	r3, [r7, #24]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20008510 	.word	0x20008510
 80015f0:	2000850c 	.word	0x2000850c
 80015f4:	20007d0c 	.word	0x20007d0c

080015f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <MX_FREERTOS_Init+0x18>)
 80015fe:	2100      	movs	r1, #0
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_FREERTOS_Init+0x1c>)
 8001602:	f004 ffed 	bl	80065e0 <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a03      	ldr	r2, [pc, #12]	@ (8001618 <MX_FREERTOS_Init+0x20>)
 800160a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	0801a200 	.word	0x0801a200
 8001614:	0800161d 	.word	0x0800161d
 8001618:	20008518 	.word	0x20008518

0800161c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	f5ad 7d6b 	sub.w	sp, sp, #940	@ 0x3ac
 8001622:	af04      	add	r7, sp, #16
 8001624:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001628:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 800162c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	// micro-ROS configuration
	  rmw_uros_set_custom_transport(
 800162e:	4bc8      	ldr	r3, [pc, #800]	@ (8001950 <StartDefaultTask+0x334>)
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	4bc8      	ldr	r3, [pc, #800]	@ (8001954 <StartDefaultTask+0x338>)
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4bc8      	ldr	r3, [pc, #800]	@ (8001958 <StartDefaultTask+0x33c>)
 8001638:	4ac8      	ldr	r2, [pc, #800]	@ (800195c <StartDefaultTask+0x340>)
 800163a:	49c9      	ldr	r1, [pc, #804]	@ (8001960 <StartDefaultTask+0x344>)
 800163c:	2001      	movs	r0, #1
 800163e:	f00a f803 	bl	800b648 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001642:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 8001646:	4618      	mov	r0, r3
 8001648:	f009 ff30 	bl	800b4ac <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800164c:	4bc5      	ldr	r3, [pc, #788]	@ (8001964 <StartDefaultTask+0x348>)
 800164e:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001652:	4bc5      	ldr	r3, [pc, #788]	@ (8001968 <StartDefaultTask+0x34c>)
 8001654:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001658:	4bc4      	ldr	r3, [pc, #784]	@ (800196c <StartDefaultTask+0x350>)
 800165a:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800165e:	4bc4      	ldr	r3, [pc, #784]	@ (8001970 <StartDefaultTask+0x354>)
 8001660:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001664:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 8001668:	4618      	mov	r0, r3
 800166a:	f009 ff2d 	bl	800b4c8 <rcutils_set_default_allocator>
 800166e:	4603      	mov	r3, r0
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 800167a:	21c9      	movs	r1, #201	@ 0xc9
 800167c:	48bd      	ldr	r0, [pc, #756]	@ (8001974 <StartDefaultTask+0x358>)
 800167e:	f017 faf3 	bl	8018c68 <iprintf>

	  // PARAM SERVER

	  rcl_ret_t rc;

	  allocator = rcl_get_default_allocator();
 8001682:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001686:	4618      	mov	r0, r3
 8001688:	f009 ff3c 	bl	800b504 <rcutils_get_default_allocator>
 800168c:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001690:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001694:	f507 744a 	add.w	r4, r7, #808	@ 0x328
 8001698:	461d      	mov	r5, r3
 800169a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rc = rclc_support_init(&support, 0, NULL, &allocator);
 80016a2:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80016a6:	f507 704f 	add.w	r0, r7, #828	@ 0x33c
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	f009 fe07 	bl	800b2c0 <rclc_support_init>
 80016b2:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016b6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <StartDefaultTask+0xaa>
 80016be:	21ef      	movs	r1, #239	@ 0xef
 80016c0:	48ad      	ldr	r0, [pc, #692]	@ (8001978 <StartDefaultTask+0x35c>)
 80016c2:	f017 fad1 	bl	8018c68 <iprintf>

	  // create node
	  rc = rclc_node_init_default(&node, "cubemx_node", "", &support);
 80016c6:	f507 734f 	add.w	r3, r7, #828	@ 0x33c
 80016ca:	f507 7048 	add.w	r0, r7, #800	@ 0x320
 80016ce:	4aab      	ldr	r2, [pc, #684]	@ (800197c <StartDefaultTask+0x360>)
 80016d0:	49ab      	ldr	r1, [pc, #684]	@ (8001980 <StartDefaultTask+0x364>)
 80016d2:	f009 fe3f 	bl	800b354 <rclc_node_init_default>
 80016d6:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016da:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <StartDefaultTask+0xce>
 80016e2:	21f3      	movs	r1, #243	@ 0xf3
 80016e4:	48a4      	ldr	r0, [pc, #656]	@ (8001978 <StartDefaultTask+0x35c>)
 80016e6:	f017 fabf 	bl	8018c68 <iprintf>

	  executor = rclc_executor_get_zero_initialized_executor();
 80016ea:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80016ee:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 80016f2:	463b      	mov	r3, r7
 80016f4:	4618      	mov	r0, r3
 80016f6:	f009 fb11 	bl	800ad1c <rclc_executor_get_zero_initialized_executor>
 80016fa:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80016fe:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8001702:	4620      	mov	r0, r4
 8001704:	4619      	mov	r1, r3
 8001706:	2388      	movs	r3, #136	@ 0x88
 8001708:	461a      	mov	r2, r3
 800170a:	f017 fbe4 	bl	8018ed6 <memcpy>
	  rc = rclc_executor_init(&executor, &support.context, NUMBER_SUBS_TIMS, &allocator);
 800170e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8001712:	f507 714f 	add.w	r1, r7, #828	@ 0x33c
 8001716:	f507 7026 	add.w	r0, r7, #664	@ 0x298
 800171a:	2204      	movs	r2, #4
 800171c:	f009 fb08 	bl	800ad30 <rclc_executor_init>
 8001720:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001724:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <StartDefaultTask+0x118>
 800172c:	21f7      	movs	r1, #247	@ 0xf7
 800172e:	4892      	ldr	r0, [pc, #584]	@ (8001978 <StartDefaultTask+0x35c>)
 8001730:	f017 fa9a 	bl	8018c68 <iprintf>

	  // PUBLISHERS
	  rclc_publisher_init_default(
 8001734:	f008 fdda 	bl	800a2ec <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>
 8001738:	4602      	mov	r2, r0
 800173a:	f507 7148 	add.w	r1, r7, #800	@ 0x320
 800173e:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8001742:	4b90      	ldr	r3, [pc, #576]	@ (8001984 <StartDefaultTask+0x368>)
 8001744:	f009 fe42 	bl	800b3cc <rclc_publisher_init_default>

	  // SUBSCRIBERS
	  static micro_ros_utilities_memory_conf_t default_conf = {0};

	  // IMU sub
	  rc = rclc_subscription_init_default(
 8001748:	f00a fcd8 	bl	800c0fc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800174c:	4602      	mov	r2, r0
 800174e:	f507 7148 	add.w	r1, r7, #800	@ 0x320
 8001752:	f507 701f 	add.w	r0, r7, #636	@ 0x27c
 8001756:	4b8c      	ldr	r3, [pc, #560]	@ (8001988 <StartDefaultTask+0x36c>)
 8001758:	f009 fe6c 	bl	800b434 <rclc_subscription_init_default>
 800175c:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390
			  &imu_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/imu_data");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001760:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <StartDefaultTask+0x156>
 8001768:	f240 1109 	movw	r1, #265	@ 0x109
 800176c:	4882      	ldr	r0, [pc, #520]	@ (8001978 <StartDefaultTask+0x35c>)
 800176e:	f017 fa7b 	bl	8018c68 <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), &imu_data_msg, default_conf);
 8001772:	f00a fcc3 	bl	800c0fc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001776:	4684      	mov	ip, r0
 8001778:	4c84      	ldr	r4, [pc, #528]	@ (800198c <StartDefaultTask+0x370>)
 800177a:	f507 768c 	add.w	r6, r7, #280	@ 0x118
 800177e:	466d      	mov	r5, sp
 8001780:	f104 0308 	add.w	r3, r4, #8
 8001784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001786:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800178a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800178e:	4631      	mov	r1, r6
 8001790:	4660      	mov	r0, ip
 8001792:	f008 fc61 	bl	800a058 <micro_ros_utilities_create_message_memory>
 8001796:	4603      	mov	r3, r0
 8001798:	f083 0301 	eor.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390

	  rc = rclc_executor_add_subscription(
 80017a2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80017a6:	f507 711f 	add.w	r1, r7, #636	@ 0x27c
 80017aa:	f507 7026 	add.w	r0, r7, #664	@ 0x298
 80017ae:	2300      	movs	r3, #0
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4b77      	ldr	r3, [pc, #476]	@ (8001990 <StartDefaultTask+0x374>)
 80017b4:	f009 fb2c 	bl	800ae10 <rclc_executor_add_subscription>
 80017b8:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390
			  &executor, &imu_subscriber,
			  &imu_data_msg, &imu_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017bc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <StartDefaultTask+0x1b2>
 80017c4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80017c8:	486b      	ldr	r0, [pc, #428]	@ (8001978 <StartDefaultTask+0x35c>)
 80017ca:	f017 fa4d 	bl	8018c68 <iprintf>

	  // CMD Vel sub
	  rc = rclc_subscription_init_default(
 80017ce:	f008 fd75 	bl	800a2bc <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f507 7148 	add.w	r1, r7, #800	@ 0x320
 80017d8:	f507 7020 	add.w	r0, r7, #640	@ 0x280
 80017dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001994 <StartDefaultTask+0x378>)
 80017de:	f009 fe29 	bl	800b434 <rclc_subscription_init_default>
 80017e2:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390
			  &cmd_vel_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity),
			  "/nereo_cmd_vel");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017e6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <StartDefaultTask+0x1dc>
 80017ee:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80017f2:	4861      	ldr	r0, [pc, #388]	@ (8001978 <StartDefaultTask+0x35c>)
 80017f4:	f017 fa38 	bl	8018c68 <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity), &cmd_vel_msg, default_conf);
 80017f8:	f008 fd60 	bl	800a2bc <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 80017fc:	4684      	mov	ip, r0
 80017fe:	4c63      	ldr	r4, [pc, #396]	@ (800198c <StartDefaultTask+0x370>)
 8001800:	f507 7617 	add.w	r6, r7, #604	@ 0x25c
 8001804:	466d      	mov	r5, sp
 8001806:	f104 0308 	add.w	r3, r4, #8
 800180a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001810:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001814:	4631      	mov	r1, r6
 8001816:	4660      	mov	r0, ip
 8001818:	f008 fc1e 	bl	800a058 <micro_ros_utilities_create_message_memory>
 800181c:	4603      	mov	r3, r0
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390

	  rc = rclc_executor_add_subscription(
 8001828:	f507 7217 	add.w	r2, r7, #604	@ 0x25c
 800182c:	f507 7120 	add.w	r1, r7, #640	@ 0x280
 8001830:	f507 7026 	add.w	r0, r7, #664	@ 0x298
 8001834:	2300      	movs	r3, #0
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4b57      	ldr	r3, [pc, #348]	@ (8001998 <StartDefaultTask+0x37c>)
 800183a:	f009 fae9 	bl	800ae10 <rclc_executor_add_subscription>
 800183e:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390
			  &executor, &cmd_vel_subscriber,
			  &cmd_vel_msg, &cmd_vel_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001842:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <StartDefaultTask+0x238>
 800184a:	f240 111f 	movw	r1, #287	@ 0x11f
 800184e:	484a      	ldr	r0, [pc, #296]	@ (8001978 <StartDefaultTask+0x35c>)
 8001850:	f017 fa0a 	bl	8018c68 <iprintf>

	  uint32_t pwm_output[8] = {1500};
 8001854:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001858:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 800185c:	4618      	mov	r0, r3
 800185e:	2320      	movs	r3, #32
 8001860:	461a      	mov	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	f017 facf 	bl	8018e06 <memset>
 8001868:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 800186c:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8001870:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001874:	601a      	str	r2, [r3, #0]
	  arm_status pwm_computation_error = ARM_MATH_SUCCESS;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f

	  while(1)
	  {
		uint32_t time_ms = HAL_GetTick();
 800187c:	f001 fd58 	bl	8003330 <HAL_GetTick>
 8001880:	f8c7 0388 	str.w	r0, [r7, #904]	@ 0x388
		printf("Free heap: %d.\n", xPortGetFreeHeapSize());
 8001884:	f007 fb4c 	bl	8008f20 <xPortGetFreeHeapSize>
 8001888:	4603      	mov	r3, r0
 800188a:	4619      	mov	r1, r3
 800188c:	4843      	ldr	r0, [pc, #268]	@ (800199c <StartDefaultTask+0x380>)
 800188e:	f017 f9eb 	bl	8018c68 <iprintf>
		// Spin executor once to receive requests and update messages
		rclc_executor_spin_some(&executor, 1000000);
 8001892:	f507 7126 	add.w	r1, r7, #664	@ 0x298
 8001896:	4a42      	ldr	r2, [pc, #264]	@ (80019a0 <StartDefaultTask+0x384>)
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	4608      	mov	r0, r1
 800189e:	f009 fcd7 	bl	800b250 <rclc_executor_spin_some>

	    if (rov_arm_mode == ROV_ARMED)
 80018a2:	4b40      	ldr	r3, [pc, #256]	@ (80019a4 <StartDefaultTask+0x388>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d14a      	bne.n	8001942 <StartDefaultTask+0x326>
	    {
	    	switch (navigation_mode) {
 80018ac:	4b3e      	ldr	r3, [pc, #248]	@ (80019a8 <StartDefaultTask+0x38c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <StartDefaultTask+0x2a0>
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d00c      	beq.n	80018d4 <StartDefaultTask+0x2b8>
 80018ba:	e01e      	b.n	80018fa <StartDefaultTask+0x2de>
	    		case NAVIGATION_MODE_MANUAL:
	    			pwm_computation_error = calculate_pwm(cmd_vel_msg.cmd_vel, pwm_output);
 80018bc:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80018c0:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 ff28 	bl	800271c <calculate_pwm>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
	    			break;
 80018d2:	e02a      	b.n	800192a <StartDefaultTask+0x30e>
	    		case NAVIGATION_MODE_STABILIZE_FULL:
	    			pwm_computation_error = calculate_pwm_with_pid(cmd_vel_msg.cmd_vel, pwm_output,
 80018d4:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80018d8:	f103 0418 	add.w	r4, r3, #24
 80018dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018e0:	f103 0218 	add.w	r2, r3, #24
 80018e4:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80018e8:	f507 7017 	add.w	r0, r7, #604	@ 0x25c
 80018ec:	4623      	mov	r3, r4
 80018ee:	f001 fa5b 	bl	8002da8 <calculate_pwm_with_pid>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
	    					(Quaternion *)&imu_data_msg.orientation,
							(float *)&fluid_pressure.fluid_pressure);
	    			break;
 80018f8:	e017      	b.n	800192a <StartDefaultTask+0x30e>
	    		default:
	    			for(uint8_t i = 0; i < 8; i++) pwm_output[i] = 1500;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 3397 	strb.w	r3, [r7, #919]	@ 0x397
 8001900:	e00e      	b.n	8001920 <StartDefaultTask+0x304>
 8001902:	f897 2397 	ldrb.w	r2, [r7, #919]	@ 0x397
 8001906:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 800190a:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 800190e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001916:	f897 3397 	ldrb.w	r3, [r7, #919]	@ 0x397
 800191a:	3301      	adds	r3, #1
 800191c:	f887 3397 	strb.w	r3, [r7, #919]	@ 0x397
 8001920:	f897 3397 	ldrb.w	r3, [r7, #919]	@ 0x397
 8001924:	2b07      	cmp	r3, #7
 8001926:	d9ec      	bls.n	8001902 <StartDefaultTask+0x2e6>
	    			break;
 8001928:	bf00      	nop
	    	}
	    	constrain_pwm_output(pwm_output, 8);
 800192a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800192e:	2108      	movs	r1, #8
 8001930:	4618      	mov	r0, r3
 8001932:	f000 f8dd 	bl	8001af0 <constrain_pwm_output>
	    	set_pwms(pwm_output);
 8001936:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f87a 	bl	8001a34 <set_pwms>
 8001940:	e001      	b.n	8001946 <StartDefaultTask+0x32a>
	    } else set_pwm_idle();
 8001942:	f000 f8a7 	bl	8001a94 <set_pwm_idle>

	    for(uint8_t i = 0; i < 8; i++) thruster_status_msg.thruster_pwms[i] = pwm_output[i];
 8001946:	2300      	movs	r3, #0
 8001948:	f887 3396 	strb.w	r3, [r7, #918]	@ 0x396
 800194c:	e044      	b.n	80019d8 <StartDefaultTask+0x3bc>
 800194e:	bf00      	nop
 8001950:	08001551 	.word	0x08001551
 8001954:	080014e9 	.word	0x080014e9
 8001958:	080014c9 	.word	0x080014c9
 800195c:	0800149d 	.word	0x0800149d
 8001960:	2000858c 	.word	0x2000858c
 8001964:	08001f0d 	.word	0x08001f0d
 8001968:	08001f51 	.word	0x08001f51
 800196c:	08001f89 	.word	0x08001f89
 8001970:	08001ff5 	.word	0x08001ff5
 8001974:	0801a0ac 	.word	0x0801a0ac
 8001978:	0801a0d4 	.word	0x0801a0d4
 800197c:	0801a0e8 	.word	0x0801a0e8
 8001980:	0801a0ec 	.word	0x0801a0ec
 8001984:	0801a0f8 	.word	0x0801a0f8
 8001988:	0801a10c 	.word	0x0801a10c
 800198c:	2000851c 	.word	0x2000851c
 8001990:	08001b5f 	.word	0x08001b5f
 8001994:	0801a118 	.word	0x0801a118
 8001998:	08001b77 	.word	0x08001b77
 800199c:	0801a128 	.word	0x0801a128
 80019a0:	000f4240 	.word	0x000f4240
 80019a4:	20008514 	.word	0x20008514
 80019a8:	20008515 	.word	0x20008515
 80019ac:	f897 2396 	ldrb.w	r2, [r7, #918]	@ 0x396
 80019b0:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80019b4:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	f897 2396 	ldrb.w	r2, [r7, #918]	@ 0x396
 80019c0:	b299      	uxth	r1, r3
 80019c2:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80019c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019ce:	f897 3396 	ldrb.w	r3, [r7, #918]	@ 0x396
 80019d2:	3301      	adds	r3, #1
 80019d4:	f887 3396 	strb.w	r3, [r7, #918]	@ 0x396
 80019d8:	f897 3396 	ldrb.w	r3, [r7, #918]	@ 0x396
 80019dc:	2b07      	cmp	r3, #7
 80019de:	d9e5      	bls.n	80019ac <StartDefaultTask+0x390>
	    rc = rcl_publish(&thruster_status_publisher, &thruster_status_msg, NULL);
 80019e0:	f507 7121 	add.w	r1, r7, #644	@ 0x284
 80019e4:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 80019e8:	2200      	movs	r2, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f008 fe08 	bl	800a600 <rcl_publish>
 80019f0:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390
	    if(rc!=RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 80019f4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <StartDefaultTask+0x3ea>
 80019fc:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001a00:	480b      	ldr	r0, [pc, #44]	@ (8001a30 <StartDefaultTask+0x414>)
 8001a02:	f017 f931 	bl	8018c68 <iprintf>

	    uint32_t elapsed_time = HAL_GetTick() - time_ms;
 8001a06:	f001 fc93 	bl	8003330 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
	    if (elapsed_time < TS_DEFAULT_TASK_MS) osDelay(TS_DEFAULT_TASK_MS - elapsed_time);
 8001a16:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8001a1a:	2b09      	cmp	r3, #9
 8001a1c:	f63f af2e 	bhi.w	800187c <StartDefaultTask+0x260>
 8001a20:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8001a24:	f1c3 030a 	rsb	r3, r3, #10
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 fe6b 	bl	8006704 <osDelay>
	  {
 8001a2e:	e725      	b.n	800187c <StartDefaultTask+0x260>
 8001a30:	0801a138 	.word	0x0801a138

08001a34 <set_pwms>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void inline set_pwms(uint32_t pwms[8])
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	TIM2 -> CCR1 = pwms[0];
 8001a3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2 -> CCR2 = pwms[1];
 8001a46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM2 -> CCR3 = pwms[2];
 8001a50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM2 -> CCR4 = pwms[3];
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	6413      	str	r3, [r2, #64]	@ 0x40

	// vertical thrusters
	TIM3 -> CCR1 = pwms[4];
 8001a64:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <set_pwms+0x5c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3 -> CCR2 = pwms[5];
 8001a6c:	4a08      	ldr	r2, [pc, #32]	@ (8001a90 <set_pwms+0x5c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3 -> CCR3 = pwms[6];
 8001a74:	4a06      	ldr	r2, [pc, #24]	@ (8001a90 <set_pwms+0x5c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3 -> CCR4 = pwms[7];
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <set_pwms+0x5c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40000400 	.word	0x40000400

08001a94 <set_pwm_idle>:
void inline set_pwm_idle()
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
	TIM2 -> CCR1 = PWM_IDLE;
 8001a98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a9c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001aa0:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2 -> CCR2 = PWM_IDLE;
 8001aa2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aa6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001aaa:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2 -> CCR3 = PWM_IDLE;
 8001aac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ab0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2 -> CCR4 = PWM_IDLE;
 8001ab6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aba:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001abe:	641a      	str	r2, [r3, #64]	@ 0x40

	// vertical thrusters
	TIM3 -> CCR1 = PWM_IDLE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <set_pwm_idle+0x58>)
 8001ac2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ac6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = PWM_IDLE;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <set_pwm_idle+0x58>)
 8001aca:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ace:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3 -> CCR3 = PWM_IDLE;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <set_pwm_idle+0x58>)
 8001ad2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3 -> CCR4 = PWM_IDLE;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <set_pwm_idle+0x58>)
 8001ada:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ade:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40000400 	.word	0x40000400

08001af0 <constrain_pwm_output>:
void constrain_pwm_output(uint32_t pwms[], int N) {
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	81fb      	strh	r3, [r7, #14]
 8001afe:	e023      	b.n	8001b48 <constrain_pwm_output+0x58>
		if (pwms[i] < PWM_MIN)
 8001b00:	89fb      	ldrh	r3, [r7, #14]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d807      	bhi.n	8001b22 <constrain_pwm_output+0x32>
			pwms[i] = PWM_MIN;
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e00f      	b.n	8001b42 <constrain_pwm_output+0x52>
		else if (pwms[i] > PWM_MAX)
 8001b22:	89fb      	ldrh	r3, [r7, #14]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d906      	bls.n	8001b42 <constrain_pwm_output+0x52>
			pwms[i] = PWM_MAX;
 8001b34:	89fb      	ldrh	r3, [r7, #14]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001b40:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001b42:	89fb      	ldrh	r3, [r7, #14]
 8001b44:	3301      	adds	r3, #1
 8001b46:	81fb      	strh	r3, [r7, #14]
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dcd7      	bgt.n	8001b00 <constrain_pwm_output+0x10>
	}
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <imu_subscription_callback>:
void imu_subscription_callback(const void * msgin) {
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	const sensor_msgs__msg__Imu * msg = (const sensor_msgs__msg__Imu *)msgin;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <cmd_vel_subscription_callback>:
void cmd_vel_subscription_callback (const void * msgin) {
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]

}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	@ 0x28
 8001b90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b26      	ldr	r3, [pc, #152]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a25      	ldr	r2, [pc, #148]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001bac:	f043 0310 	orr.w	r3, r3, #16
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b23      	ldr	r3, [pc, #140]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a17      	ldr	r2, [pc, #92]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a10      	ldr	r2, [pc, #64]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <MX_GPIO_Init+0xb4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2104      	movs	r1, #4
 8001c16:	480b      	ldr	r0, [pc, #44]	@ (8001c44 <MX_GPIO_Init+0xb8>)
 8001c18:	f002 fa26 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4804      	ldr	r0, [pc, #16]	@ (8001c44 <MX_GPIO_Init+0xb8>)
 8001c34:	f002 f86c 	bl	8003d10 <HAL_GPIO_Init>

}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	@ 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40021000 	.word	0x40021000

08001c48 <linear_interpolation>:
 * @param output_min The minimum value of the output range.
 * @param output_max The maximum value of the output range.
 * @return The interpolated output value.
 */
float linear_interpolation(float input_value, float input_min, float input_max, float output_min, float output_max)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c52:	edc7 0a04 	vstr	s1, [r7, #16]
 8001c56:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c5a:	edc7 1a02 	vstr	s3, [r7, #8]
 8001c5e:	ed87 2a01 	vstr	s4, [r7, #4]
    return ((output_max - output_min) / (input_max - input_min)) * (input_value - input_min) + output_min;
 8001c62:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c6a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c72:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c7e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c92:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <normalize_vector>:
 * @param input_array The input array of floating-point values to be normalized.
 * @param output_array The output array where the normalized values will be stored.
 * @param size The number of elements in the input and output arrays.
 */
void normalize_vector(const float *input_array, float *output_array, uint8_t size)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	@ 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	71fb      	strb	r3, [r7, #7]
    float max_abs_value = 0.0f;
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	76fb      	strb	r3, [r7, #27]
 8001cbc:	e017      	b.n	8001cee <normalize_vector+0x4a>
    {
        float abs_value = fabsf(input_array[i]);
 8001cbe:	7efb      	ldrb	r3, [r7, #27]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	eef0 7ae7 	vabs.f32	s15, s15
 8001cce:	edc7 7a05 	vstr	s15, [r7, #20]
        if (abs_value > max_abs_value)
 8001cd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cd6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	dd01      	ble.n	8001ce8 <normalize_vector+0x44>
        {
            max_abs_value = abs_value;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001ce8:	7efb      	ldrb	r3, [r7, #27]
 8001cea:	3301      	adds	r3, #1
 8001cec:	76fb      	strb	r3, [r7, #27]
 8001cee:	7efa      	ldrb	r2, [r7, #27]
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d3e3      	bcc.n	8001cbe <normalize_vector+0x1a>
        }
    }

	if (max_abs_value > 1)
 8001cf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	dc00      	bgt.n	8001d0a <normalize_vector+0x66>
		for (uint8_t i = 0; i < size; i++)
		{
			output_array[i] = input_array[i] / max_abs_value;
		}
	}
}
 8001d08:	e019      	b.n	8001d3e <normalize_vector+0x9a>
		for (uint8_t i = 0; i < size; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	76bb      	strb	r3, [r7, #26]
 8001d0e:	e012      	b.n	8001d36 <normalize_vector+0x92>
			output_array[i] = input_array[i] / max_abs_value;
 8001d10:	7ebb      	ldrb	r3, [r7, #26]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	edd3 6a00 	vldr	s13, [r3]
 8001d1c:	7ebb      	ldrb	r3, [r7, #26]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	4413      	add	r3, r2
 8001d24:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d2c:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < size; i++)
 8001d30:	7ebb      	ldrb	r3, [r7, #26]
 8001d32:	3301      	adds	r3, #1
 8001d34:	76bb      	strb	r3, [r7, #26]
 8001d36:	7eba      	ldrb	r2, [r7, #26]
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3e8      	bcc.n	8001d10 <normalize_vector+0x6c>
}
 8001d3e:	bf00      	nop
 8001d40:	3724      	adds	r7, #36	@ 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d52:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d56:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d013      	beq.n	8001d8a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d62:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d66:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001d6a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d72:	e000      	b.n	8001d76 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d74:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d76:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f9      	beq.n	8001d74 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d80:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9c:	f001 fa92 	bl	80032c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da0:	f000 f80e 	bl	8001dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da4:	f7ff fef2 	bl	8001b8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001da8:	f7ff fb50 	bl	800144c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001dac:	f000 fbd4 	bl	8002558 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001db0:	f004 fbcc 	bl	800654c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001db4:	f7ff fc20 	bl	80015f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001db8:	f004 fbec 	bl	8006594 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <main+0x24>

08001dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b094      	sub	sp, #80	@ 0x50
 8001dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	2234      	movs	r2, #52	@ 0x34
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f017 f819 	bl	8018e06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e9c <SystemClock_Config+0xdc>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	4a2b      	ldr	r2, [pc, #172]	@ (8001e9c <SystemClock_Config+0xdc>)
 8001dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df4:	4b29      	ldr	r3, [pc, #164]	@ (8001e9c <SystemClock_Config+0xdc>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	4b26      	ldr	r3, [pc, #152]	@ (8001ea0 <SystemClock_Config+0xe0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a25      	ldr	r2, [pc, #148]	@ (8001ea0 <SystemClock_Config+0xe0>)
 8001e0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b23      	ldr	r3, [pc, #140]	@ (8001ea0 <SystemClock_Config+0xe0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e26:	2302      	movs	r3, #2
 8001e28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e30:	2308      	movs	r3, #8
 8001e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 195;
 8001e34:	23c3      	movs	r3, #195	@ 0xc3
 8001e36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e40:	2302      	movs	r3, #2
 8001e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fbb3 	bl	80045b4 <HAL_RCC_OscConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e54:	f000 f854 	bl	8001f00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e58:	f002 f920 	bl	800409c <HAL_PWREx_EnableOverDrive>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e62:	f000 f84d 	bl	8001f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e66:	230f      	movs	r3, #15
 8001e68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e72:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e7c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	2105      	movs	r1, #5
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 f959 	bl	800413c <HAL_RCC_ClockConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001e90:	f000 f836 	bl	8001f00 <Error_Handler>
  }
}
 8001e94:	bf00      	nop
 8001e96:	3750      	adds	r7, #80	@ 0x50
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000

08001ea4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e009      	b.n	8001eca <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	60ba      	str	r2, [r7, #8]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff43 	bl	8001d4a <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf1      	blt.n	8001eb6 <_write+0x12>
  }
  return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eee:	f001 fa0b 	bl	8003308 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <Error_Handler+0x8>

08001f0c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <microros_allocate+0x3c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <microros_allocate+0x3c>)
 8001f24:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <microros_allocate+0x40>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <microros_allocate+0x40>)
 8001f34:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff f838 	bl	8000fac <pvPortMallocMicroROS>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20008534 	.word	0x20008534
 8001f4c:	20008538 	.word	0x20008538

08001f50 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00c      	beq.n	8001f7a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff f947 	bl	80011f4 <getBlockSize>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a06      	ldr	r2, [pc, #24]	@ (8001f84 <microros_deallocate+0x34>)
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <microros_deallocate+0x34>)
 8001f72:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff f8e1 	bl	800113c <vPortFreeMicroROS>
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20008538 	.word	0x20008538

08001f88 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001f94:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <microros_reallocate+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <microros_reallocate+0x64>)
 8001fa2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <microros_reallocate+0x68>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4413      	add	r3, r2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <microros_reallocate+0x68>)
 8001fb2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d104      	bne.n	8001fc4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001fba:	68b8      	ldr	r0, [r7, #8]
 8001fbc:	f7fe fff6 	bl	8000fac <pvPortMallocMicroROS>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	e00e      	b.n	8001fe2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff f915 	bl	80011f4 <getBlockSize>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4a08      	ldr	r2, [pc, #32]	@ (8001ff0 <microros_reallocate+0x68>)
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <microros_reallocate+0x68>)
 8001fd6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7ff f928 	bl	8001230 <pvPortReallocMicroROS>
 8001fe0:	4603      	mov	r3, r0
  }
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20008534 	.word	0x20008534
 8001ff0:	20008538 	.word	0x20008538

08001ff4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	fb02 f303 	mul.w	r3, r2, r3
 8002008:	4a0c      	ldr	r2, [pc, #48]	@ (800203c <microros_zero_allocate+0x48>)
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	4413      	add	r3, r2
 800200e:	461a      	mov	r2, r3
 8002010:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <microros_zero_allocate+0x48>)
 8002012:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	4a08      	ldr	r2, [pc, #32]	@ (8002040 <microros_zero_allocate+0x4c>)
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	4413      	add	r3, r2
 8002022:	461a      	mov	r2, r3
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <microros_zero_allocate+0x4c>)
 8002026:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7ff f92d 	bl	800128a <pvPortCallocMicroROS>
 8002030:	4603      	mov	r3, r0
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20008534 	.word	0x20008534
 8002040:	20008538 	.word	0x20008538
 8002044:	00000000 	.word	0x00000000

08002048 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800205a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800205e:	a320      	add	r3, pc, #128	@ (adr r3, 80020e0 <UTILS_NanosecondsToTimespec+0x98>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	f7fe fdda 	bl	8000c1c <__aeabi_ldivmod>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002076:	a31a      	add	r3, pc, #104	@ (adr r3, 80020e0 <UTILS_NanosecondsToTimespec+0x98>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fdce 	bl	8000c1c <__aeabi_ldivmod>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da20      	bge.n	80020ce <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a11      	ldr	r2, [pc, #68]	@ (80020d8 <UTILS_NanosecondsToTimespec+0x90>)
 8002092:	fb82 1203 	smull	r1, r2, r2, r3
 8002096:	1712      	asrs	r2, r2, #28
 8002098:	17db      	asrs	r3, r3, #31
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	6979      	ldr	r1, [r7, #20]
 80020a8:	17c8      	asrs	r0, r1, #31
 80020aa:	460c      	mov	r4, r1
 80020ac:	4605      	mov	r5, r0
 80020ae:	ebb2 0804 	subs.w	r8, r2, r4
 80020b2:	eb63 0905 	sbc.w	r9, r3, r5
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4906      	ldr	r1, [pc, #24]	@ (80020dc <UTILS_NanosecondsToTimespec+0x94>)
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	441a      	add	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]
    }
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020d8:	44b82fa1 	.word	0x44b82fa1
 80020dc:	3b9aca00 	.word	0x3b9aca00
 80020e0:	3b9aca00 	.word	0x3b9aca00
 80020e4:	00000000 	.word	0x00000000

080020e8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80020e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ec:	b08e      	sub	sp, #56	@ 0x38
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80020f2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80020f4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80020f8:	2300      	movs	r3, #0
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800210a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800210e:	4618      	mov	r0, r3
 8002110:	f005 fdc4 	bl	8007c9c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002116:	17da      	asrs	r2, r3, #31
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	61fa      	str	r2, [r7, #28]
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	69b9      	ldr	r1, [r7, #24]
 8002126:	000b      	movs	r3, r1
 8002128:	2200      	movs	r2, #0
 800212a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800212e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002130:	2200      	movs	r2, #0
 8002132:	461c      	mov	r4, r3
 8002134:	4615      	mov	r5, r2
 8002136:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800213a:	1911      	adds	r1, r2, r4
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	416b      	adcs	r3, r5
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002146:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800214a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	f04f 0400 	mov.w	r4, #0
 8002156:	f04f 0500 	mov.w	r5, #0
 800215a:	015d      	lsls	r5, r3, #5
 800215c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002160:	0154      	lsls	r4, r2, #5
 8002162:	4622      	mov	r2, r4
 8002164:	462b      	mov	r3, r5
 8002166:	ebb2 0800 	subs.w	r8, r2, r0
 800216a:	eb63 0901 	sbc.w	r9, r3, r1
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800217a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800217e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002182:	4690      	mov	r8, r2
 8002184:	4699      	mov	r9, r3
 8002186:	eb18 0a00 	adds.w	sl, r8, r0
 800218a:	eb49 0b01 	adc.w	fp, r9, r1
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800219a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800219e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021a2:	ebb2 040a 	subs.w	r4, r2, sl
 80021a6:	603c      	str	r4, [r7, #0]
 80021a8:	eb63 030b 	sbc.w	r3, r3, fp
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021b2:	4623      	mov	r3, r4
 80021b4:	181b      	adds	r3, r3, r0
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	462b      	mov	r3, r5
 80021ba:	eb41 0303 	adc.w	r3, r1, r3
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	6a3a      	ldr	r2, [r7, #32]
 80021c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021c6:	f7ff ff3f 	bl	8002048 <UTILS_NanosecondsToTimespec>

    return 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	3738      	adds	r7, #56	@ 0x38
 80021d0:	46bd      	mov	sp, r7
 80021d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080021d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_MspInit+0x54>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_MspInit+0x54>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ee:	4b0f      	ldr	r3, [pc, #60]	@ (800222c <HAL_MspInit+0x54>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_MspInit+0x54>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <HAL_MspInit+0x54>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	@ 0x40
 800220a:	4b08      	ldr	r3, [pc, #32]	@ (800222c <HAL_MspInit+0x54>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	210f      	movs	r1, #15
 800221a:	f06f 0001 	mvn.w	r0, #1
 800221e:	f001 f94b 	bl	80034b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800

08002230 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	@ 0x30
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	4b2f      	ldr	r3, [pc, #188]	@ (8002304 <HAL_InitTick+0xd4>)
 8002246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002248:	4a2e      	ldr	r2, [pc, #184]	@ (8002304 <HAL_InitTick+0xd4>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002250:	4b2c      	ldr	r3, [pc, #176]	@ (8002304 <HAL_InitTick+0xd4>)
 8002252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800225c:	f107 020c 	add.w	r2, r7, #12
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f002 f972 	bl	8004550 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800226c:	f002 f95c 	bl	8004528 <HAL_RCC_GetPCLK2Freq>
 8002270:	4603      	mov	r3, r0
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002278:	4a23      	ldr	r2, [pc, #140]	@ (8002308 <HAL_InitTick+0xd8>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0c9b      	lsrs	r3, r3, #18
 8002280:	3b01      	subs	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002284:	4b21      	ldr	r3, [pc, #132]	@ (800230c <HAL_InitTick+0xdc>)
 8002286:	4a22      	ldr	r2, [pc, #136]	@ (8002310 <HAL_InitTick+0xe0>)
 8002288:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800228a:	4b20      	ldr	r3, [pc, #128]	@ (800230c <HAL_InitTick+0xdc>)
 800228c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002290:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002292:	4a1e      	ldr	r2, [pc, #120]	@ (800230c <HAL_InitTick+0xdc>)
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002298:	4b1c      	ldr	r3, [pc, #112]	@ (800230c <HAL_InitTick+0xdc>)
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229e:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_InitTick+0xdc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	@ (800230c <HAL_InitTick+0xdc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80022aa:	4818      	ldr	r0, [pc, #96]	@ (800230c <HAL_InitTick+0xdc>)
 80022ac:	f002 fc06 	bl	8004abc <HAL_TIM_Base_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80022b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11b      	bne.n	80022f6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80022be:	4813      	ldr	r0, [pc, #76]	@ (800230c <HAL_InitTick+0xdc>)
 80022c0:	f002 fc56 	bl	8004b70 <HAL_TIM_Base_Start_IT>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80022ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d111      	bne.n	80022f6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022d2:	2019      	movs	r0, #25
 80022d4:	f001 f90c 	bl	80034f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b0f      	cmp	r3, #15
 80022dc:	d808      	bhi.n	80022f0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80022de:	2200      	movs	r2, #0
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	2019      	movs	r0, #25
 80022e4:	f001 f8e8 	bl	80034b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <HAL_InitTick+0xe4>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e002      	b.n	80022f6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3730      	adds	r7, #48	@ 0x30
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	431bde83 	.word	0x431bde83
 800230c:	2000853c 	.word	0x2000853c
 8002310:	40010000 	.word	0x40010000
 8002314:	200000c8 	.word	0x200000c8

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <NMI_Handler+0x4>

08002320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  printf("HardFault detected\n");
 8002326:	480c      	ldr	r0, [pc, #48]	@ (8002358 <HardFault_Handler+0x38>)
 8002328:	f016 fd06 	bl	8018d38 <puts>
  uint32_t bus_fault_address = SCB->BFAR;    // Bus fault address register
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HardFault_Handler+0x3c>)
 800232e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002330:	607b      	str	r3, [r7, #4]
  uint32_t cfsr = SCB->CFSR;                // Configurable Fault Status Register
 8002332:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <HardFault_Handler+0x3c>)
 8002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002336:	603b      	str	r3, [r7, #0]

  if (cfsr & (1 << 1)) {                    // If BFARVALID is set
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <HardFault_Handler+0x2c>
	printf("Imprecise bus fault at address: 0x%08lx\n", bus_fault_address);
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4806      	ldr	r0, [pc, #24]	@ (8002360 <HardFault_Handler+0x40>)
 8002346:	f016 fc8f 	bl	8018c68 <iprintf>
 800234a:	e003      	b.n	8002354 <HardFault_Handler+0x34>
  } else {
	printf("Imprecise bus fault occurred, but address is not valid\n");
 800234c:	4805      	ldr	r0, [pc, #20]	@ (8002364 <HardFault_Handler+0x44>)
 800234e:	f016 fcf3 	bl	8018d38 <puts>
  }
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <HardFault_Handler+0x34>
 8002358:	0801a154 	.word	0x0801a154
 800235c:	e000ed00 	.word	0xe000ed00
 8002360:	0801a168 	.word	0x0801a168
 8002364:	0801a194 	.word	0x0801a194

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <MemManage_Handler+0x4>

08002370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <UsageFault_Handler+0x4>

08002380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002394:	4802      	ldr	r0, [pc, #8]	@ (80023a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002396:	f002 fc5b 	bl	8004c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000853c 	.word	0x2000853c

080023a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023a8:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <USART1_IRQHandler+0x10>)
 80023aa:	f002 ff8d 	bl	80052c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2000858c 	.word	0x2000858c

080023b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <DMA2_Stream2_IRQHandler+0x10>)
 80023be:	f001 fa3d 	bl	800383c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200085d4 	.word	0x200085d4

080023cc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <DMA2_Stream7_IRQHandler+0x10>)
 80023d2:	f001 fa33 	bl	800383c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20008634 	.word	0x20008634

080023e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_kill>:

int _kill(int pid, int sig)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023fa:	f016 fd3f 	bl	8018e7c <__errno>
 80023fe:	4603      	mov	r3, r0
 8002400:	2216      	movs	r2, #22
 8002402:	601a      	str	r2, [r3, #0]
  return -1;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_exit>:

void _exit (int status)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002418:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ffe7 	bl	80023f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002422:	bf00      	nop
 8002424:	e7fd      	b.n	8002422 <_exit+0x12>

08002426 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e00a      	b.n	800244e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002438:	f3af 8000 	nop.w
 800243c:	4601      	mov	r1, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	60ba      	str	r2, [r7, #8]
 8002444:	b2ca      	uxtb	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	dbf0      	blt.n	8002438 <_read+0x12>
  }

  return len;
 8002456:	687b      	ldr	r3, [r7, #4]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002468:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002488:	605a      	str	r2, [r3, #4]
  return 0;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_isatty>:

int _isatty(int file)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d0:	4a14      	ldr	r2, [pc, #80]	@ (8002524 <_sbrk+0x5c>)
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <_sbrk+0x60>)
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024dc:	4b13      	ldr	r3, [pc, #76]	@ (800252c <_sbrk+0x64>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <_sbrk+0x64>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <_sbrk+0x68>)
 80024e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ea:	4b10      	ldr	r3, [pc, #64]	@ (800252c <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d207      	bcs.n	8002508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f8:	f016 fcc0 	bl	8018e7c <__errno>
 80024fc:	4603      	mov	r3, r0
 80024fe:	220c      	movs	r2, #12
 8002500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002506:	e009      	b.n	800251c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002508:	4b08      	ldr	r3, [pc, #32]	@ (800252c <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800250e:	4b07      	ldr	r3, [pc, #28]	@ (800252c <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	4a05      	ldr	r2, [pc, #20]	@ (800252c <_sbrk+0x64>)
 8002518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800251a:	68fb      	ldr	r3, [r7, #12]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20050000 	.word	0x20050000
 8002528:	00000400 	.word	0x00000400
 800252c:	20008588 	.word	0x20008588
 8002530:	20015680 	.word	0x20015680

08002534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <SystemInit+0x20>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	4a05      	ldr	r2, [pc, #20]	@ (8002554 <SystemInit+0x20>)
 8002540:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <MX_USART1_UART_Init+0x4c>)
 800255e:	4a12      	ldr	r2, [pc, #72]	@ (80025a8 <MX_USART1_UART_Init+0x50>)
 8002560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002562:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <MX_USART1_UART_Init+0x4c>)
 8002564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800256a:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <MX_USART1_UART_Init+0x4c>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <MX_USART1_UART_Init+0x4c>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002576:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <MX_USART1_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800257c:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <MX_USART1_UART_Init+0x4c>)
 800257e:	220c      	movs	r2, #12
 8002580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002582:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <MX_USART1_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <MX_USART1_UART_Init+0x4c>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800258e:	4805      	ldr	r0, [pc, #20]	@ (80025a4 <MX_USART1_UART_Init+0x4c>)
 8002590:	f002 fd36 	bl	8005000 <HAL_UART_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800259a:	f7ff fcb1 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000858c 	.word	0x2000858c
 80025a8:	40011000 	.word	0x40011000

080025ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	@ 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002700 <HAL_UART_MspInit+0x154>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f040 8094 	bne.w	80026f8 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002704 <HAL_UART_MspInit+0x158>)
 80025d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002704 <HAL_UART_MspInit+0x158>)
 80025da:	f043 0310 	orr.w	r3, r3, #16
 80025de:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e0:	4b48      	ldr	r3, [pc, #288]	@ (8002704 <HAL_UART_MspInit+0x158>)
 80025e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	4b44      	ldr	r3, [pc, #272]	@ (8002704 <HAL_UART_MspInit+0x158>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	4a43      	ldr	r2, [pc, #268]	@ (8002704 <HAL_UART_MspInit+0x158>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fc:	4b41      	ldr	r3, [pc, #260]	@ (8002704 <HAL_UART_MspInit+0x158>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002608:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800260c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800261a:	2307      	movs	r3, #7
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	4838      	ldr	r0, [pc, #224]	@ (8002708 <HAL_UART_MspInit+0x15c>)
 8002626:	f001 fb73 	bl	8003d10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800262a:	4b38      	ldr	r3, [pc, #224]	@ (800270c <HAL_UART_MspInit+0x160>)
 800262c:	4a38      	ldr	r2, [pc, #224]	@ (8002710 <HAL_UART_MspInit+0x164>)
 800262e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002630:	4b36      	ldr	r3, [pc, #216]	@ (800270c <HAL_UART_MspInit+0x160>)
 8002632:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002636:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002638:	4b34      	ldr	r3, [pc, #208]	@ (800270c <HAL_UART_MspInit+0x160>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800263e:	4b33      	ldr	r3, [pc, #204]	@ (800270c <HAL_UART_MspInit+0x160>)
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002644:	4b31      	ldr	r3, [pc, #196]	@ (800270c <HAL_UART_MspInit+0x160>)
 8002646:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800264a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800264c:	4b2f      	ldr	r3, [pc, #188]	@ (800270c <HAL_UART_MspInit+0x160>)
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002652:	4b2e      	ldr	r3, [pc, #184]	@ (800270c <HAL_UART_MspInit+0x160>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002658:	4b2c      	ldr	r3, [pc, #176]	@ (800270c <HAL_UART_MspInit+0x160>)
 800265a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800265e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002660:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <HAL_UART_MspInit+0x160>)
 8002662:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002666:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002668:	4b28      	ldr	r3, [pc, #160]	@ (800270c <HAL_UART_MspInit+0x160>)
 800266a:	2200      	movs	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800266e:	4827      	ldr	r0, [pc, #156]	@ (800270c <HAL_UART_MspInit+0x160>)
 8002670:	f000 ff4c 	bl	800350c <HAL_DMA_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800267a:	f7ff fc41 	bl	8001f00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a22      	ldr	r2, [pc, #136]	@ (800270c <HAL_UART_MspInit+0x160>)
 8002682:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002684:	4a21      	ldr	r2, [pc, #132]	@ (800270c <HAL_UART_MspInit+0x160>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800268a:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <HAL_UART_MspInit+0x168>)
 800268c:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <HAL_UART_MspInit+0x16c>)
 800268e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002690:	4b20      	ldr	r3, [pc, #128]	@ (8002714 <HAL_UART_MspInit+0x168>)
 8002692:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002696:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002698:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_UART_MspInit+0x168>)
 800269a:	2240      	movs	r2, #64	@ 0x40
 800269c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269e:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <HAL_UART_MspInit+0x168>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_UART_MspInit+0x168>)
 80026a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ac:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <HAL_UART_MspInit+0x168>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b2:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_UART_MspInit+0x168>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80026b8:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <HAL_UART_MspInit+0x168>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <HAL_UART_MspInit+0x168>)
 80026c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026c4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <HAL_UART_MspInit+0x168>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026cc:	4811      	ldr	r0, [pc, #68]	@ (8002714 <HAL_UART_MspInit+0x168>)
 80026ce:	f000 ff1d 	bl	800350c <HAL_DMA_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80026d8:	f7ff fc12 	bl	8001f00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a0d      	ldr	r2, [pc, #52]	@ (8002714 <HAL_UART_MspInit+0x168>)
 80026e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80026e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002714 <HAL_UART_MspInit+0x168>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2105      	movs	r1, #5
 80026ec:	2025      	movs	r0, #37	@ 0x25
 80026ee:	f000 fee3 	bl	80034b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026f2:	2025      	movs	r0, #37	@ 0x25
 80026f4:	f000 fefc 	bl	80034f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026f8:	bf00      	nop
 80026fa:	3728      	adds	r7, #40	@ 0x28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40011000 	.word	0x40011000
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000
 800270c:	200085d4 	.word	0x200085d4
 8002710:	40026440 	.word	0x40026440
 8002714:	20008634 	.word	0x20008634
 8002718:	400264b8 	.word	0x400264b8

0800271c <calculate_pwm>:
 * @param pwm_output An array of 8 uint16_t values to store the calculated PWM output.
 * @return OK if the calculation was successful, MAT_MULT_ERROR if the matrix
 * multiplication failed.
 */
int8_t calculate_pwm(const float in_joystick_input[6], uint32_t pwm_output[8])
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b0a0      	sub	sp, #128	@ 0x80
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
	float joystick_input[6];
	for(uint8_t i = 0; i < 6; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800272c:	e011      	b.n	8002752 <calculate_pwm+0x36>
	{
		joystick_input[i] = in_joystick_input[i];
 800272e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	441a      	add	r2, r3
 8002738:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	3380      	adds	r3, #128	@ 0x80
 8002742:	443b      	add	r3, r7
 8002744:	3b1c      	subs	r3, #28
 8002746:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8002748:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800274c:	3301      	adds	r3, #1
 800274e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002752:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002756:	2b05      	cmp	r3, #5
 8002758:	d9e9      	bls.n	800272e <calculate_pwm+0x12>
	}

    normalize_vector(in_joystick_input, joystick_input, 6);
 800275a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800275e:	2206      	movs	r2, #6
 8002760:	4619      	mov	r1, r3
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fa9e 	bl	8001ca4 <normalize_vector>

    float f_pwm_output[8];

    __attribute__((aligned(4))) float pwm_output_8_1[8][1] = {0};
 8002768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276c:	2220      	movs	r2, #32
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f016 fb48 	bl	8018e06 <memset>

    arm_matrix_instance_f32 fixed_mixing_matrix_instance;
    arm_matrix_instance_f32 joystick_input_instance;
    arm_matrix_instance_f32 pwm_output_instance;

    arm_mat_init_f32(&fixed_mixing_matrix_instance, 8, 6, (float *)FIXED_MIXING_MATRIX);
 8002776:	f107 001c 	add.w	r0, r7, #28
 800277a:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <calculate_pwm+0x14c>)
 800277c:	2206      	movs	r2, #6
 800277e:	2108      	movs	r1, #8
 8002780:	f006 fda6 	bl	80092d0 <arm_mat_init_f32>
    arm_mat_init_f32(&joystick_input_instance, 6, 1, (float *)joystick_input);
 8002784:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002788:	f107 0014 	add.w	r0, r7, #20
 800278c:	2201      	movs	r2, #1
 800278e:	2106      	movs	r1, #6
 8002790:	f006 fd9e 	bl	80092d0 <arm_mat_init_f32>
    arm_mat_init_f32(&pwm_output_instance, 8, 1, (float *)pwm_output_8_1);
 8002794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002798:	f107 000c 	add.w	r0, r7, #12
 800279c:	2201      	movs	r2, #1
 800279e:	2108      	movs	r1, #8
 80027a0:	f006 fd96 	bl	80092d0 <arm_mat_init_f32>

    if (arm_mat_mult_f32(&fixed_mixing_matrix_instance, &joystick_input_instance, &pwm_output_instance) != ARM_MATH_SUCCESS)
 80027a4:	f107 020c 	add.w	r2, r7, #12
 80027a8:	f107 0114 	add.w	r1, r7, #20
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	4618      	mov	r0, r3
 80027b2:	f006 fc7d 	bl	80090b0 <arm_mat_mult_f32>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <calculate_pwm+0xa4>
    {
        return MAT_MULT_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e04f      	b.n	8002860 <calculate_pwm+0x144>
    }

    for (uint8_t i = 0; i < 8; i++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80027c6:	e011      	b.n	80027ec <calculate_pwm+0xd0>
    {
        f_pwm_output[i] = pwm_output_instance.pData[i];
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	3380      	adds	r3, #128	@ 0x80
 80027dc:	443b      	add	r3, r7
 80027de:	3b3c      	subs	r3, #60	@ 0x3c
 80027e0:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 80027e2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80027e6:	3301      	adds	r3, #1
 80027e8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80027ec:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80027f0:	2b07      	cmp	r3, #7
 80027f2:	d9e9      	bls.n	80027c8 <calculate_pwm+0xac>
    }

    // normalize pwm_output and map to 1100 ~ 1900
    normalize_vector(f_pwm_output, f_pwm_output, 8);
 80027f4:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80027f8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027fc:	2208      	movs	r2, #8
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fa50 	bl	8001ca4 <normalize_vector>
    for (uint8_t i = 0; i < 8; i++)
 8002804:	2300      	movs	r3, #0
 8002806:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800280a:	e024      	b.n	8002856 <calculate_pwm+0x13a>
    {
        // pwm_output[i][0] = symmetric_quadratic_interpolation(pwm_output[i][0], 1, PWM_MAX);
        pwm_output[i] = (int)linear_interpolation(f_pwm_output[i], -1, 1, PWM_MIN, PWM_MAX);
 800280c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	3380      	adds	r3, #128	@ 0x80
 8002814:	443b      	add	r3, r7
 8002816:	3b3c      	subs	r3, #60	@ 0x3c
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 800286c <calculate_pwm+0x150>
 8002820:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8002870 <calculate_pwm+0x154>
 8002824:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002828:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800282c:	eeb0 0a67 	vmov.f32	s0, s15
 8002830:	f7ff fa0a 	bl	8001c48 <linear_interpolation>
 8002834:	eef0 7a40 	vmov.f32	s15, s0
 8002838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800283c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	4413      	add	r3, r2
 8002846:	ee17 2a90 	vmov	r2, s15
 800284a:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 800284c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002850:	3301      	adds	r3, #1
 8002852:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8002856:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800285a:	2b07      	cmp	r3, #7
 800285c:	d9d6      	bls.n	800280c <calculate_pwm+0xf0>
    }
    return OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3780      	adds	r7, #128	@ 0x80
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000008 	.word	0x20000008
 800286c:	44ed8000 	.word	0x44ed8000
 8002870:	44898000 	.word	0x44898000

08002874 <invert_quaternion>:

void invert_quaternion(const Quaternion * q, Quaternion * q_inv) {
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
	float norm_squared = q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	ed93 7a00 	vldr	s14, [r3]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	edd3 6a01 	vldr	s13, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	edd3 7a01 	vldr	s15, [r3, #4]
 800289a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800289e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80028ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	edd3 7a03 	vldr	s15, [r3, #12]
 80028c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ca:	edc7 7a03 	vstr	s15, [r7, #12]

	if (norm_squared == 0.0f) {
 80028ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80028d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028da:	d110      	bne.n	80028fe <invert_quaternion+0x8a>
		// Handle the case of zero norm if needed (for example, return a specific error)
		q_inv->w = q_inv->x = q_inv->y = q_inv->z = 0.0f;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	601a      	str	r2, [r3, #0]
		return;
 80028fc:	e02d      	b.n	800295a <invert_quaternion+0xe6>
	}
	// Compute the inverse as the conjugate divided by the norm squared
	q_inv->w = q->w / norm_squared;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	edd3 6a00 	vldr	s13, [r3]
 8002904:	ed97 7a03 	vldr	s14, [r7, #12]
 8002908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	edc3 7a00 	vstr	s15, [r3]
	q_inv->x = -q->x / norm_squared;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	edd3 7a01 	vldr	s15, [r3, #4]
 8002918:	eef1 6a67 	vneg.f32	s13, s15
 800291c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	edc3 7a01 	vstr	s15, [r3, #4]
	q_inv->y = -q->y / norm_squared;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002930:	eef1 6a67 	vneg.f32	s13, s15
 8002934:	ed97 7a03 	vldr	s14, [r7, #12]
 8002938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	edc3 7a02 	vstr	s15, [r3, #8]
	q_inv->z = -q->z / norm_squared;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	edd3 7a03 	vldr	s15, [r3, #12]
 8002948:	eef1 6a67 	vneg.f32	s13, s15
 800294c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <multiply_quaternions>:

void multiply_quaternions(const Quaternion* q1, const Quaternion* q2, Quaternion* qResult) {
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
	qResult->w = q1->w * q2->w - q1->x * q2->x - q1->y * q2->y - q1->z * q2->z;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	edd3 6a01 	vldr	s13, [r3, #4]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	edd3 7a01 	vldr	s15, [r3, #4]
 800298c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	edd3 6a02 	vldr	s13, [r3, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	edd3 7a02 	vldr	s15, [r3, #8]
 80029a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80029b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	edc3 7a00 	vstr	s15, [r3]
	qResult->x = q1->w * q2->x + q1->x * q2->w + q1->y * q2->z - q1->z * q2->y;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	ed93 7a00 	vldr	s14, [r3]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80029f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	edc3 7a01 	vstr	s15, [r3, #4]
	qResult->y = q1->w * q2->y - q1->x * q2->z + q1->y * q2->w + q1->z * q2->x;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	ed93 7a00 	vldr	s14, [r3]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	edc3 7a02 	vstr	s15, [r3, #8]
	qResult->z = q1->w * q2->z + q1->x * q2->y - q1->y * q2->x + q1->z * q2->w;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	ed93 7a00 	vldr	s14, [r3]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	edd3 6a03 	vldr	s13, [r3, #12]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	0000      	movs	r0, r0
	...

08002ac8 <calculate_rpy_from_quaternion>:

// PIDs controllers, respectively for z, pitch, roll, yaw
arm_pid_instance_f32 pids[4] = {0};

void calculate_rpy_from_quaternion(const Quaternion *quaternion, float roll_pitch_yaw_radians[3])
{
 8002ac8:	b5b0      	push	{r4, r5, r7, lr}
 8002aca:	b08c      	sub	sp, #48	@ 0x30
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
	// roll (x-axis rotation)
	float sinr_cosp = 2 * (quaternion->w * quaternion->x + quaternion->y * quaternion->z);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	ed93 7a00 	vldr	s14, [r3]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ade:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	edd3 7a03 	vldr	s15, [r3, #12]
 8002aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002afa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float cosr_cosp = 1 - 2 * (quaternion->x * quaternion->x + quaternion->y * quaternion->y);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	roll_pitch_yaw_radians[0] = atan2(sinr_cosp, cosr_cosp);
 8002b32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b34:	f7fd fd30 	bl	8000598 <__aeabi_f2d>
 8002b38:	4604      	mov	r4, r0
 8002b3a:	460d      	mov	r5, r1
 8002b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b3e:	f7fd fd2b 	bl	8000598 <__aeabi_f2d>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	ec43 2b11 	vmov	d1, r2, r3
 8002b4a:	ec45 4b10 	vmov	d0, r4, r5
 8002b4e:	f017 f811 	bl	8019b74 <atan2>
 8002b52:	ec53 2b10 	vmov	r2, r3, d0
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f80f 	bl	8000b7c <__aeabi_d2f>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	601a      	str	r2, [r3, #0]

	// pitch (y-axis rotation)
	float sinp, cosp;
	arm_sqrt_f32(1 + 2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z), &sinp);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	ed93 7a00 	vldr	s14, [r3]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b94:	edc7 7a05 	vstr	s15, [r7, #20]
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002b9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002baa:	db09      	blt.n	8002bc0 <calculate_rpy_from_quaternion+0xf8>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002bac:	ed97 0a05 	vldr	s0, [r7, #20]
 8002bb0:	f017 f8a8 	bl	8019d04 <sqrtf>
 8002bb4:	eef0 7a40 	vmov.f32	s15, s0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8002bbe:	e004      	b.n	8002bca <calculate_rpy_from_quaternion+0x102>
    }
    else
    {
      *pOut = 0.0f;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002bc8:	bf00      	nop
	arm_sqrt_f32(1 - 2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z), &cosp);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	ed93 7a00 	vldr	s14, [r3]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edd3 6a01 	vldr	s13, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfa:	edc7 7a07 	vstr	s15, [r7, #28]
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8002c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	db09      	blt.n	8002c26 <calculate_rpy_from_quaternion+0x15e>
      *pOut = sqrtf(in);
 8002c12:	ed97 0a07 	vldr	s0, [r7, #28]
 8002c16:	f017 f875 	bl	8019d04 <sqrtf>
 8002c1a:	eef0 7a40 	vmov.f32	s15, s0
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8002c24:	e004      	b.n	8002c30 <calculate_rpy_from_quaternion+0x168>
      *pOut = 0.0f;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002c2e:	bf00      	nop
	roll_pitch_yaw_radians[1] = 2 * atan2(sinp, cosp) - M_PI / 2;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fcb0 	bl	8000598 <__aeabi_f2d>
 8002c38:	4604      	mov	r4, r0
 8002c3a:	460d      	mov	r5, r1
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fcaa 	bl	8000598 <__aeabi_f2d>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	ec43 2b11 	vmov	d1, r2, r3
 8002c4c:	ec45 4b10 	vmov	d0, r4, r5
 8002c50:	f016 ff90 	bl	8019b74 <atan2>
 8002c54:	ec51 0b10 	vmov	r0, r1, d0
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	f7fd fb3e 	bl	80002dc <__adddf3>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	a32d      	add	r3, pc, #180	@ (adr r3, 8002d20 <calculate_rpy_from_quaternion+0x258>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f7fd fb33 	bl	80002d8 <__aeabi_dsub>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	1d1c      	adds	r4, r3, #4
 8002c7e:	f7fd ff7d 	bl	8000b7c <__aeabi_d2f>
 8002c82:	4603      	mov	r3, r0
 8002c84:	6023      	str	r3, [r4, #0]

	// yaw (z-axis rotation)
	float siny_cosp = 2 * (quaternion->w * quaternion->z + quaternion->x * quaternion->y);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	ed93 7a00 	vldr	s14, [r3]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002caa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float cosy_cosp = 1 - 2 * (quaternion->y * quaternion->y + quaternion->z * quaternion->z);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	edd3 6a03 	vldr	s13, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce2:	edc7 7a08 	vstr	s15, [r7, #32]
	roll_pitch_yaw_radians[2] = atan2(siny_cosp, cosy_cosp);
 8002ce6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ce8:	f7fd fc56 	bl	8000598 <__aeabi_f2d>
 8002cec:	4604      	mov	r4, r0
 8002cee:	460d      	mov	r5, r1
 8002cf0:	6a38      	ldr	r0, [r7, #32]
 8002cf2:	f7fd fc51 	bl	8000598 <__aeabi_f2d>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	ec43 2b11 	vmov	d1, r2, r3
 8002cfe:	ec45 4b10 	vmov	d0, r4, r5
 8002d02:	f016 ff37 	bl	8019b74 <atan2>
 8002d06:	ec51 0b10 	vmov	r0, r1, d0
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f103 0408 	add.w	r4, r3, #8
 8002d10:	f7fd ff34 	bl	8000b7c <__aeabi_d2f>
 8002d14:	4603      	mov	r3, r0
 8002d16:	6023      	str	r3, [r4, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	3730      	adds	r7, #48	@ 0x30
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d20:	54442d18 	.word	0x54442d18
 8002d24:	3ff921fb 	.word	0x3ff921fb

08002d28 <update_setpoints>:

uint8_t update_setpoints(const float input_values[6], const Quaternion *quat, const float *water_pressure)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
	uint8_t count = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	77fb      	strb	r3, [r7, #31]
	float rpy_rads[3];
	calculate_rpy_from_quaternion(quat, rpy_rads);
 8002d38:	f107 0310 	add.w	r3, r7, #16
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	68b8      	ldr	r0, [r7, #8]
 8002d40:	f7ff fec2 	bl	8002ac8 <calculate_rpy_from_quaternion>
	// updates setpoints for angles
	for(uint8_t i = 0; i < 3; i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	77bb      	strb	r3, [r7, #30]
 8002d48:	e022      	b.n	8002d90 <update_setpoints+0x68>
	{
		if(fabsf(input_values[i+3]) < TOLERANCE)
 8002d4a:	7fbb      	ldrb	r3, [r7, #30]
 8002d4c:	3303      	adds	r3, #3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	eef0 7ae7 	vabs.f32	s15, s15
 8002d5c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002da0 <update_setpoints+0x78>
 8002d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d68:	d50f      	bpl.n	8002d8a <update_setpoints+0x62>
		{
			setpoints[i+1] = rpy_rads[i+1];
 8002d6a:	7fbb      	ldrb	r3, [r7, #30]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	7fbb      	ldrb	r3, [r7, #30]
 8002d70:	3301      	adds	r3, #1
 8002d72:	0092      	lsls	r2, r2, #2
 8002d74:	3220      	adds	r2, #32
 8002d76:	443a      	add	r2, r7
 8002d78:	3a10      	subs	r2, #16
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	4909      	ldr	r1, [pc, #36]	@ (8002da4 <update_setpoints+0x7c>)
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	601a      	str	r2, [r3, #0]
			count++;
 8002d84:	7ffb      	ldrb	r3, [r7, #31]
 8002d86:	3301      	adds	r3, #1
 8002d88:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < 3; i++)
 8002d8a:	7fbb      	ldrb	r3, [r7, #30]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	77bb      	strb	r3, [r7, #30]
 8002d90:	7fbb      	ldrb	r3, [r7, #30]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d9d9      	bls.n	8002d4a <update_setpoints+0x22>
	 * In order for the setpoint to be update, I have to check the role each axis plays in changing the depth,
	 * and updating the setpoint only if all of the corresponding input values are 0
	 */


	return count;
 8002d96:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	3d4ccccd 	.word	0x3d4ccccd
 8002da4:	20008694 	.word	0x20008694

08002da8 <calculate_pwm_with_pid>:
    }
}

// The order for 4-elements arrays is: z, pitch, roll, yaw
uint8_t calculate_pwm_with_pid(const float joystick_input[6], uint32_t pwm_output[8], const Quaternion *orientation_quaternion,
		const float *water_pressure) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b0b0      	sub	sp, #192	@ 0xc0
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
	// calculate current values
	float current_values[4];
	calculate_rpy_from_quaternion(orientation_quaternion, &current_values[1]);
 8002db6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fe82 	bl	8002ac8 <calculate_rpy_from_quaternion>

	// TODO conversion from water pressure to depth
	current_values[0] = *water_pressure;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	66bb      	str	r3, [r7, #104]	@ 0x68

	update_setpoints(joystick_input, orientation_quaternion, water_pressure);
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff ffaa 	bl	8002d28 <update_setpoints>
	// PID in action!
	float input_values[6];
	for(uint8_t i = 0; i < 6; i++) input_values[i] = joystick_input[i];
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8002dda:	e011      	b.n	8002e00 <calculate_pwm_with_pid+0x58>
 8002ddc:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	441a      	add	r2, r3
 8002de6:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	33c0      	adds	r3, #192	@ 0xc0
 8002df0:	443b      	add	r3, r7
 8002df2:	3b70      	subs	r3, #112	@ 0x70
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8002e00:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d9e9      	bls.n	8002ddc <calculate_pwm_with_pid+0x34>

	float pitch_pid_feedback = arm_pid_f32(&pids[1], setpoints[1] - current_values[1]);
 8002e08:	4bce      	ldr	r3, [pc, #824]	@ (8003144 <calculate_pwm_with_pid+0x39c>)
 8002e0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e0e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e16:	4bcc      	ldr	r3, [pc, #816]	@ (8003148 <calculate_pwm_with_pid+0x3a0>)
 8002e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e1c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    out = (S->A0 * in) +
 8002e20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e34:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002e44:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e4c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e54:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e64:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    S->state[1] = S->state[0];
 8002e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e7a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e80:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002e82:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e88:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002e8a:	615a      	str	r2, [r3, #20]
    return (out);
 8002e8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	float roll_pid_feedback = arm_pid_f32(&pids[2], setpoints[2] - current_values[2]);
 8002e92:	4bac      	ldr	r3, [pc, #688]	@ (8003144 <calculate_pwm_with_pid+0x39c>)
 8002e94:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e98:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea0:	4baa      	ldr	r3, [pc, #680]	@ (800314c <calculate_pwm_with_pid+0x3a4>)
 8002ea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ea6:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
    out = (S->A0 * in) +
 8002eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eae:	ed93 7a00 	vldr	s14, [r3]
 8002eb2:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ebe:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002ece:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ede:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eee:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef6:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    S->state[1] = S->state[0];
 8002efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f04:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002f0e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f14:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002f18:	615a      	str	r2, [r3, #20]
    return (out);
 8002f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float yaw_pid_feedback = arm_pid_f32(&pids[3], setpoints[3] - current_values[3]);
 8002f22:	4b88      	ldr	r3, [pc, #544]	@ (8003144 <calculate_pwm_with_pid+0x39c>)
 8002f24:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f28:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f30:	4b87      	ldr	r3, [pc, #540]	@ (8003150 <calculate_pwm_with_pid+0x3a8>)
 8002f32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f36:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    out = (S->A0 * in) +
 8002f3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f3e:	ed93 7a00 	vldr	s14, [r3]
 8002f42:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8002f46:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002f4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f56:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002f5e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002f62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f66:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f7e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f86:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    S->state[1] = S->state[0];
 8002f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f94:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f9e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fa4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002fa8:	615a      	str	r2, [r3, #20]
    return (out);
 8002faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	/* **************
	 * Depth
	 * The z axis we can get measures of is in the fixed-body-frame:
	 * we need to convert the output of the PID to the body frame in order to modify the input, in order to achieve the desired depth hold.
	*/
	float z_out = arm_pid_f32(&pids[0], setpoints[0] - current_values[0]);
 8002fb2:	4b64      	ldr	r3, [pc, #400]	@ (8003144 <calculate_pwm_with_pid+0x39c>)
 8002fb4:	ed93 7a00 	vldr	s14, [r3]
 8002fb8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc0:	4b64      	ldr	r3, [pc, #400]	@ (8003154 <calculate_pwm_with_pid+0x3ac>)
 8002fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002fc6:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
    out = (S->A0 * in) +
 8002fca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fce:	ed93 7a00 	vldr	s14, [r3]
 8002fd2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002fd6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002fda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fde:	edd3 6a01 	vldr	s13, [r3, #4]
 8002fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fe6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002fee:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ff6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ffe:	edd3 7a04 	vldr	s15, [r3, #16]
 8003002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003006:	ee37 7a27 	vadd.f32	s14, s14, s15
 800300a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800300e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003016:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    S->state[1] = S->state[0];
 800301a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003024:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800302a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800302e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003030:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003034:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003038:	615a      	str	r2, [r3, #20]
    return (out);
 800303a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800303e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	// Applies the inverse rotation of the body-frame from the fixed-body-frame ( described by the orientation quaternion ),
	// in order to compute the coordinates of the z_out vector with respect to the body-frame
	Quaternion z_out_q;
	z_out_q.w = 0;
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	643b      	str	r3, [r7, #64]	@ 0x40
	z_out_q.x = 0;
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	647b      	str	r3, [r7, #68]	@ 0x44
	z_out_q.y = 0;
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	64bb      	str	r3, [r7, #72]	@ 0x48
	z_out_q.z = z_out;
 8003054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003058:	64fb      	str	r3, [r7, #76]	@ 0x4c
	Quaternion q_inv = {0};
 800305a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
	invert_quaternion(orientation_quaternion, &q_inv);
 8003068:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800306c:	4619      	mov	r1, r3
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff fc00 	bl	8002874 <invert_quaternion>
	
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 8003074:	f107 0320 	add.w	r3, r7, #32
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
	Quaternion z_out_body_frame = {0};
 8003082:	f107 0310 	add.w	r3, r7, #16
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 8003090:	f107 0220 	add.w	r2, r7, #32
 8003094:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8003098:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fc61 	bl	8002964 <multiply_quaternions>
	multiply_quaternions(&intermediate_result, orientation_quaternion, &z_out_body_frame);
 80030a2:	f107 0210 	add.w	r2, r7, #16
 80030a6:	f107 0320 	add.w	r3, r7, #32
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fc59 	bl	8002964 <multiply_quaternions>

	// apply the feedback on x y z axis if and only if either the feedback is approx 0, or the input value by the user is approx 0.
	// This condition must be met for every axis value
	uint8_t y_condition = fabsf(z_out_body_frame.y) < TOLERANCE || fabsf(input_values[0] < TOLERANCE);
 80030b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80030b6:	eef0 7ae7 	vabs.f32	s15, s15
 80030ba:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 80030be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	d408      	bmi.n	80030da <calculate_pwm_with_pid+0x332>
 80030c8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80030cc:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 80030d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	d501      	bpl.n	80030de <calculate_pwm_with_pid+0x336>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <calculate_pwm_with_pid+0x338>
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	uint8_t x_condition = fabsf(z_out_body_frame.x) < TOLERANCE || fabsf(input_values[1] < TOLERANCE);
 80030e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80030e8:	eef0 7ae7 	vabs.f32	s15, s15
 80030ec:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 80030f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f8:	d408      	bmi.n	800310c <calculate_pwm_with_pid+0x364>
 80030fa:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80030fe:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 8003102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	d501      	bpl.n	8003110 <calculate_pwm_with_pid+0x368>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <calculate_pwm_with_pid+0x36a>
 8003110:	2300      	movs	r3, #0
 8003112:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
	uint8_t z_condition = fabsf(z_out_body_frame.z) < TOLERANCE || fabsf(input_values[2] < TOLERANCE);
 8003116:	edd7 7a07 	vldr	s15, [r7, #28]
 800311a:	eef0 7ae7 	vabs.f32	s15, s15
 800311e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 8003122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d408      	bmi.n	800313e <calculate_pwm_with_pid+0x396>
 800312c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003130:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 8003134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	d50e      	bpl.n	800315c <calculate_pwm_with_pid+0x3b4>
 800313e:	2301      	movs	r3, #1
 8003140:	e00d      	b.n	800315e <calculate_pwm_with_pid+0x3b6>
 8003142:	bf00      	nop
 8003144:	20008694 	.word	0x20008694
 8003148:	200086c8 	.word	0x200086c8
 800314c:	200086ec 	.word	0x200086ec
 8003150:	20008710 	.word	0x20008710
 8003154:	200086a4 	.word	0x200086a4
 8003158:	3d4ccccd 	.word	0x3d4ccccd
 800315c:	2300      	movs	r3, #0
 800315e:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9

	if (x_condition && y_condition && z_condition)
 8003162:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01f      	beq.n	80031aa <calculate_pwm_with_pid+0x402>
 800316a:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800316e:	2b00      	cmp	r3, #0
 8003170:	d01b      	beq.n	80031aa <calculate_pwm_with_pid+0x402>
 8003172:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8003176:	2b00      	cmp	r3, #0
 8003178:	d017      	beq.n	80031aa <calculate_pwm_with_pid+0x402>
	{
		input_values[0] += z_out_body_frame.y;
 800317a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800317e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003186:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		input_values[1] += z_out_body_frame.x;
 800318a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800318e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		input_values[2] += z_out_body_frame.z;
 800319a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800319e:	edd7 7a07 	vldr	s15, [r7, #28]
 80031a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	}

	// pitch
	if (fabsf(pitch_pid_feedback) < TOLERANCE || fabsf(input_values[3] < TOLERANCE))
 80031aa:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80031ae:	eef0 7ae7 	vabs.f32	s15, s15
 80031b2:	ed1f 7a17 	vldr	s14, [pc, #-92]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 80031b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031be:	d408      	bmi.n	80031d2 <calculate_pwm_with_pid+0x42a>
 80031c0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80031c4:	ed1f 7a1c 	vldr	s14, [pc, #-112]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 80031c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d507      	bpl.n	80031e2 <calculate_pwm_with_pid+0x43a>
	{
		input_values[3] += pitch_pid_feedback;
 80031d2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80031d6:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80031da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031de:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	}
	// roll
	if (fabsf(roll_pid_feedback) < TOLERANCE || fabsf(input_values[4] < TOLERANCE))
 80031e2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80031e6:	eef0 7ae7 	vabs.f32	s15, s15
 80031ea:	ed1f 7a25 	vldr	s14, [pc, #-148]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 80031ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f6:	d408      	bmi.n	800320a <calculate_pwm_with_pid+0x462>
 80031f8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80031fc:	ed1f 7a2a 	vldr	s14, [pc, #-168]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 8003200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003208:	d507      	bpl.n	800321a <calculate_pwm_with_pid+0x472>
	{
		input_values[4] += roll_pid_feedback;
 800320a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800320e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003216:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}
	// yaw
	if (fabsf(yaw_pid_feedback) < TOLERANCE || fabsf(input_values[5] < TOLERANCE))
 800321a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800321e:	eef0 7ae7 	vabs.f32	s15, s15
 8003222:	ed1f 7a33 	vldr	s14, [pc, #-204]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 8003226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322e:	d408      	bmi.n	8003242 <calculate_pwm_with_pid+0x49a>
 8003230:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003234:	ed1f 7a38 	vldr	s14, [pc, #-224]	@ 8003158 <calculate_pwm_with_pid+0x3b0>
 8003238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003240:	d507      	bpl.n	8003252 <calculate_pwm_with_pid+0x4aa>
	{
		input_values[5] += yaw_pid_feedback;
 8003242:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003246:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800324a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	}

	uint8_t code = calculate_pwm(&input_values, pwm_output);
 8003252:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fa5f 	bl	800271c <calculate_pwm>
 800325e:	4603      	mov	r3, r0
 8003260:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	return code;
 8003264:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
}
 8003268:	4618      	mov	r0, r3
 800326a:	37c0      	adds	r7, #192	@ 0xc0
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003270:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003274:	f7ff f95e 	bl	8002534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003278:	480c      	ldr	r0, [pc, #48]	@ (80032ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800327a:	490d      	ldr	r1, [pc, #52]	@ (80032b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800327c:	4a0d      	ldr	r2, [pc, #52]	@ (80032b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800327e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003280:	e002      	b.n	8003288 <LoopCopyDataInit>

08003282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003286:	3304      	adds	r3, #4

08003288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800328c:	d3f9      	bcc.n	8003282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328e:	4a0a      	ldr	r2, [pc, #40]	@ (80032b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003290:	4c0a      	ldr	r4, [pc, #40]	@ (80032bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003294:	e001      	b.n	800329a <LoopFillZerobss>

08003296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003298:	3204      	adds	r2, #4

0800329a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800329c:	d3fb      	bcc.n	8003296 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800329e:	f015 fdf3 	bl	8018e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032a2:	f7fe fd79 	bl	8001d98 <main>
  bx  lr    
 80032a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80032ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b0:	200007a4 	.word	0x200007a4
  ldr r2, =_sidata
 80032b4:	0801b594 	.word	0x0801b594
  ldr r2, =_sbss
 80032b8:	200007a8 	.word	0x200007a8
  ldr r4, =_ebss
 80032bc:	2001567c 	.word	0x2001567c

080032c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c0:	e7fe      	b.n	80032c0 <ADC_IRQHandler>
	...

080032c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <HAL_Init+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <HAL_Init+0x40>)
 80032ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <HAL_Init+0x40>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <HAL_Init+0x40>)
 80032da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e0:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <HAL_Init+0x40>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a07      	ldr	r2, [pc, #28]	@ (8003304 <HAL_Init+0x40>)
 80032e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ec:	2003      	movs	r0, #3
 80032ee:	f000 f8d8 	bl	80034a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032f2:	200f      	movs	r0, #15
 80032f4:	f7fe ff9c 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f8:	f7fe ff6e 	bl	80021d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40023c00 	.word	0x40023c00

08003308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <HAL_IncTick+0x20>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	4b06      	ldr	r3, [pc, #24]	@ (800332c <HAL_IncTick+0x24>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4413      	add	r3, r2
 8003318:	4a04      	ldr	r2, [pc, #16]	@ (800332c <HAL_IncTick+0x24>)
 800331a:	6013      	str	r3, [r2, #0]
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	200000cc 	.word	0x200000cc
 800332c:	20008734 	.word	0x20008734

08003330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return uwTick;
 8003334:	4b03      	ldr	r3, [pc, #12]	@ (8003344 <HAL_GetTick+0x14>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20008734 	.word	0x20008734

08003348 <__NVIC_SetPriorityGrouping>:
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003358:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003364:	4013      	ands	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337a:	4a04      	ldr	r2, [pc, #16]	@ (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60d3      	str	r3, [r2, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_GetPriorityGrouping>:
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_EnableIRQ>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db0b      	blt.n	80033d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	4907      	ldr	r1, [pc, #28]	@ (80033e4 <__NVIC_EnableIRQ+0x38>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2001      	movs	r0, #1
 80033ce:	fa00 f202 	lsl.w	r2, r0, r2
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	490c      	ldr	r1, [pc, #48]	@ (8003434 <__NVIC_SetPriority+0x4c>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	440b      	add	r3, r1
 800340c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003410:	e00a      	b.n	8003428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4908      	ldr	r1, [pc, #32]	@ (8003438 <__NVIC_SetPriority+0x50>)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3b04      	subs	r3, #4
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	440b      	add	r3, r1
 8003426:	761a      	strb	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <NVIC_EncodePriority>:
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	@ 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf28      	it	cs
 800345a:	2304      	movcs	r3, #4
 800345c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3304      	adds	r3, #4
 8003462:	2b06      	cmp	r3, #6
 8003464:	d902      	bls.n	800346c <NVIC_EncodePriority+0x30>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b03      	subs	r3, #3
 800346a:	e000      	b.n	800346e <NVIC_EncodePriority+0x32>
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003484:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43d9      	mvns	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	4313      	orrs	r3, r2
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	@ 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ff4c 	bl	8003348 <__NVIC_SetPriorityGrouping>
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ca:	f7ff ff61 	bl	8003390 <__NVIC_GetPriorityGrouping>
 80034ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	6978      	ldr	r0, [r7, #20]
 80034d6:	f7ff ffb1 	bl	800343c <NVIC_EncodePriority>
 80034da:	4602      	mov	r2, r0
 80034dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff ff80 	bl	80033e8 <__NVIC_SetPriority>
}
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff ff54 	bl	80033ac <__NVIC_EnableIRQ>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff ff0a 	bl	8003330 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e099      	b.n	800365c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003548:	e00f      	b.n	800356a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800354a:	f7ff fef1 	bl	8003330 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b05      	cmp	r3, #5
 8003556:	d908      	bls.n	800356a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2203      	movs	r2, #3
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e078      	b.n	800365c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e8      	bne.n	800354a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4b38      	ldr	r3, [pc, #224]	@ (8003664 <HAL_DMA_Init+0x158>)
 8003584:	4013      	ands	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003596:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d107      	bne.n	80035d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	4313      	orrs	r3, r2
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0307 	bic.w	r3, r3, #7
 80035ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d117      	bne.n	800362e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fb01 	bl	8003c18 <DMA_CheckFifoParam>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2240      	movs	r2, #64	@ 0x40
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800362a:	2301      	movs	r3, #1
 800362c:	e016      	b.n	800365c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fab8 	bl	8003bac <DMA_CalcBaseAndBitshift>
 800363c:	4603      	mov	r3, r0
 800363e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003644:	223f      	movs	r2, #63	@ 0x3f
 8003646:	409a      	lsls	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	f010803f 	.word	0xf010803f

08003668 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_DMA_Start_IT+0x26>
 800368a:	2302      	movs	r3, #2
 800368c:	e040      	b.n	8003710 <HAL_DMA_Start_IT+0xa8>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d12f      	bne.n	8003702 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fa4a 	bl	8003b50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	223f      	movs	r2, #63	@ 0x3f
 80036c2:	409a      	lsls	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0216 	orr.w	r2, r2, #22
 80036d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0208 	orr.w	r2, r2, #8
 80036ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	e005      	b.n	800370e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800370a:	2302      	movs	r3, #2
 800370c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003724:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003726:	f7ff fe03 	bl	8003330 <HAL_GetTick>
 800372a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d008      	beq.n	800374a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2280      	movs	r2, #128	@ 0x80
 800373c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e052      	b.n	80037f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0216 	bic.w	r2, r2, #22
 8003758:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003768:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_DMA_Abort+0x62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0208 	bic.w	r2, r2, #8
 8003788:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379a:	e013      	b.n	80037c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800379c:	f7ff fdc8 	bl	8003330 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b05      	cmp	r3, #5
 80037a8:	d90c      	bls.n	80037c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2203      	movs	r2, #3
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e015      	b.n	80037f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e4      	bne.n	800379c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	223f      	movs	r2, #63	@ 0x3f
 80037d8:	409a      	lsls	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d004      	beq.n	8003816 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2280      	movs	r2, #128	@ 0x80
 8003810:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e00c      	b.n	8003830 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2205      	movs	r2, #5
 800381a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003848:	4b8e      	ldr	r3, [pc, #568]	@ (8003a84 <HAL_DMA_IRQHandler+0x248>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a8e      	ldr	r2, [pc, #568]	@ (8003a88 <HAL_DMA_IRQHandler+0x24c>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0a9b      	lsrs	r3, r3, #10
 8003854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	2208      	movs	r2, #8
 8003868:	409a      	lsls	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01a      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0204 	bic.w	r2, r2, #4
 800388e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	2208      	movs	r2, #8
 8003896:	409a      	lsls	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	2201      	movs	r2, #1
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d012      	beq.n	80038de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ca:	2201      	movs	r2, #1
 80038cc:	409a      	lsls	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e2:	2204      	movs	r2, #4
 80038e4:	409a      	lsls	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d012      	beq.n	8003914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00b      	beq.n	8003914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	2204      	movs	r2, #4
 8003902:	409a      	lsls	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390c:	f043 0204 	orr.w	r2, r3, #4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	2210      	movs	r2, #16
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d043      	beq.n	80039ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d03c      	beq.n	80039ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003936:	2210      	movs	r2, #16
 8003938:	409a      	lsls	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d018      	beq.n	800397e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d108      	bne.n	800396c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d024      	beq.n	80039ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
 800396a:	e01f      	b.n	80039ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01b      	beq.n	80039ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
 800397c:	e016      	b.n	80039ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d107      	bne.n	800399c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0208 	bic.w	r2, r2, #8
 800399a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b0:	2220      	movs	r2, #32
 80039b2:	409a      	lsls	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 808f 	beq.w	8003adc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8087 	beq.w	8003adc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	2220      	movs	r2, #32
 80039d4:	409a      	lsls	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b05      	cmp	r3, #5
 80039e4:	d136      	bne.n	8003a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0216 	bic.w	r2, r2, #22
 80039f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d103      	bne.n	8003a16 <HAL_DMA_IRQHandler+0x1da>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0208 	bic.w	r2, r2, #8
 8003a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2a:	223f      	movs	r2, #63	@ 0x3f
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d07e      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
        }
        return;
 8003a52:	e079      	b.n	8003b48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01d      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10d      	bne.n	8003a8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d031      	beq.n	8003adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
 8003a80:	e02c      	b.n	8003adc <HAL_DMA_IRQHandler+0x2a0>
 8003a82:	bf00      	nop
 8003a84:	20000004 	.word	0x20000004
 8003a88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d023      	beq.n	8003adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
 8003a9c:	e01e      	b.n	8003adc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10f      	bne.n	8003acc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0210 	bic.w	r2, r2, #16
 8003aba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d032      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d022      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2205      	movs	r2, #5
 8003af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d307      	bcc.n	8003b24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f2      	bne.n	8003b08 <HAL_DMA_IRQHandler+0x2cc>
 8003b22:	e000      	b.n	8003b26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
 8003b46:	e000      	b.n	8003b4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b48:	bf00      	nop
    }
  }
}
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b40      	cmp	r3, #64	@ 0x40
 8003b7c:	d108      	bne.n	8003b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b8e:	e007      	b.n	8003ba0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	60da      	str	r2, [r3, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	3b10      	subs	r3, #16
 8003bbc:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <DMA_CalcBaseAndBitshift+0x64>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bc6:	4a13      	ldr	r2, [pc, #76]	@ (8003c14 <DMA_CalcBaseAndBitshift+0x68>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d909      	bls.n	8003bee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	1d1a      	adds	r2, r3, #4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bec:	e007      	b.n	8003bfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	aaaaaaab 	.word	0xaaaaaaab
 8003c14:	0801a23c 	.word	0x0801a23c

08003c18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d11f      	bne.n	8003c72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d856      	bhi.n	8003ce6 <DMA_CheckFifoParam+0xce>
 8003c38:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <DMA_CheckFifoParam+0x28>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08003c63 	.word	0x08003c63
 8003c48:	08003c51 	.word	0x08003c51
 8003c4c:	08003ce7 	.word	0x08003ce7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d046      	beq.n	8003cea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c60:	e043      	b.n	8003cea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c6a:	d140      	bne.n	8003cee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c70:	e03d      	b.n	8003cee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c7a:	d121      	bne.n	8003cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d837      	bhi.n	8003cf2 <DMA_CheckFifoParam+0xda>
 8003c82:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <DMA_CheckFifoParam+0x70>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003c9f 	.word	0x08003c9f
 8003c90:	08003c99 	.word	0x08003c99
 8003c94:	08003cb1 	.word	0x08003cb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c9c:	e030      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d025      	beq.n	8003cf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cae:	e022      	b.n	8003cf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cb8:	d11f      	bne.n	8003cfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cbe:	e01c      	b.n	8003cfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d903      	bls.n	8003cce <DMA_CheckFifoParam+0xb6>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d003      	beq.n	8003cd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ccc:	e018      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd2:	e015      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00e      	beq.n	8003cfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce4:	e00b      	b.n	8003cfe <DMA_CheckFifoParam+0xe6>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e00a      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;
 8003cea:	bf00      	nop
 8003cec:	e008      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e006      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e004      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;
 8003cfe:	bf00      	nop
    }
  } 
  
  return status; 
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop

08003d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	@ 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	e177      	b.n	800401c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	f040 8166 	bne.w	8004016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d005      	beq.n	8003d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d130      	bne.n	8003dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 0201 	and.w	r2, r3, #1
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d017      	beq.n	8003e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	2203      	movs	r2, #3
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d123      	bne.n	8003e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	08da      	lsrs	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3208      	adds	r2, #8
 8003e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	220f      	movs	r2, #15
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	08da      	lsrs	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3208      	adds	r2, #8
 8003e4e:	69b9      	ldr	r1, [r7, #24]
 8003e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	2203      	movs	r2, #3
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0203 	and.w	r2, r3, #3
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80c0 	beq.w	8004016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	4b66      	ldr	r3, [pc, #408]	@ (8004034 <HAL_GPIO_Init+0x324>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	4a65      	ldr	r2, [pc, #404]	@ (8004034 <HAL_GPIO_Init+0x324>)
 8003ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ea6:	4b63      	ldr	r3, [pc, #396]	@ (8004034 <HAL_GPIO_Init+0x324>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eb2:	4a61      	ldr	r2, [pc, #388]	@ (8004038 <HAL_GPIO_Init+0x328>)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	3302      	adds	r3, #2
 8003eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	220f      	movs	r2, #15
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a58      	ldr	r2, [pc, #352]	@ (800403c <HAL_GPIO_Init+0x32c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d037      	beq.n	8003f4e <HAL_GPIO_Init+0x23e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a57      	ldr	r2, [pc, #348]	@ (8004040 <HAL_GPIO_Init+0x330>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d031      	beq.n	8003f4a <HAL_GPIO_Init+0x23a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a56      	ldr	r2, [pc, #344]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02b      	beq.n	8003f46 <HAL_GPIO_Init+0x236>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a55      	ldr	r2, [pc, #340]	@ (8004048 <HAL_GPIO_Init+0x338>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d025      	beq.n	8003f42 <HAL_GPIO_Init+0x232>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a54      	ldr	r2, [pc, #336]	@ (800404c <HAL_GPIO_Init+0x33c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01f      	beq.n	8003f3e <HAL_GPIO_Init+0x22e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a53      	ldr	r2, [pc, #332]	@ (8004050 <HAL_GPIO_Init+0x340>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d019      	beq.n	8003f3a <HAL_GPIO_Init+0x22a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a52      	ldr	r2, [pc, #328]	@ (8004054 <HAL_GPIO_Init+0x344>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_GPIO_Init+0x226>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a51      	ldr	r2, [pc, #324]	@ (8004058 <HAL_GPIO_Init+0x348>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00d      	beq.n	8003f32 <HAL_GPIO_Init+0x222>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a50      	ldr	r2, [pc, #320]	@ (800405c <HAL_GPIO_Init+0x34c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <HAL_GPIO_Init+0x21e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a4f      	ldr	r2, [pc, #316]	@ (8004060 <HAL_GPIO_Init+0x350>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <HAL_GPIO_Init+0x21a>
 8003f26:	2309      	movs	r3, #9
 8003f28:	e012      	b.n	8003f50 <HAL_GPIO_Init+0x240>
 8003f2a:	230a      	movs	r3, #10
 8003f2c:	e010      	b.n	8003f50 <HAL_GPIO_Init+0x240>
 8003f2e:	2308      	movs	r3, #8
 8003f30:	e00e      	b.n	8003f50 <HAL_GPIO_Init+0x240>
 8003f32:	2307      	movs	r3, #7
 8003f34:	e00c      	b.n	8003f50 <HAL_GPIO_Init+0x240>
 8003f36:	2306      	movs	r3, #6
 8003f38:	e00a      	b.n	8003f50 <HAL_GPIO_Init+0x240>
 8003f3a:	2305      	movs	r3, #5
 8003f3c:	e008      	b.n	8003f50 <HAL_GPIO_Init+0x240>
 8003f3e:	2304      	movs	r3, #4
 8003f40:	e006      	b.n	8003f50 <HAL_GPIO_Init+0x240>
 8003f42:	2303      	movs	r3, #3
 8003f44:	e004      	b.n	8003f50 <HAL_GPIO_Init+0x240>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e002      	b.n	8003f50 <HAL_GPIO_Init+0x240>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <HAL_GPIO_Init+0x240>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	f002 0203 	and.w	r2, r2, #3
 8003f56:	0092      	lsls	r2, r2, #2
 8003f58:	4093      	lsls	r3, r2
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f60:	4935      	ldr	r1, [pc, #212]	@ (8004038 <HAL_GPIO_Init+0x328>)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	3302      	adds	r3, #2
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004064 <HAL_GPIO_Init+0x354>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f92:	4a34      	ldr	r2, [pc, #208]	@ (8004064 <HAL_GPIO_Init+0x354>)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f98:	4b32      	ldr	r3, [pc, #200]	@ (8004064 <HAL_GPIO_Init+0x354>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fbc:	4a29      	ldr	r2, [pc, #164]	@ (8004064 <HAL_GPIO_Init+0x354>)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fc2:	4b28      	ldr	r3, [pc, #160]	@ (8004064 <HAL_GPIO_Init+0x354>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8004064 <HAL_GPIO_Init+0x354>)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fec:	4b1d      	ldr	r3, [pc, #116]	@ (8004064 <HAL_GPIO_Init+0x354>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004010:	4a14      	ldr	r2, [pc, #80]	@ (8004064 <HAL_GPIO_Init+0x354>)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	3301      	adds	r3, #1
 800401a:	61fb      	str	r3, [r7, #28]
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b0f      	cmp	r3, #15
 8004020:	f67f ae84 	bls.w	8003d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	3724      	adds	r7, #36	@ 0x24
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
 8004038:	40013800 	.word	0x40013800
 800403c:	40020000 	.word	0x40020000
 8004040:	40020400 	.word	0x40020400
 8004044:	40020800 	.word	0x40020800
 8004048:	40020c00 	.word	0x40020c00
 800404c:	40021000 	.word	0x40021000
 8004050:	40021400 	.word	0x40021400
 8004054:	40021800 	.word	0x40021800
 8004058:	40021c00 	.word	0x40021c00
 800405c:	40022000 	.word	0x40022000
 8004060:	40022400 	.word	0x40022400
 8004064:	40013c00 	.word	0x40013c00

08004068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	807b      	strh	r3, [r7, #2]
 8004074:	4613      	mov	r3, r2
 8004076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004078:	787b      	ldrb	r3, [r7, #1]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800407e:	887a      	ldrh	r2, [r7, #2]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004084:	e003      	b.n	800408e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004086:	887b      	ldrh	r3, [r7, #2]
 8004088:	041a      	lsls	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	619a      	str	r2, [r3, #24]
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	4b20      	ldr	r3, [pc, #128]	@ (800412c <HAL_PWREx_EnableOverDrive+0x90>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	4a1f      	ldr	r2, [pc, #124]	@ (800412c <HAL_PWREx_EnableOverDrive+0x90>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040b6:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <HAL_PWREx_EnableOverDrive+0x90>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004130 <HAL_PWREx_EnableOverDrive+0x94>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040c8:	f7ff f932 	bl	8003330 <HAL_GetTick>
 80040cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040ce:	e009      	b.n	80040e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040d0:	f7ff f92e 	bl	8003330 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040de:	d901      	bls.n	80040e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e01f      	b.n	8004124 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040e4:	4b13      	ldr	r3, [pc, #76]	@ (8004134 <HAL_PWREx_EnableOverDrive+0x98>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f0:	d1ee      	bne.n	80040d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040f2:	4b11      	ldr	r3, [pc, #68]	@ (8004138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040f8:	f7ff f91a 	bl	8003330 <HAL_GetTick>
 80040fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040fe:	e009      	b.n	8004114 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004100:	f7ff f916 	bl	8003330 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800410e:	d901      	bls.n	8004114 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e007      	b.n	8004124 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004114:	4b07      	ldr	r3, [pc, #28]	@ (8004134 <HAL_PWREx_EnableOverDrive+0x98>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004120:	d1ee      	bne.n	8004100 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40023800 	.word	0x40023800
 8004130:	420e0040 	.word	0x420e0040
 8004134:	40007000 	.word	0x40007000
 8004138:	420e0044 	.word	0x420e0044

0800413c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0cc      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004150:	4b68      	ldr	r3, [pc, #416]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d90c      	bls.n	8004178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b65      	ldr	r3, [pc, #404]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b63      	ldr	r3, [pc, #396]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0b8      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004190:	4b59      	ldr	r3, [pc, #356]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a58      	ldr	r2, [pc, #352]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800419a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a8:	4b53      	ldr	r3, [pc, #332]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4a52      	ldr	r2, [pc, #328]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b4:	4b50      	ldr	r3, [pc, #320]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	494d      	ldr	r1, [pc, #308]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d044      	beq.n	800425c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b47      	ldr	r3, [pc, #284]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d119      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e07f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d003      	beq.n	80041fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d107      	bne.n	800420a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fa:	4b3f      	ldr	r3, [pc, #252]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e06f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420a:	4b3b      	ldr	r3, [pc, #236]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e067      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800421a:	4b37      	ldr	r3, [pc, #220]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f023 0203 	bic.w	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4934      	ldr	r1, [pc, #208]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	4313      	orrs	r3, r2
 800422a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800422c:	f7ff f880 	bl	8003330 <HAL_GetTick>
 8004230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	e00a      	b.n	800424a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004234:	f7ff f87c 	bl	8003330 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e04f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424a:	4b2b      	ldr	r3, [pc, #172]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 020c 	and.w	r2, r3, #12
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	429a      	cmp	r2, r3
 800425a:	d1eb      	bne.n	8004234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800425c:	4b25      	ldr	r3, [pc, #148]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d20c      	bcs.n	8004284 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426a:	4b22      	ldr	r3, [pc, #136]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b20      	ldr	r3, [pc, #128]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e032      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004290:	4b19      	ldr	r3, [pc, #100]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4916      	ldr	r1, [pc, #88]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ae:	4b12      	ldr	r3, [pc, #72]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	490e      	ldr	r1, [pc, #56]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042c2:	f000 f821 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c6:	4602      	mov	r2, r0
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	490a      	ldr	r1, [pc, #40]	@ (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 80042d4:	5ccb      	ldrb	r3, [r1, r3]
 80042d6:	fa22 f303 	lsr.w	r3, r2, r3
 80042da:	4a09      	ldr	r2, [pc, #36]	@ (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042de:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fd ffa4 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023c00 	.word	0x40023c00
 80042f8:	40023800 	.word	0x40023800
 80042fc:	0801a224 	.word	0x0801a224
 8004300:	20000004 	.word	0x20000004
 8004304:	200000c8 	.word	0x200000c8

08004308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800430c:	b092      	sub	sp, #72	@ 0x48
 800430e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllvco = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllp = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t sysclockfreq = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004320:	4b6f      	ldr	r3, [pc, #444]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b08      	cmp	r3, #8
 800432a:	d00e      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x42>
 800432c:	2b08      	cmp	r3, #8
 800432e:	f200 80cd 	bhi.w	80044cc <HAL_RCC_GetSysClockFreq+0x1c4>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x34>
 8004336:	2b04      	cmp	r3, #4
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x3a>
 800433a:	e0c7      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x1c4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b69      	ldr	r3, [pc, #420]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800433e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004340:	e0c7      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004342:	f44f 0361 	mov.w	r3, #14745600	@ 0xe10000
 8004346:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004348:	e0c3      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800434a:	4b65      	ldr	r3, [pc, #404]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004352:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004354:	4b62      	ldr	r3, [pc, #392]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d04a      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004360:	4b5f      	ldr	r3, [pc, #380]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	2200      	movs	r2, #0
 8004368:	4618      	mov	r0, r3
 800436a:	4611      	mov	r1, r2
 800436c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004370:	633b      	str	r3, [r7, #48]	@ 0x30
 8004372:	2300      	movs	r3, #0
 8004374:	637b      	str	r3, [r7, #52]	@ 0x34
 8004376:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 800437a:	4642      	mov	r2, r8
 800437c:	464b      	mov	r3, r9
 800437e:	f04f 0000 	mov.w	r0, #0
 8004382:	f04f 0100 	mov.w	r1, #0
 8004386:	00d9      	lsls	r1, r3, #3
 8004388:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800438c:	00d0      	lsls	r0, r2, #3
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4641      	mov	r1, r8
 8004394:	1a54      	subs	r4, r2, r1
 8004396:	4649      	mov	r1, r9
 8004398:	eb63 0501 	sbc.w	r5, r3, r1
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	016b      	lsls	r3, r5, #5
 80043a6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80043aa:	0162      	lsls	r2, r4, #5
 80043ac:	4614      	mov	r4, r2
 80043ae:	461d      	mov	r5, r3
 80043b0:	4643      	mov	r3, r8
 80043b2:	18e3      	adds	r3, r4, r3
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	464b      	mov	r3, r9
 80043b8:	eb45 0303 	adc.w	r3, r5, r3
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043ca:	4629      	mov	r1, r5
 80043cc:	040b      	lsls	r3, r1, #16
 80043ce:	4621      	mov	r1, r4
 80043d0:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80043d4:	4621      	mov	r1, r4
 80043d6:	040a      	lsls	r2, r1, #16
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043de:	2200      	movs	r2, #0
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043e8:	f7fc fc68 	bl	8000cbc <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4613      	mov	r3, r2
 80043f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f4:	e05c      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x1a8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f6:	4b3a      	ldr	r3, [pc, #232]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	099b      	lsrs	r3, r3, #6
 80043fc:	2200      	movs	r2, #0
 80043fe:	623b      	str	r3, [r7, #32]
 8004400:	627a      	str	r2, [r7, #36]	@ 0x24
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004412:	4622      	mov	r2, r4
 8004414:	462b      	mov	r3, r5
 8004416:	f04f 0000 	mov.w	r0, #0
 800441a:	f04f 0100 	mov.w	r1, #0
 800441e:	0159      	lsls	r1, r3, #5
 8004420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004424:	0150      	lsls	r0, r2, #5
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4621      	mov	r1, r4
 800442c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004430:	4629      	mov	r1, r5
 8004432:	eb63 0b01 	sbc.w	fp, r3, r1
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004442:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004446:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800444a:	ebb2 080a 	subs.w	r8, r2, sl
 800444e:	eb63 090b 	sbc.w	r9, r3, fp
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800445e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004466:	4690      	mov	r8, r2
 8004468:	4699      	mov	r9, r3
 800446a:	4623      	mov	r3, r4
 800446c:	eb18 0303 	adds.w	r3, r8, r3
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	462b      	mov	r3, r5
 8004474:	eb49 0303 	adc.w	r3, r9, r3
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004486:	4629      	mov	r1, r5
 8004488:	028b      	lsls	r3, r1, #10
 800448a:	4621      	mov	r1, r4
 800448c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004490:	4621      	mov	r1, r4
 8004492:	028a      	lsls	r2, r1, #10
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800449a:	2200      	movs	r2, #0
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	617a      	str	r2, [r7, #20]
 80044a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044a4:	f7fc fc0a 	bl	8000cbc <__aeabi_uldivmod>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4613      	mov	r3, r2
 80044ae:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044b0:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	0c1b      	lsrs	r3, r3, #16
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	3301      	adds	r3, #1
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	63bb      	str	r3, [r7, #56]	@ 0x38

      sysclockfreq = pllvco / pllp;
 80044c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80044ca:	e002      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044cc:	4b05      	ldr	r3, [pc, #20]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80044ce:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80044d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3748      	adds	r7, #72	@ 0x48
 80044d8:	46bd      	mov	sp, r7
 80044da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	00f42400 	.word	0x00f42400

080044e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ec:	4b03      	ldr	r3, [pc, #12]	@ (80044fc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000004 	.word	0x20000004

08004500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004504:	f7ff fff0 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0a9b      	lsrs	r3, r3, #10
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	@ (8004524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	0801a234 	.word	0x0801a234

08004528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800452c:	f7ff ffdc 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	0b5b      	lsrs	r3, r3, #13
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4903      	ldr	r1, [pc, #12]	@ (800454c <HAL_RCC_GetPCLK2Freq+0x24>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800
 800454c:	0801a234 	.word	0x0801a234

08004550 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	220f      	movs	r2, #15
 800455e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004560:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <HAL_RCC_GetClockConfig+0x5c>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0203 	and.w	r2, r3, #3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800456c:	4b0f      	ldr	r3, [pc, #60]	@ (80045ac <HAL_RCC_GetClockConfig+0x5c>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004578:	4b0c      	ldr	r3, [pc, #48]	@ (80045ac <HAL_RCC_GetClockConfig+0x5c>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <HAL_RCC_GetClockConfig+0x5c>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	08db      	lsrs	r3, r3, #3
 800458a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004592:	4b07      	ldr	r3, [pc, #28]	@ (80045b0 <HAL_RCC_GetClockConfig+0x60>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 020f 	and.w	r2, r3, #15
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	601a      	str	r2, [r3, #0]
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40023c00 	.word	0x40023c00

080045b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e273      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d075      	beq.n	80046be <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045d2:	4b88      	ldr	r3, [pc, #544]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d00c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045de:	4b85      	ldr	r3, [pc, #532]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d112      	bne.n	8004610 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ea:	4b82      	ldr	r3, [pc, #520]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f6:	d10b      	bne.n	8004610 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	4b7e      	ldr	r3, [pc, #504]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d05b      	beq.n	80046bc <HAL_RCC_OscConfig+0x108>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d157      	bne.n	80046bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e24e      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004618:	d106      	bne.n	8004628 <HAL_RCC_OscConfig+0x74>
 800461a:	4b76      	ldr	r3, [pc, #472]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a75      	ldr	r2, [pc, #468]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e01d      	b.n	8004664 <HAL_RCC_OscConfig+0xb0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x98>
 8004632:	4b70      	ldr	r3, [pc, #448]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a6f      	ldr	r2, [pc, #444]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	4b6d      	ldr	r3, [pc, #436]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a6c      	ldr	r2, [pc, #432]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e00b      	b.n	8004664 <HAL_RCC_OscConfig+0xb0>
 800464c:	4b69      	ldr	r3, [pc, #420]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a68      	ldr	r2, [pc, #416]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	4b66      	ldr	r3, [pc, #408]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a65      	ldr	r2, [pc, #404]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 800465e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d013      	beq.n	8004694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fe fe60 	bl	8003330 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004674:	f7fe fe5c 	bl	8003330 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	@ 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e213      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004686:	4b5b      	ldr	r3, [pc, #364]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0xc0>
 8004692:	e014      	b.n	80046be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fe fe4c 	bl	8003330 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800469c:	f7fe fe48 	bl	8003330 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	@ 0x64
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e1ff      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ae:	4b51      	ldr	r3, [pc, #324]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0xe8>
 80046ba:	e000      	b.n	80046be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d063      	beq.n	8004792 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046ca:	4b4a      	ldr	r3, [pc, #296]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d6:	4b47      	ldr	r3, [pc, #284]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
        || \
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d11c      	bne.n	800471c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e2:	4b44      	ldr	r3, [pc, #272]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d116      	bne.n	800471c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ee:	4b41      	ldr	r3, [pc, #260]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_RCC_OscConfig+0x152>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d001      	beq.n	8004706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e1d3      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004706:	4b3b      	ldr	r3, [pc, #236]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4937      	ldr	r1, [pc, #220]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471a:	e03a      	b.n	8004792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004724:	4b34      	ldr	r3, [pc, #208]	@ (80047f8 <HAL_RCC_OscConfig+0x244>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fe fe01 	bl	8003330 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004732:	f7fe fdfd 	bl	8003330 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e1b4      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004744:	4b2b      	ldr	r3, [pc, #172]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004750:	4b28      	ldr	r3, [pc, #160]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4925      	ldr	r1, [pc, #148]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004760:	4313      	orrs	r3, r2
 8004762:	600b      	str	r3, [r1, #0]
 8004764:	e015      	b.n	8004792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004766:	4b24      	ldr	r3, [pc, #144]	@ (80047f8 <HAL_RCC_OscConfig+0x244>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fe fde0 	bl	8003330 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004774:	f7fe fddc 	bl	8003330 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e193      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004786:	4b1b      	ldr	r3, [pc, #108]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d036      	beq.n	800480c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d016      	beq.n	80047d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a6:	4b15      	ldr	r3, [pc, #84]	@ (80047fc <HAL_RCC_OscConfig+0x248>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fe fdc0 	bl	8003330 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b4:	f7fe fdbc 	bl	8003330 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e173      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c6:	4b0b      	ldr	r3, [pc, #44]	@ (80047f4 <HAL_RCC_OscConfig+0x240>)
 80047c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x200>
 80047d2:	e01b      	b.n	800480c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d4:	4b09      	ldr	r3, [pc, #36]	@ (80047fc <HAL_RCC_OscConfig+0x248>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fe fda9 	bl	8003330 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e0:	e00e      	b.n	8004800 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e2:	f7fe fda5 	bl	8003330 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d907      	bls.n	8004800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e15c      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
 80047f4:	40023800 	.word	0x40023800
 80047f8:	42470000 	.word	0x42470000
 80047fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004800:	4b8a      	ldr	r3, [pc, #552]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ea      	bne.n	80047e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8097 	beq.w	8004948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481e:	4b83      	ldr	r3, [pc, #524]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10f      	bne.n	800484a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	4a7e      	ldr	r2, [pc, #504]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004838:	6413      	str	r3, [r2, #64]	@ 0x40
 800483a:	4b7c      	ldr	r3, [pc, #496]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b79      	ldr	r3, [pc, #484]	@ (8004a30 <HAL_RCC_OscConfig+0x47c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d118      	bne.n	8004888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004856:	4b76      	ldr	r3, [pc, #472]	@ (8004a30 <HAL_RCC_OscConfig+0x47c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a75      	ldr	r2, [pc, #468]	@ (8004a30 <HAL_RCC_OscConfig+0x47c>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004862:	f7fe fd65 	bl	8003330 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486a:	f7fe fd61 	bl	8003330 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e118      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487c:	4b6c      	ldr	r3, [pc, #432]	@ (8004a30 <HAL_RCC_OscConfig+0x47c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d106      	bne.n	800489e <HAL_RCC_OscConfig+0x2ea>
 8004890:	4b66      	ldr	r3, [pc, #408]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004894:	4a65      	ldr	r2, [pc, #404]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6713      	str	r3, [r2, #112]	@ 0x70
 800489c:	e01c      	b.n	80048d8 <HAL_RCC_OscConfig+0x324>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b05      	cmp	r3, #5
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x30c>
 80048a6:	4b61      	ldr	r3, [pc, #388]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	4a60      	ldr	r2, [pc, #384]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80048ac:	f043 0304 	orr.w	r3, r3, #4
 80048b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b2:	4b5e      	ldr	r3, [pc, #376]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b6:	4a5d      	ldr	r2, [pc, #372]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048be:	e00b      	b.n	80048d8 <HAL_RCC_OscConfig+0x324>
 80048c0:	4b5a      	ldr	r3, [pc, #360]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80048c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c4:	4a59      	ldr	r2, [pc, #356]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80048cc:	4b57      	ldr	r3, [pc, #348]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d0:	4a56      	ldr	r2, [pc, #344]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80048d2:	f023 0304 	bic.w	r3, r3, #4
 80048d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d015      	beq.n	800490c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fe fd26 	bl	8003330 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fe fd22 	bl	8003330 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e0d7      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fe:	4b4b      	ldr	r3, [pc, #300]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0ee      	beq.n	80048e8 <HAL_RCC_OscConfig+0x334>
 800490a:	e014      	b.n	8004936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fe fd10 	bl	8003330 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004912:	e00a      	b.n	800492a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7fe fd0c 	bl	8003330 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e0c1      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492a:	4b40      	ldr	r3, [pc, #256]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ee      	bne.n	8004914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d105      	bne.n	8004948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	4a3a      	ldr	r2, [pc, #232]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004946:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80ad 	beq.w	8004aac <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004952:	4b36      	ldr	r3, [pc, #216]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b08      	cmp	r3, #8
 800495c:	d060      	beq.n	8004a20 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d145      	bne.n	80049f2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004966:	4b33      	ldr	r3, [pc, #204]	@ (8004a34 <HAL_RCC_OscConfig+0x480>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fe fce0 	bl	8003330 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004974:	f7fe fcdc 	bl	8003330 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e093      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	4b29      	ldr	r3, [pc, #164]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	019b      	lsls	r3, r3, #6
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	3b01      	subs	r3, #1
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049bc:	071b      	lsls	r3, r3, #28
 80049be:	491b      	ldr	r1, [pc, #108]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a34 <HAL_RCC_OscConfig+0x480>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ca:	f7fe fcb1 	bl	8003330 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d2:	f7fe fcad 	bl	8003330 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e064      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e4:	4b11      	ldr	r3, [pc, #68]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x41e>
 80049f0:	e05c      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f2:	4b10      	ldr	r3, [pc, #64]	@ (8004a34 <HAL_RCC_OscConfig+0x480>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fe fc9a 	bl	8003330 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fe fc96 	bl	8003330 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e04d      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x44c>
 8004a1e:	e045      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d107      	bne.n	8004a38 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e040      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40007000 	.word	0x40007000
 8004a34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a38:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d030      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d129      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d122      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d119      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	3b01      	subs	r3, #1
 8004a82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d10f      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800

08004abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e041      	b.n	8004b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f839 	bl	8004b5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f000 f9c0 	bl	8004e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d001      	beq.n	8004b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e04e      	b.n	8004c26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a23      	ldr	r2, [pc, #140]	@ (8004c34 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d022      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0x80>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb2:	d01d      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0x80>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c38 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d018      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0x80>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c3c <HAL_TIM_Base_Start_IT+0xcc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0x80>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8004c40 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00e      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0x80>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c44 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d009      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0x80>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a19      	ldr	r2, [pc, #100]	@ (8004c48 <HAL_TIM_Base_Start_IT+0xd8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0x80>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a18      	ldr	r2, [pc, #96]	@ (8004c4c <HAL_TIM_Base_Start_IT+0xdc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d111      	bne.n	8004c14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b06      	cmp	r3, #6
 8004c00:	d010      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0201 	orr.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c12:	e007      	b.n	8004c24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40000c00 	.word	0x40000c00
 8004c44:	40010400 	.word	0x40010400
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40001800 	.word	0x40001800

08004c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d020      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01b      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0202 	mvn.w	r2, #2
 8004c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f8d2 	bl	8004e44 <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f8c4 	bl	8004e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f8d5 	bl	8004e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d020      	beq.n	8004d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01b      	beq.n	8004d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0204 	mvn.w	r2, #4
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f8ac 	bl	8004e44 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f89e 	bl	8004e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f8af 	bl	8004e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d020      	beq.n	8004d4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01b      	beq.n	8004d4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0208 	mvn.w	r2, #8
 8004d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2204      	movs	r2, #4
 8004d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f886 	bl	8004e44 <HAL_TIM_IC_CaptureCallback>
 8004d38:	e005      	b.n	8004d46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f878 	bl	8004e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f889 	bl	8004e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d020      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01b      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0210 	mvn.w	r2, #16
 8004d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f860 	bl	8004e44 <HAL_TIM_IC_CaptureCallback>
 8004d84:	e005      	b.n	8004d92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f852 	bl	8004e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f863 	bl	8004e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00c      	beq.n	8004dbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0201 	mvn.w	r2, #1
 8004db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fd f890 	bl	8001edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00c      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f906 	bl	8004fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00c      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f834 	bl	8004e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00c      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0220 	mvn.w	r2, #32
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f8d8 	bl	8004fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a46      	ldr	r2, [pc, #280]	@ (8004fac <TIM_Base_SetConfig+0x12c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e9e:	d00f      	beq.n	8004ec0 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a43      	ldr	r2, [pc, #268]	@ (8004fb0 <TIM_Base_SetConfig+0x130>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00b      	beq.n	8004ec0 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a42      	ldr	r2, [pc, #264]	@ (8004fb4 <TIM_Base_SetConfig+0x134>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d007      	beq.n	8004ec0 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a41      	ldr	r2, [pc, #260]	@ (8004fb8 <TIM_Base_SetConfig+0x138>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d003      	beq.n	8004ec0 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a40      	ldr	r2, [pc, #256]	@ (8004fbc <TIM_Base_SetConfig+0x13c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d108      	bne.n	8004ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a35      	ldr	r2, [pc, #212]	@ (8004fac <TIM_Base_SetConfig+0x12c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d02b      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee0:	d027      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a32      	ldr	r2, [pc, #200]	@ (8004fb0 <TIM_Base_SetConfig+0x130>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d023      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a31      	ldr	r2, [pc, #196]	@ (8004fb4 <TIM_Base_SetConfig+0x134>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01f      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a30      	ldr	r2, [pc, #192]	@ (8004fb8 <TIM_Base_SetConfig+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01b      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2f      	ldr	r2, [pc, #188]	@ (8004fbc <TIM_Base_SetConfig+0x13c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d017      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc0 <TIM_Base_SetConfig+0x140>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d013      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc4 <TIM_Base_SetConfig+0x144>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00f      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc8 <TIM_Base_SetConfig+0x148>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00b      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <TIM_Base_SetConfig+0x14c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d007      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd0 <TIM_Base_SetConfig+0x150>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d003      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a29      	ldr	r2, [pc, #164]	@ (8004fd4 <TIM_Base_SetConfig+0x154>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d108      	bne.n	8004f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a10      	ldr	r2, [pc, #64]	@ (8004fac <TIM_Base_SetConfig+0x12c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_Base_SetConfig+0xf8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a12      	ldr	r2, [pc, #72]	@ (8004fbc <TIM_Base_SetConfig+0x13c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d103      	bne.n	8004f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d105      	bne.n	8004f9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	611a      	str	r2, [r3, #16]
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40010400 	.word	0x40010400
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	40014400 	.word	0x40014400
 8004fc8:	40014800 	.word	0x40014800
 8004fcc:	40001800 	.word	0x40001800
 8004fd0:	40001c00 	.word	0x40001c00
 8004fd4:	40002000 	.word	0x40002000

08004fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e042      	b.n	8005098 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fd fac0 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	@ 0x24
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 ffc9 	bl	8005fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08c      	sub	sp, #48	@ 0x30
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d156      	bne.n	8005168 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_UART_Transmit_DMA+0x26>
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e04f      	b.n	800516a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	88fa      	ldrh	r2, [r7, #6]
 80050da:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2221      	movs	r2, #33	@ 0x21
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ee:	4a21      	ldr	r2, [pc, #132]	@ (8005174 <HAL_UART_Transmit_DMA+0xd4>)
 80050f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f6:	4a20      	ldr	r2, [pc, #128]	@ (8005178 <HAL_UART_Transmit_DMA+0xd8>)
 80050f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fe:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <HAL_UART_Transmit_DMA+0xdc>)
 8005100:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005106:	2200      	movs	r2, #0
 8005108:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005116:	6819      	ldr	r1, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3304      	adds	r3, #4
 800511e:	461a      	mov	r2, r3
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	f7fe faa1 	bl	8003668 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800512e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	617b      	str	r3, [r7, #20]
   return(result);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005150:	627a      	str	r2, [r7, #36]	@ 0x24
 8005152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6a39      	ldr	r1, [r7, #32]
 8005156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	61fb      	str	r3, [r7, #28]
   return(result);
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e000      	b.n	800516a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3730      	adds	r7, #48	@ 0x30
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	08005869 	.word	0x08005869
 8005178:	08005903 	.word	0x08005903
 800517c:	08005a87 	.word	0x08005a87

08005180 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	4613      	mov	r3, r2
 800518c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b20      	cmp	r3, #32
 8005198:	d112      	bne.n	80051c0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_UART_Receive_DMA+0x26>
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e00b      	b.n	80051c2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	461a      	mov	r2, r3
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 fcb0 	bl	8005b1c <UART_Start_Receive_DMA>
 80051bc:	4603      	mov	r3, r0
 80051be:	e000      	b.n	80051c2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80051c0:	2302      	movs	r3, #2
  }
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b090      	sub	sp, #64	@ 0x40
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e0:	2b80      	cmp	r3, #128	@ 0x80
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b21      	cmp	r3, #33	@ 0x21
 80051f6:	d128      	bne.n	800524a <HAL_UART_DMAStop+0x80>
 80051f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d025      	beq.n	800524a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3314      	adds	r3, #20
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	623b      	str	r3, [r7, #32]
   return(result);
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005214:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3314      	adds	r3, #20
 800521c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800521e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e5      	bne.n	80051fe <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe fa6a 	bl	8003718 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fd03 	bl	8005c50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005254:	2b40      	cmp	r3, #64	@ 0x40
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b22      	cmp	r3, #34	@ 0x22
 800526a:	d128      	bne.n	80052be <HAL_UART_DMAStop+0xf4>
 800526c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d025      	beq.n	80052be <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3314      	adds	r3, #20
 8005278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	60fb      	str	r3, [r7, #12]
   return(result);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005288:	637b      	str	r3, [r7, #52]	@ 0x34
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005292:	61fa      	str	r2, [r7, #28]
 8005294:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	69b9      	ldr	r1, [r7, #24]
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	617b      	str	r3, [r7, #20]
   return(result);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe fa30 	bl	8003718 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fcf1 	bl	8005ca0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3740      	adds	r7, #64	@ 0x40
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b0ba      	sub	sp, #232	@ 0xe8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10f      	bne.n	800532e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d009      	beq.n	800532e <HAL_UART_IRQHandler+0x66>
 800531a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fd99 	bl	8005e5e <UART_Receive_IT>
      return;
 800532c:	e25b      	b.n	80057e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800532e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 80de 	beq.w	80054f4 <HAL_UART_IRQHandler+0x22c>
 8005338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005348:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80d1 	beq.w	80054f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <HAL_UART_IRQHandler+0xae>
 800535e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536e:	f043 0201 	orr.w	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <HAL_UART_IRQHandler+0xd2>
 8005382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005392:	f043 0202 	orr.w	r2, r3, #2
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <HAL_UART_IRQHandler+0xf6>
 80053a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b6:	f043 0204 	orr.w	r2, r3, #4
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d011      	beq.n	80053ee <HAL_UART_IRQHandler+0x126>
 80053ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d105      	bne.n	80053e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e6:	f043 0208 	orr.w	r2, r3, #8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 81f2 	beq.w	80057dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d008      	beq.n	8005416 <HAL_UART_IRQHandler+0x14e>
 8005404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fd24 	bl	8005e5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005420:	2b40      	cmp	r3, #64	@ 0x40
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d103      	bne.n	8005442 <HAL_UART_IRQHandler+0x17a>
 800543a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d04f      	beq.n	80054e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fc2c 	bl	8005ca0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005452:	2b40      	cmp	r3, #64	@ 0x40
 8005454:	d141      	bne.n	80054da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3314      	adds	r3, #20
 800545c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800546c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3314      	adds	r3, #20
 800547e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005482:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005486:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800548e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800549a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1d9      	bne.n	8005456 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d013      	beq.n	80054d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ae:	4a7e      	ldr	r2, [pc, #504]	@ (80056a8 <HAL_UART_IRQHandler+0x3e0>)
 80054b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe f99e 	bl	80037f8 <HAL_DMA_Abort_IT>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054cc:	4610      	mov	r0, r2
 80054ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	e00e      	b.n	80054f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f9b2 	bl	800583c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d8:	e00a      	b.n	80054f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9ae 	bl	800583c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e0:	e006      	b.n	80054f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9aa 	bl	800583c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054ee:	e175      	b.n	80057dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	bf00      	nop
    return;
 80054f2:	e173      	b.n	80057dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	f040 814f 	bne.w	800579c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 8148 	beq.w	800579c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800550c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8141 	beq.w	800579c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553a:	2b40      	cmp	r3, #64	@ 0x40
 800553c:	f040 80b6 	bne.w	80056ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800554c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8145 	beq.w	80057e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800555a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800555e:	429a      	cmp	r2, r3
 8005560:	f080 813e 	bcs.w	80057e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800556a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005576:	f000 8088 	beq.w	800568a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005590:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80055a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1d9      	bne.n	800557a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3314      	adds	r3, #20
 80055cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3314      	adds	r3, #20
 80055e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e1      	bne.n	80055c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3314      	adds	r3, #20
 8005608:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3314      	adds	r3, #20
 8005622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005626:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005628:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800562c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e3      	bne.n	8005602 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	330c      	adds	r3, #12
 800564e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800565a:	f023 0310 	bic.w	r3, r3, #16
 800565e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	330c      	adds	r3, #12
 8005668:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800566c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800566e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005672:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800567a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e3      	bne.n	8005648 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe f847 	bl	8003718 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005698:	b29b      	uxth	r3, r3
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	b29b      	uxth	r3, r3
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f8d5 	bl	8005850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056a6:	e09b      	b.n	80057e0 <HAL_UART_IRQHandler+0x518>
 80056a8:	08005d67 	.word	0x08005d67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 808e 	beq.w	80057e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80056c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 8089 	beq.w	80057e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80056f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80056f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e3      	bne.n	80056d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3314      	adds	r3, #20
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	623b      	str	r3, [r7, #32]
   return(result);
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3314      	adds	r3, #20
 800572a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800572e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005730:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e3      	bne.n	800570a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0310 	bic.w	r3, r3, #16
 8005766:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	330c      	adds	r3, #12
 8005770:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005774:	61fa      	str	r2, [r7, #28]
 8005776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	69b9      	ldr	r1, [r7, #24]
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	617b      	str	r3, [r7, #20]
   return(result);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e3      	bne.n	8005750 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800578e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f85b 	bl	8005850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800579a:	e023      	b.n	80057e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <HAL_UART_IRQHandler+0x4f4>
 80057a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 faea 	bl	8005d8e <UART_Transmit_IT>
    return;
 80057ba:	e014      	b.n	80057e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00e      	beq.n	80057e6 <HAL_UART_IRQHandler+0x51e>
 80057c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fb2a 	bl	8005e2e <UART_EndTransmit_IT>
    return;
 80057da:	e004      	b.n	80057e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80057dc:	bf00      	nop
 80057de:	e002      	b.n	80057e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80057e0:	bf00      	nop
 80057e2:	e000      	b.n	80057e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80057e4:	bf00      	nop
  }
}
 80057e6:	37e8      	adds	r7, #232	@ 0xe8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b090      	sub	sp, #64	@ 0x40
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005874:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005880:	2b00      	cmp	r3, #0
 8005882:	d137      	bne.n	80058f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005886:	2200      	movs	r2, #0
 8005888:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800588a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	623b      	str	r3, [r7, #32]
   return(result);
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3314      	adds	r3, #20
 80058a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e5      	bne.n	800588a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058de:	61fa      	str	r2, [r7, #28]
 80058e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	69b9      	ldr	r1, [r7, #24]
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	617b      	str	r3, [r7, #20]
   return(result);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058f2:	e002      	b.n	80058fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80058f6:	f7ff ff79 	bl	80057ec <HAL_UART_TxCpltCallback>
}
 80058fa:	bf00      	nop
 80058fc:	3740      	adds	r7, #64	@ 0x40
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7ff ff75 	bl	8005800 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b09c      	sub	sp, #112	@ 0x70
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d172      	bne.n	8005a20 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800593a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800593c:	2200      	movs	r2, #0
 800593e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005952:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005956:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005960:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005962:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005966:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800596e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e5      	bne.n	8005940 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3314      	adds	r3, #20
 800597a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005986:	f023 0301 	bic.w	r3, r3, #1
 800598a:	667b      	str	r3, [r7, #100]	@ 0x64
 800598c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3314      	adds	r3, #20
 8005992:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005994:	647a      	str	r2, [r7, #68]	@ 0x44
 8005996:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800599a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e5      	bne.n	8005974 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3314      	adds	r3, #20
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	623b      	str	r3, [r7, #32]
   return(result);
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059be:	663b      	str	r3, [r7, #96]	@ 0x60
 80059c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3314      	adds	r3, #20
 80059c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80059c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80059ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d119      	bne.n	8005a20 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0310 	bic.w	r3, r3, #16
 8005a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a0c:	61fa      	str	r2, [r7, #28]
 8005a0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	69b9      	ldr	r1, [r7, #24]
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	617b      	str	r3, [r7, #20]
   return(result);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e5      	bne.n	80059ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a22:	2200      	movs	r2, #0
 8005a24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d106      	bne.n	8005a3c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a32:	4619      	mov	r1, r3
 8005a34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a36:	f7ff ff0b 	bl	8005850 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a3a:	e002      	b.n	8005a42 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005a3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a3e:	f7ff fee9 	bl	8005814 <HAL_UART_RxCpltCallback>
}
 8005a42:	bf00      	nop
 8005a44:	3770      	adds	r7, #112	@ 0x70
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d108      	bne.n	8005a78 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	4619      	mov	r1, r3
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff feed 	bl	8005850 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a76:	e002      	b.n	8005a7e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7ff fed5 	bl	8005828 <HAL_UART_RxHalfCpltCallback>
}
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa2:	2b80      	cmp	r3, #128	@ 0x80
 8005aa4:	bf0c      	ite	eq
 8005aa6:	2301      	moveq	r3, #1
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b21      	cmp	r3, #33	@ 0x21
 8005ab8:	d108      	bne.n	8005acc <UART_DMAError+0x46>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005ac6:	68b8      	ldr	r0, [r7, #8]
 8005ac8:	f000 f8c2 	bl	8005c50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad6:	2b40      	cmp	r3, #64	@ 0x40
 8005ad8:	bf0c      	ite	eq
 8005ada:	2301      	moveq	r3, #1
 8005adc:	2300      	movne	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b22      	cmp	r3, #34	@ 0x22
 8005aec:	d108      	bne.n	8005b00 <UART_DMAError+0x7a>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005afa:	68b8      	ldr	r0, [r7, #8]
 8005afc:	f000 f8d0 	bl	8005ca0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b04:	f043 0210 	orr.w	r2, r3, #16
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b0c:	68b8      	ldr	r0, [r7, #8]
 8005b0e:	f7ff fe95 	bl	800583c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b12:	bf00      	nop
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b098      	sub	sp, #96	@ 0x60
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2222      	movs	r2, #34	@ 0x22
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b48:	4a3e      	ldr	r2, [pc, #248]	@ (8005c44 <UART_Start_Receive_DMA+0x128>)
 8005b4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b50:	4a3d      	ldr	r2, [pc, #244]	@ (8005c48 <UART_Start_Receive_DMA+0x12c>)
 8005b52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b58:	4a3c      	ldr	r2, [pc, #240]	@ (8005c4c <UART_Start_Receive_DMA+0x130>)
 8005b5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b60:	2200      	movs	r2, #0
 8005b62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b64:	f107 0308 	add.w	r3, r7, #8
 8005b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	88fb      	ldrh	r3, [r7, #6]
 8005b7c:	f7fd fd74 	bl	8003668 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d019      	beq.n	8005bd2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	330c      	adds	r3, #12
 8005bbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bbe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005bc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e5      	bne.n	8005b9e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3314      	adds	r3, #20
 8005bf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bf2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005bf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e5      	bne.n	8005bd2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3314      	adds	r3, #20
 8005c0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	617b      	str	r3, [r7, #20]
   return(result);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3314      	adds	r3, #20
 8005c24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c26:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6a39      	ldr	r1, [r7, #32]
 8005c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3760      	adds	r7, #96	@ 0x60
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	0800591f 	.word	0x0800591f
 8005c48:	08005a4b 	.word	0x08005a4b
 8005c4c:	08005a87 	.word	0x08005a87

08005c50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b089      	sub	sp, #36	@ 0x24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	330c      	adds	r3, #12
 8005c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	61ba      	str	r2, [r7, #24]
 8005c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6979      	ldr	r1, [r7, #20]
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	613b      	str	r3, [r7, #16]
   return(result);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e5      	bne.n	8005c58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005c94:	bf00      	nop
 8005c96:	3724      	adds	r7, #36	@ 0x24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b095      	sub	sp, #84	@ 0x54
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e5      	bne.n	8005ca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3314      	adds	r3, #20
 8005ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f023 0301 	bic.w	r3, r3, #1
 8005cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3314      	adds	r3, #20
 8005cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e5      	bne.n	8005cdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d119      	bne.n	8005d4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f023 0310 	bic.w	r3, r3, #16
 8005d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d38:	61ba      	str	r2, [r7, #24]
 8005d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6979      	ldr	r1, [r7, #20]
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	613b      	str	r3, [r7, #16]
   return(result);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d5a:	bf00      	nop
 8005d5c:	3754      	adds	r7, #84	@ 0x54
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff fd5b 	bl	800583c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b21      	cmp	r3, #33	@ 0x21
 8005da0:	d13e      	bne.n	8005e20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005daa:	d114      	bne.n	8005dd6 <UART_Transmit_IT+0x48>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d110      	bne.n	8005dd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	1c9a      	adds	r2, r3, #2
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	621a      	str	r2, [r3, #32]
 8005dd4:	e008      	b.n	8005de8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	1c59      	adds	r1, r3, #1
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6211      	str	r1, [r2, #32]
 8005de0:	781a      	ldrb	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	4619      	mov	r1, r3
 8005df6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10f      	bne.n	8005e1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e000      	b.n	8005e22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e20:	2302      	movs	r3, #2
  }
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff fccc 	bl	80057ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b08c      	sub	sp, #48	@ 0x30
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b22      	cmp	r3, #34	@ 0x22
 8005e70:	f040 80ae 	bne.w	8005fd0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e7c:	d117      	bne.n	8005eae <UART_Receive_IT+0x50>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d113      	bne.n	8005eae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	1c9a      	adds	r2, r3, #2
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	629a      	str	r2, [r3, #40]	@ 0x28
 8005eac:	e026      	b.n	8005efc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec0:	d007      	beq.n	8005ed2 <UART_Receive_IT+0x74>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <UART_Receive_IT+0x82>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	e008      	b.n	8005ef2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d15d      	bne.n	8005fcc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0220 	bic.w	r2, r2, #32
 8005f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695a      	ldr	r2, [r3, #20]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d135      	bne.n	8005fc2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f023 0310 	bic.w	r3, r3, #16
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f7c:	623a      	str	r2, [r7, #32]
 8005f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	69f9      	ldr	r1, [r7, #28]
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e5      	bne.n	8005f5c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	d10a      	bne.n	8005fb4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff fc48 	bl	8005850 <HAL_UARTEx_RxEventCallback>
 8005fc0:	e002      	b.n	8005fc8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff fc26 	bl	8005814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e002      	b.n	8005fd2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e000      	b.n	8005fd2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005fd0:	2302      	movs	r3, #2
  }
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3730      	adds	r7, #48	@ 0x30
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe0:	b0c0      	sub	sp, #256	@ 0x100
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff8:	68d9      	ldr	r1, [r3, #12]
 8005ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	ea40 0301 	orr.w	r3, r0, r1
 8006004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	431a      	orrs	r2, r3
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	431a      	orrs	r2, r3
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006034:	f021 010c 	bic.w	r1, r1, #12
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006042:	430b      	orrs	r3, r1
 8006044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006056:	6999      	ldr	r1, [r3, #24]
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	ea40 0301 	orr.w	r3, r0, r1
 8006062:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b8f      	ldr	r3, [pc, #572]	@ (80062a8 <UART_SetConfig+0x2cc>)
 800606c:	429a      	cmp	r2, r3
 800606e:	d005      	beq.n	800607c <UART_SetConfig+0xa0>
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b8d      	ldr	r3, [pc, #564]	@ (80062ac <UART_SetConfig+0x2d0>)
 8006078:	429a      	cmp	r2, r3
 800607a:	d104      	bne.n	8006086 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800607c:	f7fe fa54 	bl	8004528 <HAL_RCC_GetPCLK2Freq>
 8006080:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006084:	e003      	b.n	800608e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006086:	f7fe fa3b 	bl	8004500 <HAL_RCC_GetPCLK1Freq>
 800608a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006098:	f040 810c 	bne.w	80062b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800609c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060a0:	2200      	movs	r2, #0
 80060a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80060aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80060ae:	4622      	mov	r2, r4
 80060b0:	462b      	mov	r3, r5
 80060b2:	1891      	adds	r1, r2, r2
 80060b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80060b6:	415b      	adcs	r3, r3
 80060b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80060be:	4621      	mov	r1, r4
 80060c0:	eb12 0801 	adds.w	r8, r2, r1
 80060c4:	4629      	mov	r1, r5
 80060c6:	eb43 0901 	adc.w	r9, r3, r1
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060de:	4690      	mov	r8, r2
 80060e0:	4699      	mov	r9, r3
 80060e2:	4623      	mov	r3, r4
 80060e4:	eb18 0303 	adds.w	r3, r8, r3
 80060e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060ec:	462b      	mov	r3, r5
 80060ee:	eb49 0303 	adc.w	r3, r9, r3
 80060f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006102:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800610a:	460b      	mov	r3, r1
 800610c:	18db      	adds	r3, r3, r3
 800610e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006110:	4613      	mov	r3, r2
 8006112:	eb42 0303 	adc.w	r3, r2, r3
 8006116:	657b      	str	r3, [r7, #84]	@ 0x54
 8006118:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800611c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006120:	f7fa fdcc 	bl	8000cbc <__aeabi_uldivmod>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4b61      	ldr	r3, [pc, #388]	@ (80062b0 <UART_SetConfig+0x2d4>)
 800612a:	fba3 2302 	umull	r2, r3, r3, r2
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	011c      	lsls	r4, r3, #4
 8006132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006136:	2200      	movs	r2, #0
 8006138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800613c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006140:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006144:	4642      	mov	r2, r8
 8006146:	464b      	mov	r3, r9
 8006148:	1891      	adds	r1, r2, r2
 800614a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800614c:	415b      	adcs	r3, r3
 800614e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006154:	4641      	mov	r1, r8
 8006156:	eb12 0a01 	adds.w	sl, r2, r1
 800615a:	4649      	mov	r1, r9
 800615c:	eb43 0b01 	adc.w	fp, r3, r1
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800616c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006174:	4692      	mov	sl, r2
 8006176:	469b      	mov	fp, r3
 8006178:	4643      	mov	r3, r8
 800617a:	eb1a 0303 	adds.w	r3, sl, r3
 800617e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006182:	464b      	mov	r3, r9
 8006184:	eb4b 0303 	adc.w	r3, fp, r3
 8006188:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006198:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800619c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061a0:	460b      	mov	r3, r1
 80061a2:	18db      	adds	r3, r3, r3
 80061a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80061a6:	4613      	mov	r3, r2
 80061a8:	eb42 0303 	adc.w	r3, r2, r3
 80061ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80061b6:	f7fa fd81 	bl	8000cbc <__aeabi_uldivmod>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4611      	mov	r1, r2
 80061c0:	4b3b      	ldr	r3, [pc, #236]	@ (80062b0 <UART_SetConfig+0x2d4>)
 80061c2:	fba3 2301 	umull	r2, r3, r3, r1
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	2264      	movs	r2, #100	@ 0x64
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
 80061ce:	1acb      	subs	r3, r1, r3
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061d6:	4b36      	ldr	r3, [pc, #216]	@ (80062b0 <UART_SetConfig+0x2d4>)
 80061d8:	fba3 2302 	umull	r2, r3, r3, r2
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80061e4:	441c      	add	r4, r3
 80061e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80061f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	1891      	adds	r1, r2, r2
 80061fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006200:	415b      	adcs	r3, r3
 8006202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006208:	4641      	mov	r1, r8
 800620a:	1851      	adds	r1, r2, r1
 800620c:	6339      	str	r1, [r7, #48]	@ 0x30
 800620e:	4649      	mov	r1, r9
 8006210:	414b      	adcs	r3, r1
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006220:	4659      	mov	r1, fp
 8006222:	00cb      	lsls	r3, r1, #3
 8006224:	4651      	mov	r1, sl
 8006226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800622a:	4651      	mov	r1, sl
 800622c:	00ca      	lsls	r2, r1, #3
 800622e:	4610      	mov	r0, r2
 8006230:	4619      	mov	r1, r3
 8006232:	4603      	mov	r3, r0
 8006234:	4642      	mov	r2, r8
 8006236:	189b      	adds	r3, r3, r2
 8006238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800623c:	464b      	mov	r3, r9
 800623e:	460a      	mov	r2, r1
 8006240:	eb42 0303 	adc.w	r3, r2, r3
 8006244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006254:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006258:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800625c:	460b      	mov	r3, r1
 800625e:	18db      	adds	r3, r3, r3
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006262:	4613      	mov	r3, r2
 8006264:	eb42 0303 	adc.w	r3, r2, r3
 8006268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800626a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800626e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006272:	f7fa fd23 	bl	8000cbc <__aeabi_uldivmod>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4b0d      	ldr	r3, [pc, #52]	@ (80062b0 <UART_SetConfig+0x2d4>)
 800627c:	fba3 1302 	umull	r1, r3, r3, r2
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	2164      	movs	r1, #100	@ 0x64
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	3332      	adds	r3, #50	@ 0x32
 800628e:	4a08      	ldr	r2, [pc, #32]	@ (80062b0 <UART_SetConfig+0x2d4>)
 8006290:	fba2 2303 	umull	r2, r3, r2, r3
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	f003 0207 	and.w	r2, r3, #7
 800629a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4422      	add	r2, r4
 80062a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062a4:	e106      	b.n	80064b4 <UART_SetConfig+0x4d8>
 80062a6:	bf00      	nop
 80062a8:	40011000 	.word	0x40011000
 80062ac:	40011400 	.word	0x40011400
 80062b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80062c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80062c6:	4642      	mov	r2, r8
 80062c8:	464b      	mov	r3, r9
 80062ca:	1891      	adds	r1, r2, r2
 80062cc:	6239      	str	r1, [r7, #32]
 80062ce:	415b      	adcs	r3, r3
 80062d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80062d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062d6:	4641      	mov	r1, r8
 80062d8:	1854      	adds	r4, r2, r1
 80062da:	4649      	mov	r1, r9
 80062dc:	eb43 0501 	adc.w	r5, r3, r1
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	00eb      	lsls	r3, r5, #3
 80062ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ee:	00e2      	lsls	r2, r4, #3
 80062f0:	4614      	mov	r4, r2
 80062f2:	461d      	mov	r5, r3
 80062f4:	4643      	mov	r3, r8
 80062f6:	18e3      	adds	r3, r4, r3
 80062f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062fc:	464b      	mov	r3, r9
 80062fe:	eb45 0303 	adc.w	r3, r5, r3
 8006302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006312:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006322:	4629      	mov	r1, r5
 8006324:	008b      	lsls	r3, r1, #2
 8006326:	4621      	mov	r1, r4
 8006328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800632c:	4621      	mov	r1, r4
 800632e:	008a      	lsls	r2, r1, #2
 8006330:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006334:	f7fa fcc2 	bl	8000cbc <__aeabi_uldivmod>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4b60      	ldr	r3, [pc, #384]	@ (80064c0 <UART_SetConfig+0x4e4>)
 800633e:	fba3 2302 	umull	r2, r3, r3, r2
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	011c      	lsls	r4, r3, #4
 8006346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800634a:	2200      	movs	r2, #0
 800634c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006350:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006354:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006358:	4642      	mov	r2, r8
 800635a:	464b      	mov	r3, r9
 800635c:	1891      	adds	r1, r2, r2
 800635e:	61b9      	str	r1, [r7, #24]
 8006360:	415b      	adcs	r3, r3
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006368:	4641      	mov	r1, r8
 800636a:	1851      	adds	r1, r2, r1
 800636c:	6139      	str	r1, [r7, #16]
 800636e:	4649      	mov	r1, r9
 8006370:	414b      	adcs	r3, r1
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006380:	4659      	mov	r1, fp
 8006382:	00cb      	lsls	r3, r1, #3
 8006384:	4651      	mov	r1, sl
 8006386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800638a:	4651      	mov	r1, sl
 800638c:	00ca      	lsls	r2, r1, #3
 800638e:	4610      	mov	r0, r2
 8006390:	4619      	mov	r1, r3
 8006392:	4603      	mov	r3, r0
 8006394:	4642      	mov	r2, r8
 8006396:	189b      	adds	r3, r3, r2
 8006398:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800639c:	464b      	mov	r3, r9
 800639e:	460a      	mov	r2, r1
 80063a0:	eb42 0303 	adc.w	r3, r2, r3
 80063a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80063c0:	4649      	mov	r1, r9
 80063c2:	008b      	lsls	r3, r1, #2
 80063c4:	4641      	mov	r1, r8
 80063c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ca:	4641      	mov	r1, r8
 80063cc:	008a      	lsls	r2, r1, #2
 80063ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063d2:	f7fa fc73 	bl	8000cbc <__aeabi_uldivmod>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4611      	mov	r1, r2
 80063dc:	4b38      	ldr	r3, [pc, #224]	@ (80064c0 <UART_SetConfig+0x4e4>)
 80063de:	fba3 2301 	umull	r2, r3, r3, r1
 80063e2:	095b      	lsrs	r3, r3, #5
 80063e4:	2264      	movs	r2, #100	@ 0x64
 80063e6:	fb02 f303 	mul.w	r3, r2, r3
 80063ea:	1acb      	subs	r3, r1, r3
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	3332      	adds	r3, #50	@ 0x32
 80063f0:	4a33      	ldr	r2, [pc, #204]	@ (80064c0 <UART_SetConfig+0x4e4>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063fc:	441c      	add	r4, r3
 80063fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006402:	2200      	movs	r2, #0
 8006404:	673b      	str	r3, [r7, #112]	@ 0x70
 8006406:	677a      	str	r2, [r7, #116]	@ 0x74
 8006408:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800640c:	4642      	mov	r2, r8
 800640e:	464b      	mov	r3, r9
 8006410:	1891      	adds	r1, r2, r2
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	415b      	adcs	r3, r3
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800641c:	4641      	mov	r1, r8
 800641e:	1851      	adds	r1, r2, r1
 8006420:	6039      	str	r1, [r7, #0]
 8006422:	4649      	mov	r1, r9
 8006424:	414b      	adcs	r3, r1
 8006426:	607b      	str	r3, [r7, #4]
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006434:	4659      	mov	r1, fp
 8006436:	00cb      	lsls	r3, r1, #3
 8006438:	4651      	mov	r1, sl
 800643a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800643e:	4651      	mov	r1, sl
 8006440:	00ca      	lsls	r2, r1, #3
 8006442:	4610      	mov	r0, r2
 8006444:	4619      	mov	r1, r3
 8006446:	4603      	mov	r3, r0
 8006448:	4642      	mov	r2, r8
 800644a:	189b      	adds	r3, r3, r2
 800644c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800644e:	464b      	mov	r3, r9
 8006450:	460a      	mov	r2, r1
 8006452:	eb42 0303 	adc.w	r3, r2, r3
 8006456:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	663b      	str	r3, [r7, #96]	@ 0x60
 8006462:	667a      	str	r2, [r7, #100]	@ 0x64
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006470:	4649      	mov	r1, r9
 8006472:	008b      	lsls	r3, r1, #2
 8006474:	4641      	mov	r1, r8
 8006476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800647a:	4641      	mov	r1, r8
 800647c:	008a      	lsls	r2, r1, #2
 800647e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006482:	f7fa fc1b 	bl	8000cbc <__aeabi_uldivmod>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4b0d      	ldr	r3, [pc, #52]	@ (80064c0 <UART_SetConfig+0x4e4>)
 800648c:	fba3 1302 	umull	r1, r3, r3, r2
 8006490:	095b      	lsrs	r3, r3, #5
 8006492:	2164      	movs	r1, #100	@ 0x64
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	3332      	adds	r3, #50	@ 0x32
 800649e:	4a08      	ldr	r2, [pc, #32]	@ (80064c0 <UART_SetConfig+0x4e4>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	f003 020f 	and.w	r2, r3, #15
 80064aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4422      	add	r2, r4
 80064b2:	609a      	str	r2, [r3, #8]
}
 80064b4:	bf00      	nop
 80064b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80064ba:	46bd      	mov	sp, r7
 80064bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064c0:	51eb851f 	.word	0x51eb851f

080064c4 <__NVIC_SetPriority>:
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	6039      	str	r1, [r7, #0]
 80064ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	db0a      	blt.n	80064ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	490c      	ldr	r1, [pc, #48]	@ (8006510 <__NVIC_SetPriority+0x4c>)
 80064de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e2:	0112      	lsls	r2, r2, #4
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	440b      	add	r3, r1
 80064e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80064ec:	e00a      	b.n	8006504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	4908      	ldr	r1, [pc, #32]	@ (8006514 <__NVIC_SetPriority+0x50>)
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	3b04      	subs	r3, #4
 80064fc:	0112      	lsls	r2, r2, #4
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	440b      	add	r3, r1
 8006502:	761a      	strb	r2, [r3, #24]
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	e000e100 	.word	0xe000e100
 8006514:	e000ed00 	.word	0xe000ed00

08006518 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800651c:	4b05      	ldr	r3, [pc, #20]	@ (8006534 <SysTick_Handler+0x1c>)
 800651e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006520:	f001 fd40 	bl	8007fa4 <xTaskGetSchedulerState>
 8006524:	4603      	mov	r3, r0
 8006526:	2b01      	cmp	r3, #1
 8006528:	d001      	beq.n	800652e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800652a:	f002 fb35 	bl	8008b98 <xPortSysTickHandler>
  }
}
 800652e:	bf00      	nop
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	e000e010 	.word	0xe000e010

08006538 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800653c:	2100      	movs	r1, #0
 800653e:	f06f 0004 	mvn.w	r0, #4
 8006542:	f7ff ffbf 	bl	80064c4 <__NVIC_SetPriority>
#endif
}
 8006546:	bf00      	nop
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006552:	f3ef 8305 	mrs	r3, IPSR
 8006556:	603b      	str	r3, [r7, #0]
  return(result);
 8006558:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800655e:	f06f 0305 	mvn.w	r3, #5
 8006562:	607b      	str	r3, [r7, #4]
 8006564:	e00c      	b.n	8006580 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006566:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <osKernelInitialize+0x44>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d105      	bne.n	800657a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800656e:	4b08      	ldr	r3, [pc, #32]	@ (8006590 <osKernelInitialize+0x44>)
 8006570:	2201      	movs	r2, #1
 8006572:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006574:	2300      	movs	r3, #0
 8006576:	607b      	str	r3, [r7, #4]
 8006578:	e002      	b.n	8006580 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800657a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800657e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006580:	687b      	ldr	r3, [r7, #4]
}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	20008738 	.word	0x20008738

08006594 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800659a:	f3ef 8305 	mrs	r3, IPSR
 800659e:	603b      	str	r3, [r7, #0]
  return(result);
 80065a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80065a6:	f06f 0305 	mvn.w	r3, #5
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	e010      	b.n	80065d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80065ae:	4b0b      	ldr	r3, [pc, #44]	@ (80065dc <osKernelStart+0x48>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d109      	bne.n	80065ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80065b6:	f7ff ffbf 	bl	8006538 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80065ba:	4b08      	ldr	r3, [pc, #32]	@ (80065dc <osKernelStart+0x48>)
 80065bc:	2202      	movs	r2, #2
 80065be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80065c0:	f001 f87a 	bl	80076b8 <vTaskStartScheduler>
      stat = osOK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	607b      	str	r3, [r7, #4]
 80065c8:	e002      	b.n	80065d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065d0:	687b      	ldr	r3, [r7, #4]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20008738 	.word	0x20008738

080065e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08e      	sub	sp, #56	@ 0x38
 80065e4:	af04      	add	r7, sp, #16
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065f0:	f3ef 8305 	mrs	r3, IPSR
 80065f4:	617b      	str	r3, [r7, #20]
  return(result);
 80065f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d17e      	bne.n	80066fa <osThreadNew+0x11a>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d07b      	beq.n	80066fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006606:	2318      	movs	r3, #24
 8006608:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800660e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006612:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d045      	beq.n	80066a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <osThreadNew+0x48>
        name = attr->name;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <osThreadNew+0x6e>
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	2b38      	cmp	r3, #56	@ 0x38
 8006640:	d805      	bhi.n	800664e <osThreadNew+0x6e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <osThreadNew+0x72>
        return (NULL);
 800664e:	2300      	movs	r3, #0
 8006650:	e054      	b.n	80066fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00e      	beq.n	8006688 <osThreadNew+0xa8>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006670:	d90a      	bls.n	8006688 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006676:	2b00      	cmp	r3, #0
 8006678:	d006      	beq.n	8006688 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <osThreadNew+0xa8>
        mem = 1;
 8006682:	2301      	movs	r3, #1
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	e010      	b.n	80066aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10c      	bne.n	80066aa <osThreadNew+0xca>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d108      	bne.n	80066aa <osThreadNew+0xca>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <osThreadNew+0xca>
          mem = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e001      	b.n	80066aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d110      	bne.n	80066d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066b8:	9202      	str	r2, [sp, #8]
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	6a3a      	ldr	r2, [r7, #32]
 80066c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 fe1a 	bl	8007300 <xTaskCreateStatic>
 80066cc:	4603      	mov	r3, r0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	e013      	b.n	80066fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d110      	bne.n	80066fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	b29a      	uxth	r2, r3
 80066dc:	f107 0310 	add.w	r3, r7, #16
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 fe68 	bl	80073c0 <xTaskCreate>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d001      	beq.n	80066fa <osThreadNew+0x11a>
            hTask = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066fa:	693b      	ldr	r3, [r7, #16]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3728      	adds	r7, #40	@ 0x28
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800670c:	f3ef 8305 	mrs	r3, IPSR
 8006710:	60bb      	str	r3, [r7, #8]
  return(result);
 8006712:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <osDelay+0x1c>
    stat = osErrorISR;
 8006718:	f06f 0305 	mvn.w	r3, #5
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e007      	b.n	8006730 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <osDelay+0x2c>
      vTaskDelay(ticks);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 ff8e 	bl	800764c <vTaskDelay>
    }
  }

  return (stat);
 8006730:	68fb      	ldr	r3, [r7, #12]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4a07      	ldr	r2, [pc, #28]	@ (8006768 <vApplicationGetIdleTaskMemory+0x2c>)
 800674c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4a06      	ldr	r2, [pc, #24]	@ (800676c <vApplicationGetIdleTaskMemory+0x30>)
 8006752:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2280      	movs	r2, #128	@ 0x80
 8006758:	601a      	str	r2, [r3, #0]
}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	2000873c 	.word	0x2000873c
 800676c:	20008798 	.word	0x20008798

08006770 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4a07      	ldr	r2, [pc, #28]	@ (800679c <vApplicationGetTimerTaskMemory+0x2c>)
 8006780:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4a06      	ldr	r2, [pc, #24]	@ (80067a0 <vApplicationGetTimerTaskMemory+0x30>)
 8006786:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800678e:	601a      	str	r2, [r3, #0]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	20008998 	.word	0x20008998
 80067a0:	200089f4 	.word	0x200089f4

080067a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f103 0208 	add.w	r2, r3, #8
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f103 0208 	add.w	r2, r3, #8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f103 0208 	add.w	r2, r3, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	601a      	str	r2, [r3, #0]
}
 800683a:	bf00      	nop
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800685c:	d103      	bne.n	8006866 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e00c      	b.n	8006880 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3308      	adds	r3, #8
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e002      	b.n	8006874 <vListInsert+0x2e>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	429a      	cmp	r2, r3
 800687e:	d2f6      	bcs.n	800686e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]
}
 80068ac:	bf00      	nop
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6892      	ldr	r2, [r2, #8]
 80068ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6852      	ldr	r2, [r2, #4]
 80068d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d103      	bne.n	80068ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	1e5a      	subs	r2, r3, #1
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10b      	bne.n	8006938 <xQueueGenericReset+0x2c>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60bb      	str	r3, [r7, #8]
}
 8006932:	bf00      	nop
 8006934:	bf00      	nop
 8006936:	e7fd      	b.n	8006934 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006938:	f002 f89e 	bl	8008a78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006944:	68f9      	ldr	r1, [r7, #12]
 8006946:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006968:	3b01      	subs	r3, #1
 800696a:	68f9      	ldr	r1, [r7, #12]
 800696c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800696e:	fb01 f303 	mul.w	r3, r1, r3
 8006972:	441a      	add	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	22ff      	movs	r2, #255	@ 0xff
 800697c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	22ff      	movs	r2, #255	@ 0xff
 8006984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d114      	bne.n	80069b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01a      	beq.n	80069cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3310      	adds	r3, #16
 800699a:	4618      	mov	r0, r3
 800699c:	f001 f91a 	bl	8007bd4 <xTaskRemoveFromEventList>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d012      	beq.n	80069cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069a6:	4b0d      	ldr	r3, [pc, #52]	@ (80069dc <xQueueGenericReset+0xd0>)
 80069a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	e009      	b.n	80069cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3310      	adds	r3, #16
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff fef1 	bl	80067a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3324      	adds	r3, #36	@ 0x24
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff feec 	bl	80067a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069cc:	f002 f886 	bl	8008adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069d0:	2301      	movs	r3, #1
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08e      	sub	sp, #56	@ 0x38
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10b      	bne.n	8006a0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a06:	bf00      	nop
 8006a08:	bf00      	nop
 8006a0a:	e7fd      	b.n	8006a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10b      	bne.n	8006a2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <xQueueGenericCreateStatic+0x56>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <xQueueGenericCreateStatic+0x5a>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <xQueueGenericCreateStatic+0x5c>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10b      	bne.n	8006a58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	623b      	str	r3, [r7, #32]
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d102      	bne.n	8006a64 <xQueueGenericCreateStatic+0x84>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <xQueueGenericCreateStatic+0x88>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <xQueueGenericCreateStatic+0x8a>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10b      	bne.n	8006a86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	61fb      	str	r3, [r7, #28]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a86:	2350      	movs	r3, #80	@ 0x50
 8006a88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2b50      	cmp	r3, #80	@ 0x50
 8006a8e:	d00b      	beq.n	8006aa8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	61bb      	str	r3, [r7, #24]
}
 8006aa2:	bf00      	nop
 8006aa4:	bf00      	nop
 8006aa6:	e7fd      	b.n	8006aa4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006aa8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00d      	beq.n	8006ad0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006abc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f805 	bl	8006ada <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3730      	adds	r7, #48	@ 0x30
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d103      	bne.n	8006af6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	e002      	b.n	8006afc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b08:	2101      	movs	r1, #1
 8006b0a:	69b8      	ldr	r0, [r7, #24]
 8006b0c:	f7ff fefe 	bl	800690c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b18:	bf00      	nop
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	@ 0x38
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <xQueueGenericSend+0x34>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	e7fd      	b.n	8006b50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <xQueueGenericSend+0x42>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <xQueueGenericSend+0x46>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <xQueueGenericSend+0x48>
 8006b66:	2300      	movs	r3, #0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10b      	bne.n	8006b84 <xQueueGenericSend+0x64>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	e7fd      	b.n	8006b80 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d103      	bne.n	8006b92 <xQueueGenericSend+0x72>
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <xQueueGenericSend+0x76>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueGenericSend+0x78>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10b      	bne.n	8006bb4 <xQueueGenericSend+0x94>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	623b      	str	r3, [r7, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bb4:	f001 f9f6 	bl	8007fa4 <xTaskGetSchedulerState>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <xQueueGenericSend+0xa4>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <xQueueGenericSend+0xa8>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <xQueueGenericSend+0xaa>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10b      	bne.n	8006be6 <xQueueGenericSend+0xc6>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	61fb      	str	r3, [r7, #28]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006be6:	f001 ff47 	bl	8008a78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d302      	bcc.n	8006bfc <xQueueGenericSend+0xdc>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d129      	bne.n	8006c50 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c02:	f000 fa0f 	bl	8007024 <prvCopyDataToQueue>
 8006c06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d010      	beq.n	8006c32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	3324      	adds	r3, #36	@ 0x24
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 ffdd 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d013      	beq.n	8006c48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c20:	4b3f      	ldr	r3, [pc, #252]	@ (8006d20 <xQueueGenericSend+0x200>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	e00a      	b.n	8006c48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c38:	4b39      	ldr	r3, [pc, #228]	@ (8006d20 <xQueueGenericSend+0x200>)
 8006c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c48:	f001 ff48 	bl	8008adc <vPortExitCritical>
				return pdPASS;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e063      	b.n	8006d18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c56:	f001 ff41 	bl	8008adc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e05c      	b.n	8006d18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d106      	bne.n	8006c72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c64:	f107 0314 	add.w	r3, r7, #20
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f001 f83f 	bl	8007cec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c72:	f001 ff33 	bl	8008adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c76:	f000 fd87 	bl	8007788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c7a:	f001 fefd 	bl	8008a78 <vPortEnterCritical>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c84:	b25b      	sxtb	r3, r3
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c8a:	d103      	bne.n	8006c94 <xQueueGenericSend+0x174>
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c9a:	b25b      	sxtb	r3, r3
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ca0:	d103      	bne.n	8006caa <xQueueGenericSend+0x18a>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006caa:	f001 ff17 	bl	8008adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cae:	1d3a      	adds	r2, r7, #4
 8006cb0:	f107 0314 	add.w	r3, r7, #20
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 f82e 	bl	8007d18 <xTaskCheckForTimeOut>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d124      	bne.n	8006d0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cc4:	f000 faa6 	bl	8007214 <prvIsQueueFull>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d018      	beq.n	8006d00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	3310      	adds	r3, #16
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 ff2a 	bl	8007b30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cde:	f000 fa31 	bl	8007144 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ce2:	f000 fd5f 	bl	80077a4 <xTaskResumeAll>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f47f af7c 	bne.w	8006be6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006cee:	4b0c      	ldr	r3, [pc, #48]	@ (8006d20 <xQueueGenericSend+0x200>)
 8006cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	e772      	b.n	8006be6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d02:	f000 fa1f 	bl	8007144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d06:	f000 fd4d 	bl	80077a4 <xTaskResumeAll>
 8006d0a:	e76c      	b.n	8006be6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d0e:	f000 fa19 	bl	8007144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d12:	f000 fd47 	bl	80077a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3738      	adds	r7, #56	@ 0x38
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	e000ed04 	.word	0xe000ed04

08006d24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b090      	sub	sp, #64	@ 0x40
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10b      	bne.n	8006d54 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d4e:	bf00      	nop
 8006d50:	bf00      	nop
 8006d52:	e7fd      	b.n	8006d50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d103      	bne.n	8006d62 <xQueueGenericSendFromISR+0x3e>
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <xQueueGenericSendFromISR+0x42>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <xQueueGenericSendFromISR+0x44>
 8006d66:	2300      	movs	r3, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10b      	bne.n	8006d84 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d7e:	bf00      	nop
 8006d80:	bf00      	nop
 8006d82:	e7fd      	b.n	8006d80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d103      	bne.n	8006d92 <xQueueGenericSendFromISR+0x6e>
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <xQueueGenericSendFromISR+0x72>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <xQueueGenericSendFromISR+0x74>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	623b      	str	r3, [r7, #32]
}
 8006dae:	bf00      	nop
 8006db0:	bf00      	nop
 8006db2:	e7fd      	b.n	8006db0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006db4:	f001 ff40 	bl	8008c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006db8:	f3ef 8211 	mrs	r2, BASEPRI
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	61fa      	str	r2, [r7, #28]
 8006dce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dd2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d302      	bcc.n	8006de6 <xQueueGenericSendFromISR+0xc2>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d12f      	bne.n	8006e46 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006dfc:	f000 f912 	bl	8007024 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e00:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e08:	d112      	bne.n	8006e30 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d016      	beq.n	8006e40 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e14:	3324      	adds	r3, #36	@ 0x24
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fedc 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00e      	beq.n	8006e40 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e007      	b.n	8006e40 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e34:	3301      	adds	r3, #1
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	b25a      	sxtb	r2, r3
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006e40:	2301      	movs	r3, #1
 8006e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006e44:	e001      	b.n	8006e4a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3740      	adds	r7, #64	@ 0x40
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08c      	sub	sp, #48	@ 0x30
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10b      	bne.n	8006e92 <xQueueReceive+0x32>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	623b      	str	r3, [r7, #32]
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	e7fd      	b.n	8006e8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d103      	bne.n	8006ea0 <xQueueReceive+0x40>
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <xQueueReceive+0x44>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e000      	b.n	8006ea6 <xQueueReceive+0x46>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10b      	bne.n	8006ec2 <xQueueReceive+0x62>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	61fb      	str	r3, [r7, #28]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ec2:	f001 f86f 	bl	8007fa4 <xTaskGetSchedulerState>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <xQueueReceive+0x72>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <xQueueReceive+0x76>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e000      	b.n	8006ed8 <xQueueReceive+0x78>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <xQueueReceive+0x94>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	61bb      	str	r3, [r7, #24]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ef4:	f001 fdc0 	bl	8008a78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01f      	beq.n	8006f44 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f08:	f000 f8f6 	bl	80070f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	1e5a      	subs	r2, r3, #1
 8006f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f12:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00f      	beq.n	8006f3c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1e:	3310      	adds	r3, #16
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fe57 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8007020 <xQueueReceive+0x1c0>)
 8006f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f3c:	f001 fdce 	bl	8008adc <vPortExitCritical>
				return pdPASS;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e069      	b.n	8007018 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d103      	bne.n	8006f52 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f4a:	f001 fdc7 	bl	8008adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e062      	b.n	8007018 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d106      	bne.n	8006f66 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f58:	f107 0310 	add.w	r3, r7, #16
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fec5 	bl	8007cec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f62:	2301      	movs	r3, #1
 8006f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f66:	f001 fdb9 	bl	8008adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f6a:	f000 fc0d 	bl	8007788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f6e:	f001 fd83 	bl	8008a78 <vPortEnterCritical>
 8006f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f7e:	d103      	bne.n	8006f88 <xQueueReceive+0x128>
 8006f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f8e:	b25b      	sxtb	r3, r3
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f94:	d103      	bne.n	8006f9e <xQueueReceive+0x13e>
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f9e:	f001 fd9d 	bl	8008adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fa2:	1d3a      	adds	r2, r7, #4
 8006fa4:	f107 0310 	add.w	r3, r7, #16
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 feb4 	bl	8007d18 <xTaskCheckForTimeOut>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d123      	bne.n	8006ffe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fb8:	f000 f916 	bl	80071e8 <prvIsQueueEmpty>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d017      	beq.n	8006ff2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc4:	3324      	adds	r3, #36	@ 0x24
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fdb0 	bl	8007b30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fd2:	f000 f8b7 	bl	8007144 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fd6:	f000 fbe5 	bl	80077a4 <xTaskResumeAll>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d189      	bne.n	8006ef4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8007020 <xQueueReceive+0x1c0>)
 8006fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	e780      	b.n	8006ef4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ff4:	f000 f8a6 	bl	8007144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ff8:	f000 fbd4 	bl	80077a4 <xTaskResumeAll>
 8006ffc:	e77a      	b.n	8006ef4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007000:	f000 f8a0 	bl	8007144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007004:	f000 fbce 	bl	80077a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007008:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800700a:	f000 f8ed 	bl	80071e8 <prvIsQueueEmpty>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	f43f af6f 	beq.w	8006ef4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007016:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007018:	4618      	mov	r0, r3
 800701a:	3730      	adds	r7, #48	@ 0x30
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	e000ed04 	.word	0xe000ed04

08007024 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007038:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10d      	bne.n	800705e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d14d      	bne.n	80070e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 ffc6 	bl	8007fe0 <xTaskPriorityDisinherit>
 8007054:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	609a      	str	r2, [r3, #8]
 800705c:	e043      	b.n	80070e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d119      	bne.n	8007098 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6858      	ldr	r0, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706c:	461a      	mov	r2, r3
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	f011 ff31 	bl	8018ed6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707c:	441a      	add	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	d32b      	bcc.n	80070e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	605a      	str	r2, [r3, #4]
 8007096:	e026      	b.n	80070e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68d8      	ldr	r0, [r3, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a0:	461a      	mov	r2, r3
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	f011 ff17 	bl	8018ed6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b0:	425b      	negs	r3, r3
 80070b2:	441a      	add	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d207      	bcs.n	80070d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070cc:	425b      	negs	r3, r3
 80070ce:	441a      	add	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d105      	bne.n	80070e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80070ee:	697b      	ldr	r3, [r7, #20]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d018      	beq.n	800713c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007112:	441a      	add	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	429a      	cmp	r2, r3
 8007122:	d303      	bcc.n	800712c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68d9      	ldr	r1, [r3, #12]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007134:	461a      	mov	r2, r3
 8007136:	6838      	ldr	r0, [r7, #0]
 8007138:	f011 fecd 	bl	8018ed6 <memcpy>
	}
}
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800714c:	f001 fc94 	bl	8008a78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007156:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007158:	e011      	b.n	800717e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715e:	2b00      	cmp	r3, #0
 8007160:	d012      	beq.n	8007188 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3324      	adds	r3, #36	@ 0x24
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fd34 	bl	8007bd4 <xTaskRemoveFromEventList>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007172:	f000 fe35 	bl	8007de0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	3b01      	subs	r3, #1
 800717a:	b2db      	uxtb	r3, r3
 800717c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800717e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007182:	2b00      	cmp	r3, #0
 8007184:	dce9      	bgt.n	800715a <prvUnlockQueue+0x16>
 8007186:	e000      	b.n	800718a <prvUnlockQueue+0x46>
					break;
 8007188:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	22ff      	movs	r2, #255	@ 0xff
 800718e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007192:	f001 fca3 	bl	8008adc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007196:	f001 fc6f 	bl	8008a78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071a2:	e011      	b.n	80071c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d012      	beq.n	80071d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3310      	adds	r3, #16
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 fd0f 	bl	8007bd4 <xTaskRemoveFromEventList>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071bc:	f000 fe10 	bl	8007de0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	dce9      	bgt.n	80071a4 <prvUnlockQueue+0x60>
 80071d0:	e000      	b.n	80071d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	22ff      	movs	r2, #255	@ 0xff
 80071d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80071dc:	f001 fc7e 	bl	8008adc <vPortExitCritical>
}
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071f0:	f001 fc42 	bl	8008a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071fc:	2301      	movs	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	e001      	b.n	8007206 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007206:	f001 fc69 	bl	8008adc <vPortExitCritical>

	return xReturn;
 800720a:	68fb      	ldr	r3, [r7, #12]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800721c:	f001 fc2c 	bl	8008a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007228:	429a      	cmp	r2, r3
 800722a:	d102      	bne.n	8007232 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800722c:	2301      	movs	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	e001      	b.n	8007236 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007236:	f001 fc51 	bl	8008adc <vPortExitCritical>

	return xReturn;
 800723a:	68fb      	ldr	r3, [r7, #12]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e014      	b.n	800727e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007254:	4a0f      	ldr	r2, [pc, #60]	@ (8007294 <vQueueAddToRegistry+0x50>)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007260:	490c      	ldr	r1, [pc, #48]	@ (8007294 <vQueueAddToRegistry+0x50>)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800726a:	4a0a      	ldr	r2, [pc, #40]	@ (8007294 <vQueueAddToRegistry+0x50>)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	4413      	add	r3, r2
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007276:	e006      	b.n	8007286 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3301      	adds	r3, #1
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b07      	cmp	r3, #7
 8007282:	d9e7      	bls.n	8007254 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20008df4 	.word	0x20008df4

08007298 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072a8:	f001 fbe6 	bl	8008a78 <vPortEnterCritical>
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072b2:	b25b      	sxtb	r3, r3
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072b8:	d103      	bne.n	80072c2 <vQueueWaitForMessageRestricted+0x2a>
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072c8:	b25b      	sxtb	r3, r3
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072ce:	d103      	bne.n	80072d8 <vQueueWaitForMessageRestricted+0x40>
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072d8:	f001 fc00 	bl	8008adc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d106      	bne.n	80072f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	3324      	adds	r3, #36	@ 0x24
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fc45 	bl	8007b7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072f2:	6978      	ldr	r0, [r7, #20]
 80072f4:	f7ff ff26 	bl	8007144 <prvUnlockQueue>
	}
 80072f8:	bf00      	nop
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08e      	sub	sp, #56	@ 0x38
 8007304:	af04      	add	r7, sp, #16
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800730e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10b      	bne.n	800732c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	623b      	str	r3, [r7, #32]
}
 8007326:	bf00      	nop
 8007328:	bf00      	nop
 800732a:	e7fd      	b.n	8007328 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	61fb      	str	r3, [r7, #28]
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800734a:	235c      	movs	r3, #92	@ 0x5c
 800734c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	2b5c      	cmp	r3, #92	@ 0x5c
 8007352:	d00b      	beq.n	800736c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	61bb      	str	r3, [r7, #24]
}
 8007366:	bf00      	nop
 8007368:	bf00      	nop
 800736a:	e7fd      	b.n	8007368 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800736c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800736e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01e      	beq.n	80073b2 <xTaskCreateStatic+0xb2>
 8007374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01b      	beq.n	80073b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800737a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007382:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800738c:	2300      	movs	r3, #0
 800738e:	9303      	str	r3, [sp, #12]
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	9302      	str	r3, [sp, #8]
 8007394:	f107 0314 	add.w	r3, r7, #20
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f850 	bl	800744a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80073ac:	f000 f8de 	bl	800756c <prvAddNewTaskToReadyList>
 80073b0:	e001      	b.n	80073b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073b6:	697b      	ldr	r3, [r7, #20]
	}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3728      	adds	r7, #40	@ 0x28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	@ 0x30
 80073c4:	af04      	add	r7, sp, #16
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073d0:	88fb      	ldrh	r3, [r7, #6]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fc71 	bl	8008cbc <pvPortMalloc>
 80073da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00e      	beq.n	8007400 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073e2:	205c      	movs	r0, #92	@ 0x5c
 80073e4:	f001 fc6a 	bl	8008cbc <pvPortMalloc>
 80073e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80073f6:	e005      	b.n	8007404 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073f8:	6978      	ldr	r0, [r7, #20]
 80073fa:	f001 fd2d 	bl	8008e58 <vPortFree>
 80073fe:	e001      	b.n	8007404 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007400:	2300      	movs	r3, #0
 8007402:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d017      	beq.n	800743a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	2300      	movs	r3, #0
 8007416:	9303      	str	r3, [sp, #12]
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	9302      	str	r3, [sp, #8]
 800741c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f80e 	bl	800744a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800742e:	69f8      	ldr	r0, [r7, #28]
 8007430:	f000 f89c 	bl	800756c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007434:	2301      	movs	r3, #1
 8007436:	61bb      	str	r3, [r7, #24]
 8007438:	e002      	b.n	8007440 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800743e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007440:	69bb      	ldr	r3, [r7, #24]
	}
 8007442:	4618      	mov	r0, r3
 8007444:	3720      	adds	r7, #32
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b088      	sub	sp, #32
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
 8007456:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	461a      	mov	r2, r3
 8007462:	21a5      	movs	r1, #165	@ 0xa5
 8007464:	f011 fccf 	bl	8018e06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007472:	3b01      	subs	r3, #1
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f023 0307 	bic.w	r3, r3, #7
 8007480:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00b      	beq.n	80074a4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	617b      	str	r3, [r7, #20]
}
 800749e:	bf00      	nop
 80074a0:	bf00      	nop
 80074a2:	e7fd      	b.n	80074a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01f      	beq.n	80074ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074aa:	2300      	movs	r3, #0
 80074ac:	61fb      	str	r3, [r7, #28]
 80074ae:	e012      	b.n	80074d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	7819      	ldrb	r1, [r3, #0]
 80074b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	4413      	add	r3, r2
 80074be:	3334      	adds	r3, #52	@ 0x34
 80074c0:	460a      	mov	r2, r1
 80074c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d006      	beq.n	80074de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	3301      	adds	r3, #1
 80074d4:	61fb      	str	r3, [r7, #28]
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	2b0f      	cmp	r3, #15
 80074da:	d9e9      	bls.n	80074b0 <prvInitialiseNewTask+0x66>
 80074dc:	e000      	b.n	80074e0 <prvInitialiseNewTask+0x96>
			{
				break;
 80074de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074e8:	e003      	b.n	80074f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	2b37      	cmp	r3, #55	@ 0x37
 80074f6:	d901      	bls.n	80074fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074f8:	2337      	movs	r3, #55	@ 0x37
 80074fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007500:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007506:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	2200      	movs	r2, #0
 800750c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	3304      	adds	r3, #4
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff f966 	bl	80067e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	3318      	adds	r3, #24
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff f961 	bl	80067e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007526:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007536:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	2200      	movs	r2, #0
 800753c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	68f9      	ldr	r1, [r7, #12]
 800754a:	69b8      	ldr	r0, [r7, #24]
 800754c:	f001 f966 	bl	800881c <pxPortInitialiseStack>
 8007550:	4602      	mov	r2, r0
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800755c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007562:	bf00      	nop
 8007564:	3720      	adds	r7, #32
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007574:	f001 fa80 	bl	8008a78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007578:	4b2d      	ldr	r3, [pc, #180]	@ (8007630 <prvAddNewTaskToReadyList+0xc4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3301      	adds	r3, #1
 800757e:	4a2c      	ldr	r2, [pc, #176]	@ (8007630 <prvAddNewTaskToReadyList+0xc4>)
 8007580:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007582:	4b2c      	ldr	r3, [pc, #176]	@ (8007634 <prvAddNewTaskToReadyList+0xc8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800758a:	4a2a      	ldr	r2, [pc, #168]	@ (8007634 <prvAddNewTaskToReadyList+0xc8>)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007590:	4b27      	ldr	r3, [pc, #156]	@ (8007630 <prvAddNewTaskToReadyList+0xc4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d110      	bne.n	80075ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007598:	f000 fc46 	bl	8007e28 <prvInitialiseTaskLists>
 800759c:	e00d      	b.n	80075ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800759e:	4b26      	ldr	r3, [pc, #152]	@ (8007638 <prvAddNewTaskToReadyList+0xcc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075a6:	4b23      	ldr	r3, [pc, #140]	@ (8007634 <prvAddNewTaskToReadyList+0xc8>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d802      	bhi.n	80075ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007634 <prvAddNewTaskToReadyList+0xc8>)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075ba:	4b20      	ldr	r3, [pc, #128]	@ (800763c <prvAddNewTaskToReadyList+0xd0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3301      	adds	r3, #1
 80075c0:	4a1e      	ldr	r2, [pc, #120]	@ (800763c <prvAddNewTaskToReadyList+0xd0>)
 80075c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075c4:	4b1d      	ldr	r3, [pc, #116]	@ (800763c <prvAddNewTaskToReadyList+0xd0>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007640 <prvAddNewTaskToReadyList+0xd4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d903      	bls.n	80075e0 <prvAddNewTaskToReadyList+0x74>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075dc:	4a18      	ldr	r2, [pc, #96]	@ (8007640 <prvAddNewTaskToReadyList+0xd4>)
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4a15      	ldr	r2, [pc, #84]	@ (8007644 <prvAddNewTaskToReadyList+0xd8>)
 80075ee:	441a      	add	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7ff f901 	bl	80067fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075fc:	f001 fa6e 	bl	8008adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007600:	4b0d      	ldr	r3, [pc, #52]	@ (8007638 <prvAddNewTaskToReadyList+0xcc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00e      	beq.n	8007626 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007608:	4b0a      	ldr	r3, [pc, #40]	@ (8007634 <prvAddNewTaskToReadyList+0xc8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007612:	429a      	cmp	r2, r3
 8007614:	d207      	bcs.n	8007626 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007616:	4b0c      	ldr	r3, [pc, #48]	@ (8007648 <prvAddNewTaskToReadyList+0xdc>)
 8007618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20009308 	.word	0x20009308
 8007634:	20008e34 	.word	0x20008e34
 8007638:	20009314 	.word	0x20009314
 800763c:	20009324 	.word	0x20009324
 8007640:	20009310 	.word	0x20009310
 8007644:	20008e38 	.word	0x20008e38
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d018      	beq.n	8007690 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800765e:	4b14      	ldr	r3, [pc, #80]	@ (80076b0 <vTaskDelay+0x64>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00b      	beq.n	800767e <vTaskDelay+0x32>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	60bb      	str	r3, [r7, #8]
}
 8007678:	bf00      	nop
 800767a:	bf00      	nop
 800767c:	e7fd      	b.n	800767a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800767e:	f000 f883 	bl	8007788 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007682:	2100      	movs	r1, #0
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fd1b 	bl	80080c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800768a:	f000 f88b 	bl	80077a4 <xTaskResumeAll>
 800768e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d107      	bne.n	80076a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007696:	4b07      	ldr	r3, [pc, #28]	@ (80076b4 <vTaskDelay+0x68>)
 8007698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20009330 	.word	0x20009330
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	@ 0x28
 80076bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076c6:	463a      	mov	r2, r7
 80076c8:	1d39      	adds	r1, r7, #4
 80076ca:	f107 0308 	add.w	r3, r7, #8
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff f834 	bl	800673c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	9202      	str	r2, [sp, #8]
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	2300      	movs	r3, #0
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	2300      	movs	r3, #0
 80076e4:	460a      	mov	r2, r1
 80076e6:	4922      	ldr	r1, [pc, #136]	@ (8007770 <vTaskStartScheduler+0xb8>)
 80076e8:	4822      	ldr	r0, [pc, #136]	@ (8007774 <vTaskStartScheduler+0xbc>)
 80076ea:	f7ff fe09 	bl	8007300 <xTaskCreateStatic>
 80076ee:	4603      	mov	r3, r0
 80076f0:	4a21      	ldr	r2, [pc, #132]	@ (8007778 <vTaskStartScheduler+0xc0>)
 80076f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076f4:	4b20      	ldr	r3, [pc, #128]	@ (8007778 <vTaskStartScheduler+0xc0>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076fc:	2301      	movs	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e001      	b.n	8007706 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d102      	bne.n	8007712 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800770c:	f000 fd2c 	bl	8008168 <xTimerCreateTimerTask>
 8007710:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d116      	bne.n	8007746 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	613b      	str	r3, [r7, #16]
}
 800772a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800772c:	4b13      	ldr	r3, [pc, #76]	@ (800777c <vTaskStartScheduler+0xc4>)
 800772e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007732:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007734:	4b12      	ldr	r3, [pc, #72]	@ (8007780 <vTaskStartScheduler+0xc8>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800773a:	4b12      	ldr	r3, [pc, #72]	@ (8007784 <vTaskStartScheduler+0xcc>)
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007740:	f001 f8f6 	bl	8008930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007744:	e00f      	b.n	8007766 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800774c:	d10b      	bne.n	8007766 <vTaskStartScheduler+0xae>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60fb      	str	r3, [r7, #12]
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	e7fd      	b.n	8007762 <vTaskStartScheduler+0xaa>
}
 8007766:	bf00      	nop
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	0801a1cc 	.word	0x0801a1cc
 8007774:	08007df9 	.word	0x08007df9
 8007778:	2000932c 	.word	0x2000932c
 800777c:	20009328 	.word	0x20009328
 8007780:	20009314 	.word	0x20009314
 8007784:	2000930c 	.word	0x2000930c

08007788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800778c:	4b04      	ldr	r3, [pc, #16]	@ (80077a0 <vTaskSuspendAll+0x18>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3301      	adds	r3, #1
 8007792:	4a03      	ldr	r2, [pc, #12]	@ (80077a0 <vTaskSuspendAll+0x18>)
 8007794:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007796:	bf00      	nop
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	20009330 	.word	0x20009330

080077a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077b2:	4b42      	ldr	r3, [pc, #264]	@ (80078bc <xTaskResumeAll+0x118>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	603b      	str	r3, [r7, #0]
}
 80077cc:	bf00      	nop
 80077ce:	bf00      	nop
 80077d0:	e7fd      	b.n	80077ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077d2:	f001 f951 	bl	8008a78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077d6:	4b39      	ldr	r3, [pc, #228]	@ (80078bc <xTaskResumeAll+0x118>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3b01      	subs	r3, #1
 80077dc:	4a37      	ldr	r2, [pc, #220]	@ (80078bc <xTaskResumeAll+0x118>)
 80077de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077e0:	4b36      	ldr	r3, [pc, #216]	@ (80078bc <xTaskResumeAll+0x118>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d162      	bne.n	80078ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077e8:	4b35      	ldr	r3, [pc, #212]	@ (80078c0 <xTaskResumeAll+0x11c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d05e      	beq.n	80078ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077f0:	e02f      	b.n	8007852 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f2:	4b34      	ldr	r3, [pc, #208]	@ (80078c4 <xTaskResumeAll+0x120>)
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3318      	adds	r3, #24
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff f85a 	bl	80068b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3304      	adds	r3, #4
 8007808:	4618      	mov	r0, r3
 800780a:	f7ff f855 	bl	80068b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007812:	4b2d      	ldr	r3, [pc, #180]	@ (80078c8 <xTaskResumeAll+0x124>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d903      	bls.n	8007822 <xTaskResumeAll+0x7e>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781e:	4a2a      	ldr	r2, [pc, #168]	@ (80078c8 <xTaskResumeAll+0x124>)
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4a27      	ldr	r2, [pc, #156]	@ (80078cc <xTaskResumeAll+0x128>)
 8007830:	441a      	add	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3304      	adds	r3, #4
 8007836:	4619      	mov	r1, r3
 8007838:	4610      	mov	r0, r2
 800783a:	f7fe ffe0 	bl	80067fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007842:	4b23      	ldr	r3, [pc, #140]	@ (80078d0 <xTaskResumeAll+0x12c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007848:	429a      	cmp	r2, r3
 800784a:	d302      	bcc.n	8007852 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800784c:	4b21      	ldr	r3, [pc, #132]	@ (80078d4 <xTaskResumeAll+0x130>)
 800784e:	2201      	movs	r2, #1
 8007850:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007852:	4b1c      	ldr	r3, [pc, #112]	@ (80078c4 <xTaskResumeAll+0x120>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1cb      	bne.n	80077f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007860:	f000 fb80 	bl	8007f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007864:	4b1c      	ldr	r3, [pc, #112]	@ (80078d8 <xTaskResumeAll+0x134>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d010      	beq.n	8007892 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007870:	f000 f846 	bl	8007900 <xTaskIncrementTick>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800787a:	4b16      	ldr	r3, [pc, #88]	@ (80078d4 <xTaskResumeAll+0x130>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3b01      	subs	r3, #1
 8007884:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1f1      	bne.n	8007870 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800788c:	4b12      	ldr	r3, [pc, #72]	@ (80078d8 <xTaskResumeAll+0x134>)
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007892:	4b10      	ldr	r3, [pc, #64]	@ (80078d4 <xTaskResumeAll+0x130>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800789a:	2301      	movs	r3, #1
 800789c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800789e:	4b0f      	ldr	r3, [pc, #60]	@ (80078dc <xTaskResumeAll+0x138>)
 80078a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078ae:	f001 f915 	bl	8008adc <vPortExitCritical>

	return xAlreadyYielded;
 80078b2:	68bb      	ldr	r3, [r7, #8]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20009330 	.word	0x20009330
 80078c0:	20009308 	.word	0x20009308
 80078c4:	200092c8 	.word	0x200092c8
 80078c8:	20009310 	.word	0x20009310
 80078cc:	20008e38 	.word	0x20008e38
 80078d0:	20008e34 	.word	0x20008e34
 80078d4:	2000931c 	.word	0x2000931c
 80078d8:	20009318 	.word	0x20009318
 80078dc:	e000ed04 	.word	0xe000ed04

080078e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078e6:	4b05      	ldr	r3, [pc, #20]	@ (80078fc <xTaskGetTickCount+0x1c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078ec:	687b      	ldr	r3, [r7, #4]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	2000930c 	.word	0x2000930c

08007900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800790a:	4b4f      	ldr	r3, [pc, #316]	@ (8007a48 <xTaskIncrementTick+0x148>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f040 8090 	bne.w	8007a34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007914:	4b4d      	ldr	r3, [pc, #308]	@ (8007a4c <xTaskIncrementTick+0x14c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3301      	adds	r3, #1
 800791a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800791c:	4a4b      	ldr	r2, [pc, #300]	@ (8007a4c <xTaskIncrementTick+0x14c>)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d121      	bne.n	800796c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007928:	4b49      	ldr	r3, [pc, #292]	@ (8007a50 <xTaskIncrementTick+0x150>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00b      	beq.n	800794a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	603b      	str	r3, [r7, #0]
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	e7fd      	b.n	8007946 <xTaskIncrementTick+0x46>
 800794a:	4b41      	ldr	r3, [pc, #260]	@ (8007a50 <xTaskIncrementTick+0x150>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	4b40      	ldr	r3, [pc, #256]	@ (8007a54 <xTaskIncrementTick+0x154>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a3e      	ldr	r2, [pc, #248]	@ (8007a50 <xTaskIncrementTick+0x150>)
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	4a3e      	ldr	r2, [pc, #248]	@ (8007a54 <xTaskIncrementTick+0x154>)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a58 <xTaskIncrementTick+0x158>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	4a3c      	ldr	r2, [pc, #240]	@ (8007a58 <xTaskIncrementTick+0x158>)
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	f000 fafc 	bl	8007f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800796c:	4b3b      	ldr	r3, [pc, #236]	@ (8007a5c <xTaskIncrementTick+0x15c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	429a      	cmp	r2, r3
 8007974:	d349      	bcc.n	8007a0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007976:	4b36      	ldr	r3, [pc, #216]	@ (8007a50 <xTaskIncrementTick+0x150>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007980:	4b36      	ldr	r3, [pc, #216]	@ (8007a5c <xTaskIncrementTick+0x15c>)
 8007982:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007986:	601a      	str	r2, [r3, #0]
					break;
 8007988:	e03f      	b.n	8007a0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798a:	4b31      	ldr	r3, [pc, #196]	@ (8007a50 <xTaskIncrementTick+0x150>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d203      	bcs.n	80079aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079a2:	4a2e      	ldr	r2, [pc, #184]	@ (8007a5c <xTaskIncrementTick+0x15c>)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079a8:	e02f      	b.n	8007a0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe ff82 	bl	80068b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d004      	beq.n	80079c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	3318      	adds	r3, #24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe ff79 	bl	80068b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ca:	4b25      	ldr	r3, [pc, #148]	@ (8007a60 <xTaskIncrementTick+0x160>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d903      	bls.n	80079da <xTaskIncrementTick+0xda>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d6:	4a22      	ldr	r2, [pc, #136]	@ (8007a60 <xTaskIncrementTick+0x160>)
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a64 <xTaskIncrementTick+0x164>)
 80079e8:	441a      	add	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f7fe ff04 	bl	80067fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007a68 <xTaskIncrementTick+0x168>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d3b8      	bcc.n	8007976 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a08:	e7b5      	b.n	8007976 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a0a:	4b17      	ldr	r3, [pc, #92]	@ (8007a68 <xTaskIncrementTick+0x168>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a10:	4914      	ldr	r1, [pc, #80]	@ (8007a64 <xTaskIncrementTick+0x164>)
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d901      	bls.n	8007a26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007a22:	2301      	movs	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a26:	4b11      	ldr	r3, [pc, #68]	@ (8007a6c <xTaskIncrementTick+0x16c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d007      	beq.n	8007a3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	617b      	str	r3, [r7, #20]
 8007a32:	e004      	b.n	8007a3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a34:	4b0e      	ldr	r3, [pc, #56]	@ (8007a70 <xTaskIncrementTick+0x170>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8007a70 <xTaskIncrementTick+0x170>)
 8007a3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a3e:	697b      	ldr	r3, [r7, #20]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20009330 	.word	0x20009330
 8007a4c:	2000930c 	.word	0x2000930c
 8007a50:	200092c0 	.word	0x200092c0
 8007a54:	200092c4 	.word	0x200092c4
 8007a58:	20009320 	.word	0x20009320
 8007a5c:	20009328 	.word	0x20009328
 8007a60:	20009310 	.word	0x20009310
 8007a64:	20008e38 	.word	0x20008e38
 8007a68:	20008e34 	.word	0x20008e34
 8007a6c:	2000931c 	.word	0x2000931c
 8007a70:	20009318 	.word	0x20009318

08007a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a7a:	4b28      	ldr	r3, [pc, #160]	@ (8007b1c <vTaskSwitchContext+0xa8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a82:	4b27      	ldr	r3, [pc, #156]	@ (8007b20 <vTaskSwitchContext+0xac>)
 8007a84:	2201      	movs	r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a88:	e042      	b.n	8007b10 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007a8a:	4b25      	ldr	r3, [pc, #148]	@ (8007b20 <vTaskSwitchContext+0xac>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a90:	4b24      	ldr	r3, [pc, #144]	@ (8007b24 <vTaskSwitchContext+0xb0>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	e011      	b.n	8007abc <vTaskSwitchContext+0x48>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10b      	bne.n	8007ab6 <vTaskSwitchContext+0x42>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	607b      	str	r3, [r7, #4]
}
 8007ab0:	bf00      	nop
 8007ab2:	bf00      	nop
 8007ab4:	e7fd      	b.n	8007ab2 <vTaskSwitchContext+0x3e>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	491a      	ldr	r1, [pc, #104]	@ (8007b28 <vTaskSwitchContext+0xb4>)
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0e3      	beq.n	8007a98 <vTaskSwitchContext+0x24>
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4a13      	ldr	r2, [pc, #76]	@ (8007b28 <vTaskSwitchContext+0xb4>)
 8007adc:	4413      	add	r3, r2
 8007ade:	60bb      	str	r3, [r7, #8]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	605a      	str	r2, [r3, #4]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	3308      	adds	r3, #8
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d104      	bne.n	8007b00 <vTaskSwitchContext+0x8c>
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	605a      	str	r2, [r3, #4]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	4a09      	ldr	r2, [pc, #36]	@ (8007b2c <vTaskSwitchContext+0xb8>)
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	4a06      	ldr	r2, [pc, #24]	@ (8007b24 <vTaskSwitchContext+0xb0>)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6013      	str	r3, [r2, #0]
}
 8007b10:	bf00      	nop
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	20009330 	.word	0x20009330
 8007b20:	2000931c 	.word	0x2000931c
 8007b24:	20009310 	.word	0x20009310
 8007b28:	20008e38 	.word	0x20008e38
 8007b2c:	20008e34 	.word	0x20008e34

08007b30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10b      	bne.n	8007b58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	60fb      	str	r3, [r7, #12]
}
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	e7fd      	b.n	8007b54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b58:	4b07      	ldr	r3, [pc, #28]	@ (8007b78 <vTaskPlaceOnEventList+0x48>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3318      	adds	r3, #24
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7fe fe70 	bl	8006846 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b66:	2101      	movs	r1, #1
 8007b68:	6838      	ldr	r0, [r7, #0]
 8007b6a:	f000 faa9 	bl	80080c0 <prvAddCurrentTaskToDelayedList>
}
 8007b6e:	bf00      	nop
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20008e34 	.word	0x20008e34

08007b7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10b      	bne.n	8007ba6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	617b      	str	r3, [r7, #20]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3318      	adds	r3, #24
 8007bac:	4619      	mov	r1, r3
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7fe fe25 	bl	80067fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bbe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	68b8      	ldr	r0, [r7, #8]
 8007bc4:	f000 fa7c 	bl	80080c0 <prvAddCurrentTaskToDelayedList>
	}
 8007bc8:	bf00      	nop
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20008e34 	.word	0x20008e34

08007bd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10b      	bne.n	8007c02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	60fb      	str	r3, [r7, #12]
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	e7fd      	b.n	8007bfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3318      	adds	r3, #24
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe fe56 	bl	80068b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c84 <xTaskRemoveFromEventList+0xb0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d11d      	bne.n	8007c50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fe4d 	bl	80068b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c22:	4b19      	ldr	r3, [pc, #100]	@ (8007c88 <xTaskRemoveFromEventList+0xb4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d903      	bls.n	8007c32 <xTaskRemoveFromEventList+0x5e>
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2e:	4a16      	ldr	r2, [pc, #88]	@ (8007c88 <xTaskRemoveFromEventList+0xb4>)
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4a13      	ldr	r2, [pc, #76]	@ (8007c8c <xTaskRemoveFromEventList+0xb8>)
 8007c40:	441a      	add	r2, r3
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	3304      	adds	r3, #4
 8007c46:	4619      	mov	r1, r3
 8007c48:	4610      	mov	r0, r2
 8007c4a:	f7fe fdd8 	bl	80067fe <vListInsertEnd>
 8007c4e:	e005      	b.n	8007c5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	3318      	adds	r3, #24
 8007c54:	4619      	mov	r1, r3
 8007c56:	480e      	ldr	r0, [pc, #56]	@ (8007c90 <xTaskRemoveFromEventList+0xbc>)
 8007c58:	f7fe fdd1 	bl	80067fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c60:	4b0c      	ldr	r3, [pc, #48]	@ (8007c94 <xTaskRemoveFromEventList+0xc0>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d905      	bls.n	8007c76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <xTaskRemoveFromEventList+0xc4>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e001      	b.n	8007c7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007c76:	2300      	movs	r3, #0
 8007c78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c7a:	697b      	ldr	r3, [r7, #20]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	20009330 	.word	0x20009330
 8007c88:	20009310 	.word	0x20009310
 8007c8c:	20008e38 	.word	0x20008e38
 8007c90:	200092c8 	.word	0x200092c8
 8007c94:	20008e34 	.word	0x20008e34
 8007c98:	2000931c 	.word	0x2000931c

08007c9c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10b      	bne.n	8007cc2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	60fb      	str	r3, [r7, #12]
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	e7fd      	b.n	8007cbe <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007cc2:	f000 fed9 	bl	8008a78 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cc6:	4b07      	ldr	r3, [pc, #28]	@ (8007ce4 <vTaskSetTimeOutState+0x48>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007cce:	4b06      	ldr	r3, [pc, #24]	@ (8007ce8 <vTaskSetTimeOutState+0x4c>)
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007cd6:	f000 ff01 	bl	8008adc <vPortExitCritical>
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20009320 	.word	0x20009320
 8007ce8:	2000930c 	.word	0x2000930c

08007cec <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cf4:	4b06      	ldr	r3, [pc, #24]	@ (8007d10 <vTaskInternalSetTimeOutState+0x24>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cfc:	4b05      	ldr	r3, [pc, #20]	@ (8007d14 <vTaskInternalSetTimeOutState+0x28>)
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	605a      	str	r2, [r3, #4]
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	20009320 	.word	0x20009320
 8007d14:	2000930c 	.word	0x2000930c

08007d18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10b      	bne.n	8007d40 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	613b      	str	r3, [r7, #16]
}
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
 8007d3e:	e7fd      	b.n	8007d3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10b      	bne.n	8007d5e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60fb      	str	r3, [r7, #12]
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	e7fd      	b.n	8007d5a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007d5e:	f000 fe8b 	bl	8008a78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d62:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd8 <xTaskCheckForTimeOut+0xc0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d7a:	d102      	bne.n	8007d82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61fb      	str	r3, [r7, #28]
 8007d80:	e023      	b.n	8007dca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	4b15      	ldr	r3, [pc, #84]	@ (8007ddc <xTaskCheckForTimeOut+0xc4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d007      	beq.n	8007d9e <xTaskCheckForTimeOut+0x86>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d302      	bcc.n	8007d9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	61fb      	str	r3, [r7, #28]
 8007d9c:	e015      	b.n	8007dca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d20b      	bcs.n	8007dc0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff ff99 	bl	8007cec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	e004      	b.n	8007dca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dca:	f000 fe87 	bl	8008adc <vPortExitCritical>

	return xReturn;
 8007dce:	69fb      	ldr	r3, [r7, #28]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	2000930c 	.word	0x2000930c
 8007ddc:	20009320 	.word	0x20009320

08007de0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007de4:	4b03      	ldr	r3, [pc, #12]	@ (8007df4 <vTaskMissedYield+0x14>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	601a      	str	r2, [r3, #0]
}
 8007dea:	bf00      	nop
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	2000931c 	.word	0x2000931c

08007df8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e00:	f000 f852 	bl	8007ea8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e04:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <prvIdleTask+0x28>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d9f9      	bls.n	8007e00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e0c:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <prvIdleTask+0x2c>)
 8007e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e1c:	e7f0      	b.n	8007e00 <prvIdleTask+0x8>
 8007e1e:	bf00      	nop
 8007e20:	20008e38 	.word	0x20008e38
 8007e24:	e000ed04 	.word	0xe000ed04

08007e28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e2e:	2300      	movs	r3, #0
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	e00c      	b.n	8007e4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4a12      	ldr	r2, [pc, #72]	@ (8007e88 <prvInitialiseTaskLists+0x60>)
 8007e40:	4413      	add	r3, r2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fcae 	bl	80067a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	607b      	str	r3, [r7, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b37      	cmp	r3, #55	@ 0x37
 8007e52:	d9ef      	bls.n	8007e34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e54:	480d      	ldr	r0, [pc, #52]	@ (8007e8c <prvInitialiseTaskLists+0x64>)
 8007e56:	f7fe fca5 	bl	80067a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e5a:	480d      	ldr	r0, [pc, #52]	@ (8007e90 <prvInitialiseTaskLists+0x68>)
 8007e5c:	f7fe fca2 	bl	80067a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e60:	480c      	ldr	r0, [pc, #48]	@ (8007e94 <prvInitialiseTaskLists+0x6c>)
 8007e62:	f7fe fc9f 	bl	80067a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e66:	480c      	ldr	r0, [pc, #48]	@ (8007e98 <prvInitialiseTaskLists+0x70>)
 8007e68:	f7fe fc9c 	bl	80067a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e6c:	480b      	ldr	r0, [pc, #44]	@ (8007e9c <prvInitialiseTaskLists+0x74>)
 8007e6e:	f7fe fc99 	bl	80067a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea0 <prvInitialiseTaskLists+0x78>)
 8007e74:	4a05      	ldr	r2, [pc, #20]	@ (8007e8c <prvInitialiseTaskLists+0x64>)
 8007e76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e78:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea4 <prvInitialiseTaskLists+0x7c>)
 8007e7a:	4a05      	ldr	r2, [pc, #20]	@ (8007e90 <prvInitialiseTaskLists+0x68>)
 8007e7c:	601a      	str	r2, [r3, #0]
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20008e38 	.word	0x20008e38
 8007e8c:	20009298 	.word	0x20009298
 8007e90:	200092ac 	.word	0x200092ac
 8007e94:	200092c8 	.word	0x200092c8
 8007e98:	200092dc 	.word	0x200092dc
 8007e9c:	200092f4 	.word	0x200092f4
 8007ea0:	200092c0 	.word	0x200092c0
 8007ea4:	200092c4 	.word	0x200092c4

08007ea8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eae:	e019      	b.n	8007ee4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007eb0:	f000 fde2 	bl	8008a78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb4:	4b10      	ldr	r3, [pc, #64]	@ (8007ef8 <prvCheckTasksWaitingTermination+0x50>)
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fe fcf9 	bl	80068b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8007efc <prvCheckTasksWaitingTermination+0x54>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8007efc <prvCheckTasksWaitingTermination+0x54>)
 8007ece:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f00 <prvCheckTasksWaitingTermination+0x58>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8007f00 <prvCheckTasksWaitingTermination+0x58>)
 8007ed8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007eda:	f000 fdff 	bl	8008adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f810 	bl	8007f04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ee4:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <prvCheckTasksWaitingTermination+0x58>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e1      	bne.n	8007eb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	200092dc 	.word	0x200092dc
 8007efc:	20009308 	.word	0x20009308
 8007f00:	200092f0 	.word	0x200092f0

08007f04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d108      	bne.n	8007f28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 ff9c 	bl	8008e58 <vPortFree>
				vPortFree( pxTCB );
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 ff99 	bl	8008e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f26:	e019      	b.n	8007f5c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d103      	bne.n	8007f3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 ff90 	bl	8008e58 <vPortFree>
	}
 8007f38:	e010      	b.n	8007f5c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d00b      	beq.n	8007f5c <prvDeleteTCB+0x58>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	60fb      	str	r3, [r7, #12]
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <prvDeleteTCB+0x54>
	}
 8007f5c:	bf00      	nop
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f9c <prvResetNextTaskUnblockTime+0x38>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d104      	bne.n	8007f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f74:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8007f76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f7c:	e008      	b.n	8007f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f7e:	4b07      	ldr	r3, [pc, #28]	@ (8007f9c <prvResetNextTaskUnblockTime+0x38>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	4a04      	ldr	r2, [pc, #16]	@ (8007fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8007f8e:	6013      	str	r3, [r2, #0]
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	200092c0 	.word	0x200092c0
 8007fa0:	20009328 	.word	0x20009328

08007fa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007faa:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd8 <xTaskGetSchedulerState+0x34>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	607b      	str	r3, [r7, #4]
 8007fb6:	e008      	b.n	8007fca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fb8:	4b08      	ldr	r3, [pc, #32]	@ (8007fdc <xTaskGetSchedulerState+0x38>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	607b      	str	r3, [r7, #4]
 8007fc4:	e001      	b.n	8007fca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fca:	687b      	ldr	r3, [r7, #4]
	}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20009314 	.word	0x20009314
 8007fdc:	20009330 	.word	0x20009330

08007fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d058      	beq.n	80080a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80080b4 <xTaskPriorityDisinherit+0xd4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d00b      	beq.n	8008018 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	60fb      	str	r3, [r7, #12]
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	60bb      	str	r3, [r7, #8]
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800803c:	1e5a      	subs	r2, r3, #1
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800804a:	429a      	cmp	r2, r3
 800804c:	d02c      	beq.n	80080a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008052:	2b00      	cmp	r3, #0
 8008054:	d128      	bne.n	80080a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	3304      	adds	r3, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fc2c 	bl	80068b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008078:	4b0f      	ldr	r3, [pc, #60]	@ (80080b8 <xTaskPriorityDisinherit+0xd8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d903      	bls.n	8008088 <xTaskPriorityDisinherit+0xa8>
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008084:	4a0c      	ldr	r2, [pc, #48]	@ (80080b8 <xTaskPriorityDisinherit+0xd8>)
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4a09      	ldr	r2, [pc, #36]	@ (80080bc <xTaskPriorityDisinherit+0xdc>)
 8008096:	441a      	add	r2, r3
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	3304      	adds	r3, #4
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	f7fe fbad 	bl	80067fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080a8:	697b      	ldr	r3, [r7, #20]
	}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20008e34 	.word	0x20008e34
 80080b8:	20009310 	.word	0x20009310
 80080bc:	20008e38 	.word	0x20008e38

080080c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080ca:	4b21      	ldr	r3, [pc, #132]	@ (8008150 <prvAddCurrentTaskToDelayedList+0x90>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080d0:	4b20      	ldr	r3, [pc, #128]	@ (8008154 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe fbee 	bl	80068b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080e2:	d10a      	bne.n	80080fa <prvAddCurrentTaskToDelayedList+0x3a>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d007      	beq.n	80080fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008154 <prvAddCurrentTaskToDelayedList+0x94>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3304      	adds	r3, #4
 80080f0:	4619      	mov	r1, r3
 80080f2:	4819      	ldr	r0, [pc, #100]	@ (8008158 <prvAddCurrentTaskToDelayedList+0x98>)
 80080f4:	f7fe fb83 	bl	80067fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080f8:	e026      	b.n	8008148 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4413      	add	r3, r2
 8008100:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008102:	4b14      	ldr	r3, [pc, #80]	@ (8008154 <prvAddCurrentTaskToDelayedList+0x94>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	429a      	cmp	r2, r3
 8008110:	d209      	bcs.n	8008126 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008112:	4b12      	ldr	r3, [pc, #72]	@ (800815c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	4b0f      	ldr	r3, [pc, #60]	@ (8008154 <prvAddCurrentTaskToDelayedList+0x94>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3304      	adds	r3, #4
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	f7fe fb91 	bl	8006846 <vListInsert>
}
 8008124:	e010      	b.n	8008148 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008126:	4b0e      	ldr	r3, [pc, #56]	@ (8008160 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4b0a      	ldr	r3, [pc, #40]	@ (8008154 <prvAddCurrentTaskToDelayedList+0x94>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3304      	adds	r3, #4
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f7fe fb87 	bl	8006846 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008138:	4b0a      	ldr	r3, [pc, #40]	@ (8008164 <prvAddCurrentTaskToDelayedList+0xa4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	429a      	cmp	r2, r3
 8008140:	d202      	bcs.n	8008148 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008142:	4a08      	ldr	r2, [pc, #32]	@ (8008164 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	6013      	str	r3, [r2, #0]
}
 8008148:	bf00      	nop
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	2000930c 	.word	0x2000930c
 8008154:	20008e34 	.word	0x20008e34
 8008158:	200092f4 	.word	0x200092f4
 800815c:	200092c4 	.word	0x200092c4
 8008160:	200092c0 	.word	0x200092c0
 8008164:	20009328 	.word	0x20009328

08008168 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08a      	sub	sp, #40	@ 0x28
 800816c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008172:	f000 fb13 	bl	800879c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008176:	4b1d      	ldr	r3, [pc, #116]	@ (80081ec <xTimerCreateTimerTask+0x84>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d021      	beq.n	80081c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008186:	1d3a      	adds	r2, r7, #4
 8008188:	f107 0108 	add.w	r1, r7, #8
 800818c:	f107 030c 	add.w	r3, r7, #12
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe faed 	bl	8006770 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	9202      	str	r2, [sp, #8]
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	2302      	movs	r3, #2
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	2300      	movs	r3, #0
 80081a6:	460a      	mov	r2, r1
 80081a8:	4911      	ldr	r1, [pc, #68]	@ (80081f0 <xTimerCreateTimerTask+0x88>)
 80081aa:	4812      	ldr	r0, [pc, #72]	@ (80081f4 <xTimerCreateTimerTask+0x8c>)
 80081ac:	f7ff f8a8 	bl	8007300 <xTaskCreateStatic>
 80081b0:	4603      	mov	r3, r0
 80081b2:	4a11      	ldr	r2, [pc, #68]	@ (80081f8 <xTimerCreateTimerTask+0x90>)
 80081b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081b6:	4b10      	ldr	r3, [pc, #64]	@ (80081f8 <xTimerCreateTimerTask+0x90>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081be:	2301      	movs	r3, #1
 80081c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10b      	bne.n	80081e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	613b      	str	r3, [r7, #16]
}
 80081da:	bf00      	nop
 80081dc:	bf00      	nop
 80081de:	e7fd      	b.n	80081dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081e0:	697b      	ldr	r3, [r7, #20]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20009364 	.word	0x20009364
 80081f0:	0801a1d4 	.word	0x0801a1d4
 80081f4:	08008335 	.word	0x08008335
 80081f8:	20009368 	.word	0x20009368

080081fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08a      	sub	sp, #40	@ 0x28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800820a:	2300      	movs	r3, #0
 800820c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10b      	bne.n	800822c <xTimerGenericCommand+0x30>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	623b      	str	r3, [r7, #32]
}
 8008226:	bf00      	nop
 8008228:	bf00      	nop
 800822a:	e7fd      	b.n	8008228 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800822c:	4b19      	ldr	r3, [pc, #100]	@ (8008294 <xTimerGenericCommand+0x98>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d02a      	beq.n	800828a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b05      	cmp	r3, #5
 8008244:	dc18      	bgt.n	8008278 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008246:	f7ff fead 	bl	8007fa4 <xTaskGetSchedulerState>
 800824a:	4603      	mov	r3, r0
 800824c:	2b02      	cmp	r3, #2
 800824e:	d109      	bne.n	8008264 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008250:	4b10      	ldr	r3, [pc, #64]	@ (8008294 <xTimerGenericCommand+0x98>)
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	f107 0110 	add.w	r1, r7, #16
 8008258:	2300      	movs	r3, #0
 800825a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800825c:	f7fe fc60 	bl	8006b20 <xQueueGenericSend>
 8008260:	6278      	str	r0, [r7, #36]	@ 0x24
 8008262:	e012      	b.n	800828a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008264:	4b0b      	ldr	r3, [pc, #44]	@ (8008294 <xTimerGenericCommand+0x98>)
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	f107 0110 	add.w	r1, r7, #16
 800826c:	2300      	movs	r3, #0
 800826e:	2200      	movs	r2, #0
 8008270:	f7fe fc56 	bl	8006b20 <xQueueGenericSend>
 8008274:	6278      	str	r0, [r7, #36]	@ 0x24
 8008276:	e008      	b.n	800828a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008278:	4b06      	ldr	r3, [pc, #24]	@ (8008294 <xTimerGenericCommand+0x98>)
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	f107 0110 	add.w	r1, r7, #16
 8008280:	2300      	movs	r3, #0
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	f7fe fd4e 	bl	8006d24 <xQueueGenericSendFromISR>
 8008288:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800828c:	4618      	mov	r0, r3
 800828e:	3728      	adds	r7, #40	@ 0x28
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20009364 	.word	0x20009364

08008298 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af02      	add	r7, sp, #8
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082a2:	4b23      	ldr	r3, [pc, #140]	@ (8008330 <prvProcessExpiredTimer+0x98>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	3304      	adds	r3, #4
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fe fb01 	bl	80068b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d023      	beq.n	800830c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	18d1      	adds	r1, r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	6978      	ldr	r0, [r7, #20]
 80082d2:	f000 f8d5 	bl	8008480 <prvInsertTimerInActiveList>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d020      	beq.n	800831e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082dc:	2300      	movs	r3, #0
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	2300      	movs	r3, #0
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	2100      	movs	r1, #0
 80082e6:	6978      	ldr	r0, [r7, #20]
 80082e8:	f7ff ff88 	bl	80081fc <xTimerGenericCommand>
 80082ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d114      	bne.n	800831e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	60fb      	str	r3, [r7, #12]
}
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	e7fd      	b.n	8008308 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008312:	f023 0301 	bic.w	r3, r3, #1
 8008316:	b2da      	uxtb	r2, r3
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	6978      	ldr	r0, [r7, #20]
 8008324:	4798      	blx	r3
}
 8008326:	bf00      	nop
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	2000935c 	.word	0x2000935c

08008334 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800833c:	f107 0308 	add.w	r3, r7, #8
 8008340:	4618      	mov	r0, r3
 8008342:	f000 f859 	bl	80083f8 <prvGetNextExpireTime>
 8008346:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4619      	mov	r1, r3
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 f805 	bl	800835c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008352:	f000 f8d7 	bl	8008504 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008356:	bf00      	nop
 8008358:	e7f0      	b.n	800833c <prvTimerTask+0x8>
	...

0800835c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008366:	f7ff fa0f 	bl	8007788 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800836a:	f107 0308 	add.w	r3, r7, #8
 800836e:	4618      	mov	r0, r3
 8008370:	f000 f866 	bl	8008440 <prvSampleTimeNow>
 8008374:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d130      	bne.n	80083de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <prvProcessTimerOrBlockTask+0x3c>
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	429a      	cmp	r2, r3
 8008388:	d806      	bhi.n	8008398 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800838a:	f7ff fa0b 	bl	80077a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800838e:	68f9      	ldr	r1, [r7, #12]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7ff ff81 	bl	8008298 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008396:	e024      	b.n	80083e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d008      	beq.n	80083b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800839e:	4b13      	ldr	r3, [pc, #76]	@ (80083ec <prvProcessTimerOrBlockTask+0x90>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <prvProcessTimerOrBlockTask+0x50>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e000      	b.n	80083ae <prvProcessTimerOrBlockTask+0x52>
 80083ac:	2300      	movs	r3, #0
 80083ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083b0:	4b0f      	ldr	r3, [pc, #60]	@ (80083f0 <prvProcessTimerOrBlockTask+0x94>)
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	4619      	mov	r1, r3
 80083be:	f7fe ff6b 	bl	8007298 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083c2:	f7ff f9ef 	bl	80077a4 <xTaskResumeAll>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083cc:	4b09      	ldr	r3, [pc, #36]	@ (80083f4 <prvProcessTimerOrBlockTask+0x98>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	f3bf 8f6f 	isb	sy
}
 80083dc:	e001      	b.n	80083e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083de:	f7ff f9e1 	bl	80077a4 <xTaskResumeAll>
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20009360 	.word	0x20009360
 80083f0:	20009364 	.word	0x20009364
 80083f4:	e000ed04 	.word	0xe000ed04

080083f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008400:	4b0e      	ldr	r3, [pc, #56]	@ (800843c <prvGetNextExpireTime+0x44>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <prvGetNextExpireTime+0x16>
 800840a:	2201      	movs	r2, #1
 800840c:	e000      	b.n	8008410 <prvGetNextExpireTime+0x18>
 800840e:	2200      	movs	r2, #0
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d105      	bne.n	8008428 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800841c:	4b07      	ldr	r3, [pc, #28]	@ (800843c <prvGetNextExpireTime+0x44>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e001      	b.n	800842c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800842c:	68fb      	ldr	r3, [r7, #12]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	2000935c 	.word	0x2000935c

08008440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008448:	f7ff fa4a 	bl	80078e0 <xTaskGetTickCount>
 800844c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800844e:	4b0b      	ldr	r3, [pc, #44]	@ (800847c <prvSampleTimeNow+0x3c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	429a      	cmp	r2, r3
 8008456:	d205      	bcs.n	8008464 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008458:	f000 f93a 	bl	80086d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	e002      	b.n	800846a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800846a:	4a04      	ldr	r2, [pc, #16]	@ (800847c <prvSampleTimeNow+0x3c>)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008470:	68fb      	ldr	r3, [r7, #12]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	2000936c 	.word	0x2000936c

08008480 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d812      	bhi.n	80084cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	1ad2      	subs	r2, r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d302      	bcc.n	80084ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084b4:	2301      	movs	r3, #1
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	e01b      	b.n	80084f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084ba:	4b10      	ldr	r3, [pc, #64]	@ (80084fc <prvInsertTimerInActiveList+0x7c>)
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3304      	adds	r3, #4
 80084c2:	4619      	mov	r1, r3
 80084c4:	4610      	mov	r0, r2
 80084c6:	f7fe f9be 	bl	8006846 <vListInsert>
 80084ca:	e012      	b.n	80084f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d206      	bcs.n	80084e2 <prvInsertTimerInActiveList+0x62>
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d302      	bcc.n	80084e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084dc:	2301      	movs	r3, #1
 80084de:	617b      	str	r3, [r7, #20]
 80084e0:	e007      	b.n	80084f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084e2:	4b07      	ldr	r3, [pc, #28]	@ (8008500 <prvInsertTimerInActiveList+0x80>)
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3304      	adds	r3, #4
 80084ea:	4619      	mov	r1, r3
 80084ec:	4610      	mov	r0, r2
 80084ee:	f7fe f9aa 	bl	8006846 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084f2:	697b      	ldr	r3, [r7, #20]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20009360 	.word	0x20009360
 8008500:	2000935c 	.word	0x2000935c

08008504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08e      	sub	sp, #56	@ 0x38
 8008508:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800850a:	e0ce      	b.n	80086aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	da19      	bge.n	8008546 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008512:	1d3b      	adds	r3, r7, #4
 8008514:	3304      	adds	r3, #4
 8008516:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10b      	bne.n	8008536 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	61fb      	str	r3, [r7, #28]
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	e7fd      	b.n	8008532 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800853c:	6850      	ldr	r0, [r2, #4]
 800853e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008540:	6892      	ldr	r2, [r2, #8]
 8008542:	4611      	mov	r1, r2
 8008544:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	f2c0 80ae 	blt.w	80086aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855c:	3304      	adds	r3, #4
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe f9aa 	bl	80068b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008564:	463b      	mov	r3, r7
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff ff6a 	bl	8008440 <prvSampleTimeNow>
 800856c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b09      	cmp	r3, #9
 8008572:	f200 8097 	bhi.w	80086a4 <prvProcessReceivedCommands+0x1a0>
 8008576:	a201      	add	r2, pc, #4	@ (adr r2, 800857c <prvProcessReceivedCommands+0x78>)
 8008578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857c:	080085a5 	.word	0x080085a5
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085a5 	.word	0x080085a5
 8008588:	0800861b 	.word	0x0800861b
 800858c:	0800862f 	.word	0x0800862f
 8008590:	0800867b 	.word	0x0800867b
 8008594:	080085a5 	.word	0x080085a5
 8008598:	080085a5 	.word	0x080085a5
 800859c:	0800861b 	.word	0x0800861b
 80085a0:	0800862f 	.word	0x0800862f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085aa:	f043 0301 	orr.w	r3, r3, #1
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	18d1      	adds	r1, r2, r3
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c4:	f7ff ff5c 	bl	8008480 <prvInsertTimerInActiveList>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d06c      	beq.n	80086a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d061      	beq.n	80086a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	441a      	add	r2, r3
 80085ec:	2300      	movs	r3, #0
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	2300      	movs	r3, #0
 80085f2:	2100      	movs	r1, #0
 80085f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085f6:	f7ff fe01 	bl	80081fc <xTimerGenericCommand>
 80085fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d152      	bne.n	80086a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	61bb      	str	r3, [r7, #24]
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	e7fd      	b.n	8008616 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800861a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008620:	f023 0301 	bic.w	r3, r3, #1
 8008624:	b2da      	uxtb	r2, r3
 8008626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008628:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800862c:	e03d      	b.n	80086aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008634:	f043 0301 	orr.w	r3, r3, #1
 8008638:	b2da      	uxtb	r2, r3
 800863a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008644:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10b      	bne.n	8008666 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	617b      	str	r3, [r7, #20]
}
 8008660:	bf00      	nop
 8008662:	bf00      	nop
 8008664:	e7fd      	b.n	8008662 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008668:	699a      	ldr	r2, [r3, #24]
 800866a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866c:	18d1      	adds	r1, r2, r3
 800866e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008674:	f7ff ff04 	bl	8008480 <prvInsertTimerInActiveList>
					break;
 8008678:	e017      	b.n	80086aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800867a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008680:	f003 0302 	and.w	r3, r3, #2
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008688:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800868a:	f000 fbe5 	bl	8008e58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800868e:	e00c      	b.n	80086aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008696:	f023 0301 	bic.w	r3, r3, #1
 800869a:	b2da      	uxtb	r2, r3
 800869c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80086a2:	e002      	b.n	80086aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80086a4:	bf00      	nop
 80086a6:	e000      	b.n	80086aa <prvProcessReceivedCommands+0x1a6>
					break;
 80086a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086aa:	4b08      	ldr	r3, [pc, #32]	@ (80086cc <prvProcessReceivedCommands+0x1c8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	1d39      	adds	r1, r7, #4
 80086b0:	2200      	movs	r2, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fbd4 	bl	8006e60 <xQueueReceive>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f47f af26 	bne.w	800850c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	3730      	adds	r7, #48	@ 0x30
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20009364 	.word	0x20009364

080086d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086d6:	e049      	b.n	800876c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008794 <prvSwitchTimerLists+0xc4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e2:	4b2c      	ldr	r3, [pc, #176]	@ (8008794 <prvSwitchTimerLists+0xc4>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe f8e1 	bl	80068b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b00      	cmp	r3, #0
 800870a:	d02f      	beq.n	800876c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4413      	add	r3, r2
 8008714:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	429a      	cmp	r2, r3
 800871c:	d90e      	bls.n	800873c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800872a:	4b1a      	ldr	r3, [pc, #104]	@ (8008794 <prvSwitchTimerLists+0xc4>)
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3304      	adds	r3, #4
 8008732:	4619      	mov	r1, r3
 8008734:	4610      	mov	r0, r2
 8008736:	f7fe f886 	bl	8006846 <vListInsert>
 800873a:	e017      	b.n	800876c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800873c:	2300      	movs	r3, #0
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	2300      	movs	r3, #0
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	2100      	movs	r1, #0
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7ff fd58 	bl	80081fc <xTimerGenericCommand>
 800874c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10b      	bne.n	800876c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	603b      	str	r3, [r7, #0]
}
 8008766:	bf00      	nop
 8008768:	bf00      	nop
 800876a:	e7fd      	b.n	8008768 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800876c:	4b09      	ldr	r3, [pc, #36]	@ (8008794 <prvSwitchTimerLists+0xc4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1b0      	bne.n	80086d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008776:	4b07      	ldr	r3, [pc, #28]	@ (8008794 <prvSwitchTimerLists+0xc4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800877c:	4b06      	ldr	r3, [pc, #24]	@ (8008798 <prvSwitchTimerLists+0xc8>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a04      	ldr	r2, [pc, #16]	@ (8008794 <prvSwitchTimerLists+0xc4>)
 8008782:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008784:	4a04      	ldr	r2, [pc, #16]	@ (8008798 <prvSwitchTimerLists+0xc8>)
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	6013      	str	r3, [r2, #0]
}
 800878a:	bf00      	nop
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	2000935c 	.word	0x2000935c
 8008798:	20009360 	.word	0x20009360

0800879c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087a2:	f000 f969 	bl	8008a78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087a6:	4b15      	ldr	r3, [pc, #84]	@ (80087fc <prvCheckForValidListAndQueue+0x60>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d120      	bne.n	80087f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80087ae:	4814      	ldr	r0, [pc, #80]	@ (8008800 <prvCheckForValidListAndQueue+0x64>)
 80087b0:	f7fd fff8 	bl	80067a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087b4:	4813      	ldr	r0, [pc, #76]	@ (8008804 <prvCheckForValidListAndQueue+0x68>)
 80087b6:	f7fd fff5 	bl	80067a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087ba:	4b13      	ldr	r3, [pc, #76]	@ (8008808 <prvCheckForValidListAndQueue+0x6c>)
 80087bc:	4a10      	ldr	r2, [pc, #64]	@ (8008800 <prvCheckForValidListAndQueue+0x64>)
 80087be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087c0:	4b12      	ldr	r3, [pc, #72]	@ (800880c <prvCheckForValidListAndQueue+0x70>)
 80087c2:	4a10      	ldr	r2, [pc, #64]	@ (8008804 <prvCheckForValidListAndQueue+0x68>)
 80087c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087c6:	2300      	movs	r3, #0
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	4b11      	ldr	r3, [pc, #68]	@ (8008810 <prvCheckForValidListAndQueue+0x74>)
 80087cc:	4a11      	ldr	r2, [pc, #68]	@ (8008814 <prvCheckForValidListAndQueue+0x78>)
 80087ce:	2110      	movs	r1, #16
 80087d0:	200a      	movs	r0, #10
 80087d2:	f7fe f905 	bl	80069e0 <xQueueGenericCreateStatic>
 80087d6:	4603      	mov	r3, r0
 80087d8:	4a08      	ldr	r2, [pc, #32]	@ (80087fc <prvCheckForValidListAndQueue+0x60>)
 80087da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087dc:	4b07      	ldr	r3, [pc, #28]	@ (80087fc <prvCheckForValidListAndQueue+0x60>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087e4:	4b05      	ldr	r3, [pc, #20]	@ (80087fc <prvCheckForValidListAndQueue+0x60>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	490b      	ldr	r1, [pc, #44]	@ (8008818 <prvCheckForValidListAndQueue+0x7c>)
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe fd2a 	bl	8007244 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087f0:	f000 f974 	bl	8008adc <vPortExitCritical>
}
 80087f4:	bf00      	nop
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20009364 	.word	0x20009364
 8008800:	20009334 	.word	0x20009334
 8008804:	20009348 	.word	0x20009348
 8008808:	2000935c 	.word	0x2000935c
 800880c:	20009360 	.word	0x20009360
 8008810:	20009410 	.word	0x20009410
 8008814:	20009370 	.word	0x20009370
 8008818:	0801a1dc 	.word	0x0801a1dc

0800881c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3b04      	subs	r3, #4
 800882c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3b04      	subs	r3, #4
 800883a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	f023 0201 	bic.w	r2, r3, #1
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3b04      	subs	r3, #4
 800884a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800884c:	4a0c      	ldr	r2, [pc, #48]	@ (8008880 <pxPortInitialiseStack+0x64>)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3b14      	subs	r3, #20
 8008856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3b04      	subs	r3, #4
 8008862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f06f 0202 	mvn.w	r2, #2
 800886a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3b20      	subs	r3, #32
 8008870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008872:	68fb      	ldr	r3, [r7, #12]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	08008885 	.word	0x08008885

08008884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800888e:	4b13      	ldr	r3, [pc, #76]	@ (80088dc <prvTaskExitError+0x58>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008896:	d00b      	beq.n	80088b0 <prvTaskExitError+0x2c>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	60fb      	str	r3, [r7, #12]
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	e7fd      	b.n	80088ac <prvTaskExitError+0x28>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	60bb      	str	r3, [r7, #8]
}
 80088c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088c4:	bf00      	nop
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0fc      	beq.n	80088c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088cc:	bf00      	nop
 80088ce:	bf00      	nop
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	200000d0 	.word	0x200000d0

080088e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088e0:	4b07      	ldr	r3, [pc, #28]	@ (8008900 <pxCurrentTCBConst2>)
 80088e2:	6819      	ldr	r1, [r3, #0]
 80088e4:	6808      	ldr	r0, [r1, #0]
 80088e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ea:	f380 8809 	msr	PSP, r0
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f04f 0000 	mov.w	r0, #0
 80088f6:	f380 8811 	msr	BASEPRI, r0
 80088fa:	4770      	bx	lr
 80088fc:	f3af 8000 	nop.w

08008900 <pxCurrentTCBConst2>:
 8008900:	20008e34 	.word	0x20008e34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop

08008908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008908:	4808      	ldr	r0, [pc, #32]	@ (800892c <prvPortStartFirstTask+0x24>)
 800890a:	6800      	ldr	r0, [r0, #0]
 800890c:	6800      	ldr	r0, [r0, #0]
 800890e:	f380 8808 	msr	MSP, r0
 8008912:	f04f 0000 	mov.w	r0, #0
 8008916:	f380 8814 	msr	CONTROL, r0
 800891a:	b662      	cpsie	i
 800891c:	b661      	cpsie	f
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	df00      	svc	0
 8008928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800892a:	bf00      	nop
 800892c:	e000ed08 	.word	0xe000ed08

08008930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008936:	4b47      	ldr	r3, [pc, #284]	@ (8008a54 <xPortStartScheduler+0x124>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a47      	ldr	r2, [pc, #284]	@ (8008a58 <xPortStartScheduler+0x128>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d10b      	bne.n	8008958 <xPortStartScheduler+0x28>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	613b      	str	r3, [r7, #16]
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008958:	4b3e      	ldr	r3, [pc, #248]	@ (8008a54 <xPortStartScheduler+0x124>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a5c <xPortStartScheduler+0x12c>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d10b      	bne.n	800897a <xPortStartScheduler+0x4a>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	60fb      	str	r3, [r7, #12]
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	e7fd      	b.n	8008976 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800897a:	4b39      	ldr	r3, [pc, #228]	@ (8008a60 <xPortStartScheduler+0x130>)
 800897c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	b2db      	uxtb	r3, r3
 8008984:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	22ff      	movs	r2, #255	@ 0xff
 800898a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800899c:	b2da      	uxtb	r2, r3
 800899e:	4b31      	ldr	r3, [pc, #196]	@ (8008a64 <xPortStartScheduler+0x134>)
 80089a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089a2:	4b31      	ldr	r3, [pc, #196]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089a4:	2207      	movs	r2, #7
 80089a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089a8:	e009      	b.n	80089be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80089aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089b4:	78fb      	ldrb	r3, [r7, #3]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c6:	2b80      	cmp	r3, #128	@ 0x80
 80089c8:	d0ef      	beq.n	80089aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089ca:	4b27      	ldr	r3, [pc, #156]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f1c3 0307 	rsb	r3, r3, #7
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d00b      	beq.n	80089ee <xPortStartScheduler+0xbe>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	60bb      	str	r3, [r7, #8]
}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	e7fd      	b.n	80089ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	021b      	lsls	r3, r3, #8
 80089f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a00:	4a19      	ldr	r2, [pc, #100]	@ (8008a68 <xPortStartScheduler+0x138>)
 8008a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a0c:	4b17      	ldr	r3, [pc, #92]	@ (8008a6c <xPortStartScheduler+0x13c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a16      	ldr	r2, [pc, #88]	@ (8008a6c <xPortStartScheduler+0x13c>)
 8008a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a18:	4b14      	ldr	r3, [pc, #80]	@ (8008a6c <xPortStartScheduler+0x13c>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a13      	ldr	r2, [pc, #76]	@ (8008a6c <xPortStartScheduler+0x13c>)
 8008a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a24:	f000 f8da 	bl	8008bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a28:	4b11      	ldr	r3, [pc, #68]	@ (8008a70 <xPortStartScheduler+0x140>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a2e:	f000 f8f9 	bl	8008c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a32:	4b10      	ldr	r3, [pc, #64]	@ (8008a74 <xPortStartScheduler+0x144>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a0f      	ldr	r2, [pc, #60]	@ (8008a74 <xPortStartScheduler+0x144>)
 8008a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a3e:	f7ff ff63 	bl	8008908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a42:	f7ff f817 	bl	8007a74 <vTaskSwitchContext>
	prvTaskExitError();
 8008a46:	f7ff ff1d 	bl	8008884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	e000ed00 	.word	0xe000ed00
 8008a58:	410fc271 	.word	0x410fc271
 8008a5c:	410fc270 	.word	0x410fc270
 8008a60:	e000e400 	.word	0xe000e400
 8008a64:	20009460 	.word	0x20009460
 8008a68:	20009464 	.word	0x20009464
 8008a6c:	e000ed20 	.word	0xe000ed20
 8008a70:	200000d0 	.word	0x200000d0
 8008a74:	e000ef34 	.word	0xe000ef34

08008a78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	607b      	str	r3, [r7, #4]
}
 8008a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a92:	4b10      	ldr	r3, [pc, #64]	@ (8008ad4 <vPortEnterCritical+0x5c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3301      	adds	r3, #1
 8008a98:	4a0e      	ldr	r2, [pc, #56]	@ (8008ad4 <vPortEnterCritical+0x5c>)
 8008a9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad4 <vPortEnterCritical+0x5c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d110      	bne.n	8008ac6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad8 <vPortEnterCritical+0x60>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	603b      	str	r3, [r7, #0]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <vPortEnterCritical+0x4a>
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	200000d0 	.word	0x200000d0
 8008ad8:	e000ed04 	.word	0xe000ed04

08008adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ae2:	4b12      	ldr	r3, [pc, #72]	@ (8008b2c <vPortExitCritical+0x50>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10b      	bne.n	8008b02 <vPortExitCritical+0x26>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	607b      	str	r3, [r7, #4]
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	e7fd      	b.n	8008afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b02:	4b0a      	ldr	r3, [pc, #40]	@ (8008b2c <vPortExitCritical+0x50>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	4a08      	ldr	r2, [pc, #32]	@ (8008b2c <vPortExitCritical+0x50>)
 8008b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b0c:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <vPortExitCritical+0x50>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d105      	bne.n	8008b20 <vPortExitCritical+0x44>
 8008b14:	2300      	movs	r3, #0
 8008b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f383 8811 	msr	BASEPRI, r3
}
 8008b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	200000d0 	.word	0x200000d0

08008b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b30:	f3ef 8009 	mrs	r0, PSP
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	4b15      	ldr	r3, [pc, #84]	@ (8008b90 <pxCurrentTCBConst>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	f01e 0f10 	tst.w	lr, #16
 8008b40:	bf08      	it	eq
 8008b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4a:	6010      	str	r0, [r2, #0]
 8008b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008b54:	f380 8811 	msr	BASEPRI, r0
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f7fe ff88 	bl	8007a74 <vTaskSwitchContext>
 8008b64:	f04f 0000 	mov.w	r0, #0
 8008b68:	f380 8811 	msr	BASEPRI, r0
 8008b6c:	bc09      	pop	{r0, r3}
 8008b6e:	6819      	ldr	r1, [r3, #0]
 8008b70:	6808      	ldr	r0, [r1, #0]
 8008b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b76:	f01e 0f10 	tst.w	lr, #16
 8008b7a:	bf08      	it	eq
 8008b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b80:	f380 8809 	msr	PSP, r0
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	f3af 8000 	nop.w

08008b90 <pxCurrentTCBConst>:
 8008b90:	20008e34 	.word	0x20008e34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop

08008b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	607b      	str	r3, [r7, #4]
}
 8008bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bb2:	f7fe fea5 	bl	8007900 <xTaskIncrementTick>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bbc:	4b06      	ldr	r3, [pc, #24]	@ (8008bd8 <xPortSysTickHandler+0x40>)
 8008bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f383 8811 	msr	BASEPRI, r3
}
 8008bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	e000ed04 	.word	0xe000ed04

08008bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bdc:	b480      	push	{r7}
 8008bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008be0:	4b0b      	ldr	r3, [pc, #44]	@ (8008c10 <vPortSetupTimerInterrupt+0x34>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008be6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c14 <vPortSetupTimerInterrupt+0x38>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bec:	4b0a      	ldr	r3, [pc, #40]	@ (8008c18 <vPortSetupTimerInterrupt+0x3c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8008c1c <vPortSetupTimerInterrupt+0x40>)
 8008bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf6:	099b      	lsrs	r3, r3, #6
 8008bf8:	4a09      	ldr	r2, [pc, #36]	@ (8008c20 <vPortSetupTimerInterrupt+0x44>)
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bfe:	4b04      	ldr	r3, [pc, #16]	@ (8008c10 <vPortSetupTimerInterrupt+0x34>)
 8008c00:	2207      	movs	r2, #7
 8008c02:	601a      	str	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	e000e010 	.word	0xe000e010
 8008c14:	e000e018 	.word	0xe000e018
 8008c18:	20000004 	.word	0x20000004
 8008c1c:	10624dd3 	.word	0x10624dd3
 8008c20:	e000e014 	.word	0xe000e014

08008c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c34 <vPortEnableVFP+0x10>
 8008c28:	6801      	ldr	r1, [r0, #0]
 8008c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c2e:	6001      	str	r1, [r0, #0]
 8008c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c32:	bf00      	nop
 8008c34:	e000ed88 	.word	0xe000ed88

08008c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c3e:	f3ef 8305 	mrs	r3, IPSR
 8008c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b0f      	cmp	r3, #15
 8008c48:	d915      	bls.n	8008c76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c4a:	4a18      	ldr	r2, [pc, #96]	@ (8008cac <vPortValidateInterruptPriority+0x74>)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c54:	4b16      	ldr	r3, [pc, #88]	@ (8008cb0 <vPortValidateInterruptPriority+0x78>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	7afa      	ldrb	r2, [r7, #11]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d20b      	bcs.n	8008c76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	607b      	str	r3, [r7, #4]
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	e7fd      	b.n	8008c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c76:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb4 <vPortValidateInterruptPriority+0x7c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb8 <vPortValidateInterruptPriority+0x80>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d90b      	bls.n	8008c9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	603b      	str	r3, [r7, #0]
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	e7fd      	b.n	8008c9a <vPortValidateInterruptPriority+0x62>
	}
 8008c9e:	bf00      	nop
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	e000e3f0 	.word	0xe000e3f0
 8008cb0:	20009460 	.word	0x20009460
 8008cb4:	e000ed0c 	.word	0xe000ed0c
 8008cb8:	20009464 	.word	0x20009464

08008cbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	@ 0x28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cc8:	f7fe fd5e 	bl	8007788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e40 <pvPortMalloc+0x184>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cd4:	f000 f930 	bl	8008f38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8008e44 <pvPortMalloc+0x188>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4013      	ands	r3, r2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f040 8095 	bne.w	8008e10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01e      	beq.n	8008d2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008cec:	2208      	movs	r2, #8
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d015      	beq.n	8008d2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f023 0307 	bic.w	r3, r3, #7
 8008d04:	3308      	adds	r3, #8
 8008d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <pvPortMalloc+0x6e>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	617b      	str	r3, [r7, #20]
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	e7fd      	b.n	8008d26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d06f      	beq.n	8008e10 <pvPortMalloc+0x154>
 8008d30:	4b45      	ldr	r3, [pc, #276]	@ (8008e48 <pvPortMalloc+0x18c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d86a      	bhi.n	8008e10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d3a:	4b44      	ldr	r3, [pc, #272]	@ (8008e4c <pvPortMalloc+0x190>)
 8008d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d3e:	4b43      	ldr	r3, [pc, #268]	@ (8008e4c <pvPortMalloc+0x190>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d44:	e004      	b.n	8008d50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d903      	bls.n	8008d62 <pvPortMalloc+0xa6>
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1f1      	bne.n	8008d46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d62:	4b37      	ldr	r3, [pc, #220]	@ (8008e40 <pvPortMalloc+0x184>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d051      	beq.n	8008e10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2208      	movs	r2, #8
 8008d72:	4413      	add	r3, r2
 8008d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	1ad2      	subs	r2, r2, r3
 8008d86:	2308      	movs	r3, #8
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d920      	bls.n	8008dd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4413      	add	r3, r2
 8008d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	f003 0307 	and.w	r3, r3, #7
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00b      	beq.n	8008db8 <pvPortMalloc+0xfc>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	613b      	str	r3, [r7, #16]
}
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	e7fd      	b.n	8008db4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dca:	69b8      	ldr	r0, [r7, #24]
 8008dcc:	f000 f916 	bl	8008ffc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e48 <pvPortMalloc+0x18c>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	4a1b      	ldr	r2, [pc, #108]	@ (8008e48 <pvPortMalloc+0x18c>)
 8008ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dde:	4b1a      	ldr	r3, [pc, #104]	@ (8008e48 <pvPortMalloc+0x18c>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e50 <pvPortMalloc+0x194>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d203      	bcs.n	8008df2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dea:	4b17      	ldr	r3, [pc, #92]	@ (8008e48 <pvPortMalloc+0x18c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a18      	ldr	r2, [pc, #96]	@ (8008e50 <pvPortMalloc+0x194>)
 8008df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	4b13      	ldr	r3, [pc, #76]	@ (8008e44 <pvPortMalloc+0x188>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e06:	4b13      	ldr	r3, [pc, #76]	@ (8008e54 <pvPortMalloc+0x198>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	4a11      	ldr	r2, [pc, #68]	@ (8008e54 <pvPortMalloc+0x198>)
 8008e0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e10:	f7fe fcc8 	bl	80077a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00b      	beq.n	8008e36 <pvPortMalloc+0x17a>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	60fb      	str	r3, [r7, #12]
}
 8008e30:	bf00      	nop
 8008e32:	bf00      	nop
 8008e34:	e7fd      	b.n	8008e32 <pvPortMalloc+0x176>
	return pvReturn;
 8008e36:	69fb      	ldr	r3, [r7, #28]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3728      	adds	r7, #40	@ 0x28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	200109a0 	.word	0x200109a0
 8008e44:	200109b4 	.word	0x200109b4
 8008e48:	200109a4 	.word	0x200109a4
 8008e4c:	20010998 	.word	0x20010998
 8008e50:	200109a8 	.word	0x200109a8
 8008e54:	200109ac 	.word	0x200109ac

08008e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d04f      	beq.n	8008f0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	425b      	negs	r3, r3
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4413      	add	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4b25      	ldr	r3, [pc, #148]	@ (8008f14 <vPortFree+0xbc>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4013      	ands	r3, r2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10b      	bne.n	8008e9e <vPortFree+0x46>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	60fb      	str	r3, [r7, #12]
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	e7fd      	b.n	8008e9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <vPortFree+0x66>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	60bb      	str	r3, [r7, #8]
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	e7fd      	b.n	8008eba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	4b14      	ldr	r3, [pc, #80]	@ (8008f14 <vPortFree+0xbc>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01e      	beq.n	8008f0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11a      	bne.n	8008f0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f14 <vPortFree+0xbc>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	43db      	mvns	r3, r3
 8008ede:	401a      	ands	r2, r3
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ee4:	f7fe fc50 	bl	8007788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	4b0a      	ldr	r3, [pc, #40]	@ (8008f18 <vPortFree+0xc0>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	4a09      	ldr	r2, [pc, #36]	@ (8008f18 <vPortFree+0xc0>)
 8008ef4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ef6:	6938      	ldr	r0, [r7, #16]
 8008ef8:	f000 f880 	bl	8008ffc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008efc:	4b07      	ldr	r3, [pc, #28]	@ (8008f1c <vPortFree+0xc4>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3301      	adds	r3, #1
 8008f02:	4a06      	ldr	r2, [pc, #24]	@ (8008f1c <vPortFree+0xc4>)
 8008f04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f06:	f7fe fc4d 	bl	80077a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f0a:	bf00      	nop
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200109b4 	.word	0x200109b4
 8008f18:	200109a4 	.word	0x200109a4
 8008f1c:	200109b0 	.word	0x200109b0

08008f20 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8008f24:	4b03      	ldr	r3, [pc, #12]	@ (8008f34 <xPortGetFreeHeapSize+0x14>)
 8008f26:	681b      	ldr	r3, [r3, #0]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	200109a4 	.word	0x200109a4

08008f38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f3e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8008f42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f44:	4b27      	ldr	r3, [pc, #156]	@ (8008fe4 <prvHeapInit+0xac>)
 8008f46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00c      	beq.n	8008f6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3307      	adds	r3, #7
 8008f56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0307 	bic.w	r3, r3, #7
 8008f5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	4a1f      	ldr	r2, [pc, #124]	@ (8008fe4 <prvHeapInit+0xac>)
 8008f68:	4413      	add	r3, r2
 8008f6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f70:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe8 <prvHeapInit+0xb0>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f76:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe8 <prvHeapInit+0xb0>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	4413      	add	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f84:	2208      	movs	r2, #8
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f023 0307 	bic.w	r3, r3, #7
 8008f92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4a15      	ldr	r2, [pc, #84]	@ (8008fec <prvHeapInit+0xb4>)
 8008f98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f9a:	4b14      	ldr	r3, [pc, #80]	@ (8008fec <prvHeapInit+0xb4>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fa2:	4b12      	ldr	r3, [pc, #72]	@ (8008fec <prvHeapInit+0xb4>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	1ad2      	subs	r2, r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008fec <prvHeapInit+0xb4>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8008ff0 <prvHeapInit+0xb8>)
 8008fc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	4a09      	ldr	r2, [pc, #36]	@ (8008ff4 <prvHeapInit+0xbc>)
 8008fce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fd0:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <prvHeapInit+0xc0>)
 8008fd2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008fd6:	601a      	str	r2, [r3, #0]
}
 8008fd8:	bf00      	nop
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	20009468 	.word	0x20009468
 8008fe8:	20010998 	.word	0x20010998
 8008fec:	200109a0 	.word	0x200109a0
 8008ff0:	200109a8 	.word	0x200109a8
 8008ff4:	200109a4 	.word	0x200109a4
 8008ff8:	200109b4 	.word	0x200109b4

08008ffc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009004:	4b28      	ldr	r3, [pc, #160]	@ (80090a8 <prvInsertBlockIntoFreeList+0xac>)
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e002      	b.n	8009010 <prvInsertBlockIntoFreeList+0x14>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	429a      	cmp	r2, r3
 8009018:	d8f7      	bhi.n	800900a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	4413      	add	r3, r2
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	429a      	cmp	r2, r3
 800902a:	d108      	bne.n	800903e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	441a      	add	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	441a      	add	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d118      	bne.n	8009084 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	4b15      	ldr	r3, [pc, #84]	@ (80090ac <prvInsertBlockIntoFreeList+0xb0>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	429a      	cmp	r2, r3
 800905c:	d00d      	beq.n	800907a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	441a      	add	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	e008      	b.n	800908c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800907a:	4b0c      	ldr	r3, [pc, #48]	@ (80090ac <prvInsertBlockIntoFreeList+0xb0>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	e003      	b.n	800908c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	429a      	cmp	r2, r3
 8009092:	d002      	beq.n	800909a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800909a:	bf00      	nop
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20010998 	.word	0x20010998
 80090ac:	200109a0 	.word	0x200109a0

080090b0 <arm_mat_mult_f32>:
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	460c      	mov	r4, r1
 80090b6:	b08b      	sub	sp, #44	@ 0x2c
 80090b8:	8825      	ldrh	r5, [r4, #0]
 80090ba:	9107      	str	r1, [sp, #28]
 80090bc:	8841      	ldrh	r1, [r0, #2]
 80090be:	8806      	ldrh	r6, [r0, #0]
 80090c0:	6843      	ldr	r3, [r0, #4]
 80090c2:	6857      	ldr	r7, [r2, #4]
 80090c4:	6860      	ldr	r0, [r4, #4]
 80090c6:	9602      	str	r6, [sp, #8]
 80090c8:	428d      	cmp	r5, r1
 80090ca:	8864      	ldrh	r4, [r4, #2]
 80090cc:	f040 80f9 	bne.w	80092c2 <arm_mat_mult_f32+0x212>
 80090d0:	8811      	ldrh	r1, [r2, #0]
 80090d2:	42b1      	cmp	r1, r6
 80090d4:	f040 80f5 	bne.w	80092c2 <arm_mat_mult_f32+0x212>
 80090d8:	8851      	ldrh	r1, [r2, #2]
 80090da:	42a1      	cmp	r1, r4
 80090dc:	f040 80f1 	bne.w	80092c2 <arm_mat_mult_f32+0x212>
 80090e0:	00aa      	lsls	r2, r5, #2
 80090e2:	2901      	cmp	r1, #1
 80090e4:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 80090e8:	ea4f 0481 	mov.w	r4, r1, lsl #2
 80090ec:	f005 0e03 	and.w	lr, r5, #3
 80090f0:	9206      	str	r2, [sp, #24]
 80090f2:	d170      	bne.n	80091d6 <arm_mat_mult_f32+0x126>
 80090f4:	1d01      	adds	r1, r0, #4
 80090f6:	9105      	str	r1, [sp, #20]
 80090f8:	ea4f 110c 	mov.w	r1, ip, lsl #4
 80090fc:	4602      	mov	r2, r0
 80090fe:	f107 0904 	add.w	r9, r7, #4
 8009102:	9101      	str	r1, [sp, #4]
 8009104:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 8009108:	f103 0a10 	add.w	sl, r3, #16
 800910c:	f1aa 0310 	sub.w	r3, sl, #16
 8009110:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009114:	9303      	str	r3, [sp, #12]
 8009116:	f1a9 0704 	sub.w	r7, r9, #4
 800911a:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 80092cc <arm_mat_mult_f32+0x21c>
 800911e:	f1bc 0f00 	cmp.w	ip, #0
 8009122:	d052      	beq.n	80091ca <arm_mat_mult_f32+0x11a>
 8009124:	f102 0008 	add.w	r0, r2, #8
 8009128:	4653      	mov	r3, sl
 800912a:	4665      	mov	r5, ip
 800912c:	4611      	mov	r1, r2
 800912e:	ed13 6a04 	vldr	s12, [r3, #-16]
 8009132:	ed91 7a00 	vldr	s14, [r1]
 8009136:	ed53 4a03 	vldr	s9, [r3, #-12]
 800913a:	edd0 6a00 	vldr	s13, [r0]
 800913e:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009142:	ed53 5a01 	vldr	s11, [r3, #-4]
 8009146:	190e      	adds	r6, r1, r4
 8009148:	ee27 7a06 	vmul.f32	s14, s14, s12
 800914c:	ed96 6a00 	vldr	s12, [r6]
 8009150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009154:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009158:	1906      	adds	r6, r0, r4
 800915a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800915e:	ee26 7a85 	vmul.f32	s14, s13, s10
 8009162:	edd6 7a00 	vldr	s15, [r6]
 8009166:	ee37 7a06 	vadd.f32	s14, s14, s12
 800916a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800916e:	3d01      	subs	r5, #1
 8009170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009174:	f101 0110 	add.w	r1, r1, #16
 8009178:	f100 0010 	add.w	r0, r0, #16
 800917c:	f103 0310 	add.w	r3, r3, #16
 8009180:	d1d5      	bne.n	800912e <arm_mat_mult_f32+0x7e>
 8009182:	9b01      	ldr	r3, [sp, #4]
 8009184:	4659      	mov	r1, fp
 8009186:	441a      	add	r2, r3
 8009188:	f1be 0f00 	cmp.w	lr, #0
 800918c:	d00b      	beq.n	80091a6 <arm_mat_mult_f32+0xf6>
 800918e:	4673      	mov	r3, lr
 8009190:	ed92 7a00 	vldr	s14, [r2]
 8009194:	ecf1 6a01 	vldmia	r1!, {s13}
 8009198:	ee27 7a26 	vmul.f32	s14, s14, s13
 800919c:	3b01      	subs	r3, #1
 800919e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091a2:	4422      	add	r2, r4
 80091a4:	d1f4      	bne.n	8009190 <arm_mat_mult_f32+0xe0>
 80091a6:	ece7 7a01 	vstmia	r7!, {s15}
 80091aa:	454f      	cmp	r7, r9
 80091ac:	4642      	mov	r2, r8
 80091ae:	f108 0804 	add.w	r8, r8, #4
 80091b2:	d1b2      	bne.n	800911a <arm_mat_mult_f32+0x6a>
 80091b4:	9b06      	ldr	r3, [sp, #24]
 80091b6:	449b      	add	fp, r3
 80091b8:	449a      	add	sl, r3
 80091ba:	9b02      	ldr	r3, [sp, #8]
 80091bc:	3b01      	subs	r3, #1
 80091be:	44a1      	add	r9, r4
 80091c0:	9302      	str	r3, [sp, #8]
 80091c2:	d004      	beq.n	80091ce <arm_mat_mult_f32+0x11e>
 80091c4:	9b07      	ldr	r3, [sp, #28]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	e7a0      	b.n	800910c <arm_mat_mult_f32+0x5c>
 80091ca:	9903      	ldr	r1, [sp, #12]
 80091cc:	e7dc      	b.n	8009188 <arm_mat_mult_f32+0xd8>
 80091ce:	4618      	mov	r0, r3
 80091d0:	b00b      	add	sp, #44	@ 0x2c
 80091d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d6:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 80091da:	0092      	lsls	r2, r2, #2
 80091dc:	010e      	lsls	r6, r1, #4
 80091de:	9209      	str	r2, [sp, #36]	@ 0x24
 80091e0:	00ca      	lsls	r2, r1, #3
 80091e2:	9204      	str	r2, [sp, #16]
 80091e4:	fb06 f20c 	mul.w	r2, r6, ip
 80091e8:	1d05      	adds	r5, r0, #4
 80091ea:	9203      	str	r2, [sp, #12]
 80091ec:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 80091f0:	eb07 0b04 	add.w	fp, r7, r4
 80091f4:	9505      	str	r5, [sp, #20]
 80091f6:	9201      	str	r2, [sp, #4]
 80091f8:	f103 0a10 	add.w	sl, r3, #16
 80091fc:	f1aa 0310 	sub.w	r3, sl, #16
 8009200:	9308      	str	r3, [sp, #32]
 8009202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009204:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009208:	eb0b 0803 	add.w	r8, fp, r3
 800920c:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 80092cc <arm_mat_mult_f32+0x21c>
 8009210:	f1bc 0f00 	cmp.w	ip, #0
 8009214:	d053      	beq.n	80092be <arm_mat_mult_f32+0x20e>
 8009216:	9b04      	ldr	r3, [sp, #16]
 8009218:	4665      	mov	r5, ip
 800921a:	18c1      	adds	r1, r0, r3
 800921c:	4602      	mov	r2, r0
 800921e:	4653      	mov	r3, sl
 8009220:	ed92 6a00 	vldr	s12, [r2]
 8009224:	ed13 7a04 	vldr	s14, [r3, #-16]
 8009228:	ed53 4a03 	vldr	s9, [r3, #-12]
 800922c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8009230:	ed91 5a00 	vldr	s10, [r1]
 8009234:	ed53 5a01 	vldr	s11, [r3, #-4]
 8009238:	1917      	adds	r7, r2, r4
 800923a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800923e:	ed97 6a00 	vldr	s12, [r7]
 8009242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009246:	ee26 6a24 	vmul.f32	s12, s12, s9
 800924a:	190f      	adds	r7, r1, r4
 800924c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009250:	ee26 7a85 	vmul.f32	s14, s13, s10
 8009254:	edd7 7a00 	vldr	s15, [r7]
 8009258:	ee37 7a06 	vadd.f32	s14, s14, s12
 800925c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009260:	3d01      	subs	r5, #1
 8009262:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009266:	4432      	add	r2, r6
 8009268:	4431      	add	r1, r6
 800926a:	f103 0310 	add.w	r3, r3, #16
 800926e:	d1d7      	bne.n	8009220 <arm_mat_mult_f32+0x170>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	9a01      	ldr	r2, [sp, #4]
 8009274:	4418      	add	r0, r3
 8009276:	f1be 0f00 	cmp.w	lr, #0
 800927a:	d00b      	beq.n	8009294 <arm_mat_mult_f32+0x1e4>
 800927c:	4673      	mov	r3, lr
 800927e:	edd0 6a00 	vldr	s13, [r0]
 8009282:	ecb2 7a01 	vldmia	r2!, {s14}
 8009286:	ee27 7a26 	vmul.f32	s14, s14, s13
 800928a:	3b01      	subs	r3, #1
 800928c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009290:	4420      	add	r0, r4
 8009292:	d1f4      	bne.n	800927e <arm_mat_mult_f32+0x1ce>
 8009294:	ece8 7a01 	vstmia	r8!, {s15}
 8009298:	45d8      	cmp	r8, fp
 800929a:	4648      	mov	r0, r9
 800929c:	f109 0904 	add.w	r9, r9, #4
 80092a0:	d1b4      	bne.n	800920c <arm_mat_mult_f32+0x15c>
 80092a2:	9a01      	ldr	r2, [sp, #4]
 80092a4:	9b06      	ldr	r3, [sp, #24]
 80092a6:	4611      	mov	r1, r2
 80092a8:	4419      	add	r1, r3
 80092aa:	449a      	add	sl, r3
 80092ac:	9b02      	ldr	r3, [sp, #8]
 80092ae:	9101      	str	r1, [sp, #4]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	44a3      	add	fp, r4
 80092b4:	9302      	str	r3, [sp, #8]
 80092b6:	d08a      	beq.n	80091ce <arm_mat_mult_f32+0x11e>
 80092b8:	9b07      	ldr	r3, [sp, #28]
 80092ba:	6858      	ldr	r0, [r3, #4]
 80092bc:	e79e      	b.n	80091fc <arm_mat_mult_f32+0x14c>
 80092be:	9a08      	ldr	r2, [sp, #32]
 80092c0:	e7d9      	b.n	8009276 <arm_mat_mult_f32+0x1c6>
 80092c2:	f06f 0002 	mvn.w	r0, #2
 80092c6:	b00b      	add	sp, #44	@ 0x2c
 80092c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092cc:	00000000 	.word	0x00000000

080092d0 <arm_mat_init_f32>:
 80092d0:	8001      	strh	r1, [r0, #0]
 80092d2:	8042      	strh	r2, [r0, #2]
 80092d4:	6043      	str	r3, [r0, #4]
 80092d6:	4770      	bx	lr

080092d8 <handle_message_memory.constprop.4>:
 80092d8:	b082      	sub	sp, #8
 80092da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092de:	b0a7      	sub	sp, #156	@ 0x9c
 80092e0:	ac30      	add	r4, sp, #192	@ 0xc0
 80092e2:	e884 000c 	stmia.w	r4, {r2, r3}
 80092e6:	9213      	str	r2, [sp, #76]	@ 0x4c
 80092e8:	e9dd 9236 	ldrd	r9, r2, [sp, #216]	@ 0xd8
 80092ec:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80092ee:	900b      	str	r0, [sp, #44]	@ 0x2c
 80092f0:	e9dd a733 	ldrd	sl, r7, [sp, #204]	@ 0xcc
 80092f4:	9117      	str	r1, [sp, #92]	@ 0x5c
 80092f6:	9314      	str	r3, [sp, #80]	@ 0x50
 80092f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 81a5 	beq.w	800964a <handle_message_memory.constprop.4+0x372>
 8009300:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	930a      	str	r3, [sp, #40]	@ 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d036      	beq.n	8009378 <handle_message_memory.constprop.4+0xa0>
 800930a:	2300      	movs	r3, #0
 800930c:	930a      	str	r3, [sp, #40]	@ 0x28
 800930e:	469b      	mov	fp, r3
 8009310:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 8009318:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800931c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009320:	6899      	ldr	r1, [r3, #8]
 8009322:	920e      	str	r2, [sp, #56]	@ 0x38
 8009324:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009326:	7c1a      	ldrb	r2, [r3, #16]
 8009328:	68d9      	ldr	r1, [r3, #12]
 800932a:	791d      	ldrb	r5, [r3, #4]
 800932c:	7e1c      	ldrb	r4, [r3, #24]
 800932e:	9110      	str	r1, [sp, #64]	@ 0x40
 8009330:	6959      	ldr	r1, [r3, #20]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	9109      	str	r1, [sp, #36]	@ 0x24
 8009336:	9312      	str	r3, [sp, #72]	@ 0x48
 8009338:	2a00      	cmp	r2, #0
 800933a:	d06e      	beq.n	800941a <handle_message_memory.constprop.4+0x142>
 800933c:	2900      	cmp	r1, #0
 800933e:	f000 80c8 	beq.w	80094d2 <handle_message_memory.constprop.4+0x1fa>
 8009342:	2c00      	cmp	r4, #0
 8009344:	f040 80c5 	bne.w	80094d2 <handle_message_memory.constprop.4+0x1fa>
 8009348:	940c      	str	r4, [sp, #48]	@ 0x30
 800934a:	2f00      	cmp	r7, #0
 800934c:	d168      	bne.n	8009420 <handle_message_memory.constprop.4+0x148>
 800934e:	2d10      	cmp	r5, #16
 8009350:	f000 8084 	beq.w	800945c <handle_message_memory.constprop.4+0x184>
 8009354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009356:	2b00      	cmp	r3, #0
 8009358:	f040 80c0 	bne.w	80094dc <handle_message_memory.constprop.4+0x204>
 800935c:	2d12      	cmp	r5, #18
 800935e:	f000 8157 	beq.w	8009610 <handle_message_memory.constprop.4+0x338>
 8009362:	9309      	str	r3, [sp, #36]	@ 0x24
 8009364:	2d64      	cmp	r5, #100	@ 0x64
 8009366:	d00d      	beq.n	8009384 <handle_message_memory.constprop.4+0xac>
 8009368:	2f00      	cmp	r7, #0
 800936a:	d138      	bne.n	80093de <handle_message_memory.constprop.4+0x106>
 800936c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f10b 0b01 	add.w	fp, fp, #1
 8009374:	459b      	cmp	fp, r3
 8009376:	d3cb      	bcc.n	8009310 <handle_message_memory.constprop.4+0x38>
 8009378:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800937a:	b027      	add	sp, #156	@ 0x9c
 800937c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	b002      	add	sp, #8
 8009382:	4770      	bx	lr
 8009384:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 814f 	beq.w	800962a <handle_message_memory.constprop.4+0x352>
 800938c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800938e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009390:	4613      	mov	r3, r2
 8009392:	2a00      	cmp	r2, #0
 8009394:	bf08      	it	eq
 8009396:	460b      	moveq	r3, r1
 8009398:	930f      	str	r3, [sp, #60]	@ 0x3c
 800939a:	b1c7      	cbz	r7, 80093ce <handle_message_memory.constprop.4+0xf6>
 800939c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800939e:	2400      	movs	r4, #0
 80093a0:	1e5d      	subs	r5, r3, #1
 80093a2:	f85a 6034 	ldr.w	r6, [sl, r4, lsl #3]
 80093a6:	462a      	mov	r2, r5
 80093a8:	4649      	mov	r1, r9
 80093aa:	4630      	mov	r0, r6
 80093ac:	f00f fd01 	bl	8018db2 <memcmp>
 80093b0:	4603      	mov	r3, r0
 80093b2:	49a8      	ldr	r1, [pc, #672]	@ (8009654 <handle_message_memory.constprop.4+0x37c>)
 80093b4:	1970      	adds	r0, r6, r5
 80093b6:	2205      	movs	r2, #5
 80093b8:	eb0a 06c4 	add.w	r6, sl, r4, lsl #3
 80093bc:	3401      	adds	r4, #1
 80093be:	b923      	cbnz	r3, 80093ca <handle_message_memory.constprop.4+0xf2>
 80093c0:	f00f fcf7 	bl	8018db2 <memcmp>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	f000 8134 	beq.w	8009632 <handle_message_memory.constprop.4+0x35a>
 80093ca:	42a7      	cmp	r7, r4
 80093cc:	d1e9      	bne.n	80093a2 <handle_message_memory.constprop.4+0xca>
 80093ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 80093d2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093d4:	fb01 3302 	mla	r3, r1, r2, r3
 80093d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80093da:	2f00      	cmp	r7, #0
 80093dc:	d0c6      	beq.n	800936c <handle_message_memory.constprop.4+0x94>
 80093de:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80093e0:	f7f6 ff0e 	bl	8000200 <strlen>
 80093e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093e6:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 80093ea:	3001      	adds	r0, #1
 80093ec:	9000      	str	r0, [sp, #0]
 80093ee:	9337      	str	r3, [sp, #220]	@ 0xdc
 80093f0:	ae36      	add	r6, sp, #216	@ 0xd8
 80093f2:	ac18      	add	r4, sp, #96	@ 0x60
 80093f4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80093f8:	4620      	mov	r0, r4
 80093fa:	f003 fad1 	bl	800c9a0 <micro_ros_string_utilities_remove_tail_chars>
 80093fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009400:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	910d      	str	r1, [sp, #52]	@ 0x34
 8009408:	f10b 0b01 	add.w	fp, fp, #1
 800940c:	455b      	cmp	r3, fp
 800940e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009412:	4681      	mov	r9, r0
 8009414:	f63f af7c 	bhi.w	8009310 <handle_message_memory.constprop.4+0x38>
 8009418:	e7ae      	b.n	8009378 <handle_message_memory.constprop.4+0xa0>
 800941a:	920c      	str	r2, [sp, #48]	@ 0x30
 800941c:	2f00      	cmp	r7, #0
 800941e:	d096      	beq.n	800934e <handle_message_memory.constprop.4+0x76>
 8009420:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009422:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009426:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800942a:	ae36      	add	r6, sp, #216	@ 0xd8
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8009432:	4630      	mov	r0, r6
 8009434:	f003 fa86 	bl	800c944 <micro_ros_string_utilities_append>
 8009438:	4b87      	ldr	r3, [pc, #540]	@ (8009658 <handle_message_memory.constprop.4+0x380>)
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	f10d 0860 	add.w	r8, sp, #96	@ 0x60
 8009440:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8009444:	4640      	mov	r0, r8
 8009446:	f003 fa7d 	bl	800c944 <micro_ros_string_utilities_append>
 800944a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800944e:	2d10      	cmp	r5, #16
 8009450:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009454:	4681      	mov	r9, r0
 8009456:	910d      	str	r1, [sp, #52]	@ 0x34
 8009458:	f47f af7c 	bne.w	8009354 <handle_message_memory.constprop.4+0x7c>
 800945c:	2c00      	cmp	r4, #0
 800945e:	f000 80c7 	beq.w	80095f0 <handle_message_memory.constprop.4+0x318>
 8009462:	2301      	movs	r3, #1
 8009464:	9311      	str	r3, [sp, #68]	@ 0x44
 8009466:	2f00      	cmp	r7, #0
 8009468:	d144      	bne.n	80094f4 <handle_message_memory.constprop.4+0x21c>
 800946a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800946e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009470:	2d12      	cmp	r5, #18
 8009472:	fb01 3302 	mla	r3, r1, r2, r3
 8009476:	930a      	str	r3, [sp, #40]	@ 0x28
 8009478:	f47f af74 	bne.w	8009364 <handle_message_memory.constprop.4+0x8c>
 800947c:	4b77      	ldr	r3, [pc, #476]	@ (800965c <handle_message_memory.constprop.4+0x384>)
 800947e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009480:	6819      	ldr	r1, [r3, #0]
 8009482:	f002 fe01 	bl	800c088 <get_message_typesupport_handle>
 8009486:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009488:	6845      	ldr	r5, [r0, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	f040 80ea 	bne.w	8009664 <handle_message_memory.constprop.4+0x38c>
 8009490:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009492:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009494:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 8009498:	ae36      	add	r6, sp, #216	@ 0xd8
 800949a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800949e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094a0:	9335      	str	r3, [sp, #212]	@ 0xd4
 80094a2:	f10d 0810 	add.w	r8, sp, #16
 80094a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094a8:	9330      	str	r3, [sp, #192]	@ 0xc0
 80094aa:	e9cd a733 	strd	sl, r7, [sp, #204]	@ 0xcc
 80094ae:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80094b2:	ab32      	add	r3, sp, #200	@ 0xc8
 80094b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094b6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80094ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80094bc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80094be:	4419      	add	r1, r3
 80094c0:	ab30      	add	r3, sp, #192	@ 0xc0
 80094c2:	cb0c      	ldmia	r3, {r2, r3}
 80094c4:	4628      	mov	r0, r5
 80094c6:	f7ff ff07 	bl	80092d8 <handle_message_memory.constprop.4>
 80094ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094cc:	4403      	add	r3, r0
 80094ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80094d0:	e74a      	b.n	8009368 <handle_message_memory.constprop.4+0x90>
 80094d2:	2d10      	cmp	r5, #16
 80094d4:	d07a      	beq.n	80095cc <handle_message_memory.constprop.4+0x2f4>
 80094d6:	2f00      	cmp	r7, #0
 80094d8:	f040 8097 	bne.w	800960a <handle_message_memory.constprop.4+0x332>
 80094dc:	2d12      	cmp	r5, #18
 80094de:	d029      	beq.n	8009534 <handle_message_memory.constprop.4+0x25c>
 80094e0:	2d64      	cmp	r5, #100	@ 0x64
 80094e2:	d177      	bne.n	80095d4 <handle_message_memory.constprop.4+0x2fc>
 80094e4:	230c      	movs	r3, #12
 80094e6:	9311      	str	r3, [sp, #68]	@ 0x44
 80094e8:	2c00      	cmp	r4, #0
 80094ea:	d079      	beq.n	80095e0 <handle_message_memory.constprop.4+0x308>
 80094ec:	2301      	movs	r3, #1
 80094ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80094f0:	2f00      	cmp	r7, #0
 80094f2:	d0ba      	beq.n	800946a <handle_message_memory.constprop.4+0x192>
 80094f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094f6:	e9cd b515 	strd	fp, r5, [sp, #84]	@ 0x54
 80094fa:	2400      	movs	r4, #0
 80094fc:	1e5e      	subs	r6, r3, #1
 80094fe:	f85a b034 	ldr.w	fp, [sl, r4, lsl #3]
 8009502:	4658      	mov	r0, fp
 8009504:	f7f6 fe7c 	bl	8000200 <strlen>
 8009508:	4649      	mov	r1, r9
 800950a:	4602      	mov	r2, r0
 800950c:	4658      	mov	r0, fp
 800950e:	f00f fc50 	bl	8018db2 <memcmp>
 8009512:	4605      	mov	r5, r0
 8009514:	eb0a 08c4 	add.w	r8, sl, r4, lsl #3
 8009518:	4632      	mov	r2, r6
 800951a:	3401      	adds	r4, #1
 800951c:	4649      	mov	r1, r9
 800951e:	4658      	mov	r0, fp
 8009520:	b91d      	cbnz	r5, 800952a <handle_message_memory.constprop.4+0x252>
 8009522:	f00f fc46 	bl	8018db2 <memcmp>
 8009526:	2800      	cmp	r0, #0
 8009528:	d079      	beq.n	800961e <handle_message_memory.constprop.4+0x346>
 800952a:	42a7      	cmp	r7, r4
 800952c:	d8e7      	bhi.n	80094fe <handle_message_memory.constprop.4+0x226>
 800952e:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 8009532:	e79a      	b.n	800946a <handle_message_memory.constprop.4+0x192>
 8009534:	4b49      	ldr	r3, [pc, #292]	@ (800965c <handle_message_memory.constprop.4+0x384>)
 8009536:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009538:	6819      	ldr	r1, [r3, #0]
 800953a:	f002 fda5 	bl	800c088 <get_message_typesupport_handle>
 800953e:	6843      	ldr	r3, [r0, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	9311      	str	r3, [sp, #68]	@ 0x44
 8009544:	b90c      	cbnz	r4, 800954a <handle_message_memory.constprop.4+0x272>
 8009546:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009548:	9309      	str	r3, [sp, #36]	@ 0x24
 800954a:	2f00      	cmp	r7, #0
 800954c:	d14d      	bne.n	80095ea <handle_message_memory.constprop.4+0x312>
 800954e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009550:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009552:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8009554:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009556:	fb04 3302 	mla	r3, r4, r2, r3
 800955a:	930a      	str	r3, [sp, #40]	@ 0x28
 800955c:	4b3f      	ldr	r3, [pc, #252]	@ (800965c <handle_message_memory.constprop.4+0x384>)
 800955e:	6819      	ldr	r1, [r3, #0]
 8009560:	f002 fd92 	bl	800c088 <get_message_typesupport_handle>
 8009564:	6845      	ldr	r5, [r0, #4]
 8009566:	2c00      	cmp	r4, #0
 8009568:	f43f af00 	beq.w	800936c <handle_message_memory.constprop.4+0x94>
 800956c:	ab32      	add	r3, sp, #200	@ 0xc8
 800956e:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8009572:	46cb      	mov	fp, r9
 8009574:	46d1      	mov	r9, sl
 8009576:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800957a:	930c      	str	r3, [sp, #48]	@ 0x30
 800957c:	2400      	movs	r4, #0
 800957e:	ae36      	add	r6, sp, #216	@ 0xd8
 8009580:	f10d 0810 	add.w	r8, sp, #16
 8009584:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009586:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009588:	f8cd b0d8 	str.w	fp, [sp, #216]	@ 0xd8
 800958c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009590:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009592:	9335      	str	r3, [sp, #212]	@ 0xd4
 8009594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009596:	9330      	str	r3, [sp, #192]	@ 0xc0
 8009598:	e9cd 9733 	strd	r9, r7, [sp, #204]	@ 0xcc
 800959c:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80095a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80095a8:	ab30      	add	r3, sp, #192	@ 0xc0
 80095aa:	cb0c      	ldmia	r3, {r2, r3}
 80095ac:	2100      	movs	r1, #0
 80095ae:	4628      	mov	r0, r5
 80095b0:	f7ff fe92 	bl	80092d8 <handle_message_memory.constprop.4>
 80095b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b6:	3401      	adds	r4, #1
 80095b8:	429c      	cmp	r4, r3
 80095ba:	4482      	add	sl, r0
 80095bc:	d1e2      	bne.n	8009584 <handle_message_memory.constprop.4+0x2ac>
 80095be:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 80095c2:	46ca      	mov	sl, r9
 80095c4:	46d9      	mov	r9, fp
 80095c6:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 80095ca:	e6cd      	b.n	8009368 <handle_message_memory.constprop.4+0x90>
 80095cc:	2301      	movs	r3, #1
 80095ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80095d0:	2564      	movs	r5, #100	@ 0x64
 80095d2:	e6ba      	b.n	800934a <handle_message_memory.constprop.4+0x72>
 80095d4:	4b22      	ldr	r3, [pc, #136]	@ (8009660 <handle_message_memory.constprop.4+0x388>)
 80095d6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80095da:	9311      	str	r3, [sp, #68]	@ 0x44
 80095dc:	2c00      	cmp	r4, #0
 80095de:	d185      	bne.n	80094ec <handle_message_memory.constprop.4+0x214>
 80095e0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80095e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e4:	2301      	movs	r3, #1
 80095e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80095e8:	e73d      	b.n	8009466 <handle_message_memory.constprop.4+0x18e>
 80095ea:	2301      	movs	r3, #1
 80095ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80095ee:	e781      	b.n	80094f4 <handle_message_memory.constprop.4+0x21c>
 80095f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80095f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80095f4:	4613      	mov	r3, r2
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	bf08      	it	eq
 80095fa:	460b      	moveq	r3, r1
 80095fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095fe:	bb0f      	cbnz	r7, 8009644 <handle_message_memory.constprop.4+0x36c>
 8009600:	461a      	mov	r2, r3
 8009602:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009604:	4413      	add	r3, r2
 8009606:	930a      	str	r3, [sp, #40]	@ 0x28
 8009608:	e6b0      	b.n	800936c <handle_message_memory.constprop.4+0x94>
 800960a:	2301      	movs	r3, #1
 800960c:	930c      	str	r3, [sp, #48]	@ 0x30
 800960e:	e707      	b.n	8009420 <handle_message_memory.constprop.4+0x148>
 8009610:	4b12      	ldr	r3, [pc, #72]	@ (800965c <handle_message_memory.constprop.4+0x384>)
 8009612:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009614:	6819      	ldr	r1, [r3, #0]
 8009616:	f002 fd37 	bl	800c088 <get_message_typesupport_handle>
 800961a:	6845      	ldr	r5, [r0, #4]
 800961c:	e738      	b.n	8009490 <handle_message_memory.constprop.4+0x1b8>
 800961e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009622:	9309      	str	r3, [sp, #36]	@ 0x24
 8009624:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 8009628:	e71f      	b.n	800946a <handle_message_memory.constprop.4+0x192>
 800962a:	a821      	add	r0, sp, #132	@ 0x84
 800962c:	f001 ff6a 	bl	800b504 <rcutils_get_default_allocator>
 8009630:	e6ac      	b.n	800938c <handle_message_memory.constprop.4+0xb4>
 8009632:	6873      	ldr	r3, [r6, #4]
 8009634:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009636:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800963a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800963c:	fb01 3302 	mla	r3, r1, r2, r3
 8009640:	930a      	str	r3, [sp, #40]	@ 0x28
 8009642:	e6ca      	b.n	80093da <handle_message_memory.constprop.4+0x102>
 8009644:	2301      	movs	r3, #1
 8009646:	9311      	str	r3, [sp, #68]	@ 0x44
 8009648:	e754      	b.n	80094f4 <handle_message_memory.constprop.4+0x21c>
 800964a:	a81c      	add	r0, sp, #112	@ 0x70
 800964c:	f001 ff5a 	bl	800b504 <rcutils_get_default_allocator>
 8009650:	e656      	b.n	8009300 <handle_message_memory.constprop.4+0x28>
 8009652:	bf00      	nop
 8009654:	0801a248 	.word	0x0801a248
 8009658:	0801a244 	.word	0x0801a244
 800965c:	200001f4 	.word	0x200001f4
 8009660:	0801a250 	.word	0x0801a250
 8009664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009666:	2b00      	cmp	r3, #0
 8009668:	d180      	bne.n	800956c <handle_message_memory.constprop.4+0x294>
 800966a:	e67d      	b.n	8009368 <handle_message_memory.constprop.4+0x90>

0800966c <handle_message_memory.constprop.2>:
 800966c:	b082      	sub	sp, #8
 800966e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009672:	ed2d 8b02 	vpush	{d8}
 8009676:	b0a9      	sub	sp, #164	@ 0xa4
 8009678:	ac34      	add	r4, sp, #208	@ 0xd0
 800967a:	e884 000c 	stmia.w	r4, {r2, r3}
 800967e:	e9dd b337 	ldrd	fp, r3, [sp, #220]	@ 0xdc
 8009682:	9216      	str	r2, [sp, #88]	@ 0x58
 8009684:	e9dd 723a 	ldrd	r7, r2, [sp, #232]	@ 0xe8
 8009688:	9308      	str	r3, [sp, #32]
 800968a:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800968c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800968e:	9112      	str	r1, [sp, #72]	@ 0x48
 8009690:	9314      	str	r3, [sp, #80]	@ 0x50
 8009692:	920c      	str	r2, [sp, #48]	@ 0x30
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 8210 	beq.w	8009aba <handle_message_memory.constprop.2+0x44e>
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	9215      	str	r2, [sp, #84]	@ 0x54
 80096a0:	ee08 3a10 	vmov	s16, r3
 80096a4:	4603      	mov	r3, r0
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 81c0 	beq.w	8009a2e <handle_message_memory.constprop.2+0x3c2>
 80096ae:	2300      	movs	r3, #0
 80096b0:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 80096b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096b6:	691a      	ldr	r2, [r3, #16]
 80096b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ba:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 80096be:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 80096c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80096c6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80096c8:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
 80096cc:	7c1a      	ldrb	r2, [r3, #16]
 80096ce:	791e      	ldrb	r6, [r3, #4]
 80096d0:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80096d4:	f893 9018 	ldrb.w	r9, [r3, #24]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	9110      	str	r1, [sp, #64]	@ 0x40
 80096dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80096de:	2a00      	cmp	r2, #0
 80096e0:	d056      	beq.n	8009790 <handle_message_memory.constprop.2+0x124>
 80096e2:	f1b8 0f00 	cmp.w	r8, #0
 80096e6:	d002      	beq.n	80096ee <handle_message_memory.constprop.2+0x82>
 80096e8:	f1b9 0f00 	cmp.w	r9, #0
 80096ec:	d050      	beq.n	8009790 <handle_message_memory.constprop.2+0x124>
 80096ee:	9b08      	ldr	r3, [sp, #32]
 80096f0:	2e10      	cmp	r6, #16
 80096f2:	bf08      	it	eq
 80096f4:	2664      	moveq	r6, #100	@ 0x64
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f040 8154 	bne.w	80099a4 <handle_message_memory.constprop.2+0x338>
 80096fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009700:	2e12      	cmp	r6, #18
 8009702:	4413      	add	r3, r2
 8009704:	930e      	str	r3, [sp, #56]	@ 0x38
 8009706:	f000 80f8 	beq.w	80098fa <handle_message_memory.constprop.2+0x28e>
 800970a:	2e64      	cmp	r6, #100	@ 0x64
 800970c:	f040 8164 	bne.w	80099d8 <handle_message_memory.constprop.2+0x36c>
 8009710:	f1b9 0f00 	cmp.w	r9, #0
 8009714:	f040 816b 	bne.w	80099ee <handle_message_memory.constprop.2+0x382>
 8009718:	230c      	movs	r3, #12
 800971a:	9311      	str	r3, [sp, #68]	@ 0x44
 800971c:	2301      	movs	r3, #1
 800971e:	f8dd 80d8 	ldr.w	r8, [sp, #216]	@ 0xd8
 8009722:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009724:	9b08      	ldr	r3, [sp, #32]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d148      	bne.n	80097bc <handle_message_memory.constprop.2+0x150>
 800972a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800972c:	fb03 f208 	mul.w	r2, r3, r8
 8009730:	ee18 1a10 	vmov	r1, s16
 8009734:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009736:	9211      	str	r2, [sp, #68]	@ 0x44
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800973e:	6020      	str	r0, [r4, #0]
 8009740:	2800      	cmp	r0, #0
 8009742:	f000 8174 	beq.w	8009a2e <handle_message_memory.constprop.2+0x3c2>
 8009746:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009748:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800974a:	2100      	movs	r1, #0
 800974c:	4413      	add	r3, r2
 800974e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009750:	f00f fb59 	bl	8018e06 <memset>
 8009754:	4623      	mov	r3, r4
 8009756:	f8c4 8008 	str.w	r8, [r4, #8]
 800975a:	2e12      	cmp	r6, #18
 800975c:	f04f 0400 	mov.w	r4, #0
 8009760:	605c      	str	r4, [r3, #4]
 8009762:	f000 80f4 	beq.w	800994e <handle_message_memory.constprop.2+0x2e2>
 8009766:	2e64      	cmp	r6, #100	@ 0x64
 8009768:	d054      	beq.n	8009814 <handle_message_memory.constprop.2+0x1a8>
 800976a:	9b08      	ldr	r3, [sp, #32]
 800976c:	2b00      	cmp	r3, #0
 800976e:	f040 80a6 	bne.w	80098be <handle_message_memory.constprop.2+0x252>
 8009772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	3201      	adds	r2, #1
 800977a:	429a      	cmp	r2, r3
 800977c:	9209      	str	r2, [sp, #36]	@ 0x24
 800977e:	d399      	bcc.n	80096b4 <handle_message_memory.constprop.2+0x48>
 8009780:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009782:	b029      	add	sp, #164	@ 0xa4
 8009784:	ecbd 8b02 	vpop	{d8}
 8009788:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	b002      	add	sp, #8
 800978e:	4770      	bx	lr
 8009790:	9b08      	ldr	r3, [sp, #32]
 8009792:	2b00      	cmp	r3, #0
 8009794:	f040 80c1 	bne.w	800991a <handle_message_memory.constprop.2+0x2ae>
 8009798:	2e10      	cmp	r6, #16
 800979a:	d134      	bne.n	8009806 <handle_message_memory.constprop.2+0x19a>
 800979c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800979e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097a0:	4413      	add	r3, r2
 80097a2:	930e      	str	r3, [sp, #56]	@ 0x38
 80097a4:	f1b9 0f00 	cmp.w	r9, #0
 80097a8:	f000 8126 	beq.w	80099f8 <handle_message_memory.constprop.2+0x38c>
 80097ac:	2300      	movs	r3, #0
 80097ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097b0:	2301      	movs	r3, #1
 80097b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80097b4:	9b08      	ldr	r3, [sp, #32]
 80097b6:	2610      	movs	r6, #16
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0b6      	beq.n	800972a <handle_message_memory.constprop.2+0xbe>
 80097bc:	469a      	mov	sl, r3
 80097be:	e9cd 5818 	strd	r5, r8, [sp, #96]	@ 0x60
 80097c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097c4:	9617      	str	r6, [sp, #92]	@ 0x5c
 80097c6:	2400      	movs	r4, #0
 80097c8:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 80097cc:	f85b 6034 	ldr.w	r6, [fp, r4, lsl #3]
 80097d0:	4630      	mov	r0, r6
 80097d2:	f7f6 fd15 	bl	8000200 <strlen>
 80097d6:	4639      	mov	r1, r7
 80097d8:	4602      	mov	r2, r0
 80097da:	4630      	mov	r0, r6
 80097dc:	f00f fae9 	bl	8018db2 <memcmp>
 80097e0:	4605      	mov	r5, r0
 80097e2:	eb0b 08c4 	add.w	r8, fp, r4, lsl #3
 80097e6:	464a      	mov	r2, r9
 80097e8:	3401      	adds	r4, #1
 80097ea:	4639      	mov	r1, r7
 80097ec:	4630      	mov	r0, r6
 80097ee:	b925      	cbnz	r5, 80097fa <handle_message_memory.constprop.2+0x18e>
 80097f0:	f00f fadf 	bl	8018db2 <memcmp>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f000 811d 	beq.w	8009a34 <handle_message_memory.constprop.2+0x3c8>
 80097fa:	4554      	cmp	r4, sl
 80097fc:	d1e6      	bne.n	80097cc <handle_message_memory.constprop.2+0x160>
 80097fe:	e9dd 5818 	ldrd	r5, r8, [sp, #96]	@ 0x60
 8009802:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8009804:	e791      	b.n	800972a <handle_message_memory.constprop.2+0xbe>
 8009806:	2e12      	cmp	r6, #18
 8009808:	f000 80fe 	beq.w	8009a08 <handle_message_memory.constprop.2+0x39c>
 800980c:	2e64      	cmp	r6, #100	@ 0x64
 800980e:	f04f 0800 	mov.w	r8, #0
 8009812:	d1aa      	bne.n	800976a <handle_message_memory.constprop.2+0xfe>
 8009814:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009816:	2b00      	cmp	r3, #0
 8009818:	f000 8146 	beq.w	8009aa8 <handle_message_memory.constprop.2+0x43c>
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	691e      	ldr	r6, [r3, #16]
 8009820:	920e      	str	r2, [sp, #56]	@ 0x38
 8009822:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009824:	2d00      	cmp	r5, #0
 8009826:	bf08      	it	eq
 8009828:	461d      	moveq	r5, r3
 800982a:	9b08      	ldr	r3, [sp, #32]
 800982c:	b1eb      	cbz	r3, 800986a <handle_message_memory.constprop.2+0x1fe>
 800982e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009830:	9510      	str	r5, [sp, #64]	@ 0x40
 8009832:	f102 39ff 	add.w	r9, r2, #4294967295	@ 0xffffffff
 8009836:	2400      	movs	r4, #0
 8009838:	469a      	mov	sl, r3
 800983a:	f85b 5034 	ldr.w	r5, [fp, r4, lsl #3]
 800983e:	464a      	mov	r2, r9
 8009840:	4639      	mov	r1, r7
 8009842:	4628      	mov	r0, r5
 8009844:	f00f fab5 	bl	8018db2 <memcmp>
 8009848:	4603      	mov	r3, r0
 800984a:	49a1      	ldr	r1, [pc, #644]	@ (8009ad0 <handle_message_memory.constprop.2+0x464>)
 800984c:	eb05 0009 	add.w	r0, r5, r9
 8009850:	2205      	movs	r2, #5
 8009852:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8009856:	3401      	adds	r4, #1
 8009858:	b923      	cbnz	r3, 8009864 <handle_message_memory.constprop.2+0x1f8>
 800985a:	f00f faaa 	bl	8018db2 <memcmp>
 800985e:	2800      	cmp	r0, #0
 8009860:	f000 8129 	beq.w	8009ab6 <handle_message_memory.constprop.2+0x44a>
 8009864:	4554      	cmp	r4, sl
 8009866:	d1e8      	bne.n	800983a <handle_message_memory.constprop.2+0x1ce>
 8009868:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800986a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800986c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800986e:	589c      	ldr	r4, [r3, r2]
 8009870:	fb08 f305 	mul.w	r3, r8, r5
 8009874:	930d      	str	r3, [sp, #52]	@ 0x34
 8009876:	f1b8 0f00 	cmp.w	r8, #0
 800987a:	d018      	beq.n	80098ae <handle_message_memory.constprop.2+0x242>
 800987c:	f04f 0a00 	mov.w	sl, #0
 8009880:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8009884:	46b3      	mov	fp, r6
 8009886:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8009888:	46d1      	mov	r9, sl
 800988a:	4659      	mov	r1, fp
 800988c:	4628      	mov	r0, r5
 800988e:	47b0      	blx	r6
 8009890:	f10a 0a01 	add.w	sl, sl, #1
 8009894:	e9c4 9501 	strd	r9, r5, [r4, #4]
 8009898:	6020      	str	r0, [r4, #0]
 800989a:	462a      	mov	r2, r5
 800989c:	2100      	movs	r1, #0
 800989e:	f00f fab2 	bl	8018e06 <memset>
 80098a2:	45c2      	cmp	sl, r8
 80098a4:	f104 040c 	add.w	r4, r4, #12
 80098a8:	d1ef      	bne.n	800988a <handle_message_memory.constprop.2+0x21e>
 80098aa:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 80098ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098b2:	4413      	add	r3, r2
 80098b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b6:	9b08      	ldr	r3, [sp, #32]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f43f af5a 	beq.w	8009772 <handle_message_memory.constprop.2+0x106>
 80098be:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80098c0:	f7f6 fc9e 	bl	8000200 <strlen>
 80098c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098c6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80098c8:	973a      	str	r7, [sp, #232]	@ 0xe8
 80098ca:	3001      	adds	r0, #1
 80098cc:	9000      	str	r0, [sp, #0]
 80098ce:	933b      	str	r3, [sp, #236]	@ 0xec
 80098d0:	ad1a      	add	r5, sp, #104	@ 0x68
 80098d2:	ac3a      	add	r4, sp, #232	@ 0xe8
 80098d4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80098d8:	3601      	adds	r6, #1
 80098da:	4628      	mov	r0, r5
 80098dc:	9609      	str	r6, [sp, #36]	@ 0x24
 80098de:	f003 f85f 	bl	800c9a0 <micro_ros_string_utilities_remove_tail_chars>
 80098e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	910c      	str	r1, [sp, #48]	@ 0x30
 80098ec:	429e      	cmp	r6, r3
 80098ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098f2:	4607      	mov	r7, r0
 80098f4:	f4ff aede 	bcc.w	80096b4 <handle_message_memory.constprop.2+0x48>
 80098f8:	e742      	b.n	8009780 <handle_message_memory.constprop.2+0x114>
 80098fa:	4b76      	ldr	r3, [pc, #472]	@ (8009ad4 <handle_message_memory.constprop.2+0x468>)
 80098fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80098fe:	6819      	ldr	r1, [r3, #0]
 8009900:	f002 fbc2 	bl	800c088 <get_message_typesupport_handle>
 8009904:	6843      	ldr	r3, [r0, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	9311      	str	r3, [sp, #68]	@ 0x44
 800990a:	f1b9 0f00 	cmp.w	r9, #0
 800990e:	d16b      	bne.n	80099e8 <handle_message_memory.constprop.2+0x37c>
 8009910:	2301      	movs	r3, #1
 8009912:	f8dd 80d4 	ldr.w	r8, [sp, #212]	@ 0xd4
 8009916:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009918:	e704      	b.n	8009724 <handle_message_memory.constprop.2+0xb8>
 800991a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800991c:	933b      	str	r3, [sp, #236]	@ 0xec
 800991e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009920:	973a      	str	r7, [sp, #232]	@ 0xe8
 8009922:	ac3a      	add	r4, sp, #232	@ 0xe8
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800992a:	4620      	mov	r0, r4
 800992c:	f003 f80a 	bl	800c944 <micro_ros_string_utilities_append>
 8009930:	4b69      	ldr	r3, [pc, #420]	@ (8009ad8 <handle_message_memory.constprop.2+0x46c>)
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	af1a      	add	r7, sp, #104	@ 0x68
 8009936:	4638      	mov	r0, r7
 8009938:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800993c:	f003 f802 	bl	800c944 <micro_ros_string_utilities_append>
 8009940:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009944:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009948:	4607      	mov	r7, r0
 800994a:	910c      	str	r1, [sp, #48]	@ 0x30
 800994c:	e724      	b.n	8009798 <handle_message_memory.constprop.2+0x12c>
 800994e:	4b61      	ldr	r3, [pc, #388]	@ (8009ad4 <handle_message_memory.constprop.2+0x468>)
 8009950:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009952:	6819      	ldr	r1, [r3, #0]
 8009954:	f002 fb98 	bl	800c088 <get_message_typesupport_handle>
 8009958:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800995a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d16d      	bne.n	8009a3e <handle_message_memory.constprop.2+0x3d2>
 8009962:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009964:	933b      	str	r3, [sp, #236]	@ 0xec
 8009966:	973a      	str	r7, [sp, #232]	@ 0xe8
 8009968:	ac3a      	add	r4, sp, #232	@ 0xe8
 800996a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800996e:	9b08      	ldr	r3, [sp, #32]
 8009970:	9338      	str	r3, [sp, #224]	@ 0xe0
 8009972:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009974:	9339      	str	r3, [sp, #228]	@ 0xe4
 8009976:	f10d 0a10 	add.w	sl, sp, #16
 800997a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800997c:	9334      	str	r3, [sp, #208]	@ 0xd0
 800997e:	f8cd b0dc 	str.w	fp, [sp, #220]	@ 0xdc
 8009982:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8009986:	ae36      	add	r6, sp, #216	@ 0xd8
 8009988:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800998c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009990:	ab34      	add	r3, sp, #208	@ 0xd0
 8009992:	cb0c      	ldmia	r3, {r2, r3}
 8009994:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009996:	4648      	mov	r0, r9
 8009998:	f7ff fe68 	bl	800966c <handle_message_memory.constprop.2>
 800999c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800999e:	4403      	add	r3, r0
 80099a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80099a2:	e6e2      	b.n	800976a <handle_message_memory.constprop.2+0xfe>
 80099a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099a6:	933b      	str	r3, [sp, #236]	@ 0xec
 80099a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099aa:	973a      	str	r7, [sp, #232]	@ 0xe8
 80099ac:	ac3a      	add	r4, sp, #232	@ 0xe8
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80099b4:	4620      	mov	r0, r4
 80099b6:	f002 ffc5 	bl	800c944 <micro_ros_string_utilities_append>
 80099ba:	4b47      	ldr	r3, [pc, #284]	@ (8009ad8 <handle_message_memory.constprop.2+0x46c>)
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	af1a      	add	r7, sp, #104	@ 0x68
 80099c0:	4638      	mov	r0, r7
 80099c2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80099c6:	f002 ffbd 	bl	800c944 <micro_ros_string_utilities_append>
 80099ca:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80099ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099d2:	4607      	mov	r7, r0
 80099d4:	910c      	str	r1, [sp, #48]	@ 0x30
 80099d6:	e691      	b.n	80096fc <handle_message_memory.constprop.2+0x90>
 80099d8:	4b40      	ldr	r3, [pc, #256]	@ (8009adc <handle_message_memory.constprop.2+0x470>)
 80099da:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80099de:	9311      	str	r3, [sp, #68]	@ 0x44
 80099e0:	f1b9 0f00 	cmp.w	r9, #0
 80099e4:	f43f ae9a 	beq.w	800971c <handle_message_memory.constprop.2+0xb0>
 80099e8:	2301      	movs	r3, #1
 80099ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099ec:	e69a      	b.n	8009724 <handle_message_memory.constprop.2+0xb8>
 80099ee:	2301      	movs	r3, #1
 80099f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099f2:	230c      	movs	r3, #12
 80099f4:	9311      	str	r3, [sp, #68]	@ 0x44
 80099f6:	e695      	b.n	8009724 <handle_message_memory.constprop.2+0xb8>
 80099f8:	b195      	cbz	r5, 8009a20 <handle_message_memory.constprop.2+0x3b4>
 80099fa:	2301      	movs	r3, #1
 80099fc:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8009a00:	46a8      	mov	r8, r5
 8009a02:	2610      	movs	r6, #16
 8009a04:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a06:	e68d      	b.n	8009724 <handle_message_memory.constprop.2+0xb8>
 8009a08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a0c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009a0e:	4413      	add	r3, r2
 8009a10:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a12:	4b30      	ldr	r3, [pc, #192]	@ (8009ad4 <handle_message_memory.constprop.2+0x468>)
 8009a14:	6819      	ldr	r1, [r3, #0]
 8009a16:	f002 fb37 	bl	800c088 <get_message_typesupport_handle>
 8009a1a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009a1e:	e7a0      	b.n	8009962 <handle_message_memory.constprop.2+0x2f6>
 8009a20:	2301      	movs	r3, #1
 8009a22:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a26:	9513      	str	r5, [sp, #76]	@ 0x4c
 8009a28:	2610      	movs	r6, #16
 8009a2a:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a2c:	e67a      	b.n	8009724 <handle_message_memory.constprop.2+0xb8>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a32:	e6a5      	b.n	8009780 <handle_message_memory.constprop.2+0x114>
 8009a34:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	@ 0x5c
 8009a38:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8009a3c:	e675      	b.n	800972a <handle_message_memory.constprop.2+0xbe>
 8009a3e:	f1b8 0f00 	cmp.w	r8, #0
 8009a42:	f43f ae92 	beq.w	800976a <handle_message_memory.constprop.2+0xfe>
 8009a46:	4625      	mov	r5, r4
 8009a48:	ac3a      	add	r4, sp, #232	@ 0xe8
 8009a4a:	940d      	str	r4, [sp, #52]	@ 0x34
 8009a4c:	465c      	mov	r4, fp
 8009a4e:	46bb      	mov	fp, r7
 8009a50:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8009a52:	f10d 0a10 	add.w	sl, sp, #16
 8009a56:	ae36      	add	r6, sp, #216	@ 0xd8
 8009a58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a5a:	933b      	str	r3, [sp, #236]	@ 0xec
 8009a5c:	9b08      	ldr	r3, [sp, #32]
 8009a5e:	9338      	str	r3, [sp, #224]	@ 0xe0
 8009a60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a62:	9339      	str	r3, [sp, #228]	@ 0xe4
 8009a64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a66:	9334      	str	r3, [sp, #208]	@ 0xd0
 8009a68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a6a:	f8cd b0e8 	str.w	fp, [sp, #232]	@ 0xe8
 8009a6e:	f8d3 c000 	ldr.w	ip, [r3]
 8009a72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a74:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8009a78:	9437      	str	r4, [sp, #220]	@ 0xdc
 8009a7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a7e:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8009a82:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8009a86:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009a8a:	ab34      	add	r3, sp, #208	@ 0xd0
 8009a8c:	fb0e c105 	mla	r1, lr, r5, ip
 8009a90:	cb0c      	ldmia	r3, {r2, r3}
 8009a92:	4648      	mov	r0, r9
 8009a94:	f7ff fdea 	bl	800966c <handle_message_memory.constprop.2>
 8009a98:	3501      	adds	r5, #1
 8009a9a:	45a8      	cmp	r8, r5
 8009a9c:	4407      	add	r7, r0
 8009a9e:	d1db      	bne.n	8009a58 <handle_message_memory.constprop.2+0x3ec>
 8009aa0:	970a      	str	r7, [sp, #40]	@ 0x28
 8009aa2:	465f      	mov	r7, fp
 8009aa4:	46a3      	mov	fp, r4
 8009aa6:	e660      	b.n	800976a <handle_message_memory.constprop.2+0xfe>
 8009aa8:	a823      	add	r0, sp, #140	@ 0x8c
 8009aaa:	f001 fd2b 	bl	800b504 <rcutils_get_default_allocator>
 8009aae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ab0:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8009ab2:	930e      	str	r3, [sp, #56]	@ 0x38
 8009ab4:	e6b5      	b.n	8009822 <handle_message_memory.constprop.2+0x1b6>
 8009ab6:	686d      	ldr	r5, [r5, #4]
 8009ab8:	e6d7      	b.n	800986a <handle_message_memory.constprop.2+0x1fe>
 8009aba:	a81e      	add	r0, sp, #120	@ 0x78
 8009abc:	f001 fd22 	bl	800b504 <rcutils_get_default_allocator>
 8009ac0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009ac2:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ac4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009ac6:	ee08 3a10 	vmov	s16, r3
 8009aca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009acc:	e5eb      	b.n	80096a6 <handle_message_memory.constprop.2+0x3a>
 8009ace:	bf00      	nop
 8009ad0:	0801a248 	.word	0x0801a248
 8009ad4:	200001f4 	.word	0x200001f4
 8009ad8:	0801a244 	.word	0x0801a244
 8009adc:	0801a250 	.word	0x0801a250

08009ae0 <get_longest_member_name>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	ed2d 8b06 	vpush	{d8-d10}
 8009ae8:	6885      	ldr	r5, [r0, #8]
 8009aea:	b099      	sub	sp, #100	@ 0x64
 8009aec:	2d00      	cmp	r5, #0
 8009aee:	f000 810f 	beq.w	8009d10 <get_longest_member_name+0x230>
 8009af2:	f04f 0a00 	mov.w	sl, #0
 8009af6:	46d3      	mov	fp, sl
 8009af8:	f8cd a004 	str.w	sl, [sp, #4]
 8009afc:	9003      	str	r0, [sp, #12]
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	eb03 020a 	add.w	r2, r3, sl
 8009b06:	f853 700a 	ldr.w	r7, [r3, sl]
 8009b0a:	7913      	ldrb	r3, [r2, #4]
 8009b0c:	2b12      	cmp	r3, #18
 8009b0e:	d018      	beq.n	8009b42 <get_longest_member_name+0x62>
 8009b10:	f04f 0900 	mov.w	r9, #0
 8009b14:	4638      	mov	r0, r7
 8009b16:	f7f6 fb73 	bl	8000200 <strlen>
 8009b1a:	9b01      	ldr	r3, [sp, #4]
 8009b1c:	4448      	add	r0, r9
 8009b1e:	3001      	adds	r0, #1
 8009b20:	4283      	cmp	r3, r0
 8009b22:	f10b 0b01 	add.w	fp, fp, #1
 8009b26:	bf38      	it	cc
 8009b28:	4603      	movcc	r3, r0
 8009b2a:	455d      	cmp	r5, fp
 8009b2c:	9301      	str	r3, [sp, #4]
 8009b2e:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009b32:	d8e4      	bhi.n	8009afe <get_longest_member_name+0x1e>
 8009b34:	469b      	mov	fp, r3
 8009b36:	4658      	mov	r0, fp
 8009b38:	b019      	add	sp, #100	@ 0x64
 8009b3a:	ecbd 8b06 	vpop	{d8-d10}
 8009b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b42:	4bbc      	ldr	r3, [pc, #752]	@ (8009e34 <get_longest_member_name+0x354>)
 8009b44:	68d0      	ldr	r0, [r2, #12]
 8009b46:	6819      	ldr	r1, [r3, #0]
 8009b48:	f002 fa9e 	bl	800c088 <get_message_typesupport_handle>
 8009b4c:	6843      	ldr	r3, [r0, #4]
 8009b4e:	9305      	str	r3, [sp, #20]
 8009b50:	689d      	ldr	r5, [r3, #8]
 8009b52:	2d00      	cmp	r5, #0
 8009b54:	f000 811a 	beq.w	8009d8c <get_longest_member_name+0x2ac>
 8009b58:	f04f 0800 	mov.w	r8, #0
 8009b5c:	ee08 7a10 	vmov	s16, r7
 8009b60:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 8009b64:	46c1      	mov	r9, r8
 8009b66:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009b6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009b6e:	46c2      	mov	sl, r8
 8009b70:	9b05      	ldr	r3, [sp, #20]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	eb03 020a 	add.w	r2, r3, sl
 8009b78:	f853 300a 	ldr.w	r3, [r3, sl]
 8009b7c:	ee0a 3a10 	vmov	s20, r3
 8009b80:	7913      	ldrb	r3, [r2, #4]
 8009b82:	2b12      	cmp	r3, #18
 8009b84:	d01b      	beq.n	8009bbe <get_longest_member_name+0xde>
 8009b86:	2700      	movs	r7, #0
 8009b88:	ee1a 0a10 	vmov	r0, s20
 8009b8c:	f7f6 fb38 	bl	8000200 <strlen>
 8009b90:	9b02      	ldr	r3, [sp, #8]
 8009b92:	4438      	add	r0, r7
 8009b94:	3001      	adds	r0, #1
 8009b96:	4283      	cmp	r3, r0
 8009b98:	f109 0901 	add.w	r9, r9, #1
 8009b9c:	bf38      	it	cc
 8009b9e:	4603      	movcc	r3, r0
 8009ba0:	45a9      	cmp	r9, r5
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009ba8:	d3e2      	bcc.n	8009b70 <get_longest_member_name+0x90>
 8009baa:	4699      	mov	r9, r3
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8009bb2:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8009bb6:	689d      	ldr	r5, [r3, #8]
 8009bb8:	ee18 7a10 	vmov	r7, s16
 8009bbc:	e7aa      	b.n	8009b14 <get_longest_member_name+0x34>
 8009bbe:	4b9d      	ldr	r3, [pc, #628]	@ (8009e34 <get_longest_member_name+0x354>)
 8009bc0:	68d0      	ldr	r0, [r2, #12]
 8009bc2:	6819      	ldr	r1, [r3, #0]
 8009bc4:	f002 fa60 	bl	800c088 <get_message_typesupport_handle>
 8009bc8:	6843      	ldr	r3, [r0, #4]
 8009bca:	9307      	str	r3, [sp, #28]
 8009bcc:	689d      	ldr	r5, [r3, #8]
 8009bce:	2d00      	cmp	r5, #0
 8009bd0:	f000 80a5 	beq.w	8009d1e <get_longest_member_name+0x23e>
 8009bd4:	f04f 0b00 	mov.w	fp, #0
 8009bd8:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8009bdc:	46d8      	mov	r8, fp
 8009bde:	f8cd b010 	str.w	fp, [sp, #16]
 8009be2:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8009be6:	46d9      	mov	r9, fp
 8009be8:	9b07      	ldr	r3, [sp, #28]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	eb03 0209 	add.w	r2, r3, r9
 8009bf0:	f853 7009 	ldr.w	r7, [r3, r9]
 8009bf4:	7913      	ldrb	r3, [r2, #4]
 8009bf6:	2b12      	cmp	r3, #18
 8009bf8:	d019      	beq.n	8009c2e <get_longest_member_name+0x14e>
 8009bfa:	f04f 0a00 	mov.w	sl, #0
 8009bfe:	4638      	mov	r0, r7
 8009c00:	f7f6 fafe 	bl	8000200 <strlen>
 8009c04:	9b04      	ldr	r3, [sp, #16]
 8009c06:	4450      	add	r0, sl
 8009c08:	3001      	adds	r0, #1
 8009c0a:	4283      	cmp	r3, r0
 8009c0c:	f108 0801 	add.w	r8, r8, #1
 8009c10:	bf38      	it	cc
 8009c12:	4603      	movcc	r3, r0
 8009c14:	45a8      	cmp	r8, r5
 8009c16:	9304      	str	r3, [sp, #16]
 8009c18:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 8009c1c:	d3e4      	bcc.n	8009be8 <get_longest_member_name+0x108>
 8009c1e:	461f      	mov	r7, r3
 8009c20:	9b05      	ldr	r3, [sp, #20]
 8009c22:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8009c26:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8009c2a:	689d      	ldr	r5, [r3, #8]
 8009c2c:	e7ac      	b.n	8009b88 <get_longest_member_name+0xa8>
 8009c2e:	4b81      	ldr	r3, [pc, #516]	@ (8009e34 <get_longest_member_name+0x354>)
 8009c30:	68d0      	ldr	r0, [r2, #12]
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	f002 fa28 	bl	800c088 <get_message_typesupport_handle>
 8009c38:	6843      	ldr	r3, [r0, #4]
 8009c3a:	9308      	str	r3, [sp, #32]
 8009c3c:	689d      	ldr	r5, [r3, #8]
 8009c3e:	2d00      	cmp	r5, #0
 8009c40:	f000 80f2 	beq.w	8009e28 <get_longest_member_name+0x348>
 8009c44:	f04f 0b00 	mov.w	fp, #0
 8009c48:	ee08 7a90 	vmov	s17, r7
 8009c4c:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 8009c50:	46da      	mov	sl, fp
 8009c52:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8009c56:	f8cd b018 	str.w	fp, [sp, #24]
 8009c5a:	46d9      	mov	r9, fp
 8009c5c:	9b08      	ldr	r3, [sp, #32]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	eb03 020a 	add.w	r2, r3, sl
 8009c64:	f853 700a 	ldr.w	r7, [r3, sl]
 8009c68:	7913      	ldrb	r3, [r2, #4]
 8009c6a:	2b12      	cmp	r3, #18
 8009c6c:	d01b      	beq.n	8009ca6 <get_longest_member_name+0x1c6>
 8009c6e:	f04f 0b00 	mov.w	fp, #0
 8009c72:	4638      	mov	r0, r7
 8009c74:	f7f6 fac4 	bl	8000200 <strlen>
 8009c78:	9b06      	ldr	r3, [sp, #24]
 8009c7a:	4458      	add	r0, fp
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	4283      	cmp	r3, r0
 8009c80:	f109 0901 	add.w	r9, r9, #1
 8009c84:	bf38      	it	cc
 8009c86:	4603      	movcc	r3, r0
 8009c88:	45a9      	cmp	r9, r5
 8009c8a:	9306      	str	r3, [sp, #24]
 8009c8c:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009c90:	d3e4      	bcc.n	8009c5c <get_longest_member_name+0x17c>
 8009c92:	469a      	mov	sl, r3
 8009c94:	9b07      	ldr	r3, [sp, #28]
 8009c96:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8009c9a:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8009c9e:	689d      	ldr	r5, [r3, #8]
 8009ca0:	ee18 7a90 	vmov	r7, s17
 8009ca4:	e7ab      	b.n	8009bfe <get_longest_member_name+0x11e>
 8009ca6:	4b63      	ldr	r3, [pc, #396]	@ (8009e34 <get_longest_member_name+0x354>)
 8009ca8:	68d0      	ldr	r0, [r2, #12]
 8009caa:	6819      	ldr	r1, [r3, #0]
 8009cac:	f002 f9ec 	bl	800c088 <get_message_typesupport_handle>
 8009cb0:	6843      	ldr	r3, [r0, #4]
 8009cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cb4:	689d      	ldr	r5, [r3, #8]
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	f000 80b9 	beq.w	8009e2e <get_longest_member_name+0x34e>
 8009cbc:	f04f 0800 	mov.w	r8, #0
 8009cc0:	ee09 7a10 	vmov	s18, r7
 8009cc4:	e9cd 9a11 	strd	r9, sl, [sp, #68]	@ 0x44
 8009cc8:	46c3      	mov	fp, r8
 8009cca:	46c2      	mov	sl, r8
 8009ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	eb03 0208 	add.w	r2, r3, r8
 8009cd4:	f853 9008 	ldr.w	r9, [r3, r8]
 8009cd8:	7913      	ldrb	r3, [r2, #4]
 8009cda:	2b12      	cmp	r3, #18
 8009cdc:	d022      	beq.n	8009d24 <get_longest_member_name+0x244>
 8009cde:	2700      	movs	r7, #0
 8009ce0:	4648      	mov	r0, r9
 8009ce2:	f7f6 fa8d 	bl	8000200 <strlen>
 8009ce6:	4438      	add	r0, r7
 8009ce8:	3001      	adds	r0, #1
 8009cea:	4582      	cmp	sl, r0
 8009cec:	f10b 0b01 	add.w	fp, fp, #1
 8009cf0:	bf38      	it	cc
 8009cf2:	4682      	movcc	sl, r0
 8009cf4:	45ab      	cmp	fp, r5
 8009cf6:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 8009cfa:	d3e7      	bcc.n	8009ccc <get_longest_member_name+0x1ec>
 8009cfc:	9b08      	ldr	r3, [sp, #32]
 8009cfe:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8009d02:	689d      	ldr	r5, [r3, #8]
 8009d04:	46d3      	mov	fp, sl
 8009d06:	ee19 7a10 	vmov	r7, s18
 8009d0a:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 8009d0e:	e7b0      	b.n	8009c72 <get_longest_member_name+0x192>
 8009d10:	46ab      	mov	fp, r5
 8009d12:	4658      	mov	r0, fp
 8009d14:	b019      	add	sp, #100	@ 0x64
 8009d16:	ecbd 8b06 	vpop	{d8-d10}
 8009d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1e:	9b05      	ldr	r3, [sp, #20]
 8009d20:	689d      	ldr	r5, [r3, #8]
 8009d22:	e730      	b.n	8009b86 <get_longest_member_name+0xa6>
 8009d24:	4b43      	ldr	r3, [pc, #268]	@ (8009e34 <get_longest_member_name+0x354>)
 8009d26:	68d0      	ldr	r0, [r2, #12]
 8009d28:	6819      	ldr	r1, [r3, #0]
 8009d2a:	f002 f9ad 	bl	800c088 <get_message_typesupport_handle>
 8009d2e:	6843      	ldr	r3, [r0, #4]
 8009d30:	689e      	ldr	r6, [r3, #8]
 8009d32:	461a      	mov	r2, r3
 8009d34:	2e00      	cmp	r6, #0
 8009d36:	d07f      	beq.n	8009e38 <get_longest_member_name+0x358>
 8009d38:	e9cd ab13 	strd	sl, fp, [sp, #76]	@ 0x4c
 8009d3c:	2400      	movs	r4, #0
 8009d3e:	ee09 9a90 	vmov	s19, r9
 8009d42:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 8009d46:	4627      	mov	r7, r4
 8009d48:	4691      	mov	r9, r2
 8009d4a:	46a0      	mov	r8, r4
 8009d4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d50:	191a      	adds	r2, r3, r4
 8009d52:	f853 b004 	ldr.w	fp, [r3, r4]
 8009d56:	7913      	ldrb	r3, [r2, #4]
 8009d58:	2b12      	cmp	r3, #18
 8009d5a:	d01a      	beq.n	8009d92 <get_longest_member_name+0x2b2>
 8009d5c:	2500      	movs	r5, #0
 8009d5e:	4658      	mov	r0, fp
 8009d60:	f7f6 fa4e 	bl	8000200 <strlen>
 8009d64:	4405      	add	r5, r0
 8009d66:	3501      	adds	r5, #1
 8009d68:	42af      	cmp	r7, r5
 8009d6a:	f108 0801 	add.w	r8, r8, #1
 8009d6e:	bf38      	it	cc
 8009d70:	462f      	movcc	r7, r5
 8009d72:	45b0      	cmp	r8, r6
 8009d74:	f104 043c 	add.w	r4, r4, #60	@ 0x3c
 8009d78:	d3e8      	bcc.n	8009d4c <get_longest_member_name+0x26c>
 8009d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d7c:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 8009d80:	689d      	ldr	r5, [r3, #8]
 8009d82:	e9dd ab13 	ldrd	sl, fp, [sp, #76]	@ 0x4c
 8009d86:	ee19 9a90 	vmov	r9, s19
 8009d8a:	e7a9      	b.n	8009ce0 <get_longest_member_name+0x200>
 8009d8c:	9b03      	ldr	r3, [sp, #12]
 8009d8e:	689d      	ldr	r5, [r3, #8]
 8009d90:	e6be      	b.n	8009b10 <get_longest_member_name+0x30>
 8009d92:	4b28      	ldr	r3, [pc, #160]	@ (8009e34 <get_longest_member_name+0x354>)
 8009d94:	68d0      	ldr	r0, [r2, #12]
 8009d96:	6819      	ldr	r1, [r3, #0]
 8009d98:	f002 f976 	bl	800c088 <get_message_typesupport_handle>
 8009d9c:	6843      	ldr	r3, [r0, #4]
 8009d9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009da0:	6899      	ldr	r1, [r3, #8]
 8009da2:	2900      	cmp	r1, #0
 8009da4:	d04b      	beq.n	8009e3e <get_longest_member_name+0x35e>
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	9416      	str	r4, [sp, #88]	@ 0x58
 8009daa:	2600      	movs	r6, #0
 8009dac:	ee0a ba90 	vmov	s21, fp
 8009db0:	46b2      	mov	sl, r6
 8009db2:	46b3      	mov	fp, r6
 8009db4:	460c      	mov	r4, r1
 8009db6:	461d      	mov	r5, r3
 8009db8:	19aa      	adds	r2, r5, r6
 8009dba:	59ab      	ldr	r3, [r5, r6]
 8009dbc:	f892 c004 	ldrb.w	ip, [r2, #4]
 8009dc0:	f1bc 0f12 	cmp.w	ip, #18
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	d012      	beq.n	8009dee <get_longest_member_name+0x30e>
 8009dc8:	f7f6 fa1a 	bl	8000200 <strlen>
 8009dcc:	3001      	adds	r0, #1
 8009dce:	4583      	cmp	fp, r0
 8009dd0:	f10a 0a01 	add.w	sl, sl, #1
 8009dd4:	bf38      	it	cc
 8009dd6:	4683      	movcc	fp, r0
 8009dd8:	45a2      	cmp	sl, r4
 8009dda:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 8009dde:	d3eb      	bcc.n	8009db8 <get_longest_member_name+0x2d8>
 8009de0:	465d      	mov	r5, fp
 8009de2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8009de4:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8009de8:	ee1a ba90 	vmov	fp, s21
 8009dec:	e7b7      	b.n	8009d5e <get_longest_member_name+0x27e>
 8009dee:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009df0:	4b10      	ldr	r3, [pc, #64]	@ (8009e34 <get_longest_member_name+0x354>)
 8009df2:	68d0      	ldr	r0, [r2, #12]
 8009df4:	6819      	ldr	r1, [r3, #0]
 8009df6:	f002 f947 	bl	800c088 <get_message_typesupport_handle>
 8009dfa:	6840      	ldr	r0, [r0, #4]
 8009dfc:	f7ff fe70 	bl	8009ae0 <get_longest_member_name>
 8009e00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e02:	4605      	mov	r5, r0
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7f6 f9fb 	bl	8000200 <strlen>
 8009e0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e0c:	4405      	add	r5, r0
 8009e0e:	3501      	adds	r5, #1
 8009e10:	689c      	ldr	r4, [r3, #8]
 8009e12:	45ab      	cmp	fp, r5
 8009e14:	f10a 0a01 	add.w	sl, sl, #1
 8009e18:	bf38      	it	cc
 8009e1a:	46ab      	movcc	fp, r5
 8009e1c:	4554      	cmp	r4, sl
 8009e1e:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 8009e22:	d9dd      	bls.n	8009de0 <get_longest_member_name+0x300>
 8009e24:	691d      	ldr	r5, [r3, #16]
 8009e26:	e7c7      	b.n	8009db8 <get_longest_member_name+0x2d8>
 8009e28:	9b07      	ldr	r3, [sp, #28]
 8009e2a:	689d      	ldr	r5, [r3, #8]
 8009e2c:	e6e5      	b.n	8009bfa <get_longest_member_name+0x11a>
 8009e2e:	9b08      	ldr	r3, [sp, #32]
 8009e30:	689d      	ldr	r5, [r3, #8]
 8009e32:	e71c      	b.n	8009c6e <get_longest_member_name+0x18e>
 8009e34:	200001f4 	.word	0x200001f4
 8009e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e3a:	689d      	ldr	r5, [r3, #8]
 8009e3c:	e74f      	b.n	8009cde <get_longest_member_name+0x1fe>
 8009e3e:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8009e42:	e78b      	b.n	8009d5c <get_longest_member_name+0x27c>

08009e44 <micro_ros_utilities_get_dynamic_size>:
 8009e44:	b084      	sub	sp, #16
 8009e46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4a:	ed2d 8b02 	vpush	{d8}
 8009e4e:	b09f      	sub	sp, #124	@ 0x7c
 8009e50:	ac2b      	add	r4, sp, #172	@ 0xac
 8009e52:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8009e56:	4619      	mov	r1, r3
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8009e5c:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 8009e5e:	941c      	str	r4, [sp, #112]	@ 0x70
 8009e60:	bf08      	it	eq
 8009e62:	2105      	moveq	r1, #5
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	bf08      	it	eq
 8009e68:	2205      	moveq	r2, #5
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bf08      	it	eq
 8009e6e:	2314      	moveq	r3, #20
 8009e70:	9318      	str	r3, [sp, #96]	@ 0x60
 8009e72:	4b78      	ldr	r3, [pc, #480]	@ (800a054 <micro_ros_utilities_get_dynamic_size+0x210>)
 8009e74:	911a      	str	r1, [sp, #104]	@ 0x68
 8009e76:	6819      	ldr	r1, [r3, #0]
 8009e78:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8009e7a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009e7c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8009e7e:	931d      	str	r3, [sp, #116]	@ 0x74
 8009e80:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e82:	f002 f901 	bl	800c088 <get_message_typesupport_handle>
 8009e86:	f10d 0b54 	add.w	fp, sp, #84	@ 0x54
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8009e90:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e92:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8009e96:	b9c4      	cbnz	r4, 8009eca <micro_ros_utilities_get_dynamic_size+0x86>
 8009e98:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8009e9c:	ab04      	add	r3, sp, #16
 8009e9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009ea2:	ab1e      	add	r3, sp, #120	@ 0x78
 8009ea4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8009ea8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009eac:	ab18      	add	r3, sp, #96	@ 0x60
 8009eae:	4621      	mov	r1, r4
 8009eb0:	cb0c      	ldmia	r3, {r2, r3}
 8009eb2:	4650      	mov	r0, sl
 8009eb4:	f7ff fa10 	bl	80092d8 <handle_message_memory.constprop.4>
 8009eb8:	4604      	mov	r4, r0
 8009eba:	4620      	mov	r0, r4
 8009ebc:	b01f      	add	sp, #124	@ 0x7c
 8009ebe:	ecbd 8b02 	vpop	{d8}
 8009ec2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec6:	b004      	add	sp, #16
 8009ec8:	4770      	bx	lr
 8009eca:	f8da 5008 	ldr.w	r5, [sl, #8]
 8009ece:	9508      	str	r5, [sp, #32]
 8009ed0:	b30d      	cbz	r5, 8009f16 <micro_ros_utilities_get_dynamic_size+0xd2>
 8009ed2:	4698      	mov	r8, r3
 8009ed4:	9308      	str	r3, [sp, #32]
 8009ed6:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8009eda:	461f      	mov	r7, r3
 8009edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	eb03 0208 	add.w	r2, r3, r8
 8009ee4:	f853 6008 	ldr.w	r6, [r3, r8]
 8009ee8:	7913      	ldrb	r3, [r2, #4]
 8009eea:	2b12      	cmp	r3, #18
 8009eec:	d030      	beq.n	8009f50 <micro_ros_utilities_get_dynamic_size+0x10c>
 8009eee:	f04f 0900 	mov.w	r9, #0
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7f6 f984 	bl	8000200 <strlen>
 8009ef8:	9b08      	ldr	r3, [sp, #32]
 8009efa:	4448      	add	r0, r9
 8009efc:	3001      	adds	r0, #1
 8009efe:	4283      	cmp	r3, r0
 8009f00:	f107 0701 	add.w	r7, r7, #1
 8009f04:	bf38      	it	cc
 8009f06:	4603      	movcc	r3, r0
 8009f08:	42af      	cmp	r7, r5
 8009f0a:	9308      	str	r3, [sp, #32]
 8009f0c:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 8009f10:	d3e4      	bcc.n	8009edc <micro_ros_utilities_get_dynamic_size+0x98>
 8009f12:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8009f16:	9908      	ldr	r1, [sp, #32]
 8009f18:	ac10      	add	r4, sp, #64	@ 0x40
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f002 fcfa 	bl	800c914 <micro_ros_string_utilities_init_with_size>
 8009f20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009f24:	ab04      	add	r3, sp, #16
 8009f26:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8009f2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009f2e:	ab1e      	add	r3, sp, #120	@ 0x78
 8009f30:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8009f34:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f38:	ac18      	add	r4, sp, #96	@ 0x60
 8009f3a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4650      	mov	r0, sl
 8009f42:	f7ff f9c9 	bl	80092d8 <handle_message_memory.constprop.4>
 8009f46:	4604      	mov	r4, r0
 8009f48:	4658      	mov	r0, fp
 8009f4a:	f002 fd41 	bl	800c9d0 <micro_ros_string_utilities_destroy>
 8009f4e:	e7b4      	b.n	8009eba <micro_ros_utilities_get_dynamic_size+0x76>
 8009f50:	4b40      	ldr	r3, [pc, #256]	@ (800a054 <micro_ros_utilities_get_dynamic_size+0x210>)
 8009f52:	68d0      	ldr	r0, [r2, #12]
 8009f54:	6819      	ldr	r1, [r3, #0]
 8009f56:	f002 f897 	bl	800c088 <get_message_typesupport_handle>
 8009f5a:	6843      	ldr	r3, [r0, #4]
 8009f5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f5e:	689d      	ldr	r5, [r3, #8]
 8009f60:	b33d      	cbz	r5, 8009fb2 <micro_ros_utilities_get_dynamic_size+0x16e>
 8009f62:	f04f 0a00 	mov.w	sl, #0
 8009f66:	ee08 6a10 	vmov	s16, r6
 8009f6a:	970c      	str	r7, [sp, #48]	@ 0x30
 8009f6c:	46d1      	mov	r9, sl
 8009f6e:	4657      	mov	r7, sl
 8009f70:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8009f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	eb03 020a 	add.w	r2, r3, sl
 8009f7c:	f853 800a 	ldr.w	r8, [r3, sl]
 8009f80:	7913      	ldrb	r3, [r2, #4]
 8009f82:	2b12      	cmp	r3, #18
 8009f84:	d018      	beq.n	8009fb8 <micro_ros_utilities_get_dynamic_size+0x174>
 8009f86:	2400      	movs	r4, #0
 8009f88:	4640      	mov	r0, r8
 8009f8a:	f7f6 f939 	bl	8000200 <strlen>
 8009f8e:	4404      	add	r4, r0
 8009f90:	3401      	adds	r4, #1
 8009f92:	45a1      	cmp	r9, r4
 8009f94:	f107 0701 	add.w	r7, r7, #1
 8009f98:	bf38      	it	cc
 8009f9a:	46a1      	movcc	r9, r4
 8009f9c:	42af      	cmp	r7, r5
 8009f9e:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009fa2:	d3e7      	bcc.n	8009f74 <micro_ros_utilities_get_dynamic_size+0x130>
 8009fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa6:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8009faa:	ee18 6a10 	vmov	r6, s16
 8009fae:	689d      	ldr	r5, [r3, #8]
 8009fb0:	e79f      	b.n	8009ef2 <micro_ros_utilities_get_dynamic_size+0xae>
 8009fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb4:	689d      	ldr	r5, [r3, #8]
 8009fb6:	e79a      	b.n	8009eee <micro_ros_utilities_get_dynamic_size+0xaa>
 8009fb8:	4b26      	ldr	r3, [pc, #152]	@ (800a054 <micro_ros_utilities_get_dynamic_size+0x210>)
 8009fba:	68d0      	ldr	r0, [r2, #12]
 8009fbc:	6819      	ldr	r1, [r3, #0]
 8009fbe:	f002 f863 	bl	800c088 <get_message_typesupport_handle>
 8009fc2:	6843      	ldr	r3, [r0, #4]
 8009fc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fc6:	6899      	ldr	r1, [r3, #8]
 8009fc8:	2900      	cmp	r1, #0
 8009fca:	d040      	beq.n	800a04e <micro_ros_utilities_get_dynamic_size+0x20a>
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	970e      	str	r7, [sp, #56]	@ 0x38
 8009fd0:	2500      	movs	r5, #0
 8009fd2:	ee08 8a90 	vmov	s17, r8
 8009fd6:	462e      	mov	r6, r5
 8009fd8:	46a8      	mov	r8, r5
 8009fda:	460f      	mov	r7, r1
 8009fdc:	461c      	mov	r4, r3
 8009fde:	1962      	adds	r2, r4, r5
 8009fe0:	5963      	ldr	r3, [r4, r5]
 8009fe2:	f892 c004 	ldrb.w	ip, [r2, #4]
 8009fe6:	f1bc 0f12 	cmp.w	ip, #18
 8009fea:	4618      	mov	r0, r3
 8009fec:	d012      	beq.n	800a014 <micro_ros_utilities_get_dynamic_size+0x1d0>
 8009fee:	f7f6 f907 	bl	8000200 <strlen>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	4580      	cmp	r8, r0
 8009ff6:	f106 0601 	add.w	r6, r6, #1
 8009ffa:	bf38      	it	cc
 8009ffc:	4680      	movcc	r8, r0
 8009ffe:	42be      	cmp	r6, r7
 800a000:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a004:	d3eb      	bcc.n	8009fde <micro_ros_utilities_get_dynamic_size+0x19a>
 800a006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a008:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800a00a:	689d      	ldr	r5, [r3, #8]
 800a00c:	4644      	mov	r4, r8
 800a00e:	ee18 8a90 	vmov	r8, s17
 800a012:	e7b9      	b.n	8009f88 <micro_ros_utilities_get_dynamic_size+0x144>
 800a014:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a016:	4b0f      	ldr	r3, [pc, #60]	@ (800a054 <micro_ros_utilities_get_dynamic_size+0x210>)
 800a018:	68d0      	ldr	r0, [r2, #12]
 800a01a:	6819      	ldr	r1, [r3, #0]
 800a01c:	f002 f834 	bl	800c088 <get_message_typesupport_handle>
 800a020:	6840      	ldr	r0, [r0, #4]
 800a022:	f7ff fd5d 	bl	8009ae0 <get_longest_member_name>
 800a026:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a028:	4604      	mov	r4, r0
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7f6 f8e8 	bl	8000200 <strlen>
 800a030:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a032:	4404      	add	r4, r0
 800a034:	3401      	adds	r4, #1
 800a036:	689f      	ldr	r7, [r3, #8]
 800a038:	45a0      	cmp	r8, r4
 800a03a:	f106 0601 	add.w	r6, r6, #1
 800a03e:	bf38      	it	cc
 800a040:	46a0      	movcc	r8, r4
 800a042:	42b7      	cmp	r7, r6
 800a044:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a048:	d9dd      	bls.n	800a006 <micro_ros_utilities_get_dynamic_size+0x1c2>
 800a04a:	691c      	ldr	r4, [r3, #16]
 800a04c:	e7c7      	b.n	8009fde <micro_ros_utilities_get_dynamic_size+0x19a>
 800a04e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a050:	689d      	ldr	r5, [r3, #8]
 800a052:	e798      	b.n	8009f86 <micro_ros_utilities_get_dynamic_size+0x142>
 800a054:	200001f4 	.word	0x200001f4

0800a058 <micro_ros_utilities_create_message_memory>:
 800a058:	b082      	sub	sp, #8
 800a05a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05e:	ed2d 8b04 	vpush	{d8-d9}
 800a062:	b0a1      	sub	sp, #132	@ 0x84
 800a064:	ac2e      	add	r4, sp, #184	@ 0xb8
 800a066:	ae31      	add	r6, sp, #196	@ 0xc4
 800a068:	e884 000c 	stmia.w	r4, {r2, r3}
 800a06c:	4605      	mov	r5, r0
 800a06e:	468b      	mov	fp, r1
 800a070:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a074:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a078:	ab2e      	add	r3, sp, #184	@ 0xb8
 800a07a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a07c:	4628      	mov	r0, r5
 800a07e:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 800a080:	f7ff fee0 	bl	8009e44 <micro_ros_utilities_get_dynamic_size>
 800a084:	4603      	mov	r3, r0
 800a086:	930a      	str	r3, [sp, #40]	@ 0x28
 800a088:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800a08a:	941e      	str	r4, [sp, #120]	@ 0x78
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bf08      	it	eq
 800a090:	2305      	moveq	r3, #5
 800a092:	931c      	str	r3, [sp, #112]	@ 0x70
 800a094:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800a096:	2b00      	cmp	r3, #0
 800a098:	bf08      	it	eq
 800a09a:	2305      	moveq	r3, #5
 800a09c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a09e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	bf08      	it	eq
 800a0a4:	2314      	moveq	r3, #20
 800a0a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0a8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800a0aa:	931d      	str	r3, [sp, #116]	@ 0x74
 800a0ac:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800a0ae:	931f      	str	r3, [sp, #124]	@ 0x7c
 800a0b0:	4b81      	ldr	r3, [pc, #516]	@ (800a2b8 <micro_ros_utilities_create_message_memory+0x260>)
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	6819      	ldr	r1, [r3, #0]
 800a0b6:	f001 ffe7 	bl	800c088 <get_message_typesupport_handle>
 800a0ba:	f10d 085c 	add.w	r8, sp, #92	@ 0x5c
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800a0c4:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a0c6:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800a0ca:	bb1c      	cbnz	r4, 800a114 <micro_ros_utilities_create_message_memory+0xbc>
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	f8da 200c 	ldr.w	r2, [sl, #12]
 800a0d2:	4658      	mov	r0, fp
 800a0d4:	f00e fe97 	bl	8018e06 <memset>
 800a0d8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a0dc:	ab04      	add	r3, sp, #16
 800a0de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0e2:	ab20      	add	r3, sp, #128	@ 0x80
 800a0e4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a0e8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a0ec:	ac1a      	add	r4, sp, #104	@ 0x68
 800a0ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a0f2:	4659      	mov	r1, fp
 800a0f4:	4650      	mov	r0, sl
 800a0f6:	f7ff fab9 	bl	800966c <handle_message_memory.constprop.2>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0fe:	1b18      	subs	r0, r3, r4
 800a100:	fab0 f080 	clz	r0, r0
 800a104:	0940      	lsrs	r0, r0, #5
 800a106:	b021      	add	sp, #132	@ 0x84
 800a108:	ecbd 8b04 	vpop	{d8-d9}
 800a10c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	b002      	add	sp, #8
 800a112:	4770      	bx	lr
 800a114:	f8da 5008 	ldr.w	r5, [sl, #8]
 800a118:	9509      	str	r5, [sp, #36]	@ 0x24
 800a11a:	b32d      	cbz	r5, 800a168 <micro_ros_utilities_create_message_memory+0x110>
 800a11c:	ee08 ba10 	vmov	s16, fp
 800a120:	4699      	mov	r9, r3
 800a122:	9309      	str	r3, [sp, #36]	@ 0x24
 800a124:	461f      	mov	r7, r3
 800a126:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800a12a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	eb03 0209 	add.w	r2, r3, r9
 800a132:	f853 6009 	ldr.w	r6, [r3, r9]
 800a136:	7913      	ldrb	r3, [r2, #4]
 800a138:	2b12      	cmp	r3, #18
 800a13a:	d03a      	beq.n	800a1b2 <micro_ros_utilities_create_message_memory+0x15a>
 800a13c:	f04f 0a00 	mov.w	sl, #0
 800a140:	4630      	mov	r0, r6
 800a142:	f7f6 f85d 	bl	8000200 <strlen>
 800a146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a148:	4450      	add	r0, sl
 800a14a:	3001      	adds	r0, #1
 800a14c:	4283      	cmp	r3, r0
 800a14e:	f107 0701 	add.w	r7, r7, #1
 800a152:	bf38      	it	cc
 800a154:	4603      	movcc	r3, r0
 800a156:	42af      	cmp	r7, r5
 800a158:	9309      	str	r3, [sp, #36]	@ 0x24
 800a15a:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 800a15e:	d3e4      	bcc.n	800a12a <micro_ros_utilities_create_message_memory+0xd2>
 800a160:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800a164:	ee18 ba10 	vmov	fp, s16
 800a168:	ac12      	add	r4, sp, #72	@ 0x48
 800a16a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a16c:	4620      	mov	r0, r4
 800a16e:	f002 fbd1 	bl	800c914 <micro_ros_string_utilities_init_with_size>
 800a172:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a176:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800a17a:	f8da 200c 	ldr.w	r2, [sl, #12]
 800a17e:	2100      	movs	r1, #0
 800a180:	4658      	mov	r0, fp
 800a182:	f00e fe40 	bl	8018e06 <memset>
 800a186:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a18a:	ab04      	add	r3, sp, #16
 800a18c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a190:	ab20      	add	r3, sp, #128	@ 0x80
 800a192:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a196:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a19a:	ac1a      	add	r4, sp, #104	@ 0x68
 800a19c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a1a0:	4659      	mov	r1, fp
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	f7ff fa62 	bl	800966c <handle_message_memory.constprop.2>
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	f002 fc10 	bl	800c9d0 <micro_ros_string_utilities_destroy>
 800a1b0:	e7a4      	b.n	800a0fc <micro_ros_utilities_create_message_memory+0xa4>
 800a1b2:	4b41      	ldr	r3, [pc, #260]	@ (800a2b8 <micro_ros_utilities_create_message_memory+0x260>)
 800a1b4:	68d0      	ldr	r0, [r2, #12]
 800a1b6:	6819      	ldr	r1, [r3, #0]
 800a1b8:	f001 ff66 	bl	800c088 <get_message_typesupport_handle>
 800a1bc:	6843      	ldr	r3, [r0, #4]
 800a1be:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1c0:	689d      	ldr	r5, [r3, #8]
 800a1c2:	b33d      	cbz	r5, 800a214 <micro_ros_utilities_create_message_memory+0x1bc>
 800a1c4:	f04f 0b00 	mov.w	fp, #0
 800a1c8:	ee08 6a90 	vmov	s17, r6
 800a1cc:	970e      	str	r7, [sp, #56]	@ 0x38
 800a1ce:	46da      	mov	sl, fp
 800a1d0:	465f      	mov	r7, fp
 800a1d2:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 800a1d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	eb03 020b 	add.w	r2, r3, fp
 800a1de:	f853 600b 	ldr.w	r6, [r3, fp]
 800a1e2:	7913      	ldrb	r3, [r2, #4]
 800a1e4:	2b12      	cmp	r3, #18
 800a1e6:	d018      	beq.n	800a21a <micro_ros_utilities_create_message_memory+0x1c2>
 800a1e8:	2400      	movs	r4, #0
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7f6 f808 	bl	8000200 <strlen>
 800a1f0:	4404      	add	r4, r0
 800a1f2:	3401      	adds	r4, #1
 800a1f4:	45a2      	cmp	sl, r4
 800a1f6:	f107 0701 	add.w	r7, r7, #1
 800a1fa:	bf38      	it	cc
 800a1fc:	46a2      	movcc	sl, r4
 800a1fe:	42af      	cmp	r7, r5
 800a200:	f10b 0b3c 	add.w	fp, fp, #60	@ 0x3c
 800a204:	d3e7      	bcc.n	800a1d6 <micro_ros_utilities_create_message_memory+0x17e>
 800a206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a208:	e9dd 790e 	ldrd	r7, r9, [sp, #56]	@ 0x38
 800a20c:	ee18 6a90 	vmov	r6, s17
 800a210:	689d      	ldr	r5, [r3, #8]
 800a212:	e795      	b.n	800a140 <micro_ros_utilities_create_message_memory+0xe8>
 800a214:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a216:	689d      	ldr	r5, [r3, #8]
 800a218:	e790      	b.n	800a13c <micro_ros_utilities_create_message_memory+0xe4>
 800a21a:	4b27      	ldr	r3, [pc, #156]	@ (800a2b8 <micro_ros_utilities_create_message_memory+0x260>)
 800a21c:	68d0      	ldr	r0, [r2, #12]
 800a21e:	6819      	ldr	r1, [r3, #0]
 800a220:	f001 ff32 	bl	800c088 <get_message_typesupport_handle>
 800a224:	6843      	ldr	r3, [r0, #4]
 800a226:	930d      	str	r3, [sp, #52]	@ 0x34
 800a228:	6899      	ldr	r1, [r3, #8]
 800a22a:	2900      	cmp	r1, #0
 800a22c:	d040      	beq.n	800a2b0 <micro_ros_utilities_create_message_memory+0x258>
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	9710      	str	r7, [sp, #64]	@ 0x40
 800a232:	2500      	movs	r5, #0
 800a234:	ee09 6a10 	vmov	s18, r6
 800a238:	46a9      	mov	r9, r5
 800a23a:	462e      	mov	r6, r5
 800a23c:	460f      	mov	r7, r1
 800a23e:	461c      	mov	r4, r3
 800a240:	1962      	adds	r2, r4, r5
 800a242:	5963      	ldr	r3, [r4, r5]
 800a244:	f892 c004 	ldrb.w	ip, [r2, #4]
 800a248:	f1bc 0f12 	cmp.w	ip, #18
 800a24c:	4618      	mov	r0, r3
 800a24e:	d012      	beq.n	800a276 <micro_ros_utilities_create_message_memory+0x21e>
 800a250:	f7f5 ffd6 	bl	8000200 <strlen>
 800a254:	3001      	adds	r0, #1
 800a256:	4286      	cmp	r6, r0
 800a258:	f109 0901 	add.w	r9, r9, #1
 800a25c:	bf38      	it	cc
 800a25e:	4606      	movcc	r6, r0
 800a260:	45b9      	cmp	r9, r7
 800a262:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a266:	d3eb      	bcc.n	800a240 <micro_ros_utilities_create_message_memory+0x1e8>
 800a268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a26a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a26c:	689d      	ldr	r5, [r3, #8]
 800a26e:	4634      	mov	r4, r6
 800a270:	ee19 6a10 	vmov	r6, s18
 800a274:	e7b9      	b.n	800a1ea <micro_ros_utilities_create_message_memory+0x192>
 800a276:	9311      	str	r3, [sp, #68]	@ 0x44
 800a278:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b8 <micro_ros_utilities_create_message_memory+0x260>)
 800a27a:	68d0      	ldr	r0, [r2, #12]
 800a27c:	6819      	ldr	r1, [r3, #0]
 800a27e:	f001 ff03 	bl	800c088 <get_message_typesupport_handle>
 800a282:	6840      	ldr	r0, [r0, #4]
 800a284:	f7ff fc2c 	bl	8009ae0 <get_longest_member_name>
 800a288:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a28a:	4604      	mov	r4, r0
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7f5 ffb7 	bl	8000200 <strlen>
 800a292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a294:	4404      	add	r4, r0
 800a296:	3401      	adds	r4, #1
 800a298:	689f      	ldr	r7, [r3, #8]
 800a29a:	42a6      	cmp	r6, r4
 800a29c:	f109 0901 	add.w	r9, r9, #1
 800a2a0:	bf38      	it	cc
 800a2a2:	4626      	movcc	r6, r4
 800a2a4:	454f      	cmp	r7, r9
 800a2a6:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a2aa:	d9dd      	bls.n	800a268 <micro_ros_utilities_create_message_memory+0x210>
 800a2ac:	691c      	ldr	r4, [r3, #16]
 800a2ae:	e7c7      	b.n	800a240 <micro_ros_utilities_create_message_memory+0x1e8>
 800a2b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2b2:	689d      	ldr	r5, [r3, #8]
 800a2b4:	e798      	b.n	800a1e8 <micro_ros_utilities_create_message_memory+0x190>
 800a2b6:	bf00      	nop
 800a2b8:	200001f4 	.word	0x200001f4

0800a2bc <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800a2bc:	4b04      	ldr	r3, [pc, #16]	@ (800a2d0 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	b10a      	cbz	r2, 800a2c6 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800a2c2:	4803      	ldr	r0, [pc, #12]	@ (800a2d0 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a2c4:	4770      	bx	lr
 800a2c6:	4a03      	ldr	r2, [pc, #12]	@ (800a2d4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800a2c8:	4801      	ldr	r0, [pc, #4]	@ (800a2d0 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a2ca:	6812      	ldr	r2, [r2, #0]
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	4770      	bx	lr
 800a2d0:	200000dc 	.word	0x200000dc
 800a2d4:	200001f0 	.word	0x200001f0

0800a2d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800a2d8:	4a02      	ldr	r2, [pc, #8]	@ (800a2e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xc>)
 800a2da:	4b03      	ldr	r3, [pc, #12]	@ (800a2e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x10>)
 800a2dc:	6812      	ldr	r2, [r2, #0]
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	200001f0 	.word	0x200001f0
 800a2e8:	200000dc 	.word	0x200000dc

0800a2ec <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a2ec:	4b04      	ldr	r3, [pc, #16]	@ (800a300 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	b10a      	cbz	r2, 800a2f6 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800a2f2:	4803      	ldr	r0, [pc, #12]	@ (800a300 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a2f4:	4770      	bx	lr
 800a2f6:	4a03      	ldr	r2, [pc, #12]	@ (800a304 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800a2f8:	4801      	ldr	r0, [pc, #4]	@ (800a300 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a2fa:	6812      	ldr	r2, [r2, #0]
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	4770      	bx	lr
 800a300:	200000f0 	.word	0x200000f0
 800a304:	200001f0 	.word	0x200001f0

0800a308 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a308:	4a02      	ldr	r2, [pc, #8]	@ (800a314 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xc>)
 800a30a:	4b03      	ldr	r3, [pc, #12]	@ (800a318 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x10>)
 800a30c:	6812      	ldr	r2, [r2, #0]
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	200001f0 	.word	0x200001f0
 800a318:	200000f0 	.word	0x200000f0

0800a31c <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__size_function__CommandVelocity__cmd_vel>:
 800a31c:	2006      	movs	r0, #6
 800a31e:	4770      	bx	lr

0800a320 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_const_function__CommandVelocity__cmd_vel>:
 800a320:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop

0800a328 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__fetch_function__CommandVelocity__cmd_vel>:
 800a328:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a32c:	680b      	ldr	r3, [r1, #0]
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop

0800a334 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__assign_function__CommandVelocity__cmd_vel>:
 800a334:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a338:	6813      	ldr	r3, [r2, #0]
 800a33a:	600b      	str	r3, [r1, #0]
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop

0800a340 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_init_function>:
 800a340:	f007 ba0e 	b.w	8011760 <nereo_interfaces__msg__CommandVelocity__init>

0800a344 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_fini_function>:
 800a344:	f007 ba10 	b.w	8011768 <nereo_interfaces__msg__CommandVelocity__fini>

0800a348 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_function__CommandVelocity__cmd_vel>:
 800a348:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop

0800a350 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800a350:	4b04      	ldr	r3, [pc, #16]	@ (800a364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	b10a      	cbz	r2, 800a35a <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800a356:	4803      	ldr	r0, [pc, #12]	@ (800a364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a358:	4770      	bx	lr
 800a35a:	4a03      	ldr	r2, [pc, #12]	@ (800a368 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800a35c:	4801      	ldr	r0, [pc, #4]	@ (800a364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a35e:	6812      	ldr	r2, [r2, #0]
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	4770      	bx	lr
 800a364:	20000138 	.word	0x20000138
 800a368:	200001f4 	.word	0x200001f4

0800a36c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__size_function__ThrusterStatuses__thruster_pwms>:
 800a36c:	2008      	movs	r0, #8
 800a36e:	4770      	bx	lr

0800a370 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_const_function__ThrusterStatuses__thruster_pwms>:
 800a370:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop

0800a378 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__fetch_function__ThrusterStatuses__thruster_pwms>:
 800a378:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 800a37c:	8013      	strh	r3, [r2, #0]
 800a37e:	4770      	bx	lr

0800a380 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__assign_function__ThrusterStatuses__thruster_pwms>:
 800a380:	8813      	ldrh	r3, [r2, #0]
 800a382:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a386:	4770      	bx	lr

0800a388 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_init_function>:
 800a388:	f007 b9f0 	b.w	801176c <nereo_interfaces__msg__ThrusterStatuses__init>

0800a38c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_fini_function>:
 800a38c:	f007 b9f2 	b.w	8011774 <nereo_interfaces__msg__ThrusterStatuses__fini>

0800a390 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_function__ThrusterStatuses__thruster_pwms>:
 800a390:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop

0800a398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a398:	4b04      	ldr	r3, [pc, #16]	@ (800a3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	b10a      	cbz	r2, 800a3a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800a39e:	4803      	ldr	r0, [pc, #12]	@ (800a3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a3a0:	4770      	bx	lr
 800a3a2:	4a03      	ldr	r2, [pc, #12]	@ (800a3b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800a3a4:	4801      	ldr	r0, [pc, #4]	@ (800a3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a3a6:	6812      	ldr	r2, [r2, #0]
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	4770      	bx	lr
 800a3ac:	20000180 	.word	0x20000180
 800a3b0:	200001f4 	.word	0x200001f4

0800a3b4 <_CommandVelocity__max_serialized_size>:
 800a3b4:	b508      	push	{r3, lr}
 800a3b6:	2104      	movs	r1, #4
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	f004 fa89 	bl	800e8d0 <ucdr_alignment>
 800a3be:	3018      	adds	r0, #24
 800a3c0:	bd08      	pop	{r3, pc}
 800a3c2:	bf00      	nop

0800a3c4 <get_serialized_size_nereo_interfaces__msg__CommandVelocity>:
 800a3c4:	b138      	cbz	r0, 800a3d6 <get_serialized_size_nereo_interfaces__msg__CommandVelocity+0x12>
 800a3c6:	b508      	push	{r3, lr}
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	2104      	movs	r1, #4
 800a3ce:	f004 fa7f 	bl	800e8d0 <ucdr_alignment>
 800a3d2:	3018      	adds	r0, #24
 800a3d4:	bd08      	pop	{r3, pc}
 800a3d6:	4770      	bx	lr

0800a3d8 <_CommandVelocity__cdr_deserialize>:
 800a3d8:	b111      	cbz	r1, 800a3e0 <_CommandVelocity__cdr_deserialize+0x8>
 800a3da:	2206      	movs	r2, #6
 800a3dc:	f002 bd34 	b.w	800ce48 <ucdr_deserialize_array_float>
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	4770      	bx	lr

0800a3e4 <_CommandVelocity__cdr_serialize>:
 800a3e4:	468c      	mov	ip, r1
 800a3e6:	4601      	mov	r1, r0
 800a3e8:	b118      	cbz	r0, 800a3f2 <_CommandVelocity__cdr_serialize+0xe>
 800a3ea:	2206      	movs	r2, #6
 800a3ec:	4660      	mov	r0, ip
 800a3ee:	f002 bcd7 	b.w	800cda0 <ucdr_serialize_array_float>
 800a3f2:	4770      	bx	lr

0800a3f4 <_CommandVelocity__get_serialized_size>:
 800a3f4:	b130      	cbz	r0, 800a404 <_CommandVelocity__get_serialized_size+0x10>
 800a3f6:	b508      	push	{r3, lr}
 800a3f8:	2104      	movs	r1, #4
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	f004 fa68 	bl	800e8d0 <ucdr_alignment>
 800a400:	3018      	adds	r0, #24
 800a402:	bd08      	pop	{r3, pc}
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop

0800a408 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800a408:	4800      	ldr	r0, [pc, #0]	@ (800a40c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x4>)
 800a40a:	4770      	bx	lr
 800a40c:	2000018c 	.word	0x2000018c

0800a410 <_ThrusterStatuses__max_serialized_size>:
 800a410:	b508      	push	{r3, lr}
 800a412:	2102      	movs	r1, #2
 800a414:	2000      	movs	r0, #0
 800a416:	f004 fa5b 	bl	800e8d0 <ucdr_alignment>
 800a41a:	3010      	adds	r0, #16
 800a41c:	bd08      	pop	{r3, pc}
 800a41e:	bf00      	nop

0800a420 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses>:
 800a420:	b138      	cbz	r0, 800a432 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses+0x12>
 800a422:	b508      	push	{r3, lr}
 800a424:	460b      	mov	r3, r1
 800a426:	4618      	mov	r0, r3
 800a428:	2102      	movs	r1, #2
 800a42a:	f004 fa51 	bl	800e8d0 <ucdr_alignment>
 800a42e:	3010      	adds	r0, #16
 800a430:	bd08      	pop	{r3, pc}
 800a432:	4770      	bx	lr

0800a434 <_ThrusterStatuses__cdr_deserialize>:
 800a434:	b111      	cbz	r1, 800a43c <_ThrusterStatuses__cdr_deserialize+0x8>
 800a436:	2208      	movs	r2, #8
 800a438:	f002 bc5c 	b.w	800ccf4 <ucdr_deserialize_array_uint16_t>
 800a43c:	4608      	mov	r0, r1
 800a43e:	4770      	bx	lr

0800a440 <_ThrusterStatuses__cdr_serialize>:
 800a440:	468c      	mov	ip, r1
 800a442:	4601      	mov	r1, r0
 800a444:	b118      	cbz	r0, 800a44e <_ThrusterStatuses__cdr_serialize+0xe>
 800a446:	2208      	movs	r2, #8
 800a448:	4660      	mov	r0, ip
 800a44a:	f002 bbfd 	b.w	800cc48 <ucdr_serialize_array_uint16_t>
 800a44e:	4770      	bx	lr

0800a450 <_ThrusterStatuses__get_serialized_size>:
 800a450:	b130      	cbz	r0, 800a460 <_ThrusterStatuses__get_serialized_size+0x10>
 800a452:	b508      	push	{r3, lr}
 800a454:	2102      	movs	r1, #2
 800a456:	2000      	movs	r0, #0
 800a458:	f004 fa3a 	bl	800e8d0 <ucdr_alignment>
 800a45c:	3010      	adds	r0, #16
 800a45e:	bd08      	pop	{r3, pc}
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop

0800a464 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a464:	4800      	ldr	r0, [pc, #0]	@ (800a468 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x4>)
 800a466:	4770      	bx	lr
 800a468:	200001b4 	.word	0x200001b4

0800a46c <rcl_get_zero_initialized_publisher>:
 800a46c:	4b01      	ldr	r3, [pc, #4]	@ (800a474 <rcl_get_zero_initialized_publisher+0x8>)
 800a46e:	6818      	ldr	r0, [r3, #0]
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	0801a574 	.word	0x0801a574

0800a478 <rcl_publisher_init>:
 800a478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a47c:	b088      	sub	sp, #32
 800a47e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a480:	2d00      	cmp	r5, #0
 800a482:	d069      	beq.n	800a558 <rcl_publisher_init+0xe0>
 800a484:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a488:	4604      	mov	r4, r0
 800a48a:	4648      	mov	r0, r9
 800a48c:	460e      	mov	r6, r1
 800a48e:	4690      	mov	r8, r2
 800a490:	461f      	mov	r7, r3
 800a492:	f001 f845 	bl	800b520 <rcutils_allocator_is_valid>
 800a496:	2800      	cmp	r0, #0
 800a498:	d05e      	beq.n	800a558 <rcl_publisher_init+0xe0>
 800a49a:	2c00      	cmp	r4, #0
 800a49c:	d05c      	beq.n	800a558 <rcl_publisher_init+0xe0>
 800a49e:	f8d4 a000 	ldr.w	sl, [r4]
 800a4a2:	f1ba 0f00 	cmp.w	sl, #0
 800a4a6:	d004      	beq.n	800a4b2 <rcl_publisher_init+0x3a>
 800a4a8:	2764      	movs	r7, #100	@ 0x64
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	b008      	add	sp, #32
 800a4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f007 fde6 	bl	8012084 <rcl_node_is_valid>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d052      	beq.n	800a562 <rcl_publisher_init+0xea>
 800a4bc:	f1b8 0f00 	cmp.w	r8, #0
 800a4c0:	d04a      	beq.n	800a558 <rcl_publisher_init+0xe0>
 800a4c2:	2f00      	cmp	r7, #0
 800a4c4:	d048      	beq.n	800a558 <rcl_publisher_init+0xe0>
 800a4c6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a4ca:	aa07      	add	r2, sp, #28
 800a4cc:	9205      	str	r2, [sp, #20]
 800a4ce:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a4d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a4da:	f8cd a01c 	str.w	sl, [sp, #28]
 800a4de:	4639      	mov	r1, r7
 800a4e0:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f007 fe21 	bl	801212c <rcl_node_resolve_name>
 800a4ea:	4607      	mov	r7, r0
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d14f      	bne.n	800a590 <rcl_publisher_init+0x118>
 800a4f0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a4f2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a4f4:	20c8      	movs	r0, #200	@ 0xc8
 800a4f6:	4798      	blx	r3
 800a4f8:	6020      	str	r0, [r4, #0]
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d04e      	beq.n	800a59c <rcl_publisher_init+0x124>
 800a4fe:	4630      	mov	r0, r6
 800a500:	f007 fde2 	bl	80120c8 <rcl_node_get_rmw_handle>
 800a504:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	9a07      	ldr	r2, [sp, #28]
 800a50c:	6827      	ldr	r7, [r4, #0]
 800a50e:	462b      	mov	r3, r5
 800a510:	4641      	mov	r1, r8
 800a512:	f001 f913 	bl	800b73c <rmw_create_publisher>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a51c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a520:	b370      	cbz	r0, 800a580 <rcl_publisher_init+0x108>
 800a522:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a526:	f001 f9e7 	bl	800b8f8 <rmw_publisher_get_actual_qos>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	4607      	mov	r7, r0
 800a52e:	b9d0      	cbnz	r0, 800a566 <rcl_publisher_init+0xee>
 800a530:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a534:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a538:	4629      	mov	r1, r5
 800a53a:	2270      	movs	r2, #112	@ 0x70
 800a53c:	4618      	mov	r0, r3
 800a53e:	f00e fcca 	bl	8018ed6 <memcpy>
 800a542:	6832      	ldr	r2, [r6, #0]
 800a544:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a548:	9807      	ldr	r0, [sp, #28]
 800a54a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a54c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a54e:	4798      	blx	r3
 800a550:	4638      	mov	r0, r7
 800a552:	b008      	add	sp, #32
 800a554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a558:	270b      	movs	r7, #11
 800a55a:	4638      	mov	r0, r7
 800a55c:	b008      	add	sp, #32
 800a55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a562:	27c8      	movs	r7, #200	@ 0xc8
 800a564:	e7a1      	b.n	800a4aa <rcl_publisher_init+0x32>
 800a566:	b18b      	cbz	r3, 800a58c <rcl_publisher_init+0x114>
 800a568:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a56c:	b142      	cbz	r2, 800a580 <rcl_publisher_init+0x108>
 800a56e:	4630      	mov	r0, r6
 800a570:	f007 fdaa 	bl	80120c8 <rcl_node_get_rmw_handle>
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a57a:	f001 f9cd 	bl	800b918 <rmw_destroy_publisher>
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a582:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a584:	4618      	mov	r0, r3
 800a586:	4790      	blx	r2
 800a588:	2300      	movs	r3, #0
 800a58a:	6023      	str	r3, [r4, #0]
 800a58c:	2701      	movs	r7, #1
 800a58e:	e7db      	b.n	800a548 <rcl_publisher_init+0xd0>
 800a590:	2867      	cmp	r0, #103	@ 0x67
 800a592:	d0d9      	beq.n	800a548 <rcl_publisher_init+0xd0>
 800a594:	2869      	cmp	r0, #105	@ 0x69
 800a596:	d003      	beq.n	800a5a0 <rcl_publisher_init+0x128>
 800a598:	280a      	cmp	r0, #10
 800a59a:	d1f7      	bne.n	800a58c <rcl_publisher_init+0x114>
 800a59c:	270a      	movs	r7, #10
 800a59e:	e7d3      	b.n	800a548 <rcl_publisher_init+0xd0>
 800a5a0:	2767      	movs	r7, #103	@ 0x67
 800a5a2:	e7d1      	b.n	800a548 <rcl_publisher_init+0xd0>

0800a5a4 <rcl_publisher_get_default_options>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	4d14      	ldr	r5, [pc, #80]	@ (800a5f8 <rcl_publisher_get_default_options+0x54>)
 800a5a8:	4914      	ldr	r1, [pc, #80]	@ (800a5fc <rcl_publisher_get_default_options+0x58>)
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	2250      	movs	r2, #80	@ 0x50
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f00e fc90 	bl	8018ed6 <memcpy>
 800a5b6:	a802      	add	r0, sp, #8
 800a5b8:	f000 ffa4 	bl	800b504 <rcutils_get_default_allocator>
 800a5bc:	f10d 0c08 	add.w	ip, sp, #8
 800a5c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a5c4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a5c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a5cc:	466e      	mov	r6, sp
 800a5ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a5d2:	f8ce 3000 	str.w	r3, [lr]
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f001 f832 	bl	800b640 <rmw_get_default_publisher_options>
 800a5dc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a5e0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a5e4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a5e8:	2270      	movs	r2, #112	@ 0x70
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f00e fc72 	bl	8018ed6 <memcpy>
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	b008      	add	sp, #32
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}
 800a5f8:	200109b8 	.word	0x200109b8
 800a5fc:	0801a578 	.word	0x0801a578

0800a600 <rcl_publish>:
 800a600:	b1f8      	cbz	r0, 800a642 <rcl_publish+0x42>
 800a602:	6803      	ldr	r3, [r0, #0]
 800a604:	b570      	push	{r4, r5, r6, lr}
 800a606:	4604      	mov	r4, r0
 800a608:	b1b3      	cbz	r3, 800a638 <rcl_publish+0x38>
 800a60a:	4616      	mov	r6, r2
 800a60c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a610:	b192      	cbz	r2, 800a638 <rcl_publish+0x38>
 800a612:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a616:	460d      	mov	r5, r1
 800a618:	f007 f95a 	bl	80118d0 <rcl_context_is_valid>
 800a61c:	b160      	cbz	r0, 800a638 <rcl_publish+0x38>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a624:	b140      	cbz	r0, 800a638 <rcl_publish+0x38>
 800a626:	b155      	cbz	r5, 800a63e <rcl_publish+0x3e>
 800a628:	4632      	mov	r2, r6
 800a62a:	4629      	mov	r1, r5
 800a62c:	f001 f826 	bl	800b67c <rmw_publish>
 800a630:	3800      	subs	r0, #0
 800a632:	bf18      	it	ne
 800a634:	2001      	movne	r0, #1
 800a636:	bd70      	pop	{r4, r5, r6, pc}
 800a638:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a63c:	bd70      	pop	{r4, r5, r6, pc}
 800a63e:	200b      	movs	r0, #11
 800a640:	bd70      	pop	{r4, r5, r6, pc}
 800a642:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a646:	4770      	bx	lr

0800a648 <rcl_publisher_is_valid>:
 800a648:	b1a0      	cbz	r0, 800a674 <rcl_publisher_is_valid+0x2c>
 800a64a:	6803      	ldr	r3, [r0, #0]
 800a64c:	b510      	push	{r4, lr}
 800a64e:	4604      	mov	r4, r0
 800a650:	b173      	cbz	r3, 800a670 <rcl_publisher_is_valid+0x28>
 800a652:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a656:	b15a      	cbz	r2, 800a670 <rcl_publisher_is_valid+0x28>
 800a658:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a65c:	f007 f938 	bl	80118d0 <rcl_context_is_valid>
 800a660:	b130      	cbz	r0, 800a670 <rcl_publisher_is_valid+0x28>
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a668:	3800      	subs	r0, #0
 800a66a:	bf18      	it	ne
 800a66c:	2001      	movne	r0, #1
 800a66e:	bd10      	pop	{r4, pc}
 800a670:	2000      	movs	r0, #0
 800a672:	bd10      	pop	{r4, pc}
 800a674:	2000      	movs	r0, #0
 800a676:	4770      	bx	lr

0800a678 <rcl_publisher_is_valid_except_context>:
 800a678:	b130      	cbz	r0, 800a688 <rcl_publisher_is_valid_except_context+0x10>
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	b120      	cbz	r0, 800a688 <rcl_publisher_is_valid_except_context+0x10>
 800a67e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a682:	3800      	subs	r0, #0
 800a684:	bf18      	it	ne
 800a686:	2001      	movne	r0, #1
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop

0800a68c <_rclc_check_for_new_data>:
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d046      	beq.n	800a71e <_rclc_check_for_new_data+0x92>
 800a690:	b510      	push	{r4, lr}
 800a692:	7802      	ldrb	r2, [r0, #0]
 800a694:	b084      	sub	sp, #16
 800a696:	4603      	mov	r3, r0
 800a698:	2a0a      	cmp	r2, #10
 800a69a:	d842      	bhi.n	800a722 <_rclc_check_for_new_data+0x96>
 800a69c:	e8df f002 	tbb	[pc, r2]
 800a6a0:	14181212 	.word	0x14181212
 800a6a4:	06060614 	.word	0x06060614
 800a6a8:	2e1a      	.short	0x2e1a
 800a6aa:	16          	.byte	0x16
 800a6ab:	00          	.byte	0x00
 800a6ac:	6a0a      	ldr	r2, [r1, #32]
 800a6ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a6b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	1a12      	subs	r2, r2, r0
 800a6b8:	bf18      	it	ne
 800a6ba:	2201      	movne	r2, #1
 800a6bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a6c0:	b004      	add	sp, #16
 800a6c2:	bd10      	pop	{r4, pc}
 800a6c4:	680a      	ldr	r2, [r1, #0]
 800a6c6:	e7f2      	b.n	800a6ae <_rclc_check_for_new_data+0x22>
 800a6c8:	698a      	ldr	r2, [r1, #24]
 800a6ca:	e7f0      	b.n	800a6ae <_rclc_check_for_new_data+0x22>
 800a6cc:	688a      	ldr	r2, [r1, #8]
 800a6ce:	e7ee      	b.n	800a6ae <_rclc_check_for_new_data+0x22>
 800a6d0:	690a      	ldr	r2, [r1, #16]
 800a6d2:	e7ec      	b.n	800a6ae <_rclc_check_for_new_data+0x22>
 800a6d4:	685c      	ldr	r4, [r3, #4]
 800a6d6:	4608      	mov	r0, r1
 800a6d8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a6dc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a6e0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a6e4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a6ee:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a6f2:	f104 0110 	add.w	r1, r4, #16
 800a6f6:	f009 f9e7 	bl	8013ac8 <rcl_action_client_wait_set_get_entities_ready>
 800a6fa:	e7e1      	b.n	800a6c0 <_rclc_check_for_new_data+0x34>
 800a6fc:	685c      	ldr	r4, [r3, #4]
 800a6fe:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a702:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a706:	e9cd 3200 	strd	r3, r2, [sp]
 800a70a:	4608      	mov	r0, r1
 800a70c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a710:	f104 0220 	add.w	r2, r4, #32
 800a714:	f104 0110 	add.w	r1, r4, #16
 800a718:	f009 fbee 	bl	8013ef8 <rcl_action_server_wait_set_get_entities_ready>
 800a71c:	e7d0      	b.n	800a6c0 <_rclc_check_for_new_data+0x34>
 800a71e:	200b      	movs	r0, #11
 800a720:	4770      	bx	lr
 800a722:	2001      	movs	r0, #1
 800a724:	e7cc      	b.n	800a6c0 <_rclc_check_for_new_data+0x34>
 800a726:	bf00      	nop

0800a728 <_rclc_take_new_data>:
 800a728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a72a:	b09b      	sub	sp, #108	@ 0x6c
 800a72c:	2800      	cmp	r0, #0
 800a72e:	f000 8088 	beq.w	800a842 <_rclc_take_new_data+0x11a>
 800a732:	7803      	ldrb	r3, [r0, #0]
 800a734:	4604      	mov	r4, r0
 800a736:	2b0a      	cmp	r3, #10
 800a738:	f200 8167 	bhi.w	800aa0a <_rclc_take_new_data+0x2e2>
 800a73c:	e8df f003 	tbb	[pc, r3]
 800a740:	44152d2d 	.word	0x44152d2d
 800a744:	19191944 	.word	0x19191944
 800a748:	065a      	.short	0x065a
 800a74a:	15          	.byte	0x15
 800a74b:	00          	.byte	0x00
 800a74c:	6840      	ldr	r0, [r0, #4]
 800a74e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a752:	2b00      	cmp	r3, #0
 800a754:	f040 80b2 	bne.w	800a8bc <_rclc_take_new_data+0x194>
 800a758:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f040 80e4 	bne.w	800a92a <_rclc_take_new_data+0x202>
 800a762:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a766:	2b00      	cmp	r3, #0
 800a768:	d16f      	bne.n	800a84a <_rclc_take_new_data+0x122>
 800a76a:	2500      	movs	r5, #0
 800a76c:	4628      	mov	r0, r5
 800a76e:	b01b      	add	sp, #108	@ 0x6c
 800a770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a772:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a774:	6a0b      	ldr	r3, [r1, #32]
 800a776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0f5      	beq.n	800a76a <_rclc_take_new_data+0x42>
 800a77e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a782:	f104 0110 	add.w	r1, r4, #16
 800a786:	f007 fe7b 	bl	8012480 <rcl_take_request>
 800a78a:	4605      	mov	r5, r0
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d0ec      	beq.n	800a76a <_rclc_take_new_data+0x42>
 800a790:	f240 2359 	movw	r3, #601	@ 0x259
 800a794:	4298      	cmp	r0, r3
 800a796:	d013      	beq.n	800a7c0 <_rclc_take_new_data+0x98>
 800a798:	e029      	b.n	800a7ee <_rclc_take_new_data+0xc6>
 800a79a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a79c:	680b      	ldr	r3, [r1, #0]
 800a79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0e1      	beq.n	800a76a <_rclc_take_new_data+0x42>
 800a7a6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	aa0a      	add	r2, sp, #40	@ 0x28
 800a7ae:	f007 ffa5 	bl	80126fc <rcl_take>
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d0d9      	beq.n	800a76c <_rclc_take_new_data+0x44>
 800a7b8:	f240 1391 	movw	r3, #401	@ 0x191
 800a7bc:	4298      	cmp	r0, r3
 800a7be:	d116      	bne.n	800a7ee <_rclc_take_new_data+0xc6>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a7c6:	e7d1      	b.n	800a76c <_rclc_take_new_data+0x44>
 800a7c8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a7ca:	698b      	ldr	r3, [r1, #24]
 800a7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0ca      	beq.n	800a76a <_rclc_take_new_data+0x42>
 800a7d4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a7d8:	f104 0110 	add.w	r1, r4, #16
 800a7dc:	f007 f808 	bl	80117f0 <rcl_take_response>
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d0c1      	beq.n	800a76a <_rclc_take_new_data+0x42>
 800a7e6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a7ea:	4298      	cmp	r0, r3
 800a7ec:	d0be      	beq.n	800a76c <_rclc_take_new_data+0x44>
 800a7ee:	f000 febb 	bl	800b568 <rcutils_reset_error>
 800a7f2:	e7bb      	b.n	800a76c <_rclc_take_new_data+0x44>
 800a7f4:	6840      	ldr	r0, [r0, #4]
 800a7f6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d17d      	bne.n	800a8fa <_rclc_take_new_data+0x1d2>
 800a7fe:	69c3      	ldr	r3, [r0, #28]
 800a800:	b11b      	cbz	r3, 800a80a <_rclc_take_new_data+0xe2>
 800a802:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a806:	2b00      	cmp	r3, #0
 800a808:	d144      	bne.n	800a894 <_rclc_take_new_data+0x16c>
 800a80a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f040 80ac 	bne.w	800a96c <_rclc_take_new_data+0x244>
 800a814:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d0a6      	beq.n	800a76a <_rclc_take_new_data+0x42>
 800a81c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a81e:	a90a      	add	r1, sp, #40	@ 0x28
 800a820:	3010      	adds	r0, #16
 800a822:	f009 f829 	bl	8013878 <rcl_action_take_result_response>
 800a826:	4605      	mov	r5, r0
 800a828:	2800      	cmp	r0, #0
 800a82a:	d1e0      	bne.n	800a7ee <_rclc_take_new_data+0xc6>
 800a82c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a830:	6860      	ldr	r0, [r4, #4]
 800a832:	f009 fc85 	bl	8014140 <rclc_action_find_handle_by_result_request_sequence_number>
 800a836:	2800      	cmp	r0, #0
 800a838:	d098      	beq.n	800a76c <_rclc_take_new_data+0x44>
 800a83a:	2301      	movs	r3, #1
 800a83c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800a840:	e794      	b.n	800a76c <_rclc_take_new_data+0x44>
 800a842:	250b      	movs	r5, #11
 800a844:	4628      	mov	r0, r5
 800a846:	b01b      	add	sp, #108	@ 0x6c
 800a848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a84a:	ae04      	add	r6, sp, #16
 800a84c:	aa0a      	add	r2, sp, #40	@ 0x28
 800a84e:	3010      	adds	r0, #16
 800a850:	4631      	mov	r1, r6
 800a852:	f009 fa85 	bl	8013d60 <rcl_action_take_cancel_request>
 800a856:	4605      	mov	r5, r0
 800a858:	2800      	cmp	r0, #0
 800a85a:	d1c8      	bne.n	800a7ee <_rclc_take_new_data+0xc6>
 800a85c:	6860      	ldr	r0, [r4, #4]
 800a85e:	a90a      	add	r1, sp, #40	@ 0x28
 800a860:	f009 fc2c 	bl	80140bc <rclc_action_find_goal_handle_by_uuid>
 800a864:	4607      	mov	r7, r0
 800a866:	2800      	cmp	r0, #0
 800a868:	f000 80bb 	beq.w	800a9e2 <_rclc_take_new_data+0x2ba>
 800a86c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a870:	2101      	movs	r1, #1
 800a872:	f009 fbad 	bl	8013fd0 <rcl_action_transition_goal_state>
 800a876:	2803      	cmp	r0, #3
 800a878:	4684      	mov	ip, r0
 800a87a:	f040 80a7 	bne.w	800a9cc <_rclc_take_new_data+0x2a4>
 800a87e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a880:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800a884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a886:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a88a:	e884 0003 	stmia.w	r4, {r0, r1}
 800a88e:	f887 c008 	strb.w	ip, [r7, #8]
 800a892:	e76b      	b.n	800a76c <_rclc_take_new_data+0x44>
 800a894:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a896:	3010      	adds	r0, #16
 800a898:	f009 f86e 	bl	8013978 <rcl_action_take_feedback>
 800a89c:	4605      	mov	r5, r0
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d1a5      	bne.n	800a7ee <_rclc_take_new_data+0xc6>
 800a8a2:	6860      	ldr	r0, [r4, #4]
 800a8a4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a8a6:	f009 fc09 	bl	80140bc <rclc_action_find_goal_handle_by_uuid>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f000 80a3 	beq.w	800a9f8 <_rclc_take_new_data+0x2d0>
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	6860      	ldr	r0, [r4, #4]
 800a8b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800a8ba:	e7a6      	b.n	800a80a <_rclc_take_new_data+0xe2>
 800a8bc:	f009 fbd8 	bl	8014070 <rclc_action_take_goal_handle>
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	6860      	ldr	r0, [r4, #4]
 800a8c4:	2e00      	cmp	r6, #0
 800a8c6:	f43f af47 	beq.w	800a758 <_rclc_take_new_data+0x30>
 800a8ca:	6070      	str	r0, [r6, #4]
 800a8cc:	69f2      	ldr	r2, [r6, #28]
 800a8ce:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800a8d2:	3010      	adds	r0, #16
 800a8d4:	f009 f98c 	bl	8013bf0 <rcl_action_take_goal_request>
 800a8d8:	4605      	mov	r5, r0
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	f040 808e 	bne.w	800a9fc <_rclc_take_new_data+0x2d4>
 800a8e0:	69f7      	ldr	r7, [r6, #28]
 800a8e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a8e4:	7235      	strb	r5, [r6, #8]
 800a8e6:	f8c6 0009 	str.w	r0, [r6, #9]
 800a8ea:	f8c6 100d 	str.w	r1, [r6, #13]
 800a8ee:	6860      	ldr	r0, [r4, #4]
 800a8f0:	f8c6 2011 	str.w	r2, [r6, #17]
 800a8f4:	f8c6 3015 	str.w	r3, [r6, #21]
 800a8f8:	e72e      	b.n	800a758 <_rclc_take_new_data+0x30>
 800a8fa:	aa04      	add	r2, sp, #16
 800a8fc:	a90a      	add	r1, sp, #40	@ 0x28
 800a8fe:	3010      	adds	r0, #16
 800a900:	f008 ff42 	bl	8013788 <rcl_action_take_goal_response>
 800a904:	4605      	mov	r5, r0
 800a906:	2800      	cmp	r0, #0
 800a908:	f47f af71 	bne.w	800a7ee <_rclc_take_new_data+0xc6>
 800a90c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a910:	6860      	ldr	r0, [r4, #4]
 800a912:	f009 fc03 	bl	801411c <rclc_action_find_handle_by_goal_request_sequence_number>
 800a916:	b130      	cbz	r0, 800a926 <_rclc_take_new_data+0x1fe>
 800a918:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a91c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a920:	2201      	movs	r2, #1
 800a922:	f880 2020 	strb.w	r2, [r0, #32]
 800a926:	6860      	ldr	r0, [r4, #4]
 800a928:	e769      	b.n	800a7fe <_rclc_take_new_data+0xd6>
 800a92a:	aa04      	add	r2, sp, #16
 800a92c:	3010      	adds	r0, #16
 800a92e:	a90a      	add	r1, sp, #40	@ 0x28
 800a930:	f009 f9d6 	bl	8013ce0 <rcl_action_take_result_request>
 800a934:	4605      	mov	r5, r0
 800a936:	2800      	cmp	r0, #0
 800a938:	f47f af59 	bne.w	800a7ee <_rclc_take_new_data+0xc6>
 800a93c:	6860      	ldr	r0, [r4, #4]
 800a93e:	a904      	add	r1, sp, #16
 800a940:	f009 fbbc 	bl	80140bc <rclc_action_find_goal_handle_by_uuid>
 800a944:	4607      	mov	r7, r0
 800a946:	b160      	cbz	r0, 800a962 <_rclc_take_new_data+0x23a>
 800a948:	ad0a      	add	r5, sp, #40	@ 0x28
 800a94a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800a94e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a950:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a952:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a956:	f04f 0c02 	mov.w	ip, #2
 800a95a:	e886 0003 	stmia.w	r6, {r0, r1}
 800a95e:	f887 c008 	strb.w	ip, [r7, #8]
 800a962:	6860      	ldr	r0, [r4, #4]
 800a964:	2300      	movs	r3, #0
 800a966:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800a96a:	e6fa      	b.n	800a762 <_rclc_take_new_data+0x3a>
 800a96c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800a970:	a90a      	add	r1, sp, #40	@ 0x28
 800a972:	3010      	adds	r0, #16
 800a974:	f008 ffc0 	bl	80138f8 <rcl_action_take_cancel_response>
 800a978:	4605      	mov	r5, r0
 800a97a:	2800      	cmp	r0, #0
 800a97c:	f47f af37 	bne.w	800a7ee <_rclc_take_new_data+0xc6>
 800a980:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a984:	6860      	ldr	r0, [r4, #4]
 800a986:	f009 fbed 	bl	8014164 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a98a:	4606      	mov	r6, r0
 800a98c:	6860      	ldr	r0, [r4, #4]
 800a98e:	2e00      	cmp	r6, #0
 800a990:	f43f af40 	beq.w	800a814 <_rclc_take_new_data+0xec>
 800a994:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a996:	2701      	movs	r7, #1
 800a998:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f43f af3a 	beq.w	800a814 <_rclc_take_new_data+0xec>
 800a9a0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a9a2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a9a6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a9aa:	f009 fb87 	bl	80140bc <rclc_action_find_goal_handle_by_uuid>
 800a9ae:	b138      	cbz	r0, 800a9c0 <_rclc_take_new_data+0x298>
 800a9b0:	6860      	ldr	r0, [r4, #4]
 800a9b2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a9b4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800a9b8:	3501      	adds	r5, #1
 800a9ba:	42ab      	cmp	r3, r5
 800a9bc:	d8f0      	bhi.n	800a9a0 <_rclc_take_new_data+0x278>
 800a9be:	e729      	b.n	800a814 <_rclc_take_new_data+0xec>
 800a9c0:	6860      	ldr	r0, [r4, #4]
 800a9c2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a9c4:	3501      	adds	r5, #1
 800a9c6:	42ab      	cmp	r3, r5
 800a9c8:	d8ea      	bhi.n	800a9a0 <_rclc_take_new_data+0x278>
 800a9ca:	e723      	b.n	800a814 <_rclc_take_new_data+0xec>
 800a9cc:	ab06      	add	r3, sp, #24
 800a9ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a9d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a9d4:	2103      	movs	r1, #3
 800a9d6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a9da:	6860      	ldr	r0, [r4, #4]
 800a9dc:	f009 fc38 	bl	8014250 <rclc_action_server_goal_cancel_reject>
 800a9e0:	e6c4      	b.n	800a76c <_rclc_take_new_data+0x44>
 800a9e2:	ab06      	add	r3, sp, #24
 800a9e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a9e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a9ea:	2102      	movs	r1, #2
 800a9ec:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a9f0:	6860      	ldr	r0, [r4, #4]
 800a9f2:	f009 fc2d 	bl	8014250 <rclc_action_server_goal_cancel_reject>
 800a9f6:	e6b9      	b.n	800a76c <_rclc_take_new_data+0x44>
 800a9f8:	6860      	ldr	r0, [r4, #4]
 800a9fa:	e706      	b.n	800a80a <_rclc_take_new_data+0xe2>
 800a9fc:	6860      	ldr	r0, [r4, #4]
 800a9fe:	4631      	mov	r1, r6
 800aa00:	f009 fb46 	bl	8014090 <rclc_action_remove_used_goal_handle>
 800aa04:	f000 fdb0 	bl	800b568 <rcutils_reset_error>
 800aa08:	e6b0      	b.n	800a76c <_rclc_take_new_data+0x44>
 800aa0a:	2501      	movs	r5, #1
 800aa0c:	e6ae      	b.n	800a76c <_rclc_take_new_data+0x44>
 800aa0e:	bf00      	nop

0800aa10 <_rclc_execute.part.0>:
 800aa10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa12:	7803      	ldrb	r3, [r0, #0]
 800aa14:	b087      	sub	sp, #28
 800aa16:	4604      	mov	r4, r0
 800aa18:	2b0a      	cmp	r3, #10
 800aa1a:	f200 8136 	bhi.w	800ac8a <_rclc_execute.part.0+0x27a>
 800aa1e:	e8df f003 	tbb	[pc, r3]
 800aa22:	435e      	.short	0x435e
 800aa24:	06a1664f 	.word	0x06a1664f
 800aa28:	6c1e0606 	.word	0x6c1e0606
 800aa2c:	59          	.byte	0x59
 800aa2d:	00          	.byte	0x00
 800aa2e:	2b06      	cmp	r3, #6
 800aa30:	f000 8122 	beq.w	800ac78 <_rclc_execute.part.0+0x268>
 800aa34:	2b07      	cmp	r3, #7
 800aa36:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa38:	f040 8118 	bne.w	800ac6c <_rclc_execute.part.0+0x25c>
 800aa3c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800aa40:	6880      	ldr	r0, [r0, #8]
 800aa42:	4798      	blx	r3
 800aa44:	f104 0110 	add.w	r1, r4, #16
 800aa48:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800aa4a:	6860      	ldr	r0, [r4, #4]
 800aa4c:	f007 fd58 	bl	8012500 <rcl_send_response>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d033      	beq.n	800aabc <_rclc_execute.part.0+0xac>
 800aa54:	9005      	str	r0, [sp, #20]
 800aa56:	f000 fd87 	bl	800b568 <rcutils_reset_error>
 800aa5a:	9805      	ldr	r0, [sp, #20]
 800aa5c:	e02e      	b.n	800aabc <_rclc_execute.part.0+0xac>
 800aa5e:	6840      	ldr	r0, [r0, #4]
 800aa60:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 8086 	beq.w	800ab76 <_rclc_execute.part.0+0x166>
 800aa6a:	2600      	movs	r6, #0
 800aa6c:	2701      	movs	r7, #1
 800aa6e:	e004      	b.n	800aa7a <_rclc_execute.part.0+0x6a>
 800aa70:	f009 fad8 	bl	8014024 <rclc_action_send_result_request>
 800aa74:	b998      	cbnz	r0, 800aa9e <_rclc_execute.part.0+0x8e>
 800aa76:	722f      	strb	r7, [r5, #8]
 800aa78:	6860      	ldr	r0, [r4, #4]
 800aa7a:	f009 fb85 	bl	8014188 <rclc_action_find_first_handle_with_goal_response>
 800aa7e:	4605      	mov	r5, r0
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d077      	beq.n	800ab74 <_rclc_execute.part.0+0x164>
 800aa84:	6863      	ldr	r3, [r4, #4]
 800aa86:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aa88:	699b      	ldr	r3, [r3, #24]
 800aa8a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800aa8e:	f885 6020 	strb.w	r6, [r5, #32]
 800aa92:	4798      	blx	r3
 800aa94:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800aa98:	4628      	mov	r0, r5
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e8      	bne.n	800aa70 <_rclc_execute.part.0+0x60>
 800aa9e:	6860      	ldr	r0, [r4, #4]
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	f009 faf5 	bl	8014090 <rclc_action_remove_used_goal_handle>
 800aaa6:	e7e7      	b.n	800aa78 <_rclc_execute.part.0+0x68>
 800aaa8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aaac:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800aab0:	2d00      	cmp	r5, #0
 800aab2:	f000 80c9 	beq.w	800ac48 <_rclc_execute.part.0+0x238>
 800aab6:	6880      	ldr	r0, [r0, #8]
 800aab8:	4798      	blx	r3
 800aaba:	2000      	movs	r0, #0
 800aabc:	b007      	add	sp, #28
 800aabe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aac0:	6840      	ldr	r0, [r0, #4]
 800aac2:	f007 ff1f 	bl	8012904 <rcl_timer_call>
 800aac6:	f240 3321 	movw	r3, #801	@ 0x321
 800aaca:	4298      	cmp	r0, r3
 800aacc:	d004      	beq.n	800aad8 <_rclc_execute.part.0+0xc8>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d0f4      	beq.n	800aabc <_rclc_execute.part.0+0xac>
 800aad2:	e7bf      	b.n	800aa54 <_rclc_execute.part.0+0x44>
 800aad4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aad6:	4798      	blx	r3
 800aad8:	2000      	movs	r0, #0
 800aada:	b007      	add	sp, #28
 800aadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aade:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aae2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aae4:	b925      	cbnz	r5, 800aaf0 <_rclc_execute.part.0+0xe0>
 800aae6:	4628      	mov	r0, r5
 800aae8:	4798      	blx	r3
 800aaea:	4628      	mov	r0, r5
 800aaec:	e7e6      	b.n	800aabc <_rclc_execute.part.0+0xac>
 800aaee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aaf0:	68a0      	ldr	r0, [r4, #8]
 800aaf2:	4798      	blx	r3
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	b007      	add	sp, #28
 800aaf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aafa:	6840      	ldr	r0, [r0, #4]
 800aafc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ab00:	bb3b      	cbnz	r3, 800ab52 <_rclc_execute.part.0+0x142>
 800ab02:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d07b      	beq.n	800ac02 <_rclc_execute.part.0+0x1f2>
 800ab0a:	f640 0634 	movw	r6, #2100	@ 0x834
 800ab0e:	2701      	movs	r7, #1
 800ab10:	e007      	b.n	800ab22 <_rclc_execute.part.0+0x112>
 800ab12:	4628      	mov	r0, r5
 800ab14:	f009 fb50 	bl	80141b8 <rclc_action_server_response_goal_request>
 800ab18:	6860      	ldr	r0, [r4, #4]
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	f009 fab8 	bl	8014090 <rclc_action_remove_used_goal_handle>
 800ab20:	6860      	ldr	r0, [r4, #4]
 800ab22:	2100      	movs	r1, #0
 800ab24:	f009 fae2 	bl	80140ec <rclc_action_find_first_handle_by_status>
 800ab28:	4605      	mov	r5, r0
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d066      	beq.n	800abfc <_rclc_execute.part.0+0x1ec>
 800ab2e:	6863      	ldr	r3, [r4, #4]
 800ab30:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	4798      	blx	r3
 800ab36:	42b0      	cmp	r0, r6
 800ab38:	f04f 0100 	mov.w	r1, #0
 800ab3c:	d1e9      	bne.n	800ab12 <_rclc_execute.part.0+0x102>
 800ab3e:	2101      	movs	r1, #1
 800ab40:	4628      	mov	r0, r5
 800ab42:	f009 fb39 	bl	80141b8 <rclc_action_server_response_goal_request>
 800ab46:	722f      	strb	r7, [r5, #8]
 800ab48:	e7ea      	b.n	800ab20 <_rclc_execute.part.0+0x110>
 800ab4a:	6848      	ldr	r0, [r1, #4]
 800ab4c:	f009 faa0 	bl	8014090 <rclc_action_remove_used_goal_handle>
 800ab50:	6860      	ldr	r0, [r4, #4]
 800ab52:	f009 fad7 	bl	8014104 <rclc_action_find_first_terminated_handle>
 800ab56:	4601      	mov	r1, r0
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d1f6      	bne.n	800ab4a <_rclc_execute.part.0+0x13a>
 800ab5c:	6860      	ldr	r0, [r4, #4]
 800ab5e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ab62:	e7ce      	b.n	800ab02 <_rclc_execute.part.0+0xf2>
 800ab64:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab66:	6880      	ldr	r0, [r0, #8]
 800ab68:	f104 0110 	add.w	r1, r4, #16
 800ab6c:	4798      	blx	r3
 800ab6e:	2000      	movs	r0, #0
 800ab70:	b007      	add	sp, #28
 800ab72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab74:	6860      	ldr	r0, [r4, #4]
 800ab76:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ab7a:	b18b      	cbz	r3, 800aba0 <_rclc_execute.part.0+0x190>
 800ab7c:	68c5      	ldr	r5, [r0, #12]
 800ab7e:	b32d      	cbz	r5, 800abcc <_rclc_execute.part.0+0x1bc>
 800ab80:	2600      	movs	r6, #0
 800ab82:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ab86:	b143      	cbz	r3, 800ab9a <_rclc_execute.part.0+0x18a>
 800ab88:	69c3      	ldr	r3, [r0, #28]
 800ab8a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ab8e:	b123      	cbz	r3, 800ab9a <_rclc_execute.part.0+0x18a>
 800ab90:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ab92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ab94:	4628      	mov	r0, r5
 800ab96:	4798      	blx	r3
 800ab98:	6860      	ldr	r0, [r4, #4]
 800ab9a:	682d      	ldr	r5, [r5, #0]
 800ab9c:	2d00      	cmp	r5, #0
 800ab9e:	d1f0      	bne.n	800ab82 <_rclc_execute.part.0+0x172>
 800aba0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800aba4:	b193      	cbz	r3, 800abcc <_rclc_execute.part.0+0x1bc>
 800aba6:	68c5      	ldr	r5, [r0, #12]
 800aba8:	b185      	cbz	r5, 800abcc <_rclc_execute.part.0+0x1bc>
 800abaa:	2600      	movs	r6, #0
 800abac:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800abb0:	b14b      	cbz	r3, 800abc6 <_rclc_execute.part.0+0x1b6>
 800abb2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800abb4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800abb8:	b12b      	cbz	r3, 800abc6 <_rclc_execute.part.0+0x1b6>
 800abba:	4628      	mov	r0, r5
 800abbc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800abc0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800abc2:	4798      	blx	r3
 800abc4:	6860      	ldr	r0, [r4, #4]
 800abc6:	682d      	ldr	r5, [r5, #0]
 800abc8:	2d00      	cmp	r5, #0
 800abca:	d1ef      	bne.n	800abac <_rclc_execute.part.0+0x19c>
 800abcc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d081      	beq.n	800aad8 <_rclc_execute.part.0+0xc8>
 800abd4:	2700      	movs	r7, #0
 800abd6:	e00b      	b.n	800abf0 <_rclc_execute.part.0+0x1e0>
 800abd8:	6863      	ldr	r3, [r4, #4]
 800abda:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800abdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800abde:	6a1e      	ldr	r6, [r3, #32]
 800abe0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800abe4:	47b0      	blx	r6
 800abe6:	6860      	ldr	r0, [r4, #4]
 800abe8:	4629      	mov	r1, r5
 800abea:	f009 fa51 	bl	8014090 <rclc_action_remove_used_goal_handle>
 800abee:	6860      	ldr	r0, [r4, #4]
 800abf0:	f009 fad6 	bl	80141a0 <rclc_action_find_first_handle_with_result_response>
 800abf4:	4605      	mov	r5, r0
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d1ee      	bne.n	800abd8 <_rclc_execute.part.0+0x1c8>
 800abfa:	e76d      	b.n	800aad8 <_rclc_execute.part.0+0xc8>
 800abfc:	6860      	ldr	r0, [r4, #4]
 800abfe:	f880 5020 	strb.w	r5, [r0, #32]
 800ac02:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f43f af66 	beq.w	800aad8 <_rclc_execute.part.0+0xc8>
 800ac0c:	68c5      	ldr	r5, [r0, #12]
 800ac0e:	b1b5      	cbz	r5, 800ac3e <_rclc_execute.part.0+0x22e>
 800ac10:	2602      	movs	r6, #2
 800ac12:	e001      	b.n	800ac18 <_rclc_execute.part.0+0x208>
 800ac14:	682d      	ldr	r5, [r5, #0]
 800ac16:	b195      	cbz	r5, 800ac3e <_rclc_execute.part.0+0x22e>
 800ac18:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ac1c:	2b03      	cmp	r3, #3
 800ac1e:	d1f9      	bne.n	800ac14 <_rclc_execute.part.0+0x204>
 800ac20:	69c3      	ldr	r3, [r0, #28]
 800ac22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ac24:	4628      	mov	r0, r5
 800ac26:	4798      	blx	r3
 800ac28:	4603      	mov	r3, r0
 800ac2a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ac34:	b163      	cbz	r3, 800ac50 <_rclc_execute.part.0+0x240>
 800ac36:	f009 fadf 	bl	80141f8 <rclc_action_server_goal_cancel_accept>
 800ac3a:	6860      	ldr	r0, [r4, #4]
 800ac3c:	e7ea      	b.n	800ac14 <_rclc_execute.part.0+0x204>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ac44:	4618      	mov	r0, r3
 800ac46:	e739      	b.n	800aabc <_rclc_execute.part.0+0xac>
 800ac48:	4628      	mov	r0, r5
 800ac4a:	4798      	blx	r3
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	e735      	b.n	800aabc <_rclc_execute.part.0+0xac>
 800ac50:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ac52:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ac56:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ac5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac5e:	6860      	ldr	r0, [r4, #4]
 800ac60:	2101      	movs	r1, #1
 800ac62:	f009 faf5 	bl	8014250 <rclc_action_server_goal_cancel_reject>
 800ac66:	722e      	strb	r6, [r5, #8]
 800ac68:	6860      	ldr	r0, [r4, #4]
 800ac6a:	e7d3      	b.n	800ac14 <_rclc_execute.part.0+0x204>
 800ac6c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ac6e:	6880      	ldr	r0, [r0, #8]
 800ac70:	4798      	blx	r3
 800ac72:	f104 0110 	add.w	r1, r4, #16
 800ac76:	e6e7      	b.n	800aa48 <_rclc_execute.part.0+0x38>
 800ac78:	f100 0110 	add.w	r1, r0, #16
 800ac7c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ac7e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ac80:	6880      	ldr	r0, [r0, #8]
 800ac82:	9105      	str	r1, [sp, #20]
 800ac84:	4798      	blx	r3
 800ac86:	9905      	ldr	r1, [sp, #20]
 800ac88:	e6de      	b.n	800aa48 <_rclc_execute.part.0+0x38>
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	e716      	b.n	800aabc <_rclc_execute.part.0+0xac>
 800ac8e:	bf00      	nop

0800ac90 <rclc_executor_trigger_any>:
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d03f      	beq.n	800ad14 <rclc_executor_trigger_any+0x84>
 800ac94:	2900      	cmp	r1, #0
 800ac96:	d03e      	beq.n	800ad16 <rclc_executor_trigger_any+0x86>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ac9e:	2200      	movs	r2, #0
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d037      	beq.n	800ad14 <rclc_executor_trigger_any+0x84>
 800aca4:	b430      	push	{r4, r5}
 800aca6:	f893 c000 	ldrb.w	ip, [r3]
 800acaa:	f1bc 0f08 	cmp.w	ip, #8
 800acae:	d11e      	bne.n	800acee <rclc_executor_trigger_any+0x5e>
 800acb0:	685c      	ldr	r4, [r3, #4]
 800acb2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800acb4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800acb8:	d105      	bne.n	800acc6 <rclc_executor_trigger_any+0x36>
 800acba:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800acbe:	b910      	cbnz	r0, 800acc6 <rclc_executor_trigger_any+0x36>
 800acc0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800acc4:	b128      	cbz	r0, 800acd2 <rclc_executor_trigger_any+0x42>
 800acc6:	bc30      	pop	{r4, r5}
 800acc8:	4770      	bx	lr
 800acca:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800acce:	2800      	cmp	r0, #0
 800acd0:	d1f9      	bne.n	800acc6 <rclc_executor_trigger_any+0x36>
 800acd2:	3201      	adds	r2, #1
 800acd4:	4291      	cmp	r1, r2
 800acd6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800acda:	d018      	beq.n	800ad0e <rclc_executor_trigger_any+0x7e>
 800acdc:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d0f0      	beq.n	800acc6 <rclc_executor_trigger_any+0x36>
 800ace4:	f893 c000 	ldrb.w	ip, [r3]
 800ace8:	f1bc 0f08 	cmp.w	ip, #8
 800acec:	d0e0      	beq.n	800acb0 <rclc_executor_trigger_any+0x20>
 800acee:	f1bc 0f09 	cmp.w	ip, #9
 800acf2:	d1ea      	bne.n	800acca <rclc_executor_trigger_any+0x3a>
 800acf4:	685c      	ldr	r4, [r3, #4]
 800acf6:	6a25      	ldr	r5, [r4, #32]
 800acf8:	2d00      	cmp	r5, #0
 800acfa:	d1e4      	bne.n	800acc6 <rclc_executor_trigger_any+0x36>
 800acfc:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1e0      	bne.n	800acc6 <rclc_executor_trigger_any+0x36>
 800ad04:	3201      	adds	r2, #1
 800ad06:	4291      	cmp	r1, r2
 800ad08:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ad0c:	d1e6      	bne.n	800acdc <rclc_executor_trigger_any+0x4c>
 800ad0e:	2000      	movs	r0, #0
 800ad10:	bc30      	pop	{r4, r5}
 800ad12:	4770      	bx	lr
 800ad14:	4770      	bx	lr
 800ad16:	4608      	mov	r0, r1
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop

0800ad1c <rclc_executor_get_zero_initialized_executor>:
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	4903      	ldr	r1, [pc, #12]	@ (800ad2c <rclc_executor_get_zero_initialized_executor+0x10>)
 800ad20:	4604      	mov	r4, r0
 800ad22:	2288      	movs	r2, #136	@ 0x88
 800ad24:	f00e f8d7 	bl	8018ed6 <memcpy>
 800ad28:	4620      	mov	r0, r4
 800ad2a:	bd10      	pop	{r4, pc}
 800ad2c:	0801a5c8 	.word	0x0801a5c8

0800ad30 <rclc_executor_init>:
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d05f      	beq.n	800adf4 <rclc_executor_init+0xc4>
 800ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad38:	460c      	mov	r4, r1
 800ad3a:	b0b0      	sub	sp, #192	@ 0xc0
 800ad3c:	2900      	cmp	r1, #0
 800ad3e:	d051      	beq.n	800ade4 <rclc_executor_init+0xb4>
 800ad40:	4605      	mov	r5, r0
 800ad42:	4618      	mov	r0, r3
 800ad44:	4616      	mov	r6, r2
 800ad46:	461f      	mov	r7, r3
 800ad48:	f000 fbea 	bl	800b520 <rcutils_allocator_is_valid>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d049      	beq.n	800ade4 <rclc_executor_init+0xb4>
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	d047      	beq.n	800ade4 <rclc_executor_init+0xb4>
 800ad54:	492c      	ldr	r1, [pc, #176]	@ (800ae08 <rclc_executor_init+0xd8>)
 800ad56:	2288      	movs	r2, #136	@ 0x88
 800ad58:	a80e      	add	r0, sp, #56	@ 0x38
 800ad5a:	f00e f8bc 	bl	8018ed6 <memcpy>
 800ad5e:	a90e      	add	r1, sp, #56	@ 0x38
 800ad60:	2288      	movs	r2, #136	@ 0x88
 800ad62:	4628      	mov	r0, r5
 800ad64:	f00e f8b7 	bl	8018ed6 <memcpy>
 800ad68:	602c      	str	r4, [r5, #0]
 800ad6a:	4668      	mov	r0, sp
 800ad6c:	60ae      	str	r6, [r5, #8]
 800ad6e:	466c      	mov	r4, sp
 800ad70:	f007 ff3a 	bl	8012be8 <rcl_get_zero_initialized_wait_set>
 800ad74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad76:	f105 0c14 	add.w	ip, r5, #20
 800ad7a:	f8d7 8000 	ldr.w	r8, [r7]
 800ad7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad8e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ae00 <rclc_executor_init+0xd0>
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	f8cc 3000 	str.w	r3, [ip]
 800ad98:	6939      	ldr	r1, [r7, #16]
 800ad9a:	612f      	str	r7, [r5, #16]
 800ad9c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800ada0:	01b0      	lsls	r0, r6, #6
 800ada2:	47c0      	blx	r8
 800ada4:	6068      	str	r0, [r5, #4]
 800ada6:	b338      	cbz	r0, 800adf8 <rclc_executor_init+0xc8>
 800ada8:	2400      	movs	r4, #0
 800adaa:	e000      	b.n	800adae <rclc_executor_init+0x7e>
 800adac:	6868      	ldr	r0, [r5, #4]
 800adae:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800adb2:	4631      	mov	r1, r6
 800adb4:	3401      	adds	r4, #1
 800adb6:	f000 fa6b 	bl	800b290 <rclc_executor_handle_init>
 800adba:	42a6      	cmp	r6, r4
 800adbc:	d1f6      	bne.n	800adac <rclc_executor_init+0x7c>
 800adbe:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800adc2:	f000 fa5b 	bl	800b27c <rclc_executor_handle_counters_zero_init>
 800adc6:	4a11      	ldr	r2, [pc, #68]	@ (800ae0c <rclc_executor_init+0xdc>)
 800adc8:	686b      	ldr	r3, [r5, #4]
 800adca:	2000      	movs	r0, #0
 800adcc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800add0:	b163      	cbz	r3, 800adec <rclc_executor_init+0xbc>
 800add2:	692b      	ldr	r3, [r5, #16]
 800add4:	b153      	cbz	r3, 800adec <rclc_executor_init+0xbc>
 800add6:	68ab      	ldr	r3, [r5, #8]
 800add8:	b143      	cbz	r3, 800adec <rclc_executor_init+0xbc>
 800adda:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800adde:	b030      	add	sp, #192	@ 0xc0
 800ade0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade4:	200b      	movs	r0, #11
 800ade6:	b030      	add	sp, #192	@ 0xc0
 800ade8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adec:	4618      	mov	r0, r3
 800adee:	b030      	add	sp, #192	@ 0xc0
 800adf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf4:	200b      	movs	r0, #11
 800adf6:	4770      	bx	lr
 800adf8:	200a      	movs	r0, #10
 800adfa:	e7f4      	b.n	800ade6 <rclc_executor_init+0xb6>
 800adfc:	f3af 8000 	nop.w
 800ae00:	3b9aca00 	.word	0x3b9aca00
 800ae04:	00000000 	.word	0x00000000
 800ae08:	0801a5c8 	.word	0x0801a5c8
 800ae0c:	0800ac91 	.word	0x0800ac91

0800ae10 <rclc_executor_add_subscription>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	f89d e018 	ldrb.w	lr, [sp, #24]
 800ae16:	b338      	cbz	r0, 800ae68 <rclc_executor_add_subscription+0x58>
 800ae18:	b331      	cbz	r1, 800ae68 <rclc_executor_add_subscription+0x58>
 800ae1a:	b32a      	cbz	r2, 800ae68 <rclc_executor_add_subscription+0x58>
 800ae1c:	b323      	cbz	r3, 800ae68 <rclc_executor_add_subscription+0x58>
 800ae1e:	4604      	mov	r4, r0
 800ae20:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800ae24:	42a8      	cmp	r0, r5
 800ae26:	d301      	bcc.n	800ae2c <rclc_executor_add_subscription+0x1c>
 800ae28:	2001      	movs	r0, #1
 800ae2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae2c:	6866      	ldr	r6, [r4, #4]
 800ae2e:	0187      	lsls	r7, r0, #6
 800ae30:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800ae34:	2500      	movs	r5, #0
 800ae36:	55f5      	strb	r5, [r6, r7]
 800ae38:	3001      	adds	r0, #1
 800ae3a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800ae3e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800ae42:	2301      	movs	r3, #1
 800ae44:	f104 0514 	add.w	r5, r4, #20
 800ae48:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800ae4c:	f88c e001 	strb.w	lr, [ip, #1]
 800ae50:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800ae54:	60e0      	str	r0, [r4, #12]
 800ae56:	4628      	mov	r0, r5
 800ae58:	f007 feda 	bl	8012c10 <rcl_wait_set_is_valid>
 800ae5c:	b930      	cbnz	r0, 800ae6c <rclc_executor_add_subscription+0x5c>
 800ae5e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ae60:	3301      	adds	r3, #1
 800ae62:	2000      	movs	r0, #0
 800ae64:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ae66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae68:	200b      	movs	r0, #11
 800ae6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f007 fed5 	bl	8012c1c <rcl_wait_set_fini>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d0f3      	beq.n	800ae5e <rclc_executor_add_subscription+0x4e>
 800ae76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae78 <rclc_executor_prepare>:
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d044      	beq.n	800af06 <rclc_executor_prepare+0x8e>
 800ae7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae7e:	f100 0514 	add.w	r5, r0, #20
 800ae82:	b09b      	sub	sp, #108	@ 0x6c
 800ae84:	4604      	mov	r4, r0
 800ae86:	4628      	mov	r0, r5
 800ae88:	f007 fec2 	bl	8012c10 <rcl_wait_set_is_valid>
 800ae8c:	b110      	cbz	r0, 800ae94 <rclc_executor_prepare+0x1c>
 800ae8e:	2000      	movs	r0, #0
 800ae90:	b01b      	add	sp, #108	@ 0x6c
 800ae92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae94:	4628      	mov	r0, r5
 800ae96:	f007 fec1 	bl	8012c1c <rcl_wait_set_fini>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d130      	bne.n	800af00 <rclc_executor_prepare+0x88>
 800ae9e:	a80c      	add	r0, sp, #48	@ 0x30
 800aea0:	f007 fea2 	bl	8012be8 <rcl_get_zero_initialized_wait_set>
 800aea4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800aea8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aeac:	46ae      	mov	lr, r5
 800aeae:	6927      	ldr	r7, [r4, #16]
 800aeb0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aeb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aeb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aebc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aec0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aec4:	f8dc 3000 	ldr.w	r3, [ip]
 800aec8:	f8ce 3000 	str.w	r3, [lr]
 800aecc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aece:	ae04      	add	r6, sp, #16
 800aed0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	6822      	ldr	r2, [r4, #0]
 800aed6:	6033      	str	r3, [r6, #0]
 800aed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aeda:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800aedc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800aee0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800aee4:	e9cd 2100 	strd	r2, r1, [sp]
 800aee8:	4628      	mov	r0, r5
 800aeea:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800aeec:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800aeee:	f008 f993 	bl	8013218 <rcl_wait_set_init>
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d0cc      	beq.n	800ae90 <rclc_executor_prepare+0x18>
 800aef6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800aef8:	f000 fb36 	bl	800b568 <rcutils_reset_error>
 800aefc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800aefe:	e7c7      	b.n	800ae90 <rclc_executor_prepare+0x18>
 800af00:	f000 fb32 	bl	800b568 <rcutils_reset_error>
 800af04:	e7cb      	b.n	800ae9e <rclc_executor_prepare+0x26>
 800af06:	200b      	movs	r0, #11
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop

0800af0c <rclc_executor_spin_some.part.0>:
 800af0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af10:	f100 0614 	add.w	r6, r0, #20
 800af14:	b083      	sub	sp, #12
 800af16:	4691      	mov	r9, r2
 800af18:	4698      	mov	r8, r3
 800af1a:	4605      	mov	r5, r0
 800af1c:	f7ff ffac 	bl	800ae78 <rclc_executor_prepare>
 800af20:	4630      	mov	r0, r6
 800af22:	f007 ff47 	bl	8012db4 <rcl_wait_set_clear>
 800af26:	4607      	mov	r7, r0
 800af28:	2800      	cmp	r0, #0
 800af2a:	f040 80ed 	bne.w	800b108 <rclc_executor_spin_some.part.0+0x1fc>
 800af2e:	68ab      	ldr	r3, [r5, #8]
 800af30:	4604      	mov	r4, r0
 800af32:	b303      	cbz	r3, 800af76 <rclc_executor_spin_some.part.0+0x6a>
 800af34:	6869      	ldr	r1, [r5, #4]
 800af36:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800af3a:	01a2      	lsls	r2, r4, #6
 800af3c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800af40:	b1cb      	cbz	r3, 800af76 <rclc_executor_spin_some.part.0+0x6a>
 800af42:	5c8b      	ldrb	r3, [r1, r2]
 800af44:	2b0a      	cmp	r3, #10
 800af46:	f200 80d8 	bhi.w	800b0fa <rclc_executor_spin_some.part.0+0x1ee>
 800af4a:	e8df f003 	tbb	[pc, r3]
 800af4e:	9c9c      	.short	0x9c9c
 800af50:	068c8ca7 	.word	0x068c8ca7
 800af54:	bdc90606 	.word	0xbdc90606
 800af58:	b2          	.byte	0xb2
 800af59:	00          	.byte	0x00
 800af5a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800af5e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800af62:	4630      	mov	r0, r6
 800af64:	f008 fa6e 	bl	8013444 <rcl_wait_set_add_service>
 800af68:	2800      	cmp	r0, #0
 800af6a:	f040 8086 	bne.w	800b07a <rclc_executor_spin_some.part.0+0x16e>
 800af6e:	68ab      	ldr	r3, [r5, #8]
 800af70:	3401      	adds	r4, #1
 800af72:	429c      	cmp	r4, r3
 800af74:	d3de      	bcc.n	800af34 <rclc_executor_spin_some.part.0+0x28>
 800af76:	4643      	mov	r3, r8
 800af78:	464a      	mov	r2, r9
 800af7a:	4630      	mov	r0, r6
 800af7c:	f008 fa90 	bl	80134a0 <rcl_wait>
 800af80:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 80c7 	beq.w	800b118 <rclc_executor_spin_some.part.0+0x20c>
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	f040 80b5 	bne.w	800b0fa <rclc_executor_spin_some.part.0+0x1ee>
 800af90:	68ab      	ldr	r3, [r5, #8]
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 8159 	beq.w	800b24a <rclc_executor_spin_some.part.0+0x33e>
 800af98:	2400      	movs	r4, #0
 800af9a:	46a0      	mov	r8, r4
 800af9c:	f240 1991 	movw	r9, #401	@ 0x191
 800afa0:	e00a      	b.n	800afb8 <rclc_executor_spin_some.part.0+0xac>
 800afa2:	f7ff fb73 	bl	800a68c <_rclc_check_for_new_data>
 800afa6:	4604      	mov	r4, r0
 800afa8:	b110      	cbz	r0, 800afb0 <rclc_executor_spin_some.part.0+0xa4>
 800afaa:	4548      	cmp	r0, r9
 800afac:	f040 80b2 	bne.w	800b114 <rclc_executor_spin_some.part.0+0x208>
 800afb0:	68ab      	ldr	r3, [r5, #8]
 800afb2:	4598      	cmp	r8, r3
 800afb4:	f080 8126 	bcs.w	800b204 <rclc_executor_spin_some.part.0+0x2f8>
 800afb8:	686a      	ldr	r2, [r5, #4]
 800afba:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800afbe:	4631      	mov	r1, r6
 800afc0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800afc4:	f108 0801 	add.w	r8, r8, #1
 800afc8:	f1bc 0f00 	cmp.w	ip, #0
 800afcc:	d1e9      	bne.n	800afa2 <rclc_executor_spin_some.part.0+0x96>
 800afce:	4619      	mov	r1, r3
 800afd0:	4610      	mov	r0, r2
 800afd2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800afd6:	4798      	blx	r3
 800afd8:	2800      	cmp	r0, #0
 800afda:	f000 809b 	beq.w	800b114 <rclc_executor_spin_some.part.0+0x208>
 800afde:	68ab      	ldr	r3, [r5, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 8097 	beq.w	800b114 <rclc_executor_spin_some.part.0+0x208>
 800afe6:	f04f 0800 	mov.w	r8, #0
 800afea:	f240 1991 	movw	r9, #401	@ 0x191
 800afee:	e009      	b.n	800b004 <rclc_executor_spin_some.part.0+0xf8>
 800aff0:	f7ff fb9a 	bl	800a728 <_rclc_take_new_data>
 800aff4:	4604      	mov	r4, r0
 800aff6:	b110      	cbz	r0, 800affe <rclc_executor_spin_some.part.0+0xf2>
 800aff8:	4548      	cmp	r0, r9
 800affa:	f040 808b 	bne.w	800b114 <rclc_executor_spin_some.part.0+0x208>
 800affe:	68ab      	ldr	r3, [r5, #8]
 800b000:	4598      	cmp	r8, r3
 800b002:	d209      	bcs.n	800b018 <rclc_executor_spin_some.part.0+0x10c>
 800b004:	6868      	ldr	r0, [r5, #4]
 800b006:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b00a:	4631      	mov	r1, r6
 800b00c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b010:	f108 0801 	add.w	r8, r8, #1
 800b014:	2a00      	cmp	r2, #0
 800b016:	d1eb      	bne.n	800aff0 <rclc_executor_spin_some.part.0+0xe4>
 800b018:	2600      	movs	r6, #0
 800b01a:	b97b      	cbnz	r3, 800b03c <rclc_executor_spin_some.part.0+0x130>
 800b01c:	e07a      	b.n	800b114 <rclc_executor_spin_some.part.0+0x208>
 800b01e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b022:	2a08      	cmp	r2, #8
 800b024:	f000 80fd 	beq.w	800b222 <rclc_executor_spin_some.part.0+0x316>
 800b028:	2a09      	cmp	r2, #9
 800b02a:	f000 80ef 	beq.w	800b20c <rclc_executor_spin_some.part.0+0x300>
 800b02e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b032:	b98a      	cbnz	r2, 800b058 <rclc_executor_spin_some.part.0+0x14c>
 800b034:	3601      	adds	r6, #1
 800b036:	429e      	cmp	r6, r3
 800b038:	d262      	bcs.n	800b100 <rclc_executor_spin_some.part.0+0x1f4>
 800b03a:	2400      	movs	r4, #0
 800b03c:	686a      	ldr	r2, [r5, #4]
 800b03e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b042:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b046:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b04a:	2900      	cmp	r1, #0
 800b04c:	d062      	beq.n	800b114 <rclc_executor_spin_some.part.0+0x208>
 800b04e:	7841      	ldrb	r1, [r0, #1]
 800b050:	2900      	cmp	r1, #0
 800b052:	d0e4      	beq.n	800b01e <rclc_executor_spin_some.part.0+0x112>
 800b054:	2901      	cmp	r1, #1
 800b056:	d1ed      	bne.n	800b034 <rclc_executor_spin_some.part.0+0x128>
 800b058:	f7ff fcda 	bl	800aa10 <_rclc_execute.part.0>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	f040 80b6 	bne.w	800b1ce <rclc_executor_spin_some.part.0+0x2c2>
 800b062:	68ab      	ldr	r3, [r5, #8]
 800b064:	e7e6      	b.n	800b034 <rclc_executor_spin_some.part.0+0x128>
 800b066:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b06a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b06e:	4630      	mov	r0, r6
 800b070:	f008 f9bc 	bl	80133ec <rcl_wait_set_add_client>
 800b074:	2800      	cmp	r0, #0
 800b076:	f43f af7a 	beq.w	800af6e <rclc_executor_spin_some.part.0+0x62>
 800b07a:	9001      	str	r0, [sp, #4]
 800b07c:	f000 fa74 	bl	800b568 <rcutils_reset_error>
 800b080:	9801      	ldr	r0, [sp, #4]
 800b082:	4607      	mov	r7, r0
 800b084:	e03c      	b.n	800b100 <rclc_executor_spin_some.part.0+0x1f4>
 800b086:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b08a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b08e:	4630      	mov	r0, r6
 800b090:	f007 fe64 	bl	8012d5c <rcl_wait_set_add_subscription>
 800b094:	2800      	cmp	r0, #0
 800b096:	f43f af6a 	beq.w	800af6e <rclc_executor_spin_some.part.0+0x62>
 800b09a:	e7ee      	b.n	800b07a <rclc_executor_spin_some.part.0+0x16e>
 800b09c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0a0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	f008 f971 	bl	801338c <rcl_wait_set_add_timer>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	f43f af5f 	beq.w	800af6e <rclc_executor_spin_some.part.0+0x62>
 800b0b0:	e7e3      	b.n	800b07a <rclc_executor_spin_some.part.0+0x16e>
 800b0b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0b6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f008 f93a 	bl	8013334 <rcl_wait_set_add_guard_condition>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	f43f af54 	beq.w	800af6e <rclc_executor_spin_some.part.0+0x62>
 800b0c6:	e7d8      	b.n	800b07a <rclc_executor_spin_some.part.0+0x16e>
 800b0c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0cc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b0d0:	3110      	adds	r1, #16
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f008 febc 	bl	8013e50 <rcl_action_wait_set_add_action_server>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	f43f af48 	beq.w	800af6e <rclc_executor_spin_some.part.0+0x62>
 800b0de:	e7cc      	b.n	800b07a <rclc_executor_spin_some.part.0+0x16e>
 800b0e0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0e4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b0e8:	3110      	adds	r1, #16
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f008 fc87 	bl	8013a00 <rcl_action_wait_set_add_action_client>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	f43f af3b 	beq.w	800af6e <rclc_executor_spin_some.part.0+0x62>
 800b0f8:	e7bf      	b.n	800b07a <rclc_executor_spin_some.part.0+0x16e>
 800b0fa:	f000 fa35 	bl	800b568 <rcutils_reset_error>
 800b0fe:	2701      	movs	r7, #1
 800b100:	4638      	mov	r0, r7
 800b102:	b003      	add	sp, #12
 800b104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b108:	f000 fa2e 	bl	800b568 <rcutils_reset_error>
 800b10c:	4638      	mov	r0, r7
 800b10e:	b003      	add	sp, #12
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	4627      	mov	r7, r4
 800b116:	e7f3      	b.n	800b100 <rclc_executor_spin_some.part.0+0x1f4>
 800b118:	68ab      	ldr	r3, [r5, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 8092 	beq.w	800b244 <rclc_executor_spin_some.part.0+0x338>
 800b120:	2400      	movs	r4, #0
 800b122:	46a0      	mov	r8, r4
 800b124:	f240 1991 	movw	r9, #401	@ 0x191
 800b128:	e008      	b.n	800b13c <rclc_executor_spin_some.part.0+0x230>
 800b12a:	f7ff faaf 	bl	800a68c <_rclc_check_for_new_data>
 800b12e:	4604      	mov	r4, r0
 800b130:	b108      	cbz	r0, 800b136 <rclc_executor_spin_some.part.0+0x22a>
 800b132:	4548      	cmp	r0, r9
 800b134:	d1ee      	bne.n	800b114 <rclc_executor_spin_some.part.0+0x208>
 800b136:	68ab      	ldr	r3, [r5, #8]
 800b138:	4598      	cmp	r8, r3
 800b13a:	d265      	bcs.n	800b208 <rclc_executor_spin_some.part.0+0x2fc>
 800b13c:	686a      	ldr	r2, [r5, #4]
 800b13e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b142:	4631      	mov	r1, r6
 800b144:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b148:	f108 0801 	add.w	r8, r8, #1
 800b14c:	f1bc 0f00 	cmp.w	ip, #0
 800b150:	d1eb      	bne.n	800b12a <rclc_executor_spin_some.part.0+0x21e>
 800b152:	4619      	mov	r1, r3
 800b154:	4610      	mov	r0, r2
 800b156:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b15a:	4798      	blx	r3
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d0d9      	beq.n	800b114 <rclc_executor_spin_some.part.0+0x208>
 800b160:	68ab      	ldr	r3, [r5, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d0d6      	beq.n	800b114 <rclc_executor_spin_some.part.0+0x208>
 800b166:	f04f 0800 	mov.w	r8, #0
 800b16a:	f240 1991 	movw	r9, #401	@ 0x191
 800b16e:	f240 2a59 	movw	sl, #601	@ 0x259
 800b172:	e00e      	b.n	800b192 <rclc_executor_spin_some.part.0+0x286>
 800b174:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b178:	2b08      	cmp	r3, #8
 800b17a:	d033      	beq.n	800b1e4 <rclc_executor_spin_some.part.0+0x2d8>
 800b17c:	2b09      	cmp	r3, #9
 800b17e:	d028      	beq.n	800b1d2 <rclc_executor_spin_some.part.0+0x2c6>
 800b180:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b184:	b9fb      	cbnz	r3, 800b1c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b186:	68ab      	ldr	r3, [r5, #8]
 800b188:	f108 0801 	add.w	r8, r8, #1
 800b18c:	4598      	cmp	r8, r3
 800b18e:	d2b7      	bcs.n	800b100 <rclc_executor_spin_some.part.0+0x1f4>
 800b190:	2400      	movs	r4, #0
 800b192:	6868      	ldr	r0, [r5, #4]
 800b194:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b198:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b19c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0b7      	beq.n	800b114 <rclc_executor_spin_some.part.0+0x208>
 800b1a4:	4631      	mov	r1, r6
 800b1a6:	f7ff fabf 	bl	800a728 <_rclc_take_new_data>
 800b1aa:	b118      	cbz	r0, 800b1b4 <rclc_executor_spin_some.part.0+0x2a8>
 800b1ac:	4548      	cmp	r0, r9
 800b1ae:	d001      	beq.n	800b1b4 <rclc_executor_spin_some.part.0+0x2a8>
 800b1b0:	4550      	cmp	r0, sl
 800b1b2:	d10c      	bne.n	800b1ce <rclc_executor_spin_some.part.0+0x2c2>
 800b1b4:	686b      	ldr	r3, [r5, #4]
 800b1b6:	eb13 000b 	adds.w	r0, r3, fp
 800b1ba:	d021      	beq.n	800b200 <rclc_executor_spin_some.part.0+0x2f4>
 800b1bc:	7842      	ldrb	r2, [r0, #1]
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	d0d8      	beq.n	800b174 <rclc_executor_spin_some.part.0+0x268>
 800b1c2:	2a01      	cmp	r2, #1
 800b1c4:	d1df      	bne.n	800b186 <rclc_executor_spin_some.part.0+0x27a>
 800b1c6:	f7ff fc23 	bl	800aa10 <_rclc_execute.part.0>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d0db      	beq.n	800b186 <rclc_executor_spin_some.part.0+0x27a>
 800b1ce:	4607      	mov	r7, r0
 800b1d0:	e796      	b.n	800b100 <rclc_executor_spin_some.part.0+0x1f4>
 800b1d2:	6843      	ldr	r3, [r0, #4]
 800b1d4:	6a1a      	ldr	r2, [r3, #32]
 800b1d6:	2a00      	cmp	r2, #0
 800b1d8:	d1f5      	bne.n	800b1c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b1da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0d1      	beq.n	800b186 <rclc_executor_spin_some.part.0+0x27a>
 800b1e2:	e7f0      	b.n	800b1c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b1e4:	6843      	ldr	r3, [r0, #4]
 800b1e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1e8:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b1ec:	d1eb      	bne.n	800b1c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b1ee:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b1f2:	2a00      	cmp	r2, #0
 800b1f4:	d1e7      	bne.n	800b1c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b1f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d0c3      	beq.n	800b186 <rclc_executor_spin_some.part.0+0x27a>
 800b1fe:	e7e2      	b.n	800b1c6 <rclc_executor_spin_some.part.0+0x2ba>
 800b200:	270b      	movs	r7, #11
 800b202:	e77d      	b.n	800b100 <rclc_executor_spin_some.part.0+0x1f4>
 800b204:	686a      	ldr	r2, [r5, #4]
 800b206:	e6e2      	b.n	800afce <rclc_executor_spin_some.part.0+0xc2>
 800b208:	686a      	ldr	r2, [r5, #4]
 800b20a:	e7a2      	b.n	800b152 <rclc_executor_spin_some.part.0+0x246>
 800b20c:	6842      	ldr	r2, [r0, #4]
 800b20e:	6a11      	ldr	r1, [r2, #32]
 800b210:	2900      	cmp	r1, #0
 800b212:	f47f af21 	bne.w	800b058 <rclc_executor_spin_some.part.0+0x14c>
 800b216:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b21a:	2a00      	cmp	r2, #0
 800b21c:	f43f af0a 	beq.w	800b034 <rclc_executor_spin_some.part.0+0x128>
 800b220:	e71a      	b.n	800b058 <rclc_executor_spin_some.part.0+0x14c>
 800b222:	6842      	ldr	r2, [r0, #4]
 800b224:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b226:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b22a:	f47f af15 	bne.w	800b058 <rclc_executor_spin_some.part.0+0x14c>
 800b22e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b232:	2900      	cmp	r1, #0
 800b234:	f47f af10 	bne.w	800b058 <rclc_executor_spin_some.part.0+0x14c>
 800b238:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b23c:	2a00      	cmp	r2, #0
 800b23e:	f43f aef9 	beq.w	800b034 <rclc_executor_spin_some.part.0+0x128>
 800b242:	e709      	b.n	800b058 <rclc_executor_spin_some.part.0+0x14c>
 800b244:	686a      	ldr	r2, [r5, #4]
 800b246:	461c      	mov	r4, r3
 800b248:	e783      	b.n	800b152 <rclc_executor_spin_some.part.0+0x246>
 800b24a:	686a      	ldr	r2, [r5, #4]
 800b24c:	461c      	mov	r4, r3
 800b24e:	e6be      	b.n	800afce <rclc_executor_spin_some.part.0+0xc2>

0800b250 <rclc_executor_spin_some>:
 800b250:	b190      	cbz	r0, 800b278 <rclc_executor_spin_some+0x28>
 800b252:	b570      	push	{r4, r5, r6, lr}
 800b254:	4604      	mov	r4, r0
 800b256:	6800      	ldr	r0, [r0, #0]
 800b258:	4616      	mov	r6, r2
 800b25a:	461d      	mov	r5, r3
 800b25c:	f006 fb38 	bl	80118d0 <rcl_context_is_valid>
 800b260:	b130      	cbz	r0, 800b270 <rclc_executor_spin_some+0x20>
 800b262:	4632      	mov	r2, r6
 800b264:	462b      	mov	r3, r5
 800b266:	4620      	mov	r0, r4
 800b268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b26c:	f7ff be4e 	b.w	800af0c <rclc_executor_spin_some.part.0>
 800b270:	f000 f97a 	bl	800b568 <rcutils_reset_error>
 800b274:	2001      	movs	r0, #1
 800b276:	bd70      	pop	{r4, r5, r6, pc}
 800b278:	200b      	movs	r0, #11
 800b27a:	4770      	bx	lr

0800b27c <rclc_executor_handle_counters_zero_init>:
 800b27c:	b130      	cbz	r0, 800b28c <rclc_executor_handle_counters_zero_init+0x10>
 800b27e:	b508      	push	{r3, lr}
 800b280:	2220      	movs	r2, #32
 800b282:	2100      	movs	r1, #0
 800b284:	f00d fdbf 	bl	8018e06 <memset>
 800b288:	2000      	movs	r0, #0
 800b28a:	bd08      	pop	{r3, pc}
 800b28c:	200b      	movs	r0, #11
 800b28e:	4770      	bx	lr

0800b290 <rclc_executor_handle_init>:
 800b290:	b168      	cbz	r0, 800b2ae <rclc_executor_handle_init+0x1e>
 800b292:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b2b8 <rclc_executor_handle_init+0x28>
 800b296:	2300      	movs	r3, #0
 800b298:	220b      	movs	r2, #11
 800b29a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b29e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b2a2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b2a6:	8002      	strh	r2, [r0, #0]
 800b2a8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	4770      	bx	lr
 800b2ae:	200b      	movs	r0, #11
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	f3af 8000 	nop.w
	...

0800b2c0 <rclc_support_init>:
 800b2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c4:	b086      	sub	sp, #24
 800b2c6:	b3b8      	cbz	r0, 800b338 <rclc_support_init+0x78>
 800b2c8:	461c      	mov	r4, r3
 800b2ca:	b3ab      	cbz	r3, 800b338 <rclc_support_init+0x78>
 800b2cc:	460f      	mov	r7, r1
 800b2ce:	4690      	mov	r8, r2
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	f006 fc67 	bl	8011ba4 <rcl_get_zero_initialized_init_options>
 800b2d6:	f104 030c 	add.w	r3, r4, #12
 800b2da:	9005      	str	r0, [sp, #20]
 800b2dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2e0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b2e4:	a805      	add	r0, sp, #20
 800b2e6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b2ea:	f006 fc5d 	bl	8011ba8 <rcl_init_options_init>
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	b9e0      	cbnz	r0, 800b32c <rclc_support_init+0x6c>
 800b2f2:	ad02      	add	r5, sp, #8
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	f006 fae1 	bl	80118bc <rcl_get_zero_initialized_context>
 800b2fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b2fe:	4633      	mov	r3, r6
 800b300:	e886 0003 	stmia.w	r6, {r0, r1}
 800b304:	aa05      	add	r2, sp, #20
 800b306:	4641      	mov	r1, r8
 800b308:	4638      	mov	r0, r7
 800b30a:	f006 fb47 	bl	801199c <rcl_init>
 800b30e:	4605      	mov	r5, r0
 800b310:	b9b8      	cbnz	r0, 800b342 <rclc_support_init+0x82>
 800b312:	60b4      	str	r4, [r6, #8]
 800b314:	4622      	mov	r2, r4
 800b316:	f106 010c 	add.w	r1, r6, #12
 800b31a:	2003      	movs	r0, #3
 800b31c:	f007 fa6e 	bl	80127fc <rcl_clock_init>
 800b320:	4605      	mov	r5, r0
 800b322:	b970      	cbnz	r0, 800b342 <rclc_support_init+0x82>
 800b324:	a805      	add	r0, sp, #20
 800b326:	f006 fca5 	bl	8011c74 <rcl_init_options_fini>
 800b32a:	b108      	cbz	r0, 800b330 <rclc_support_init+0x70>
 800b32c:	f000 f91c 	bl	800b568 <rcutils_reset_error>
 800b330:	4628      	mov	r0, r5
 800b332:	b006      	add	sp, #24
 800b334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b338:	250b      	movs	r5, #11
 800b33a:	4628      	mov	r0, r5
 800b33c:	b006      	add	sp, #24
 800b33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b342:	f000 f911 	bl	800b568 <rcutils_reset_error>
 800b346:	a805      	add	r0, sp, #20
 800b348:	f006 fc94 	bl	8011c74 <rcl_init_options_fini>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d0ef      	beq.n	800b330 <rclc_support_init+0x70>
 800b350:	e7ec      	b.n	800b32c <rclc_support_init+0x6c>
 800b352:	bf00      	nop

0800b354 <rclc_node_init_default>:
 800b354:	b3b8      	cbz	r0, 800b3c6 <rclc_node_init_default+0x72>
 800b356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b35a:	460d      	mov	r5, r1
 800b35c:	b0a1      	sub	sp, #132	@ 0x84
 800b35e:	b329      	cbz	r1, 800b3ac <rclc_node_init_default+0x58>
 800b360:	4616      	mov	r6, r2
 800b362:	b31a      	cbz	r2, 800b3ac <rclc_node_init_default+0x58>
 800b364:	461f      	mov	r7, r3
 800b366:	b30b      	cbz	r3, 800b3ac <rclc_node_init_default+0x58>
 800b368:	f10d 0810 	add.w	r8, sp, #16
 800b36c:	4604      	mov	r4, r0
 800b36e:	4640      	mov	r0, r8
 800b370:	f006 fd38 	bl	8011de4 <rcl_get_zero_initialized_node>
 800b374:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b378:	f10d 0918 	add.w	r9, sp, #24
 800b37c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b380:	4648      	mov	r0, r9
 800b382:	f006 fea7 	bl	80120d4 <rcl_node_get_default_options>
 800b386:	4640      	mov	r0, r8
 800b388:	f006 fd2c 	bl	8011de4 <rcl_get_zero_initialized_node>
 800b38c:	f8cd 9000 	str.w	r9, [sp]
 800b390:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b394:	463b      	mov	r3, r7
 800b396:	e884 0003 	stmia.w	r4, {r0, r1}
 800b39a:	4632      	mov	r2, r6
 800b39c:	4629      	mov	r1, r5
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f006 fd2a 	bl	8011df8 <rcl_node_init>
 800b3a4:	b930      	cbnz	r0, 800b3b4 <rclc_node_init_default+0x60>
 800b3a6:	b021      	add	sp, #132	@ 0x84
 800b3a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3ac:	200b      	movs	r0, #11
 800b3ae:	b021      	add	sp, #132	@ 0x84
 800b3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3b4:	9003      	str	r0, [sp, #12]
 800b3b6:	f000 f8d7 	bl	800b568 <rcutils_reset_error>
 800b3ba:	f000 f8d5 	bl	800b568 <rcutils_reset_error>
 800b3be:	9803      	ldr	r0, [sp, #12]
 800b3c0:	b021      	add	sp, #132	@ 0x84
 800b3c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3c6:	200b      	movs	r0, #11
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop

0800b3cc <rclc_publisher_init_default>:
 800b3cc:	b368      	cbz	r0, 800b42a <rclc_publisher_init_default+0x5e>
 800b3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d2:	460d      	mov	r5, r1
 800b3d4:	b0a0      	sub	sp, #128	@ 0x80
 800b3d6:	b321      	cbz	r1, 800b422 <rclc_publisher_init_default+0x56>
 800b3d8:	4616      	mov	r6, r2
 800b3da:	b312      	cbz	r2, 800b422 <rclc_publisher_init_default+0x56>
 800b3dc:	461f      	mov	r7, r3
 800b3de:	b303      	cbz	r3, 800b422 <rclc_publisher_init_default+0x56>
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	f7ff f843 	bl	800a46c <rcl_get_zero_initialized_publisher>
 800b3e6:	f10d 0810 	add.w	r8, sp, #16
 800b3ea:	6020      	str	r0, [r4, #0]
 800b3ec:	4640      	mov	r0, r8
 800b3ee:	f7ff f8d9 	bl	800a5a4 <rcl_publisher_get_default_options>
 800b3f2:	490f      	ldr	r1, [pc, #60]	@ (800b430 <rclc_publisher_init_default+0x64>)
 800b3f4:	2250      	movs	r2, #80	@ 0x50
 800b3f6:	4640      	mov	r0, r8
 800b3f8:	f00d fd6d 	bl	8018ed6 <memcpy>
 800b3fc:	f8cd 8000 	str.w	r8, [sp]
 800b400:	463b      	mov	r3, r7
 800b402:	4632      	mov	r2, r6
 800b404:	4629      	mov	r1, r5
 800b406:	4620      	mov	r0, r4
 800b408:	f7ff f836 	bl	800a478 <rcl_publisher_init>
 800b40c:	b910      	cbnz	r0, 800b414 <rclc_publisher_init_default+0x48>
 800b40e:	b020      	add	sp, #128	@ 0x80
 800b410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b414:	9003      	str	r0, [sp, #12]
 800b416:	f000 f8a7 	bl	800b568 <rcutils_reset_error>
 800b41a:	9803      	ldr	r0, [sp, #12]
 800b41c:	b020      	add	sp, #128	@ 0x80
 800b41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b422:	200b      	movs	r0, #11
 800b424:	b020      	add	sp, #128	@ 0x80
 800b426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b42a:	200b      	movs	r0, #11
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	0801a650 	.word	0x0801a650

0800b434 <rclc_subscription_init_default>:
 800b434:	b368      	cbz	r0, 800b492 <rclc_subscription_init_default+0x5e>
 800b436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43a:	460d      	mov	r5, r1
 800b43c:	b0a0      	sub	sp, #128	@ 0x80
 800b43e:	b321      	cbz	r1, 800b48a <rclc_subscription_init_default+0x56>
 800b440:	4616      	mov	r6, r2
 800b442:	b312      	cbz	r2, 800b48a <rclc_subscription_init_default+0x56>
 800b444:	461f      	mov	r7, r3
 800b446:	b303      	cbz	r3, 800b48a <rclc_subscription_init_default+0x56>
 800b448:	4604      	mov	r4, r0
 800b44a:	f007 f87b 	bl	8012544 <rcl_get_zero_initialized_subscription>
 800b44e:	f10d 0810 	add.w	r8, sp, #16
 800b452:	6020      	str	r0, [r4, #0]
 800b454:	4640      	mov	r0, r8
 800b456:	f007 f923 	bl	80126a0 <rcl_subscription_get_default_options>
 800b45a:	490f      	ldr	r1, [pc, #60]	@ (800b498 <rclc_subscription_init_default+0x64>)
 800b45c:	2250      	movs	r2, #80	@ 0x50
 800b45e:	4640      	mov	r0, r8
 800b460:	f00d fd39 	bl	8018ed6 <memcpy>
 800b464:	f8cd 8000 	str.w	r8, [sp]
 800b468:	463b      	mov	r3, r7
 800b46a:	4632      	mov	r2, r6
 800b46c:	4629      	mov	r1, r5
 800b46e:	4620      	mov	r0, r4
 800b470:	f007 f86e 	bl	8012550 <rcl_subscription_init>
 800b474:	b910      	cbnz	r0, 800b47c <rclc_subscription_init_default+0x48>
 800b476:	b020      	add	sp, #128	@ 0x80
 800b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b47c:	9003      	str	r0, [sp, #12]
 800b47e:	f000 f873 	bl	800b568 <rcutils_reset_error>
 800b482:	9803      	ldr	r0, [sp, #12]
 800b484:	b020      	add	sp, #128	@ 0x80
 800b486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b48a:	200b      	movs	r0, #11
 800b48c:	b020      	add	sp, #128	@ 0x80
 800b48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b492:	200b      	movs	r0, #11
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	0801a6a0 	.word	0x0801a6a0

0800b49c <__default_zero_allocate>:
 800b49c:	f00c bf16 	b.w	80182cc <calloc>

0800b4a0 <__default_reallocate>:
 800b4a0:	f00d b8e8 	b.w	8018674 <realloc>

0800b4a4 <__default_deallocate>:
 800b4a4:	f00c bf90 	b.w	80183c8 <free>

0800b4a8 <__default_allocate>:
 800b4a8:	f00c bf86 	b.w	80183b8 <malloc>

0800b4ac <rcutils_get_zero_initialized_allocator>:
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	4c05      	ldr	r4, [pc, #20]	@ (800b4c4 <rcutils_get_zero_initialized_allocator+0x18>)
 800b4b0:	4686      	mov	lr, r0
 800b4b2:	4684      	mov	ip, r0
 800b4b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	f8cc 3000 	str.w	r3, [ip]
 800b4c0:	4670      	mov	r0, lr
 800b4c2:	bd10      	pop	{r4, pc}
 800b4c4:	0801a6f0 	.word	0x0801a6f0

0800b4c8 <rcutils_set_default_allocator>:
 800b4c8:	b1a8      	cbz	r0, 800b4f6 <rcutils_set_default_allocator+0x2e>
 800b4ca:	6802      	ldr	r2, [r0, #0]
 800b4cc:	b1a2      	cbz	r2, 800b4f8 <rcutils_set_default_allocator+0x30>
 800b4ce:	6841      	ldr	r1, [r0, #4]
 800b4d0:	b1a1      	cbz	r1, 800b4fc <rcutils_set_default_allocator+0x34>
 800b4d2:	b410      	push	{r4}
 800b4d4:	68c4      	ldr	r4, [r0, #12]
 800b4d6:	b164      	cbz	r4, 800b4f2 <rcutils_set_default_allocator+0x2a>
 800b4d8:	6880      	ldr	r0, [r0, #8]
 800b4da:	b138      	cbz	r0, 800b4ec <rcutils_set_default_allocator+0x24>
 800b4dc:	4b08      	ldr	r3, [pc, #32]	@ (800b500 <rcutils_set_default_allocator+0x38>)
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b4e6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b4ea:	2001      	movs	r0, #1
 800b4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	e7fa      	b.n	800b4ec <rcutils_set_default_allocator+0x24>
 800b4f6:	4770      	bx	lr
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4770      	bx	lr
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	4770      	bx	lr
 800b500:	200001dc 	.word	0x200001dc

0800b504 <rcutils_get_default_allocator>:
 800b504:	b510      	push	{r4, lr}
 800b506:	4c05      	ldr	r4, [pc, #20]	@ (800b51c <rcutils_get_default_allocator+0x18>)
 800b508:	4686      	mov	lr, r0
 800b50a:	4684      	mov	ip, r0
 800b50c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b50e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	f8cc 3000 	str.w	r3, [ip]
 800b518:	4670      	mov	r0, lr
 800b51a:	bd10      	pop	{r4, pc}
 800b51c:	200001dc 	.word	0x200001dc

0800b520 <rcutils_allocator_is_valid>:
 800b520:	b158      	cbz	r0, 800b53a <rcutils_allocator_is_valid+0x1a>
 800b522:	6803      	ldr	r3, [r0, #0]
 800b524:	b143      	cbz	r3, 800b538 <rcutils_allocator_is_valid+0x18>
 800b526:	6843      	ldr	r3, [r0, #4]
 800b528:	b133      	cbz	r3, 800b538 <rcutils_allocator_is_valid+0x18>
 800b52a:	68c3      	ldr	r3, [r0, #12]
 800b52c:	b123      	cbz	r3, 800b538 <rcutils_allocator_is_valid+0x18>
 800b52e:	6880      	ldr	r0, [r0, #8]
 800b530:	3800      	subs	r0, #0
 800b532:	bf18      	it	ne
 800b534:	2001      	movne	r0, #1
 800b536:	4770      	bx	lr
 800b538:	4618      	mov	r0, r3
 800b53a:	4770      	bx	lr

0800b53c <rcutils_get_error_string>:
 800b53c:	4b06      	ldr	r3, [pc, #24]	@ (800b558 <rcutils_get_error_string+0x1c>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	b13b      	cbz	r3, 800b552 <rcutils_get_error_string+0x16>
 800b542:	4b06      	ldr	r3, [pc, #24]	@ (800b55c <rcutils_get_error_string+0x20>)
 800b544:	781a      	ldrb	r2, [r3, #0]
 800b546:	b90a      	cbnz	r2, 800b54c <rcutils_get_error_string+0x10>
 800b548:	2201      	movs	r2, #1
 800b54a:	701a      	strb	r2, [r3, #0]
 800b54c:	4b04      	ldr	r3, [pc, #16]	@ (800b560 <rcutils_get_error_string+0x24>)
 800b54e:	7818      	ldrb	r0, [r3, #0]
 800b550:	4770      	bx	lr
 800b552:	4b04      	ldr	r3, [pc, #16]	@ (800b564 <rcutils_get_error_string+0x28>)
 800b554:	7818      	ldrb	r0, [r3, #0]
 800b556:	4770      	bx	lr
 800b558:	20010a28 	.word	0x20010a28
 800b55c:	20010a41 	.word	0x20010a41
 800b560:	20010a40 	.word	0x20010a40
 800b564:	0801a704 	.word	0x0801a704

0800b568 <rcutils_reset_error>:
 800b568:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b588 <rcutils_reset_error+0x20>
 800b56c:	4a08      	ldr	r2, [pc, #32]	@ (800b590 <rcutils_reset_error+0x28>)
 800b56e:	4809      	ldr	r0, [pc, #36]	@ (800b594 <rcutils_reset_error+0x2c>)
 800b570:	4909      	ldr	r1, [pc, #36]	@ (800b598 <rcutils_reset_error+0x30>)
 800b572:	2300      	movs	r3, #0
 800b574:	8013      	strh	r3, [r2, #0]
 800b576:	ed82 7b02 	vstr	d7, [r2, #8]
 800b57a:	4a08      	ldr	r2, [pc, #32]	@ (800b59c <rcutils_reset_error+0x34>)
 800b57c:	7003      	strb	r3, [r0, #0]
 800b57e:	700b      	strb	r3, [r1, #0]
 800b580:	7013      	strb	r3, [r2, #0]
 800b582:	4770      	bx	lr
 800b584:	f3af 8000 	nop.w
	...
 800b590:	20010a30 	.word	0x20010a30
 800b594:	20010a41 	.word	0x20010a41
 800b598:	20010a40 	.word	0x20010a40
 800b59c:	20010a28 	.word	0x20010a28

0800b5a0 <rcutils_system_time_now>:
 800b5a0:	b308      	cbz	r0, 800b5e6 <rcutils_system_time_now+0x46>
 800b5a2:	b570      	push	{r4, r5, r6, lr}
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	4669      	mov	r1, sp
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	f7f6 fd9c 	bl	80020e8 <clock_gettime>
 800b5b0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b5b4:	2d00      	cmp	r5, #0
 800b5b6:	db13      	blt.n	800b5e0 <rcutils_system_time_now+0x40>
 800b5b8:	9902      	ldr	r1, [sp, #8]
 800b5ba:	2900      	cmp	r1, #0
 800b5bc:	db0d      	blt.n	800b5da <rcutils_system_time_now+0x3a>
 800b5be:	4e0b      	ldr	r6, [pc, #44]	@ (800b5ec <rcutils_system_time_now+0x4c>)
 800b5c0:	fba3 3206 	umull	r3, r2, r3, r6
 800b5c4:	185b      	adds	r3, r3, r1
 800b5c6:	fb06 2205 	mla	r2, r6, r5, r2
 800b5ca:	f04f 0000 	mov.w	r0, #0
 800b5ce:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b5d2:	e9c4 3200 	strd	r3, r2, [r4]
 800b5d6:	b004      	add	sp, #16
 800b5d8:	bd70      	pop	{r4, r5, r6, pc}
 800b5da:	ea53 0205 	orrs.w	r2, r3, r5
 800b5de:	d1ee      	bne.n	800b5be <rcutils_system_time_now+0x1e>
 800b5e0:	2002      	movs	r0, #2
 800b5e2:	b004      	add	sp, #16
 800b5e4:	bd70      	pop	{r4, r5, r6, pc}
 800b5e6:	200b      	movs	r0, #11
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	3b9aca00 	.word	0x3b9aca00

0800b5f0 <rcutils_steady_time_now>:
 800b5f0:	b308      	cbz	r0, 800b636 <rcutils_steady_time_now+0x46>
 800b5f2:	b570      	push	{r4, r5, r6, lr}
 800b5f4:	b084      	sub	sp, #16
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	4669      	mov	r1, sp
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	f7f6 fd74 	bl	80020e8 <clock_gettime>
 800b600:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b604:	2d00      	cmp	r5, #0
 800b606:	db13      	blt.n	800b630 <rcutils_steady_time_now+0x40>
 800b608:	9902      	ldr	r1, [sp, #8]
 800b60a:	2900      	cmp	r1, #0
 800b60c:	db0d      	blt.n	800b62a <rcutils_steady_time_now+0x3a>
 800b60e:	4e0b      	ldr	r6, [pc, #44]	@ (800b63c <rcutils_steady_time_now+0x4c>)
 800b610:	fba3 3206 	umull	r3, r2, r3, r6
 800b614:	185b      	adds	r3, r3, r1
 800b616:	fb06 2205 	mla	r2, r6, r5, r2
 800b61a:	f04f 0000 	mov.w	r0, #0
 800b61e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b622:	e9c4 3200 	strd	r3, r2, [r4]
 800b626:	b004      	add	sp, #16
 800b628:	bd70      	pop	{r4, r5, r6, pc}
 800b62a:	ea53 0205 	orrs.w	r2, r3, r5
 800b62e:	d1ee      	bne.n	800b60e <rcutils_steady_time_now+0x1e>
 800b630:	2002      	movs	r0, #2
 800b632:	b004      	add	sp, #16
 800b634:	bd70      	pop	{r4, r5, r6, pc}
 800b636:	200b      	movs	r0, #11
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	3b9aca00 	.word	0x3b9aca00

0800b640 <rmw_get_default_publisher_options>:
 800b640:	2200      	movs	r2, #0
 800b642:	6002      	str	r2, [r0, #0]
 800b644:	7102      	strb	r2, [r0, #4]
 800b646:	4770      	bx	lr

0800b648 <rmw_uros_set_custom_transport>:
 800b648:	b470      	push	{r4, r5, r6}
 800b64a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b64e:	b162      	cbz	r2, 800b66a <rmw_uros_set_custom_transport+0x22>
 800b650:	b15b      	cbz	r3, 800b66a <rmw_uros_set_custom_transport+0x22>
 800b652:	b155      	cbz	r5, 800b66a <rmw_uros_set_custom_transport+0x22>
 800b654:	b14e      	cbz	r6, 800b66a <rmw_uros_set_custom_transport+0x22>
 800b656:	4c06      	ldr	r4, [pc, #24]	@ (800b670 <rmw_uros_set_custom_transport+0x28>)
 800b658:	7020      	strb	r0, [r4, #0]
 800b65a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b65e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b662:	6166      	str	r6, [r4, #20]
 800b664:	2000      	movs	r0, #0
 800b666:	bc70      	pop	{r4, r5, r6}
 800b668:	4770      	bx	lr
 800b66a:	200b      	movs	r0, #11
 800b66c:	bc70      	pop	{r4, r5, r6}
 800b66e:	4770      	bx	lr
 800b670:	20010a44 	.word	0x20010a44

0800b674 <flush_session>:
 800b674:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800b676:	f004 b8ff 	b.w	800f878 <uxr_run_session_until_confirm_delivery>
 800b67a:	bf00      	nop

0800b67c <rmw_publish>:
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d053      	beq.n	800b728 <rmw_publish+0xac>
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	460d      	mov	r5, r1
 800b684:	b08e      	sub	sp, #56	@ 0x38
 800b686:	2900      	cmp	r1, #0
 800b688:	d04b      	beq.n	800b722 <rmw_publish+0xa6>
 800b68a:	4604      	mov	r4, r0
 800b68c:	6800      	ldr	r0, [r0, #0]
 800b68e:	f000 fced 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 800b692:	2800      	cmp	r0, #0
 800b694:	d045      	beq.n	800b722 <rmw_publish+0xa6>
 800b696:	6866      	ldr	r6, [r4, #4]
 800b698:	2e00      	cmp	r6, #0
 800b69a:	d042      	beq.n	800b722 <rmw_publish+0xa6>
 800b69c:	69b4      	ldr	r4, [r6, #24]
 800b69e:	4628      	mov	r0, r5
 800b6a0:	6923      	ldr	r3, [r4, #16]
 800b6a2:	4798      	blx	r3
 800b6a4:	69f3      	ldr	r3, [r6, #28]
 800b6a6:	9005      	str	r0, [sp, #20]
 800b6a8:	b113      	cbz	r3, 800b6b0 <rmw_publish+0x34>
 800b6aa:	a805      	add	r0, sp, #20
 800b6ac:	4798      	blx	r3
 800b6ae:	9805      	ldr	r0, [sp, #20]
 800b6b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	9000      	str	r0, [sp, #0]
 800b6b8:	6972      	ldr	r2, [r6, #20]
 800b6ba:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b6bc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b6c0:	ab06      	add	r3, sp, #24
 800b6c2:	f004 fec5 	bl	8010450 <uxr_prepare_output_stream>
 800b6c6:	b1d8      	cbz	r0, 800b700 <rmw_publish+0x84>
 800b6c8:	68a3      	ldr	r3, [r4, #8]
 800b6ca:	a906      	add	r1, sp, #24
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	4798      	blx	r3
 800b6d0:	6a33      	ldr	r3, [r6, #32]
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	b10b      	cbz	r3, 800b6da <rmw_publish+0x5e>
 800b6d6:	a806      	add	r0, sp, #24
 800b6d8:	4798      	blx	r3
 800b6da:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b6e4:	d022      	beq.n	800b72c <rmw_publish+0xb0>
 800b6e6:	6918      	ldr	r0, [r3, #16]
 800b6e8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800b6ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b6ee:	f004 f8c3 	bl	800f878 <uxr_run_session_until_confirm_delivery>
 800b6f2:	4020      	ands	r0, r4
 800b6f4:	b2c4      	uxtb	r4, r0
 800b6f6:	f084 0001 	eor.w	r0, r4, #1
 800b6fa:	b2c0      	uxtb	r0, r0
 800b6fc:	b00e      	add	sp, #56	@ 0x38
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b704:	6918      	ldr	r0, [r3, #16]
 800b706:	9b05      	ldr	r3, [sp, #20]
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	4b0b      	ldr	r3, [pc, #44]	@ (800b738 <rmw_publish+0xbc>)
 800b70c:	9301      	str	r3, [sp, #4]
 800b70e:	9602      	str	r6, [sp, #8]
 800b710:	6972      	ldr	r2, [r6, #20]
 800b712:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b714:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b718:	ab06      	add	r3, sp, #24
 800b71a:	f004 fec9 	bl	80104b0 <uxr_prepare_output_stream_fragmented>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d1d2      	bne.n	800b6c8 <rmw_publish+0x4c>
 800b722:	2001      	movs	r0, #1
 800b724:	b00e      	add	sp, #56	@ 0x38
 800b726:	bd70      	pop	{r4, r5, r6, pc}
 800b728:	2001      	movs	r0, #1
 800b72a:	4770      	bx	lr
 800b72c:	6918      	ldr	r0, [r3, #16]
 800b72e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b732:	f003 fce1 	bl	800f0f8 <uxr_flash_output_streams>
 800b736:	e7de      	b.n	800b6f6 <rmw_publish+0x7a>
 800b738:	0800b675 	.word	0x0800b675

0800b73c <rmw_create_publisher>:
 800b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	b087      	sub	sp, #28
 800b742:	2800      	cmp	r0, #0
 800b744:	f000 80cc 	beq.w	800b8e0 <rmw_create_publisher+0x1a4>
 800b748:	460e      	mov	r6, r1
 800b74a:	2900      	cmp	r1, #0
 800b74c:	f000 80c8 	beq.w	800b8e0 <rmw_create_publisher+0x1a4>
 800b750:	4604      	mov	r4, r0
 800b752:	6800      	ldr	r0, [r0, #0]
 800b754:	4615      	mov	r5, r2
 800b756:	4698      	mov	r8, r3
 800b758:	f000 fc88 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	f000 80bf 	beq.w	800b8e0 <rmw_create_publisher+0x1a4>
 800b762:	2d00      	cmp	r5, #0
 800b764:	f000 80bc 	beq.w	800b8e0 <rmw_create_publisher+0x1a4>
 800b768:	782b      	ldrb	r3, [r5, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 80b8 	beq.w	800b8e0 <rmw_create_publisher+0x1a4>
 800b770:	f1b8 0f00 	cmp.w	r8, #0
 800b774:	f000 80b4 	beq.w	800b8e0 <rmw_create_publisher+0x1a4>
 800b778:	485c      	ldr	r0, [pc, #368]	@ (800b8ec <rmw_create_publisher+0x1b0>)
 800b77a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b77e:	f009 fae7 	bl	8014d50 <get_memory>
 800b782:	2800      	cmp	r0, #0
 800b784:	f000 80ac 	beq.w	800b8e0 <rmw_create_publisher+0x1a4>
 800b788:	6884      	ldr	r4, [r0, #8]
 800b78a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800b78e:	f009 fb47 	bl	8014e20 <rmw_get_implementation_identifier>
 800b792:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800b796:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800b79a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f7f4 fd2e 	bl	8000200 <strlen>
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	283c      	cmp	r0, #60	@ 0x3c
 800b7a8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800b7ac:	f200 8091 	bhi.w	800b8d2 <rmw_create_publisher+0x196>
 800b7b0:	4a4f      	ldr	r2, [pc, #316]	@ (800b8f0 <rmw_create_publisher+0x1b4>)
 800b7b2:	462b      	mov	r3, r5
 800b7b4:	213c      	movs	r1, #60	@ 0x3c
 800b7b6:	4650      	mov	r0, sl
 800b7b8:	f00c feb0 	bl	801851c <sniprintf>
 800b7bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b7c0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800b7c2:	4641      	mov	r1, r8
 800b7c4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800b7c8:	2250      	movs	r2, #80	@ 0x50
 800b7ca:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b7ce:	f00d fb82 	bl	8018ed6 <memcpy>
 800b7d2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b7d6:	4947      	ldr	r1, [pc, #284]	@ (800b8f4 <rmw_create_publisher+0x1b8>)
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7de:	bf0c      	ite	eq
 800b7e0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800b7e4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800b7e8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f000 fc49 	bl	800c088 <get_message_typesupport_handle>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d06b      	beq.n	800b8d2 <rmw_create_publisher+0x196>
 800b7fa:	6842      	ldr	r2, [r0, #4]
 800b7fc:	61a2      	str	r2, [r4, #24]
 800b7fe:	2a00      	cmp	r2, #0
 800b800:	d067      	beq.n	800b8d2 <rmw_create_publisher+0x196>
 800b802:	4629      	mov	r1, r5
 800b804:	4643      	mov	r3, r8
 800b806:	4648      	mov	r0, r9
 800b808:	f009 fd70 	bl	80152ec <create_topic>
 800b80c:	6260      	str	r0, [r4, #36]	@ 0x24
 800b80e:	2800      	cmp	r0, #0
 800b810:	d063      	beq.n	800b8da <rmw_create_publisher+0x19e>
 800b812:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b81a:	2103      	movs	r1, #3
 800b81c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800b820:	1c42      	adds	r2, r0, #1
 800b822:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800b826:	f003 fb19 	bl	800ee5c <uxr_object_id>
 800b82a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800b82e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b832:	6120      	str	r0, [r4, #16]
 800b834:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800b838:	6910      	ldr	r0, [r2, #16]
 800b83a:	2506      	movs	r5, #6
 800b83c:	9500      	str	r5, [sp, #0]
 800b83e:	6819      	ldr	r1, [r3, #0]
 800b840:	6922      	ldr	r2, [r4, #16]
 800b842:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b846:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b84a:	f003 f9b9 	bl	800ebc0 <uxr_buffer_create_publisher_bin>
 800b84e:	4602      	mov	r2, r0
 800b850:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b854:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b858:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b85c:	f000 fb86 	bl	800bf6c <run_xrce_session>
 800b860:	b3b8      	cbz	r0, 800b8d2 <rmw_create_publisher+0x196>
 800b862:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b86a:	2105      	movs	r1, #5
 800b86c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800b870:	1c42      	adds	r2, r0, #1
 800b872:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800b876:	f003 faf1 	bl	800ee5c <uxr_object_id>
 800b87a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b87e:	6160      	str	r0, [r4, #20]
 800b880:	691e      	ldr	r6, [r3, #16]
 800b882:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b886:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800b88a:	f10d 0a10 	add.w	sl, sp, #16
 800b88e:	4641      	mov	r1, r8
 800b890:	4650      	mov	r0, sl
 800b892:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800b896:	f000 fb85 	bl	800bfa4 <convert_qos_profile>
 800b89a:	9503      	str	r5, [sp, #12]
 800b89c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b8a0:	9001      	str	r0, [sp, #4]
 800b8a2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b8a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800b8b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b8b4:	f8d8 1000 	ldr.w	r1, [r8]
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f003 f9e1 	bl	800ec80 <uxr_buffer_create_datawriter_bin>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b8c4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b8c8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b8cc:	f000 fb4e 	bl	800bf6c <run_xrce_session>
 800b8d0:	b938      	cbnz	r0, 800b8e2 <rmw_create_publisher+0x1a6>
 800b8d2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b8d4:	b108      	cbz	r0, 800b8da <rmw_create_publisher+0x19e>
 800b8d6:	f000 fa47 	bl	800bd68 <rmw_uxrce_fini_topic_memory>
 800b8da:	4638      	mov	r0, r7
 800b8dc:	f000 f9ec 	bl	800bcb8 <rmw_uxrce_fini_publisher_memory>
 800b8e0:	2700      	movs	r7, #0
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	b007      	add	sp, #28
 800b8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ea:	bf00      	nop
 800b8ec:	2001533c 	.word	0x2001533c
 800b8f0:	0801a718 	.word	0x0801a718
 800b8f4:	0801a3ac 	.word	0x0801a3ac

0800b8f8 <rmw_publisher_get_actual_qos>:
 800b8f8:	b150      	cbz	r0, 800b910 <rmw_publisher_get_actual_qos+0x18>
 800b8fa:	b508      	push	{r3, lr}
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	b149      	cbz	r1, 800b914 <rmw_publisher_get_actual_qos+0x1c>
 800b900:	6841      	ldr	r1, [r0, #4]
 800b902:	2250      	movs	r2, #80	@ 0x50
 800b904:	3128      	adds	r1, #40	@ 0x28
 800b906:	4618      	mov	r0, r3
 800b908:	f00d fae5 	bl	8018ed6 <memcpy>
 800b90c:	2000      	movs	r0, #0
 800b90e:	bd08      	pop	{r3, pc}
 800b910:	200b      	movs	r0, #11
 800b912:	4770      	bx	lr
 800b914:	200b      	movs	r0, #11
 800b916:	bd08      	pop	{r3, pc}

0800b918 <rmw_destroy_publisher>:
 800b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91a:	b128      	cbz	r0, 800b928 <rmw_destroy_publisher+0x10>
 800b91c:	4604      	mov	r4, r0
 800b91e:	6800      	ldr	r0, [r0, #0]
 800b920:	460d      	mov	r5, r1
 800b922:	f000 fba3 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 800b926:	b910      	cbnz	r0, 800b92e <rmw_destroy_publisher+0x16>
 800b928:	2401      	movs	r4, #1
 800b92a:	4620      	mov	r0, r4
 800b92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b92e:	6863      	ldr	r3, [r4, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d0f9      	beq.n	800b928 <rmw_destroy_publisher+0x10>
 800b934:	2d00      	cmp	r5, #0
 800b936:	d0f7      	beq.n	800b928 <rmw_destroy_publisher+0x10>
 800b938:	6828      	ldr	r0, [r5, #0]
 800b93a:	f000 fb97 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d0f2      	beq.n	800b928 <rmw_destroy_publisher+0x10>
 800b942:	686c      	ldr	r4, [r5, #4]
 800b944:	2c00      	cmp	r4, #0
 800b946:	d0ef      	beq.n	800b928 <rmw_destroy_publisher+0x10>
 800b948:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b94a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800b94e:	f009 fd1d 	bl	801538c <destroy_topic>
 800b952:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b956:	6962      	ldr	r2, [r4, #20]
 800b958:	6918      	ldr	r0, [r3, #16]
 800b95a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b95e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b962:	6819      	ldr	r1, [r3, #0]
 800b964:	f003 f878 	bl	800ea58 <uxr_buffer_delete_entity>
 800b968:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b96c:	6922      	ldr	r2, [r4, #16]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b974:	4604      	mov	r4, r0
 800b976:	6809      	ldr	r1, [r1, #0]
 800b978:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b97c:	f003 f86c 	bl	800ea58 <uxr_buffer_delete_entity>
 800b980:	693e      	ldr	r6, [r7, #16]
 800b982:	4622      	mov	r2, r4
 800b984:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b988:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b98c:	4604      	mov	r4, r0
 800b98e:	4630      	mov	r0, r6
 800b990:	f000 faec 	bl	800bf6c <run_xrce_session>
 800b994:	693e      	ldr	r6, [r7, #16]
 800b996:	4622      	mov	r2, r4
 800b998:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b99c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f000 fae2 	bl	800bf6c <run_xrce_session>
 800b9a8:	b12c      	cbz	r4, 800b9b6 <rmw_destroy_publisher+0x9e>
 800b9aa:	b120      	cbz	r0, 800b9b6 <rmw_destroy_publisher+0x9e>
 800b9ac:	2400      	movs	r4, #0
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f000 f982 	bl	800bcb8 <rmw_uxrce_fini_publisher_memory>
 800b9b4:	e7b9      	b.n	800b92a <rmw_destroy_publisher+0x12>
 800b9b6:	2402      	movs	r4, #2
 800b9b8:	e7f9      	b.n	800b9ae <rmw_destroy_publisher+0x96>
 800b9ba:	bf00      	nop

0800b9bc <rmw_uxrce_init_service_memory>:
 800b9bc:	b1e2      	cbz	r2, 800b9f8 <rmw_uxrce_init_service_memory+0x3c>
 800b9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c2:	7b05      	ldrb	r5, [r0, #12]
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	b9ad      	cbnz	r5, 800b9f4 <rmw_uxrce_init_service_memory+0x38>
 800b9c8:	23c8      	movs	r3, #200	@ 0xc8
 800b9ca:	e9c0 5500 	strd	r5, r5, [r0]
 800b9ce:	6083      	str	r3, [r0, #8]
 800b9d0:	f240 1301 	movw	r3, #257	@ 0x101
 800b9d4:	4617      	mov	r7, r2
 800b9d6:	8183      	strh	r3, [r0, #12]
 800b9d8:	460c      	mov	r4, r1
 800b9da:	46a8      	mov	r8, r5
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4630      	mov	r0, r6
 800b9e0:	3501      	adds	r5, #1
 800b9e2:	f009 f9c5 	bl	8014d70 <put_memory>
 800b9e6:	42af      	cmp	r7, r5
 800b9e8:	60a4      	str	r4, [r4, #8]
 800b9ea:	f884 800c 	strb.w	r8, [r4, #12]
 800b9ee:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b9f2:	d1f3      	bne.n	800b9dc <rmw_uxrce_init_service_memory+0x20>
 800b9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop

0800b9fc <rmw_uxrce_init_client_memory>:
 800b9fc:	b1e2      	cbz	r2, 800ba38 <rmw_uxrce_init_client_memory+0x3c>
 800b9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba02:	7b05      	ldrb	r5, [r0, #12]
 800ba04:	4606      	mov	r6, r0
 800ba06:	b9ad      	cbnz	r5, 800ba34 <rmw_uxrce_init_client_memory+0x38>
 800ba08:	23c8      	movs	r3, #200	@ 0xc8
 800ba0a:	e9c0 5500 	strd	r5, r5, [r0]
 800ba0e:	6083      	str	r3, [r0, #8]
 800ba10:	f240 1301 	movw	r3, #257	@ 0x101
 800ba14:	4617      	mov	r7, r2
 800ba16:	8183      	strh	r3, [r0, #12]
 800ba18:	460c      	mov	r4, r1
 800ba1a:	46a8      	mov	r8, r5
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	4630      	mov	r0, r6
 800ba20:	3501      	adds	r5, #1
 800ba22:	f009 f9a5 	bl	8014d70 <put_memory>
 800ba26:	42af      	cmp	r7, r5
 800ba28:	60a4      	str	r4, [r4, #8]
 800ba2a:	f884 800c 	strb.w	r8, [r4, #12]
 800ba2e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ba32:	d1f3      	bne.n	800ba1c <rmw_uxrce_init_client_memory+0x20>
 800ba34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop

0800ba3c <rmw_uxrce_init_publisher_memory>:
 800ba3c:	b1e2      	cbz	r2, 800ba78 <rmw_uxrce_init_publisher_memory+0x3c>
 800ba3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba42:	7b05      	ldrb	r5, [r0, #12]
 800ba44:	4606      	mov	r6, r0
 800ba46:	b9ad      	cbnz	r5, 800ba74 <rmw_uxrce_init_publisher_memory+0x38>
 800ba48:	23d8      	movs	r3, #216	@ 0xd8
 800ba4a:	e9c0 5500 	strd	r5, r5, [r0]
 800ba4e:	6083      	str	r3, [r0, #8]
 800ba50:	f240 1301 	movw	r3, #257	@ 0x101
 800ba54:	4617      	mov	r7, r2
 800ba56:	8183      	strh	r3, [r0, #12]
 800ba58:	460c      	mov	r4, r1
 800ba5a:	46a8      	mov	r8, r5
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	4630      	mov	r0, r6
 800ba60:	3501      	adds	r5, #1
 800ba62:	f009 f985 	bl	8014d70 <put_memory>
 800ba66:	42af      	cmp	r7, r5
 800ba68:	60a4      	str	r4, [r4, #8]
 800ba6a:	f884 800c 	strb.w	r8, [r4, #12]
 800ba6e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ba72:	d1f3      	bne.n	800ba5c <rmw_uxrce_init_publisher_memory+0x20>
 800ba74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop

0800ba7c <rmw_uxrce_init_subscription_memory>:
 800ba7c:	b1e2      	cbz	r2, 800bab8 <rmw_uxrce_init_subscription_memory+0x3c>
 800ba7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba82:	7b05      	ldrb	r5, [r0, #12]
 800ba84:	4606      	mov	r6, r0
 800ba86:	b9ad      	cbnz	r5, 800bab4 <rmw_uxrce_init_subscription_memory+0x38>
 800ba88:	23d8      	movs	r3, #216	@ 0xd8
 800ba8a:	e9c0 5500 	strd	r5, r5, [r0]
 800ba8e:	6083      	str	r3, [r0, #8]
 800ba90:	f240 1301 	movw	r3, #257	@ 0x101
 800ba94:	4617      	mov	r7, r2
 800ba96:	8183      	strh	r3, [r0, #12]
 800ba98:	460c      	mov	r4, r1
 800ba9a:	46a8      	mov	r8, r5
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4630      	mov	r0, r6
 800baa0:	3501      	adds	r5, #1
 800baa2:	f009 f965 	bl	8014d70 <put_memory>
 800baa6:	42af      	cmp	r7, r5
 800baa8:	60a4      	str	r4, [r4, #8]
 800baaa:	f884 800c 	strb.w	r8, [r4, #12]
 800baae:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800bab2:	d1f3      	bne.n	800ba9c <rmw_uxrce_init_subscription_memory+0x20>
 800bab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop

0800babc <rmw_uxrce_init_node_memory>:
 800babc:	b1e2      	cbz	r2, 800baf8 <rmw_uxrce_init_node_memory+0x3c>
 800babe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac2:	7b05      	ldrb	r5, [r0, #12]
 800bac4:	4606      	mov	r6, r0
 800bac6:	b9ad      	cbnz	r5, 800baf4 <rmw_uxrce_init_node_memory+0x38>
 800bac8:	23a4      	movs	r3, #164	@ 0xa4
 800baca:	e9c0 5500 	strd	r5, r5, [r0]
 800bace:	6083      	str	r3, [r0, #8]
 800bad0:	f240 1301 	movw	r3, #257	@ 0x101
 800bad4:	4617      	mov	r7, r2
 800bad6:	8183      	strh	r3, [r0, #12]
 800bad8:	460c      	mov	r4, r1
 800bada:	46a8      	mov	r8, r5
 800badc:	4621      	mov	r1, r4
 800bade:	4630      	mov	r0, r6
 800bae0:	3501      	adds	r5, #1
 800bae2:	f009 f945 	bl	8014d70 <put_memory>
 800bae6:	42af      	cmp	r7, r5
 800bae8:	60a4      	str	r4, [r4, #8]
 800baea:	f884 800c 	strb.w	r8, [r4, #12]
 800baee:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800baf2:	d1f3      	bne.n	800badc <rmw_uxrce_init_node_memory+0x20>
 800baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop

0800bafc <rmw_uxrce_init_session_memory>:
 800bafc:	b1ea      	cbz	r2, 800bb3a <rmw_uxrce_init_session_memory+0x3e>
 800bafe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb02:	7b05      	ldrb	r5, [r0, #12]
 800bb04:	4606      	mov	r6, r0
 800bb06:	b9b5      	cbnz	r5, 800bb36 <rmw_uxrce_init_session_memory+0x3a>
 800bb08:	e9c0 5500 	strd	r5, r5, [r0]
 800bb0c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800bb10:	f240 1301 	movw	r3, #257	@ 0x101
 800bb14:	4617      	mov	r7, r2
 800bb16:	f8c0 8008 	str.w	r8, [r0, #8]
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	8183      	strh	r3, [r0, #12]
 800bb1e:	46a9      	mov	r9, r5
 800bb20:	4621      	mov	r1, r4
 800bb22:	4630      	mov	r0, r6
 800bb24:	3501      	adds	r5, #1
 800bb26:	f009 f923 	bl	8014d70 <put_memory>
 800bb2a:	42af      	cmp	r7, r5
 800bb2c:	60a4      	str	r4, [r4, #8]
 800bb2e:	f884 900c 	strb.w	r9, [r4, #12]
 800bb32:	4444      	add	r4, r8
 800bb34:	d1f4      	bne.n	800bb20 <rmw_uxrce_init_session_memory+0x24>
 800bb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb3a:	4770      	bx	lr

0800bb3c <rmw_uxrce_init_topic_memory>:
 800bb3c:	b1e2      	cbz	r2, 800bb78 <rmw_uxrce_init_topic_memory+0x3c>
 800bb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb42:	7b05      	ldrb	r5, [r0, #12]
 800bb44:	4606      	mov	r6, r0
 800bb46:	b9ad      	cbnz	r5, 800bb74 <rmw_uxrce_init_topic_memory+0x38>
 800bb48:	231c      	movs	r3, #28
 800bb4a:	e9c0 5500 	strd	r5, r5, [r0]
 800bb4e:	6083      	str	r3, [r0, #8]
 800bb50:	f240 1301 	movw	r3, #257	@ 0x101
 800bb54:	4617      	mov	r7, r2
 800bb56:	8183      	strh	r3, [r0, #12]
 800bb58:	460c      	mov	r4, r1
 800bb5a:	46a8      	mov	r8, r5
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	4630      	mov	r0, r6
 800bb60:	3501      	adds	r5, #1
 800bb62:	f009 f905 	bl	8014d70 <put_memory>
 800bb66:	42af      	cmp	r7, r5
 800bb68:	60a4      	str	r4, [r4, #8]
 800bb6a:	f884 800c 	strb.w	r8, [r4, #12]
 800bb6e:	f104 041c 	add.w	r4, r4, #28
 800bb72:	d1f3      	bne.n	800bb5c <rmw_uxrce_init_topic_memory+0x20>
 800bb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop

0800bb7c <rmw_uxrce_init_static_input_buffer_memory>:
 800bb7c:	b1ea      	cbz	r2, 800bbba <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800bb7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb82:	7b05      	ldrb	r5, [r0, #12]
 800bb84:	4606      	mov	r6, r0
 800bb86:	b9b5      	cbnz	r5, 800bbb6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800bb88:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800bb8c:	e9c0 5500 	strd	r5, r5, [r0]
 800bb90:	6083      	str	r3, [r0, #8]
 800bb92:	f240 1301 	movw	r3, #257	@ 0x101
 800bb96:	4617      	mov	r7, r2
 800bb98:	8183      	strh	r3, [r0, #12]
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	46a8      	mov	r8, r5
 800bb9e:	4621      	mov	r1, r4
 800bba0:	4630      	mov	r0, r6
 800bba2:	3501      	adds	r5, #1
 800bba4:	f009 f8e4 	bl	8014d70 <put_memory>
 800bba8:	42af      	cmp	r7, r5
 800bbaa:	60a4      	str	r4, [r4, #8]
 800bbac:	f884 800c 	strb.w	r8, [r4, #12]
 800bbb0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800bbb4:	d1f3      	bne.n	800bb9e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800bbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbba:	4770      	bx	lr

0800bbbc <rmw_uxrce_init_init_options_impl_memory>:
 800bbbc:	b1e2      	cbz	r2, 800bbf8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800bbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc2:	7b05      	ldrb	r5, [r0, #12]
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	b9ad      	cbnz	r5, 800bbf4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800bbc8:	232c      	movs	r3, #44	@ 0x2c
 800bbca:	e9c0 5500 	strd	r5, r5, [r0]
 800bbce:	6083      	str	r3, [r0, #8]
 800bbd0:	f240 1301 	movw	r3, #257	@ 0x101
 800bbd4:	4617      	mov	r7, r2
 800bbd6:	8183      	strh	r3, [r0, #12]
 800bbd8:	460c      	mov	r4, r1
 800bbda:	46a8      	mov	r8, r5
 800bbdc:	4621      	mov	r1, r4
 800bbde:	4630      	mov	r0, r6
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	f009 f8c5 	bl	8014d70 <put_memory>
 800bbe6:	42af      	cmp	r7, r5
 800bbe8:	60a4      	str	r4, [r4, #8]
 800bbea:	f884 800c 	strb.w	r8, [r4, #12]
 800bbee:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800bbf2:	d1f3      	bne.n	800bbdc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop

0800bbfc <rmw_uxrce_init_wait_set_memory>:
 800bbfc:	b1e2      	cbz	r2, 800bc38 <rmw_uxrce_init_wait_set_memory+0x3c>
 800bbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc02:	7b05      	ldrb	r5, [r0, #12]
 800bc04:	4606      	mov	r6, r0
 800bc06:	b9ad      	cbnz	r5, 800bc34 <rmw_uxrce_init_wait_set_memory+0x38>
 800bc08:	231c      	movs	r3, #28
 800bc0a:	e9c0 5500 	strd	r5, r5, [r0]
 800bc0e:	6083      	str	r3, [r0, #8]
 800bc10:	f240 1301 	movw	r3, #257	@ 0x101
 800bc14:	4617      	mov	r7, r2
 800bc16:	8183      	strh	r3, [r0, #12]
 800bc18:	460c      	mov	r4, r1
 800bc1a:	46a8      	mov	r8, r5
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	4630      	mov	r0, r6
 800bc20:	3501      	adds	r5, #1
 800bc22:	f009 f8a5 	bl	8014d70 <put_memory>
 800bc26:	42af      	cmp	r7, r5
 800bc28:	60a4      	str	r4, [r4, #8]
 800bc2a:	f884 800c 	strb.w	r8, [r4, #12]
 800bc2e:	f104 041c 	add.w	r4, r4, #28
 800bc32:	d1f3      	bne.n	800bc1c <rmw_uxrce_init_wait_set_memory+0x20>
 800bc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop

0800bc3c <rmw_uxrce_init_guard_condition_memory>:
 800bc3c:	b1e2      	cbz	r2, 800bc78 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800bc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc42:	7b05      	ldrb	r5, [r0, #12]
 800bc44:	4606      	mov	r6, r0
 800bc46:	b9ad      	cbnz	r5, 800bc74 <rmw_uxrce_init_guard_condition_memory+0x38>
 800bc48:	2320      	movs	r3, #32
 800bc4a:	e9c0 5500 	strd	r5, r5, [r0]
 800bc4e:	6083      	str	r3, [r0, #8]
 800bc50:	f240 1301 	movw	r3, #257	@ 0x101
 800bc54:	4617      	mov	r7, r2
 800bc56:	8183      	strh	r3, [r0, #12]
 800bc58:	460c      	mov	r4, r1
 800bc5a:	46a8      	mov	r8, r5
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	4630      	mov	r0, r6
 800bc60:	3501      	adds	r5, #1
 800bc62:	f009 f885 	bl	8014d70 <put_memory>
 800bc66:	42af      	cmp	r7, r5
 800bc68:	60a4      	str	r4, [r4, #8]
 800bc6a:	f884 800c 	strb.w	r8, [r4, #12]
 800bc6e:	f104 0420 	add.w	r4, r4, #32
 800bc72:	d1f3      	bne.n	800bc5c <rmw_uxrce_init_guard_condition_memory+0x20>
 800bc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop

0800bc7c <rmw_uxrce_fini_session_memory>:
 800bc7c:	4601      	mov	r1, r0
 800bc7e:	4801      	ldr	r0, [pc, #4]	@ (800bc84 <rmw_uxrce_fini_session_memory+0x8>)
 800bc80:	f009 b876 	b.w	8014d70 <put_memory>
 800bc84:	2001535c 	.word	0x2001535c

0800bc88 <rmw_uxrce_fini_node_memory>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	6800      	ldr	r0, [r0, #0]
 800bc8e:	b128      	cbz	r0, 800bc9c <rmw_uxrce_fini_node_memory+0x14>
 800bc90:	4b07      	ldr	r3, [pc, #28]	@ (800bcb0 <rmw_uxrce_fini_node_memory+0x28>)
 800bc92:	6819      	ldr	r1, [r3, #0]
 800bc94:	f7f4 fabc 	bl	8000210 <strcmp>
 800bc98:	b940      	cbnz	r0, 800bcac <rmw_uxrce_fini_node_memory+0x24>
 800bc9a:	6020      	str	r0, [r4, #0]
 800bc9c:	6861      	ldr	r1, [r4, #4]
 800bc9e:	b129      	cbz	r1, 800bcac <rmw_uxrce_fini_node_memory+0x24>
 800bca0:	2500      	movs	r5, #0
 800bca2:	4804      	ldr	r0, [pc, #16]	@ (800bcb4 <rmw_uxrce_fini_node_memory+0x2c>)
 800bca4:	610d      	str	r5, [r1, #16]
 800bca6:	f009 f863 	bl	8014d70 <put_memory>
 800bcaa:	6065      	str	r5, [r4, #4]
 800bcac:	bd38      	pop	{r3, r4, r5, pc}
 800bcae:	bf00      	nop
 800bcb0:	0801aff4 	.word	0x0801aff4
 800bcb4:	2001532c 	.word	0x2001532c

0800bcb8 <rmw_uxrce_fini_publisher_memory>:
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	4604      	mov	r4, r0
 800bcbc:	6800      	ldr	r0, [r0, #0]
 800bcbe:	b128      	cbz	r0, 800bccc <rmw_uxrce_fini_publisher_memory+0x14>
 800bcc0:	4b06      	ldr	r3, [pc, #24]	@ (800bcdc <rmw_uxrce_fini_publisher_memory+0x24>)
 800bcc2:	6819      	ldr	r1, [r3, #0]
 800bcc4:	f7f4 faa4 	bl	8000210 <strcmp>
 800bcc8:	b938      	cbnz	r0, 800bcda <rmw_uxrce_fini_publisher_memory+0x22>
 800bcca:	6020      	str	r0, [r4, #0]
 800bccc:	6861      	ldr	r1, [r4, #4]
 800bcce:	b121      	cbz	r1, 800bcda <rmw_uxrce_fini_publisher_memory+0x22>
 800bcd0:	4803      	ldr	r0, [pc, #12]	@ (800bce0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800bcd2:	f009 f84d 	bl	8014d70 <put_memory>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	6063      	str	r3, [r4, #4]
 800bcda:	bd10      	pop	{r4, pc}
 800bcdc:	0801aff4 	.word	0x0801aff4
 800bce0:	2001533c 	.word	0x2001533c

0800bce4 <rmw_uxrce_fini_subscription_memory>:
 800bce4:	b510      	push	{r4, lr}
 800bce6:	4604      	mov	r4, r0
 800bce8:	6800      	ldr	r0, [r0, #0]
 800bcea:	b128      	cbz	r0, 800bcf8 <rmw_uxrce_fini_subscription_memory+0x14>
 800bcec:	4b06      	ldr	r3, [pc, #24]	@ (800bd08 <rmw_uxrce_fini_subscription_memory+0x24>)
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	f7f4 fa8e 	bl	8000210 <strcmp>
 800bcf4:	b938      	cbnz	r0, 800bd06 <rmw_uxrce_fini_subscription_memory+0x22>
 800bcf6:	6020      	str	r0, [r4, #0]
 800bcf8:	6861      	ldr	r1, [r4, #4]
 800bcfa:	b121      	cbz	r1, 800bd06 <rmw_uxrce_fini_subscription_memory+0x22>
 800bcfc:	4803      	ldr	r0, [pc, #12]	@ (800bd0c <rmw_uxrce_fini_subscription_memory+0x28>)
 800bcfe:	f009 f837 	bl	8014d70 <put_memory>
 800bd02:	2300      	movs	r3, #0
 800bd04:	6063      	str	r3, [r4, #4]
 800bd06:	bd10      	pop	{r4, pc}
 800bd08:	0801aff4 	.word	0x0801aff4
 800bd0c:	2001537c 	.word	0x2001537c

0800bd10 <rmw_uxrce_fini_service_memory>:
 800bd10:	b510      	push	{r4, lr}
 800bd12:	4604      	mov	r4, r0
 800bd14:	6800      	ldr	r0, [r0, #0]
 800bd16:	b128      	cbz	r0, 800bd24 <rmw_uxrce_fini_service_memory+0x14>
 800bd18:	4b06      	ldr	r3, [pc, #24]	@ (800bd34 <rmw_uxrce_fini_service_memory+0x24>)
 800bd1a:	6819      	ldr	r1, [r3, #0]
 800bd1c:	f7f4 fa78 	bl	8000210 <strcmp>
 800bd20:	b938      	cbnz	r0, 800bd32 <rmw_uxrce_fini_service_memory+0x22>
 800bd22:	6020      	str	r0, [r4, #0]
 800bd24:	6861      	ldr	r1, [r4, #4]
 800bd26:	b121      	cbz	r1, 800bd32 <rmw_uxrce_fini_service_memory+0x22>
 800bd28:	4803      	ldr	r0, [pc, #12]	@ (800bd38 <rmw_uxrce_fini_service_memory+0x28>)
 800bd2a:	f009 f821 	bl	8014d70 <put_memory>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	6063      	str	r3, [r4, #4]
 800bd32:	bd10      	pop	{r4, pc}
 800bd34:	0801aff4 	.word	0x0801aff4
 800bd38:	2001534c 	.word	0x2001534c

0800bd3c <rmw_uxrce_fini_client_memory>:
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	4604      	mov	r4, r0
 800bd40:	6800      	ldr	r0, [r0, #0]
 800bd42:	b128      	cbz	r0, 800bd50 <rmw_uxrce_fini_client_memory+0x14>
 800bd44:	4b06      	ldr	r3, [pc, #24]	@ (800bd60 <rmw_uxrce_fini_client_memory+0x24>)
 800bd46:	6819      	ldr	r1, [r3, #0]
 800bd48:	f7f4 fa62 	bl	8000210 <strcmp>
 800bd4c:	b938      	cbnz	r0, 800bd5e <rmw_uxrce_fini_client_memory+0x22>
 800bd4e:	6020      	str	r0, [r4, #0]
 800bd50:	6861      	ldr	r1, [r4, #4]
 800bd52:	b121      	cbz	r1, 800bd5e <rmw_uxrce_fini_client_memory+0x22>
 800bd54:	4803      	ldr	r0, [pc, #12]	@ (800bd64 <rmw_uxrce_fini_client_memory+0x28>)
 800bd56:	f009 f80b 	bl	8014d70 <put_memory>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6063      	str	r3, [r4, #4]
 800bd5e:	bd10      	pop	{r4, pc}
 800bd60:	0801aff4 	.word	0x0801aff4
 800bd64:	20010a60 	.word	0x20010a60

0800bd68 <rmw_uxrce_fini_topic_memory>:
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4621      	mov	r1, r4
 800bd6e:	4803      	ldr	r0, [pc, #12]	@ (800bd7c <rmw_uxrce_fini_topic_memory+0x14>)
 800bd70:	f008 fffe 	bl	8014d70 <put_memory>
 800bd74:	2300      	movs	r3, #0
 800bd76:	61a3      	str	r3, [r4, #24]
 800bd78:	bd10      	pop	{r4, pc}
 800bd7a:	bf00      	nop
 800bd7c:	2001538c 	.word	0x2001538c

0800bd80 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800bd80:	b082      	sub	sp, #8
 800bd82:	b530      	push	{r4, r5, lr}
 800bd84:	4925      	ldr	r1, [pc, #148]	@ (800be1c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bd86:	680d      	ldr	r5, [r1, #0]
 800bd88:	ac03      	add	r4, sp, #12
 800bd8a:	e884 000c 	stmia.w	r4, {r2, r3}
 800bd8e:	461c      	mov	r4, r3
 800bd90:	2d00      	cmp	r5, #0
 800bd92:	d041      	beq.n	800be18 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800bd94:	462b      	mov	r3, r5
 800bd96:	2100      	movs	r1, #0
 800bd98:	689a      	ldr	r2, [r3, #8]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800bda0:	4290      	cmp	r0, r2
 800bda2:	bf08      	it	eq
 800bda4:	3101      	addeq	r1, #1
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1f6      	bne.n	800bd98 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800bdaa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d029      	beq.n	800be06 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800bdb2:	d907      	bls.n	800bdc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bdb4:	2b03      	cmp	r3, #3
 800bdb6:	d005      	beq.n	800bdc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bdb8:	2100      	movs	r1, #0
 800bdba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdbe:	4608      	mov	r0, r1
 800bdc0:	b002      	add	sp, #8
 800bdc2:	4770      	bx	lr
 800bdc4:	b314      	cbz	r4, 800be0c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bdc6:	428c      	cmp	r4, r1
 800bdc8:	d820      	bhi.n	800be0c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bdca:	2d00      	cmp	r5, #0
 800bdcc:	d0f4      	beq.n	800bdb8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bdce:	2100      	movs	r1, #0
 800bdd0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800bdd4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800bdd8:	e002      	b.n	800bde0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800bdda:	686d      	ldr	r5, [r5, #4]
 800bddc:	2d00      	cmp	r5, #0
 800bdde:	d0ec      	beq.n	800bdba <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800bde0:	68ab      	ldr	r3, [r5, #8]
 800bde2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800bde6:	4290      	cmp	r0, r2
 800bde8:	d1f7      	bne.n	800bdda <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bdea:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bdee:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800bdf2:	4562      	cmp	r2, ip
 800bdf4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bdf8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800bdfc:	daed      	bge.n	800bdda <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bdfe:	4694      	mov	ip, r2
 800be00:	461c      	mov	r4, r3
 800be02:	4629      	mov	r1, r5
 800be04:	e7e9      	b.n	800bdda <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800be06:	b10c      	cbz	r4, 800be0c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800be08:	428c      	cmp	r4, r1
 800be0a:	d9d5      	bls.n	800bdb8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800be0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be10:	4802      	ldr	r0, [pc, #8]	@ (800be1c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800be12:	b002      	add	sp, #8
 800be14:	f008 bf9c 	b.w	8014d50 <get_memory>
 800be18:	4629      	mov	r1, r5
 800be1a:	e7c6      	b.n	800bdaa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800be1c:	2001536c 	.word	0x2001536c

0800be20 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800be20:	4b11      	ldr	r3, [pc, #68]	@ (800be68 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	b530      	push	{r4, r5, lr}
 800be26:	b1e3      	cbz	r3, 800be62 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800be28:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800be2c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800be30:	2400      	movs	r4, #0
 800be32:	e001      	b.n	800be38 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	b193      	cbz	r3, 800be5e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800be38:	689a      	ldr	r2, [r3, #8]
 800be3a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800be3e:	4288      	cmp	r0, r1
 800be40:	d1f8      	bne.n	800be34 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800be42:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800be46:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800be4a:	4571      	cmp	r1, lr
 800be4c:	eb72 050c 	sbcs.w	r5, r2, ip
 800be50:	daf0      	bge.n	800be34 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800be52:	461c      	mov	r4, r3
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	468e      	mov	lr, r1
 800be58:	4694      	mov	ip, r2
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1ec      	bne.n	800be38 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800be5e:	4620      	mov	r0, r4
 800be60:	bd30      	pop	{r4, r5, pc}
 800be62:	461c      	mov	r4, r3
 800be64:	4620      	mov	r0, r4
 800be66:	bd30      	pop	{r4, r5, pc}
 800be68:	2001536c 	.word	0x2001536c
 800be6c:	00000000 	.word	0x00000000

0800be70 <rmw_uxrce_clean_expired_static_input_buffer>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	4b3c      	ldr	r3, [pc, #240]	@ (800bf68 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800be76:	ed2d 8b06 	vpush	{d8-d10}
 800be7a:	681f      	ldr	r7, [r3, #0]
 800be7c:	b08d      	sub	sp, #52	@ 0x34
 800be7e:	f00a f8a5 	bl	8015fcc <rmw_uros_epoch_nanos>
 800be82:	2f00      	cmp	r7, #0
 800be84:	d05d      	beq.n	800bf42 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800be86:	46b8      	mov	r8, r7
 800be88:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800bf50 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800be8c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800be90:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800be94:	2b04      	cmp	r3, #4
 800be96:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800bf58 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800be9a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800bf60 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800be9e:	4681      	mov	r9, r0
 800bea0:	468a      	mov	sl, r1
 800bea2:	ac04      	add	r4, sp, #16
 800bea4:	d03f      	beq.n	800bf26 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800bea6:	2b05      	cmp	r3, #5
 800bea8:	d044      	beq.n	800bf34 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800beaa:	2b03      	cmp	r3, #3
 800beac:	d03b      	beq.n	800bf26 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800beae:	ed8d 8b04 	vstr	d8, [sp, #16]
 800beb2:	ed8d ab06 	vstr	d10, [sp, #24]
 800beb6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800beba:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800bebe:	ab08      	add	r3, sp, #32
 800bec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bec2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bec6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800beca:	f008 fd75 	bl	80149b8 <rmw_time_equal>
 800bece:	b118      	cbz	r0, 800bed8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800bed0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800bed4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bed8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bedc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800bee0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800bee4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800bee8:	f008 fdba 	bl	8014a60 <rmw_time_total_nsec>
 800beec:	1830      	adds	r0, r6, r0
 800beee:	eb47 0101 	adc.w	r1, r7, r1
 800bef2:	4548      	cmp	r0, r9
 800bef4:	eb71 030a 	sbcs.w	r3, r1, sl
 800bef8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800befc:	db05      	blt.n	800bf0a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800befe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800bf02:	4591      	cmp	r9, r2
 800bf04:	eb7a 0303 	sbcs.w	r3, sl, r3
 800bf08:	da03      	bge.n	800bf12 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800bf0a:	4817      	ldr	r0, [pc, #92]	@ (800bf68 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800bf0c:	4641      	mov	r1, r8
 800bf0e:	f008 ff2f 	bl	8014d70 <put_memory>
 800bf12:	f1bb 0f00 	cmp.w	fp, #0
 800bf16:	d014      	beq.n	800bf42 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bf18:	46d8      	mov	r8, fp
 800bf1a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bf1e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800bf22:	2b04      	cmp	r3, #4
 800bf24:	d1bf      	bne.n	800bea6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800bf26:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800bf2a:	3340      	adds	r3, #64	@ 0x40
 800bf2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bf32:	e7c0      	b.n	800beb6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bf34:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800bf38:	3348      	adds	r3, #72	@ 0x48
 800bf3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bf40:	e7b9      	b.n	800beb6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bf42:	b00d      	add	sp, #52	@ 0x34
 800bf44:	ecbd 8b06 	vpop	{d8-d10}
 800bf48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4c:	f3af 8000 	nop.w
	...
 800bf58:	00000001 	.word	0x00000001
 800bf5c:	00000000 	.word	0x00000000
 800bf60:	0000001e 	.word	0x0000001e
 800bf64:	00000000 	.word	0x00000000
 800bf68:	2001536c 	.word	0x2001536c

0800bf6c <run_xrce_session>:
 800bf6c:	b510      	push	{r4, lr}
 800bf6e:	788c      	ldrb	r4, [r1, #2]
 800bf70:	b086      	sub	sp, #24
 800bf72:	2c01      	cmp	r4, #1
 800bf74:	f8ad 200e 	strh.w	r2, [sp, #14]
 800bf78:	d00c      	beq.n	800bf94 <run_xrce_session+0x28>
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	f10d 020e 	add.w	r2, sp, #14
 800bf84:	f10d 0317 	add.w	r3, sp, #23
 800bf88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf8c:	f003 fc9a 	bl	800f8c4 <uxr_run_session_until_all_status>
 800bf90:	b006      	add	sp, #24
 800bf92:	bd10      	pop	{r4, pc}
 800bf94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf98:	f003 f8ae 	bl	800f0f8 <uxr_flash_output_streams>
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	b006      	add	sp, #24
 800bfa0:	bd10      	pop	{r4, pc}
 800bfa2:	bf00      	nop

0800bfa4 <convert_qos_profile>:
 800bfa4:	7a4a      	ldrb	r2, [r1, #9]
 800bfa6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800bfaa:	2a02      	cmp	r2, #2
 800bfac:	bf18      	it	ne
 800bfae:	2200      	movne	r2, #0
 800bfb0:	7002      	strb	r2, [r0, #0]
 800bfb2:	780a      	ldrb	r2, [r1, #0]
 800bfb4:	8889      	ldrh	r1, [r1, #4]
 800bfb6:	8081      	strh	r1, [r0, #4]
 800bfb8:	f1ac 0c02 	sub.w	ip, ip, #2
 800bfbc:	f1a2 0202 	sub.w	r2, r2, #2
 800bfc0:	fabc fc8c 	clz	ip, ip
 800bfc4:	fab2 f282 	clz	r2, r2
 800bfc8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800bfcc:	0952      	lsrs	r2, r2, #5
 800bfce:	f880 c001 	strb.w	ip, [r0, #1]
 800bfd2:	7082      	strb	r2, [r0, #2]
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop

0800bfd8 <generate_type_name>:
 800bfd8:	b530      	push	{r4, r5, lr}
 800bfda:	2300      	movs	r3, #0
 800bfdc:	700b      	strb	r3, [r1, #0]
 800bfde:	6803      	ldr	r3, [r0, #0]
 800bfe0:	b087      	sub	sp, #28
 800bfe2:	4614      	mov	r4, r2
 800bfe4:	b1d3      	cbz	r3, 800c01c <generate_type_name+0x44>
 800bfe6:	4a0f      	ldr	r2, [pc, #60]	@ (800c024 <generate_type_name+0x4c>)
 800bfe8:	4615      	mov	r5, r2
 800bfea:	9203      	str	r2, [sp, #12]
 800bfec:	9500      	str	r5, [sp, #0]
 800bfee:	6842      	ldr	r2, [r0, #4]
 800bff0:	480d      	ldr	r0, [pc, #52]	@ (800c028 <generate_type_name+0x50>)
 800bff2:	9001      	str	r0, [sp, #4]
 800bff4:	4608      	mov	r0, r1
 800bff6:	490d      	ldr	r1, [pc, #52]	@ (800c02c <generate_type_name+0x54>)
 800bff8:	9204      	str	r2, [sp, #16]
 800bffa:	9105      	str	r1, [sp, #20]
 800bffc:	9102      	str	r1, [sp, #8]
 800bffe:	4a0c      	ldr	r2, [pc, #48]	@ (800c030 <generate_type_name+0x58>)
 800c000:	4621      	mov	r1, r4
 800c002:	f00c fa8b 	bl	801851c <sniprintf>
 800c006:	2800      	cmp	r0, #0
 800c008:	db05      	blt.n	800c016 <generate_type_name+0x3e>
 800c00a:	4284      	cmp	r4, r0
 800c00c:	bfd4      	ite	le
 800c00e:	2000      	movle	r0, #0
 800c010:	2001      	movgt	r0, #1
 800c012:	b007      	add	sp, #28
 800c014:	bd30      	pop	{r4, r5, pc}
 800c016:	2000      	movs	r0, #0
 800c018:	b007      	add	sp, #28
 800c01a:	bd30      	pop	{r4, r5, pc}
 800c01c:	4b05      	ldr	r3, [pc, #20]	@ (800c034 <generate_type_name+0x5c>)
 800c01e:	4a01      	ldr	r2, [pc, #4]	@ (800c024 <generate_type_name+0x4c>)
 800c020:	461d      	mov	r5, r3
 800c022:	e7e2      	b.n	800bfea <generate_type_name+0x12>
 800c024:	0801a708 	.word	0x0801a708
 800c028:	0801a720 	.word	0x0801a720
 800c02c:	0801a71c 	.word	0x0801a71c
 800c030:	0801a70c 	.word	0x0801a70c
 800c034:	0801b280 	.word	0x0801b280

0800c038 <generate_topic_name>:
 800c038:	b510      	push	{r4, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	4614      	mov	r4, r2
 800c03e:	9000      	str	r0, [sp, #0]
 800c040:	4b08      	ldr	r3, [pc, #32]	@ (800c064 <generate_topic_name+0x2c>)
 800c042:	4a09      	ldr	r2, [pc, #36]	@ (800c068 <generate_topic_name+0x30>)
 800c044:	4608      	mov	r0, r1
 800c046:	4621      	mov	r1, r4
 800c048:	f00c fa68 	bl	801851c <sniprintf>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	db05      	blt.n	800c05c <generate_topic_name+0x24>
 800c050:	4284      	cmp	r4, r0
 800c052:	bfd4      	ite	le
 800c054:	2000      	movle	r0, #0
 800c056:	2001      	movgt	r0, #1
 800c058:	b002      	add	sp, #8
 800c05a:	bd10      	pop	{r4, pc}
 800c05c:	2000      	movs	r0, #0
 800c05e:	b002      	add	sp, #8
 800c060:	bd10      	pop	{r4, pc}
 800c062:	bf00      	nop
 800c064:	0801a72c 	.word	0x0801a72c
 800c068:	0801a724 	.word	0x0801a724

0800c06c <is_uxrce_rmw_identifier_valid>:
 800c06c:	b510      	push	{r4, lr}
 800c06e:	4604      	mov	r4, r0
 800c070:	b140      	cbz	r0, 800c084 <is_uxrce_rmw_identifier_valid+0x18>
 800c072:	f008 fed5 	bl	8014e20 <rmw_get_implementation_identifier>
 800c076:	4601      	mov	r1, r0
 800c078:	4620      	mov	r0, r4
 800c07a:	f7f4 f8c9 	bl	8000210 <strcmp>
 800c07e:	fab0 f080 	clz	r0, r0
 800c082:	0940      	lsrs	r0, r0, #5
 800c084:	bd10      	pop	{r4, pc}
 800c086:	bf00      	nop

0800c088 <get_message_typesupport_handle>:
 800c088:	6883      	ldr	r3, [r0, #8]
 800c08a:	4718      	bx	r3

0800c08c <get_message_typesupport_handle_function>:
 800c08c:	b510      	push	{r4, lr}
 800c08e:	4604      	mov	r4, r0
 800c090:	6800      	ldr	r0, [r0, #0]
 800c092:	f7f4 f8bd 	bl	8000210 <strcmp>
 800c096:	2800      	cmp	r0, #0
 800c098:	bf0c      	ite	eq
 800c09a:	4620      	moveq	r0, r4
 800c09c:	2000      	movne	r0, #0
 800c09e:	bd10      	pop	{r4, pc}

0800c0a0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a4:	6805      	ldr	r5, [r0, #0]
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	460e      	mov	r6, r1
 800c0ac:	f7f4 f8b0 	bl	8000210 <strcmp>
 800c0b0:	b1c8      	cbz	r0, 800c0e6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c0b2:	4b11      	ldr	r3, [pc, #68]	@ (800c0f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	429d      	cmp	r5, r3
 800c0b8:	d112      	bne.n	800c0e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c0ba:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c0be:	f8d8 4000 	ldr.w	r4, [r8]
 800c0c2:	b16c      	cbz	r4, 800c0e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c0c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c0c8:	2700      	movs	r7, #0
 800c0ca:	3d04      	subs	r5, #4
 800c0cc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c0d0:	4631      	mov	r1, r6
 800c0d2:	f7f4 f89d 	bl	8000210 <strcmp>
 800c0d6:	00bb      	lsls	r3, r7, #2
 800c0d8:	b140      	cbz	r0, 800c0ec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c0da:	3701      	adds	r7, #1
 800c0dc:	42bc      	cmp	r4, r7
 800c0de:	d1f5      	bne.n	800c0cc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f4:	58d3      	ldr	r3, [r2, r3]
 800c0f6:	4718      	bx	r3
 800c0f8:	200001f0 	.word	0x200001f0

0800c0fc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c0fc:	4b04      	ldr	r3, [pc, #16]	@ (800c110 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	b10a      	cbz	r2, 800c106 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800c102:	4803      	ldr	r0, [pc, #12]	@ (800c110 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800c104:	4770      	bx	lr
 800c106:	4a03      	ldr	r2, [pc, #12]	@ (800c114 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800c108:	4801      	ldr	r0, [pc, #4]	@ (800c110 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800c10a:	6812      	ldr	r2, [r2, #0]
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	4770      	bx	lr
 800c110:	20000200 	.word	0x20000200
 800c114:	200001f0 	.word	0x200001f0

0800c118 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c118:	4a02      	ldr	r2, [pc, #8]	@ (800c124 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800c11a:	4b03      	ldr	r3, [pc, #12]	@ (800c128 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800c11c:	6812      	ldr	r2, [r2, #0]
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	200001f0 	.word	0x200001f0
 800c128:	20000200 	.word	0x20000200

0800c12c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800c12c:	2009      	movs	r0, #9
 800c12e:	4770      	bx	lr

0800c130 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800c130:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop

0800c138 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800c138:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c140:	e9c2 0100 	strd	r0, r1, [r2]
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop

0800c148 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800c148:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c14c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c150:	e9c1 2300 	strd	r2, r3, [r1]
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop

0800c158 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800c158:	f009 bf46 	b.w	8015fe8 <sensor_msgs__msg__Imu__init>

0800c15c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800c15c:	f009 bf9a 	b.w	8016094 <sensor_msgs__msg__Imu__fini>

0800c160 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800c160:	2009      	movs	r0, #9
 800c162:	4770      	bx	lr

0800c164 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800c164:	2009      	movs	r0, #9
 800c166:	4770      	bx	lr

0800c168 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800c168:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop

0800c170 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800c170:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop

0800c178 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800c178:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop

0800c180 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800c180:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop

0800c188 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800c188:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop

0800c190 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800c190:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c194:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c198:	e9c2 0100 	strd	r0, r1, [r2]
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop

0800c1a0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800c1a0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c1a4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c1a8:	e9c1 2300 	strd	r2, r3, [r1]
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop

0800c1b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800c1b0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c1b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1b8:	e9c2 0100 	strd	r0, r1, [r2]
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop

0800c1c0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800c1c0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c1c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c1c8:	e9c1 2300 	strd	r2, r3, [r1]
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop

0800c1d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	f000 f90f 	bl	800c3f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c1d6:	4c0b      	ldr	r4, [pc, #44]	@ (800c204 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800c1d8:	60e0      	str	r0, [r4, #12]
 800c1da:	f000 fa33 	bl	800c644 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c1de:	64a0      	str	r0, [r4, #72]	@ 0x48
 800c1e0:	f000 fa42 	bl	800c668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c1e4:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800c1e8:	f000 fa3e 	bl	800c668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c1ec:	4b06      	ldr	r3, [pc, #24]	@ (800c208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c1ee:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	b10a      	cbz	r2, 800c1fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800c1f6:	4804      	ldr	r0, [pc, #16]	@ (800c208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c1f8:	bd10      	pop	{r4, pc}
 800c1fa:	4a04      	ldr	r2, [pc, #16]	@ (800c20c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800c1fc:	4802      	ldr	r0, [pc, #8]	@ (800c208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c1fe:	6812      	ldr	r2, [r2, #0]
 800c200:	601a      	str	r2, [r3, #0]
 800c202:	bd10      	pop	{r4, pc}
 800c204:	2000020c 	.word	0x2000020c
 800c208:	200003b0 	.word	0x200003b0
 800c20c:	200001f4 	.word	0x200001f4

0800c210 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800c210:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800c214:	4680      	mov	r8, r0
 800c216:	460f      	mov	r7, r1
 800c218:	f000 f910 	bl	800c43c <get_serialized_size_std_msgs__msg__Header>
 800c21c:	183c      	adds	r4, r7, r0
 800c21e:	4621      	mov	r1, r4
 800c220:	f108 0018 	add.w	r0, r8, #24
 800c224:	f000 fa2e 	bl	800c684 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800c228:	4404      	add	r4, r0
 800c22a:	2108      	movs	r1, #8
 800c22c:	4620      	mov	r0, r4
 800c22e:	f002 fb4f 	bl	800e8d0 <ucdr_alignment>
 800c232:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800c236:	4425      	add	r5, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800c23e:	f000 fad9 	bl	800c7f4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c242:	4405      	add	r5, r0
 800c244:	2108      	movs	r1, #8
 800c246:	4628      	mov	r0, r5
 800c248:	f002 fb42 	bl	800e8d0 <ucdr_alignment>
 800c24c:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800c250:	4425      	add	r5, r4
 800c252:	4629      	mov	r1, r5
 800c254:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800c258:	f000 facc 	bl	800c7f4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c25c:	4405      	add	r5, r0
 800c25e:	2108      	movs	r1, #8
 800c260:	4628      	mov	r0, r5
 800c262:	f002 fb35 	bl	800e8d0 <ucdr_alignment>
 800c266:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800c26a:	4438      	add	r0, r7
 800c26c:	4428      	add	r0, r5
 800c26e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800c272:	bf00      	nop

0800c274 <get_serialized_size_sensor_msgs__msg__Imu>:
 800c274:	b108      	cbz	r0, 800c27a <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800c276:	f7ff bfcb 	b.w	800c210 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800c27a:	4770      	bx	lr

0800c27c <_Imu__get_serialized_size>:
 800c27c:	b110      	cbz	r0, 800c284 <_Imu__get_serialized_size+0x8>
 800c27e:	2100      	movs	r1, #0
 800c280:	f7ff bfc6 	b.w	800c210 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop

0800c288 <_Imu__cdr_deserialize>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	460c      	mov	r4, r1
 800c28c:	b399      	cbz	r1, 800c2f6 <_Imu__cdr_deserialize+0x6e>
 800c28e:	4605      	mov	r5, r0
 800c290:	f000 f956 	bl	800c540 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c294:	6843      	ldr	r3, [r0, #4]
 800c296:	4621      	mov	r1, r4
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	4628      	mov	r0, r5
 800c29c:	4798      	blx	r3
 800c29e:	f000 faa5 	bl	800c7ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c2a2:	6843      	ldr	r3, [r0, #4]
 800c2a4:	f104 0118 	add.w	r1, r4, #24
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	4798      	blx	r3
 800c2ae:	2209      	movs	r2, #9
 800c2b0:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f000 fe71 	bl	800cf9c <ucdr_deserialize_array_double>
 800c2ba:	f000 fb27 	bl	800c90c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c2be:	6843      	ldr	r3, [r0, #4]
 800c2c0:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	4798      	blx	r3
 800c2ca:	2209      	movs	r2, #9
 800c2cc:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	f000 fe63 	bl	800cf9c <ucdr_deserialize_array_double>
 800c2d6:	f000 fb19 	bl	800c90c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c2da:	6843      	ldr	r3, [r0, #4]
 800c2dc:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	4798      	blx	r3
 800c2e6:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	2209      	movs	r2, #9
 800c2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2f2:	f000 be53 	b.w	800cf9c <ucdr_deserialize_array_double>
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	bd38      	pop	{r3, r4, r5, pc}
 800c2fa:	bf00      	nop

0800c2fc <_Imu__cdr_serialize>:
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d035      	beq.n	800c36c <_Imu__cdr_serialize+0x70>
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	460d      	mov	r5, r1
 800c304:	4604      	mov	r4, r0
 800c306:	f000 f91b 	bl	800c540 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c30a:	6843      	ldr	r3, [r0, #4]
 800c30c:	4629      	mov	r1, r5
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	4620      	mov	r0, r4
 800c312:	4798      	blx	r3
 800c314:	f000 fa6a 	bl	800c7ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c318:	6843      	ldr	r3, [r0, #4]
 800c31a:	4629      	mov	r1, r5
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	f104 0018 	add.w	r0, r4, #24
 800c322:	4798      	blx	r3
 800c324:	2209      	movs	r2, #9
 800c326:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800c32a:	4628      	mov	r0, r5
 800c32c:	f000 fde2 	bl	800cef4 <ucdr_serialize_array_double>
 800c330:	f000 faec 	bl	800c90c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c334:	6843      	ldr	r3, [r0, #4]
 800c336:	4629      	mov	r1, r5
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800c33e:	4798      	blx	r3
 800c340:	2209      	movs	r2, #9
 800c342:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800c346:	4628      	mov	r0, r5
 800c348:	f000 fdd4 	bl	800cef4 <ucdr_serialize_array_double>
 800c34c:	f000 fade 	bl	800c90c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c350:	6843      	ldr	r3, [r0, #4]
 800c352:	4629      	mov	r1, r5
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800c35a:	4798      	blx	r3
 800c35c:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800c360:	4628      	mov	r0, r5
 800c362:	2209      	movs	r2, #9
 800c364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c368:	f000 bdc4 	b.w	800cef4 <ucdr_serialize_array_double>
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop

0800c370 <max_serialized_size_sensor_msgs__msg__Imu>:
 800c370:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800c374:	2301      	movs	r3, #1
 800c376:	7003      	strb	r3, [r0, #0]
 800c378:	4680      	mov	r8, r0
 800c37a:	460f      	mov	r7, r1
 800c37c:	f000 f8d6 	bl	800c52c <max_serialized_size_std_msgs__msg__Header>
 800c380:	183c      	adds	r4, r7, r0
 800c382:	4621      	mov	r1, r4
 800c384:	4640      	mov	r0, r8
 800c386:	f000 fa0f 	bl	800c7a8 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800c38a:	4404      	add	r4, r0
 800c38c:	2108      	movs	r1, #8
 800c38e:	4620      	mov	r0, r4
 800c390:	f002 fa9e 	bl	800e8d0 <ucdr_alignment>
 800c394:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800c398:	4425      	add	r5, r4
 800c39a:	4629      	mov	r1, r5
 800c39c:	4640      	mov	r0, r8
 800c39e:	f000 fa99 	bl	800c8d4 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c3a2:	4405      	add	r5, r0
 800c3a4:	2108      	movs	r1, #8
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f002 fa92 	bl	800e8d0 <ucdr_alignment>
 800c3ac:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800c3b0:	4425      	add	r5, r4
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	4640      	mov	r0, r8
 800c3b6:	f000 fa8d 	bl	800c8d4 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c3ba:	4405      	add	r5, r0
 800c3bc:	2108      	movs	r1, #8
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f002 fa86 	bl	800e8d0 <ucdr_alignment>
 800c3c4:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800c3c8:	4438      	add	r0, r7
 800c3ca:	4428      	add	r0, r5
 800c3cc:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800c3d0 <_Imu__max_serialized_size>:
 800c3d0:	b500      	push	{lr}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	f10d 0007 	add.w	r0, sp, #7
 800c3da:	f7ff ffc9 	bl	800c370 <max_serialized_size_sensor_msgs__msg__Imu>
 800c3de:	b003      	add	sp, #12
 800c3e0:	f85d fb04 	ldr.w	pc, [sp], #4

0800c3e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c3e4:	4800      	ldr	r0, [pc, #0]	@ (800c3e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800c3e6:	4770      	bx	lr
 800c3e8:	200003bc 	.word	0x200003bc

0800c3ec <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800c3ec:	f009 be66 	b.w	80160bc <std_msgs__msg__Header__init>

0800c3f0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800c3f0:	f009 be88 	b.w	8016104 <std_msgs__msg__Header__fini>

0800c3f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800c3f4:	b508      	push	{r3, lr}
 800c3f6:	f000 f8ab 	bl	800c550 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c3fa:	4b06      	ldr	r3, [pc, #24]	@ (800c414 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c3fc:	4906      	ldr	r1, [pc, #24]	@ (800c418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	60c8      	str	r0, [r1, #12]
 800c402:	b10a      	cbz	r2, 800c408 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800c404:	4803      	ldr	r0, [pc, #12]	@ (800c414 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c406:	bd08      	pop	{r3, pc}
 800c408:	4a04      	ldr	r2, [pc, #16]	@ (800c41c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800c40a:	4802      	ldr	r0, [pc, #8]	@ (800c414 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c40c:	6812      	ldr	r2, [r2, #0]
 800c40e:	601a      	str	r2, [r3, #0]
 800c410:	bd08      	pop	{r3, pc}
 800c412:	bf00      	nop
 800c414:	2000045c 	.word	0x2000045c
 800c418:	200003e4 	.word	0x200003e4
 800c41c:	200001f4 	.word	0x200001f4

0800c420 <_Header__max_serialized_size>:
 800c420:	b500      	push	{lr}
 800c422:	b083      	sub	sp, #12
 800c424:	2301      	movs	r3, #1
 800c426:	2100      	movs	r1, #0
 800c428:	f10d 0007 	add.w	r0, sp, #7
 800c42c:	f88d 3007 	strb.w	r3, [sp, #7]
 800c430:	f000 f8ec 	bl	800c60c <max_serialized_size_builtin_interfaces__msg__Time>
 800c434:	b003      	add	sp, #12
 800c436:	f85d fb04 	ldr.w	pc, [sp], #4
 800c43a:	bf00      	nop

0800c43c <get_serialized_size_std_msgs__msg__Header>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	4605      	mov	r5, r0
 800c440:	b168      	cbz	r0, 800c45e <get_serialized_size_std_msgs__msg__Header+0x22>
 800c442:	460c      	mov	r4, r1
 800c444:	f000 f892 	bl	800c56c <get_serialized_size_builtin_interfaces__msg__Time>
 800c448:	1826      	adds	r6, r4, r0
 800c44a:	2104      	movs	r1, #4
 800c44c:	4630      	mov	r0, r6
 800c44e:	f002 fa3f 	bl	800e8d0 <ucdr_alignment>
 800c452:	68e9      	ldr	r1, [r5, #12]
 800c454:	f1c4 0405 	rsb	r4, r4, #5
 800c458:	440c      	add	r4, r1
 800c45a:	4404      	add	r4, r0
 800c45c:	19a0      	adds	r0, r4, r6
 800c45e:	bd70      	pop	{r4, r5, r6, pc}

0800c460 <_Header__cdr_deserialize>:
 800c460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c462:	460c      	mov	r4, r1
 800c464:	b083      	sub	sp, #12
 800c466:	b1e1      	cbz	r1, 800c4a2 <_Header__cdr_deserialize+0x42>
 800c468:	4606      	mov	r6, r0
 800c46a:	f000 f8e3 	bl	800c634 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c46e:	6843      	ldr	r3, [r0, #4]
 800c470:	4621      	mov	r1, r4
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	4630      	mov	r0, r6
 800c476:	4798      	blx	r3
 800c478:	6927      	ldr	r7, [r4, #16]
 800c47a:	68a1      	ldr	r1, [r4, #8]
 800c47c:	ab01      	add	r3, sp, #4
 800c47e:	463a      	mov	r2, r7
 800c480:	4630      	mov	r0, r6
 800c482:	f002 faa3 	bl	800e9cc <ucdr_deserialize_sequence_char>
 800c486:	9b01      	ldr	r3, [sp, #4]
 800c488:	4605      	mov	r5, r0
 800c48a:	b920      	cbnz	r0, 800c496 <_Header__cdr_deserialize+0x36>
 800c48c:	429f      	cmp	r7, r3
 800c48e:	d30c      	bcc.n	800c4aa <_Header__cdr_deserialize+0x4a>
 800c490:	4628      	mov	r0, r5
 800c492:	b003      	add	sp, #12
 800c494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c496:	b103      	cbz	r3, 800c49a <_Header__cdr_deserialize+0x3a>
 800c498:	3b01      	subs	r3, #1
 800c49a:	4628      	mov	r0, r5
 800c49c:	60e3      	str	r3, [r4, #12]
 800c49e:	b003      	add	sp, #12
 800c4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a2:	460d      	mov	r5, r1
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	b003      	add	sp, #12
 800c4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	75b0      	strb	r0, [r6, #22]
 800c4ae:	7571      	strb	r1, [r6, #21]
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	60e5      	str	r5, [r4, #12]
 800c4b4:	f002 fa22 	bl	800e8fc <ucdr_align_to>
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	9901      	ldr	r1, [sp, #4]
 800c4bc:	f002 fa54 	bl	800e968 <ucdr_advance_buffer>
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	b003      	add	sp, #12
 800c4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c6:	bf00      	nop

0800c4c8 <_Header__cdr_serialize>:
 800c4c8:	b1f8      	cbz	r0, 800c50a <_Header__cdr_serialize+0x42>
 800c4ca:	b570      	push	{r4, r5, r6, lr}
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	460d      	mov	r5, r1
 800c4d0:	f000 f8b0 	bl	800c634 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c4d4:	6843      	ldr	r3, [r0, #4]
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	4620      	mov	r0, r4
 800c4dc:	4798      	blx	r3
 800c4de:	68a6      	ldr	r6, [r4, #8]
 800c4e0:	b156      	cbz	r6, 800c4f8 <_Header__cdr_serialize+0x30>
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f7f3 fe8c 	bl	8000200 <strlen>
 800c4e8:	4631      	mov	r1, r6
 800c4ea:	60e0      	str	r0, [r4, #12]
 800c4ec:	1c42      	adds	r2, r0, #1
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4f4:	f002 ba58 	b.w	800e9a8 <ucdr_serialize_sequence_char>
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	60e0      	str	r0, [r4, #12]
 800c4fc:	4632      	mov	r2, r6
 800c4fe:	4631      	mov	r1, r6
 800c500:	4628      	mov	r0, r5
 800c502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c506:	f002 ba4f 	b.w	800e9a8 <ucdr_serialize_sequence_char>
 800c50a:	4770      	bx	lr

0800c50c <_Header__get_serialized_size>:
 800c50c:	b538      	push	{r3, r4, r5, lr}
 800c50e:	4604      	mov	r4, r0
 800c510:	b150      	cbz	r0, 800c528 <_Header__get_serialized_size+0x1c>
 800c512:	2100      	movs	r1, #0
 800c514:	f000 f82a 	bl	800c56c <get_serialized_size_builtin_interfaces__msg__Time>
 800c518:	2104      	movs	r1, #4
 800c51a:	4605      	mov	r5, r0
 800c51c:	f002 f9d8 	bl	800e8d0 <ucdr_alignment>
 800c520:	68e2      	ldr	r2, [r4, #12]
 800c522:	3205      	adds	r2, #5
 800c524:	1953      	adds	r3, r2, r5
 800c526:	4418      	add	r0, r3
 800c528:	bd38      	pop	{r3, r4, r5, pc}
 800c52a:	bf00      	nop

0800c52c <max_serialized_size_std_msgs__msg__Header>:
 800c52c:	b510      	push	{r4, lr}
 800c52e:	2301      	movs	r3, #1
 800c530:	4604      	mov	r4, r0
 800c532:	7003      	strb	r3, [r0, #0]
 800c534:	f000 f86a 	bl	800c60c <max_serialized_size_builtin_interfaces__msg__Time>
 800c538:	2300      	movs	r3, #0
 800c53a:	7023      	strb	r3, [r4, #0]
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	bf00      	nop

0800c540 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800c540:	4800      	ldr	r0, [pc, #0]	@ (800c544 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800c542:	4770      	bx	lr
 800c544:	20000468 	.word	0x20000468

0800c548 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800c548:	f009 bde8 	b.w	801611c <builtin_interfaces__msg__Time__init>

0800c54c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800c54c:	f009 bdea 	b.w	8016124 <builtin_interfaces__msg__Time__fini>

0800c550 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c550:	4b04      	ldr	r3, [pc, #16]	@ (800c564 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	b10a      	cbz	r2, 800c55a <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800c556:	4803      	ldr	r0, [pc, #12]	@ (800c564 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c558:	4770      	bx	lr
 800c55a:	4a03      	ldr	r2, [pc, #12]	@ (800c568 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800c55c:	4801      	ldr	r0, [pc, #4]	@ (800c564 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c55e:	6812      	ldr	r2, [r2, #0]
 800c560:	601a      	str	r2, [r3, #0]
 800c562:	4770      	bx	lr
 800c564:	20000508 	.word	0x20000508
 800c568:	200001f4 	.word	0x200001f4

0800c56c <get_serialized_size_builtin_interfaces__msg__Time>:
 800c56c:	b180      	cbz	r0, 800c590 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800c56e:	b538      	push	{r3, r4, r5, lr}
 800c570:	460d      	mov	r5, r1
 800c572:	4628      	mov	r0, r5
 800c574:	2104      	movs	r1, #4
 800c576:	f002 f9ab 	bl	800e8d0 <ucdr_alignment>
 800c57a:	1d2b      	adds	r3, r5, #4
 800c57c:	181c      	adds	r4, r3, r0
 800c57e:	2104      	movs	r1, #4
 800c580:	4620      	mov	r0, r4
 800c582:	f002 f9a5 	bl	800e8d0 <ucdr_alignment>
 800c586:	f1c5 0504 	rsb	r5, r5, #4
 800c58a:	4428      	add	r0, r5
 800c58c:	4420      	add	r0, r4
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop

0800c594 <_Time__cdr_deserialize>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	460c      	mov	r4, r1
 800c598:	b141      	cbz	r1, 800c5ac <_Time__cdr_deserialize+0x18>
 800c59a:	4605      	mov	r5, r0
 800c59c:	f001 fc4a 	bl	800de34 <ucdr_deserialize_int32_t>
 800c5a0:	1d21      	adds	r1, r4, #4
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5a8:	f001 b8c2 	b.w	800d730 <ucdr_deserialize_uint32_t>
 800c5ac:	4608      	mov	r0, r1
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}

0800c5b0 <_Time__cdr_serialize>:
 800c5b0:	b160      	cbz	r0, 800c5cc <_Time__cdr_serialize+0x1c>
 800c5b2:	b538      	push	{r3, r4, r5, lr}
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	6801      	ldr	r1, [r0, #0]
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	f001 fba2 	bl	800dd04 <ucdr_serialize_int32_t>
 800c5c0:	6861      	ldr	r1, [r4, #4]
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5c8:	f000 bf82 	b.w	800d4d0 <ucdr_serialize_uint32_t>
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop

0800c5d0 <_Time__get_serialized_size>:
 800c5d0:	b160      	cbz	r0, 800c5ec <_Time__get_serialized_size+0x1c>
 800c5d2:	b510      	push	{r4, lr}
 800c5d4:	2104      	movs	r1, #4
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	f002 f97a 	bl	800e8d0 <ucdr_alignment>
 800c5dc:	1d04      	adds	r4, r0, #4
 800c5de:	2104      	movs	r1, #4
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f002 f975 	bl	800e8d0 <ucdr_alignment>
 800c5e6:	3004      	adds	r0, #4
 800c5e8:	4420      	add	r0, r4
 800c5ea:	bd10      	pop	{r4, pc}
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop

0800c5f0 <_Time__max_serialized_size>:
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	2104      	movs	r1, #4
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	f002 f96b 	bl	800e8d0 <ucdr_alignment>
 800c5fa:	1d04      	adds	r4, r0, #4
 800c5fc:	2104      	movs	r1, #4
 800c5fe:	4620      	mov	r0, r4
 800c600:	f002 f966 	bl	800e8d0 <ucdr_alignment>
 800c604:	3004      	adds	r0, #4
 800c606:	4420      	add	r0, r4
 800c608:	bd10      	pop	{r4, pc}
 800c60a:	bf00      	nop

0800c60c <max_serialized_size_builtin_interfaces__msg__Time>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	460c      	mov	r4, r1
 800c610:	2301      	movs	r3, #1
 800c612:	7003      	strb	r3, [r0, #0]
 800c614:	2104      	movs	r1, #4
 800c616:	4620      	mov	r0, r4
 800c618:	f002 f95a 	bl	800e8d0 <ucdr_alignment>
 800c61c:	1d25      	adds	r5, r4, #4
 800c61e:	4405      	add	r5, r0
 800c620:	2104      	movs	r1, #4
 800c622:	4628      	mov	r0, r5
 800c624:	f002 f954 	bl	800e8d0 <ucdr_alignment>
 800c628:	f1c4 0404 	rsb	r4, r4, #4
 800c62c:	4420      	add	r0, r4
 800c62e:	4428      	add	r0, r5
 800c630:	bd38      	pop	{r3, r4, r5, pc}
 800c632:	bf00      	nop

0800c634 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c634:	4800      	ldr	r0, [pc, #0]	@ (800c638 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800c636:	4770      	bx	lr
 800c638:	20000514 	.word	0x20000514

0800c63c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800c63c:	f009 bd74 	b.w	8016128 <geometry_msgs__msg__Quaternion__init>

0800c640 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800c640:	f009 bd86 	b.w	8016150 <geometry_msgs__msg__Quaternion__fini>

0800c644 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800c644:	4b04      	ldr	r3, [pc, #16]	@ (800c658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	b10a      	cbz	r2, 800c64e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800c64a:	4803      	ldr	r0, [pc, #12]	@ (800c658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800c64c:	4770      	bx	lr
 800c64e:	4a03      	ldr	r2, [pc, #12]	@ (800c65c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800c650:	4801      	ldr	r0, [pc, #4]	@ (800c658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800c652:	6812      	ldr	r2, [r2, #0]
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	4770      	bx	lr
 800c658:	2000062c 	.word	0x2000062c
 800c65c:	200001f4 	.word	0x200001f4

0800c660 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800c660:	f009 bd78 	b.w	8016154 <geometry_msgs__msg__Vector3__init>

0800c664 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800c664:	f009 bd7a 	b.w	801615c <geometry_msgs__msg__Vector3__fini>

0800c668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c668:	4b04      	ldr	r3, [pc, #16]	@ (800c67c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	b10a      	cbz	r2, 800c672 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800c66e:	4803      	ldr	r0, [pc, #12]	@ (800c67c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c670:	4770      	bx	lr
 800c672:	4a03      	ldr	r2, [pc, #12]	@ (800c680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800c674:	4801      	ldr	r0, [pc, #4]	@ (800c67c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c676:	6812      	ldr	r2, [r2, #0]
 800c678:	601a      	str	r2, [r3, #0]
 800c67a:	4770      	bx	lr
 800c67c:	200006ec 	.word	0x200006ec
 800c680:	200001f4 	.word	0x200001f4

0800c684 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800c684:	b1f0      	cbz	r0, 800c6c4 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800c686:	b570      	push	{r4, r5, r6, lr}
 800c688:	460d      	mov	r5, r1
 800c68a:	4628      	mov	r0, r5
 800c68c:	2108      	movs	r1, #8
 800c68e:	f002 f91f 	bl	800e8d0 <ucdr_alignment>
 800c692:	f105 0308 	add.w	r3, r5, #8
 800c696:	181e      	adds	r6, r3, r0
 800c698:	2108      	movs	r1, #8
 800c69a:	4630      	mov	r0, r6
 800c69c:	f002 f918 	bl	800e8d0 <ucdr_alignment>
 800c6a0:	f100 0408 	add.w	r4, r0, #8
 800c6a4:	4434      	add	r4, r6
 800c6a6:	2108      	movs	r1, #8
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f002 f911 	bl	800e8d0 <ucdr_alignment>
 800c6ae:	3008      	adds	r0, #8
 800c6b0:	4404      	add	r4, r0
 800c6b2:	2108      	movs	r1, #8
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f002 f90b 	bl	800e8d0 <ucdr_alignment>
 800c6ba:	f1c5 0508 	rsb	r5, r5, #8
 800c6be:	4428      	add	r0, r5
 800c6c0:	4420      	add	r0, r4
 800c6c2:	bd70      	pop	{r4, r5, r6, pc}
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop

0800c6c8 <_Quaternion__cdr_deserialize>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	b199      	cbz	r1, 800c6f6 <_Quaternion__cdr_deserialize+0x2e>
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	f001 ff12 	bl	800e4f8 <ucdr_deserialize_double>
 800c6d4:	f104 0108 	add.w	r1, r4, #8
 800c6d8:	4628      	mov	r0, r5
 800c6da:	f001 ff0d 	bl	800e4f8 <ucdr_deserialize_double>
 800c6de:	f104 0110 	add.w	r1, r4, #16
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	f001 ff08 	bl	800e4f8 <ucdr_deserialize_double>
 800c6e8:	f104 0118 	add.w	r1, r4, #24
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6f2:	f001 bf01 	b.w	800e4f8 <ucdr_deserialize_double>
 800c6f6:	4608      	mov	r0, r1
 800c6f8:	bd38      	pop	{r3, r4, r5, pc}
 800c6fa:	bf00      	nop

0800c6fc <_Quaternion__cdr_serialize>:
 800c6fc:	b1c0      	cbz	r0, 800c730 <_Quaternion__cdr_serialize+0x34>
 800c6fe:	b538      	push	{r3, r4, r5, lr}
 800c700:	ed90 0b00 	vldr	d0, [r0]
 800c704:	460d      	mov	r5, r1
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	f001 fd53 	bl	800e1b4 <ucdr_serialize_double>
 800c70e:	ed94 0b02 	vldr	d0, [r4, #8]
 800c712:	4628      	mov	r0, r5
 800c714:	f001 fd4e 	bl	800e1b4 <ucdr_serialize_double>
 800c718:	ed94 0b04 	vldr	d0, [r4, #16]
 800c71c:	4628      	mov	r0, r5
 800c71e:	f001 fd49 	bl	800e1b4 <ucdr_serialize_double>
 800c722:	ed94 0b06 	vldr	d0, [r4, #24]
 800c726:	4628      	mov	r0, r5
 800c728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c72c:	f001 bd42 	b.w	800e1b4 <ucdr_serialize_double>
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop

0800c734 <_Quaternion__get_serialized_size>:
 800c734:	b1d0      	cbz	r0, 800c76c <_Quaternion__get_serialized_size+0x38>
 800c736:	b538      	push	{r3, r4, r5, lr}
 800c738:	2108      	movs	r1, #8
 800c73a:	2000      	movs	r0, #0
 800c73c:	f002 f8c8 	bl	800e8d0 <ucdr_alignment>
 800c740:	f100 0508 	add.w	r5, r0, #8
 800c744:	2108      	movs	r1, #8
 800c746:	4628      	mov	r0, r5
 800c748:	f002 f8c2 	bl	800e8d0 <ucdr_alignment>
 800c74c:	f100 0408 	add.w	r4, r0, #8
 800c750:	442c      	add	r4, r5
 800c752:	2108      	movs	r1, #8
 800c754:	4620      	mov	r0, r4
 800c756:	f002 f8bb 	bl	800e8d0 <ucdr_alignment>
 800c75a:	3008      	adds	r0, #8
 800c75c:	4404      	add	r4, r0
 800c75e:	2108      	movs	r1, #8
 800c760:	4620      	mov	r0, r4
 800c762:	f002 f8b5 	bl	800e8d0 <ucdr_alignment>
 800c766:	3008      	adds	r0, #8
 800c768:	4420      	add	r0, r4
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop

0800c770 <_Quaternion__max_serialized_size>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	2108      	movs	r1, #8
 800c774:	2000      	movs	r0, #0
 800c776:	f002 f8ab 	bl	800e8d0 <ucdr_alignment>
 800c77a:	f100 0508 	add.w	r5, r0, #8
 800c77e:	2108      	movs	r1, #8
 800c780:	4628      	mov	r0, r5
 800c782:	f002 f8a5 	bl	800e8d0 <ucdr_alignment>
 800c786:	f100 0408 	add.w	r4, r0, #8
 800c78a:	442c      	add	r4, r5
 800c78c:	2108      	movs	r1, #8
 800c78e:	4620      	mov	r0, r4
 800c790:	f002 f89e 	bl	800e8d0 <ucdr_alignment>
 800c794:	3008      	adds	r0, #8
 800c796:	4404      	add	r4, r0
 800c798:	2108      	movs	r1, #8
 800c79a:	4620      	mov	r0, r4
 800c79c:	f002 f898 	bl	800e8d0 <ucdr_alignment>
 800c7a0:	3008      	adds	r0, #8
 800c7a2:	4420      	add	r0, r4
 800c7a4:	bd38      	pop	{r3, r4, r5, pc}
 800c7a6:	bf00      	nop

0800c7a8 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	460c      	mov	r4, r1
 800c7ae:	7003      	strb	r3, [r0, #0]
 800c7b0:	2108      	movs	r1, #8
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f002 f88c 	bl	800e8d0 <ucdr_alignment>
 800c7b8:	f104 0508 	add.w	r5, r4, #8
 800c7bc:	1946      	adds	r6, r0, r5
 800c7be:	2108      	movs	r1, #8
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f002 f885 	bl	800e8d0 <ucdr_alignment>
 800c7c6:	f100 0508 	add.w	r5, r0, #8
 800c7ca:	4435      	add	r5, r6
 800c7cc:	2108      	movs	r1, #8
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f002 f87e 	bl	800e8d0 <ucdr_alignment>
 800c7d4:	3008      	adds	r0, #8
 800c7d6:	4405      	add	r5, r0
 800c7d8:	2108      	movs	r1, #8
 800c7da:	4628      	mov	r0, r5
 800c7dc:	f002 f878 	bl	800e8d0 <ucdr_alignment>
 800c7e0:	f1c4 0408 	rsb	r4, r4, #8
 800c7e4:	4420      	add	r0, r4
 800c7e6:	4428      	add	r0, r5
 800c7e8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ea:	bf00      	nop

0800c7ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800c7ec:	4800      	ldr	r0, [pc, #0]	@ (800c7f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800c7ee:	4770      	bx	lr
 800c7f0:	200006f8 	.word	0x200006f8

0800c7f4 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800c7f4:	b1b8      	cbz	r0, 800c826 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800c7f6:	b538      	push	{r3, r4, r5, lr}
 800c7f8:	460d      	mov	r5, r1
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	2108      	movs	r1, #8
 800c7fe:	f002 f867 	bl	800e8d0 <ucdr_alignment>
 800c802:	f105 0308 	add.w	r3, r5, #8
 800c806:	181c      	adds	r4, r3, r0
 800c808:	2108      	movs	r1, #8
 800c80a:	4620      	mov	r0, r4
 800c80c:	f002 f860 	bl	800e8d0 <ucdr_alignment>
 800c810:	3008      	adds	r0, #8
 800c812:	4404      	add	r4, r0
 800c814:	2108      	movs	r1, #8
 800c816:	4620      	mov	r0, r4
 800c818:	f002 f85a 	bl	800e8d0 <ucdr_alignment>
 800c81c:	f1c5 0508 	rsb	r5, r5, #8
 800c820:	4428      	add	r0, r5
 800c822:	4420      	add	r0, r4
 800c824:	bd38      	pop	{r3, r4, r5, pc}
 800c826:	4770      	bx	lr

0800c828 <_Vector3__cdr_deserialize>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	460c      	mov	r4, r1
 800c82c:	b171      	cbz	r1, 800c84c <_Vector3__cdr_deserialize+0x24>
 800c82e:	4605      	mov	r5, r0
 800c830:	f001 fe62 	bl	800e4f8 <ucdr_deserialize_double>
 800c834:	f104 0108 	add.w	r1, r4, #8
 800c838:	4628      	mov	r0, r5
 800c83a:	f001 fe5d 	bl	800e4f8 <ucdr_deserialize_double>
 800c83e:	f104 0110 	add.w	r1, r4, #16
 800c842:	4628      	mov	r0, r5
 800c844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c848:	f001 be56 	b.w	800e4f8 <ucdr_deserialize_double>
 800c84c:	4608      	mov	r0, r1
 800c84e:	bd38      	pop	{r3, r4, r5, pc}

0800c850 <_Vector3__cdr_serialize>:
 800c850:	b198      	cbz	r0, 800c87a <_Vector3__cdr_serialize+0x2a>
 800c852:	b538      	push	{r3, r4, r5, lr}
 800c854:	ed90 0b00 	vldr	d0, [r0]
 800c858:	460d      	mov	r5, r1
 800c85a:	4604      	mov	r4, r0
 800c85c:	4608      	mov	r0, r1
 800c85e:	f001 fca9 	bl	800e1b4 <ucdr_serialize_double>
 800c862:	ed94 0b02 	vldr	d0, [r4, #8]
 800c866:	4628      	mov	r0, r5
 800c868:	f001 fca4 	bl	800e1b4 <ucdr_serialize_double>
 800c86c:	ed94 0b04 	vldr	d0, [r4, #16]
 800c870:	4628      	mov	r0, r5
 800c872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c876:	f001 bc9d 	b.w	800e1b4 <ucdr_serialize_double>
 800c87a:	4770      	bx	lr

0800c87c <_Vector3__get_serialized_size>:
 800c87c:	b198      	cbz	r0, 800c8a6 <_Vector3__get_serialized_size+0x2a>
 800c87e:	b510      	push	{r4, lr}
 800c880:	2108      	movs	r1, #8
 800c882:	2000      	movs	r0, #0
 800c884:	f002 f824 	bl	800e8d0 <ucdr_alignment>
 800c888:	f100 0408 	add.w	r4, r0, #8
 800c88c:	2108      	movs	r1, #8
 800c88e:	4620      	mov	r0, r4
 800c890:	f002 f81e 	bl	800e8d0 <ucdr_alignment>
 800c894:	3008      	adds	r0, #8
 800c896:	4404      	add	r4, r0
 800c898:	2108      	movs	r1, #8
 800c89a:	4620      	mov	r0, r4
 800c89c:	f002 f818 	bl	800e8d0 <ucdr_alignment>
 800c8a0:	3008      	adds	r0, #8
 800c8a2:	4420      	add	r0, r4
 800c8a4:	bd10      	pop	{r4, pc}
 800c8a6:	4770      	bx	lr

0800c8a8 <_Vector3__max_serialized_size>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	2108      	movs	r1, #8
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	f002 f80f 	bl	800e8d0 <ucdr_alignment>
 800c8b2:	f100 0508 	add.w	r5, r0, #8
 800c8b6:	2108      	movs	r1, #8
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f002 f809 	bl	800e8d0 <ucdr_alignment>
 800c8be:	f100 0408 	add.w	r4, r0, #8
 800c8c2:	442c      	add	r4, r5
 800c8c4:	2108      	movs	r1, #8
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f002 f802 	bl	800e8d0 <ucdr_alignment>
 800c8cc:	3008      	adds	r0, #8
 800c8ce:	4420      	add	r0, r4
 800c8d0:	bd38      	pop	{r3, r4, r5, pc}
 800c8d2:	bf00      	nop

0800c8d4 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800c8d4:	b570      	push	{r4, r5, r6, lr}
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	460c      	mov	r4, r1
 800c8da:	7003      	strb	r3, [r0, #0]
 800c8dc:	2108      	movs	r1, #8
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f001 fff6 	bl	800e8d0 <ucdr_alignment>
 800c8e4:	f104 0508 	add.w	r5, r4, #8
 800c8e8:	1946      	adds	r6, r0, r5
 800c8ea:	2108      	movs	r1, #8
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f001 ffef 	bl	800e8d0 <ucdr_alignment>
 800c8f2:	f100 0508 	add.w	r5, r0, #8
 800c8f6:	4435      	add	r5, r6
 800c8f8:	2108      	movs	r1, #8
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f001 ffe8 	bl	800e8d0 <ucdr_alignment>
 800c900:	f1c4 0408 	rsb	r4, r4, #8
 800c904:	4420      	add	r0, r4
 800c906:	4428      	add	r0, r5
 800c908:	bd70      	pop	{r4, r5, r6, pc}
 800c90a:	bf00      	nop

0800c90c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c90c:	4800      	ldr	r0, [pc, #0]	@ (800c910 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800c90e:	4770      	bx	lr
 800c910:	20000720 	.word	0x20000720

0800c914 <micro_ros_string_utilities_init_with_size>:
 800c914:	b570      	push	{r4, r5, r6, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	1c4c      	adds	r4, r1, #1
 800c91a:	4605      	mov	r5, r0
 800c91c:	a801      	add	r0, sp, #4
 800c91e:	f7fe fdf1 	bl	800b504 <rcutils_get_default_allocator>
 800c922:	9b01      	ldr	r3, [sp, #4]
 800c924:	9905      	ldr	r1, [sp, #20]
 800c926:	4620      	mov	r0, r4
 800c928:	4798      	blx	r3
 800c92a:	4622      	mov	r2, r4
 800c92c:	2100      	movs	r1, #0
 800c92e:	4606      	mov	r6, r0
 800c930:	f00c fa69 	bl	8018e06 <memset>
 800c934:	2300      	movs	r3, #0
 800c936:	4628      	mov	r0, r5
 800c938:	e9c5 6300 	strd	r6, r3, [r5]
 800c93c:	60ac      	str	r4, [r5, #8]
 800c93e:	b006      	add	sp, #24
 800c940:	bd70      	pop	{r4, r5, r6, pc}
 800c942:	bf00      	nop

0800c944 <micro_ros_string_utilities_append>:
 800c944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c948:	b08a      	sub	sp, #40	@ 0x28
 800c94a:	4604      	mov	r4, r0
 800c94c:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800c950:	a801      	add	r0, sp, #4
 800c952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800c956:	a805      	add	r0, sp, #20
 800c958:	f7fe fdd4 	bl	800b504 <rcutils_get_default_allocator>
 800c95c:	4640      	mov	r0, r8
 800c95e:	f7f3 fc4f 	bl	8000200 <strlen>
 800c962:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c966:	9f03      	ldr	r7, [sp, #12]
 800c968:	9d01      	ldr	r5, [sp, #4]
 800c96a:	eb00 0a09 	add.w	sl, r0, r9
 800c96e:	45ba      	cmp	sl, r7
 800c970:	4606      	mov	r6, r0
 800c972:	d307      	bcc.n	800c984 <micro_ros_string_utilities_append+0x40>
 800c974:	f10a 0701 	add.w	r7, sl, #1
 800c978:	4628      	mov	r0, r5
 800c97a:	9b07      	ldr	r3, [sp, #28]
 800c97c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c97e:	4639      	mov	r1, r7
 800c980:	4798      	blx	r3
 800c982:	4605      	mov	r5, r0
 800c984:	1c72      	adds	r2, r6, #1
 800c986:	4641      	mov	r1, r8
 800c988:	eb05 0009 	add.w	r0, r5, r9
 800c98c:	f00c faa3 	bl	8018ed6 <memcpy>
 800c990:	4620      	mov	r0, r4
 800c992:	e9c4 5a00 	strd	r5, sl, [r4]
 800c996:	60a7      	str	r7, [r4, #8]
 800c998:	b00a      	add	sp, #40	@ 0x28
 800c99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c99e:	bf00      	nop

0800c9a0 <micro_ros_string_utilities_remove_tail_chars>:
 800c9a0:	b500      	push	{lr}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	f10d 0e04 	add.w	lr, sp, #4
 800c9a8:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
 800c9ac:	4684      	mov	ip, r0
 800c9ae:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800c9b2:	e88c 000b 	stmia.w	ip, {r0, r1, r3}
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	9906      	ldr	r1, [sp, #24]
 800c9ba:	1a5b      	subs	r3, r3, r1
 800c9bc:	9901      	ldr	r1, [sp, #4]
 800c9be:	f8cc 3004 	str.w	r3, [ip, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	4660      	mov	r0, ip
 800c9c6:	54ca      	strb	r2, [r1, r3]
 800c9c8:	b005      	add	sp, #20
 800c9ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9ce:	bf00      	nop

0800c9d0 <micro_ros_string_utilities_destroy>:
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	b086      	sub	sp, #24
 800c9d6:	a801      	add	r0, sp, #4
 800c9d8:	f7fe fd94 	bl	800b504 <rcutils_get_default_allocator>
 800c9dc:	9b02      	ldr	r3, [sp, #8]
 800c9de:	9905      	ldr	r1, [sp, #20]
 800c9e0:	6820      	ldr	r0, [r4, #0]
 800c9e2:	4798      	blx	r3
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	e9c4 3300 	strd	r3, r3, [r4]
 800c9ea:	60a3      	str	r3, [r4, #8]
 800c9ec:	b006      	add	sp, #24
 800c9ee:	bd10      	pop	{r4, pc}

0800c9f0 <ucdr_serialize_endian_array_char>:
 800c9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	461f      	mov	r7, r3
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	4690      	mov	r8, r2
 800c9fc:	f001 ff10 	bl	800e820 <ucdr_check_buffer_available_for>
 800ca00:	b9e0      	cbnz	r0, 800ca3c <ucdr_serialize_endian_array_char+0x4c>
 800ca02:	463e      	mov	r6, r7
 800ca04:	e009      	b.n	800ca1a <ucdr_serialize_endian_array_char+0x2a>
 800ca06:	68a8      	ldr	r0, [r5, #8]
 800ca08:	f00c fa65 	bl	8018ed6 <memcpy>
 800ca0c:	68ab      	ldr	r3, [r5, #8]
 800ca0e:	6928      	ldr	r0, [r5, #16]
 800ca10:	4423      	add	r3, r4
 800ca12:	4420      	add	r0, r4
 800ca14:	1b36      	subs	r6, r6, r4
 800ca16:	60ab      	str	r3, [r5, #8]
 800ca18:	6128      	str	r0, [r5, #16]
 800ca1a:	4631      	mov	r1, r6
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	4628      	mov	r0, r5
 800ca20:	f001 ff86 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800ca24:	1bb9      	subs	r1, r7, r6
 800ca26:	4441      	add	r1, r8
 800ca28:	4604      	mov	r4, r0
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d1ea      	bne.n	800ca06 <ucdr_serialize_endian_array_char+0x16>
 800ca30:	2301      	movs	r3, #1
 800ca32:	7da8      	ldrb	r0, [r5, #22]
 800ca34:	756b      	strb	r3, [r5, #21]
 800ca36:	4058      	eors	r0, r3
 800ca38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca3c:	463a      	mov	r2, r7
 800ca3e:	68a8      	ldr	r0, [r5, #8]
 800ca40:	4641      	mov	r1, r8
 800ca42:	f00c fa48 	bl	8018ed6 <memcpy>
 800ca46:	68aa      	ldr	r2, [r5, #8]
 800ca48:	692b      	ldr	r3, [r5, #16]
 800ca4a:	443a      	add	r2, r7
 800ca4c:	443b      	add	r3, r7
 800ca4e:	60aa      	str	r2, [r5, #8]
 800ca50:	612b      	str	r3, [r5, #16]
 800ca52:	e7ed      	b.n	800ca30 <ucdr_serialize_endian_array_char+0x40>

0800ca54 <ucdr_deserialize_endian_array_char>:
 800ca54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca58:	4619      	mov	r1, r3
 800ca5a:	461f      	mov	r7, r3
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	4690      	mov	r8, r2
 800ca60:	f001 fede 	bl	800e820 <ucdr_check_buffer_available_for>
 800ca64:	b9e0      	cbnz	r0, 800caa0 <ucdr_deserialize_endian_array_char+0x4c>
 800ca66:	463e      	mov	r6, r7
 800ca68:	e009      	b.n	800ca7e <ucdr_deserialize_endian_array_char+0x2a>
 800ca6a:	68a9      	ldr	r1, [r5, #8]
 800ca6c:	f00c fa33 	bl	8018ed6 <memcpy>
 800ca70:	68ab      	ldr	r3, [r5, #8]
 800ca72:	6928      	ldr	r0, [r5, #16]
 800ca74:	4423      	add	r3, r4
 800ca76:	4420      	add	r0, r4
 800ca78:	1b36      	subs	r6, r6, r4
 800ca7a:	60ab      	str	r3, [r5, #8]
 800ca7c:	6128      	str	r0, [r5, #16]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	4631      	mov	r1, r6
 800ca82:	4628      	mov	r0, r5
 800ca84:	f001 ff54 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800ca88:	4604      	mov	r4, r0
 800ca8a:	1bb8      	subs	r0, r7, r6
 800ca8c:	4440      	add	r0, r8
 800ca8e:	4622      	mov	r2, r4
 800ca90:	2c00      	cmp	r4, #0
 800ca92:	d1ea      	bne.n	800ca6a <ucdr_deserialize_endian_array_char+0x16>
 800ca94:	2301      	movs	r3, #1
 800ca96:	7da8      	ldrb	r0, [r5, #22]
 800ca98:	756b      	strb	r3, [r5, #21]
 800ca9a:	4058      	eors	r0, r3
 800ca9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa0:	463a      	mov	r2, r7
 800caa2:	68a9      	ldr	r1, [r5, #8]
 800caa4:	4640      	mov	r0, r8
 800caa6:	f00c fa16 	bl	8018ed6 <memcpy>
 800caaa:	68aa      	ldr	r2, [r5, #8]
 800caac:	692b      	ldr	r3, [r5, #16]
 800caae:	443a      	add	r2, r7
 800cab0:	443b      	add	r3, r7
 800cab2:	60aa      	str	r2, [r5, #8]
 800cab4:	612b      	str	r3, [r5, #16]
 800cab6:	e7ed      	b.n	800ca94 <ucdr_deserialize_endian_array_char+0x40>

0800cab8 <ucdr_serialize_array_uint8_t>:
 800cab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cabc:	4688      	mov	r8, r1
 800cabe:	4611      	mov	r1, r2
 800cac0:	4617      	mov	r7, r2
 800cac2:	4605      	mov	r5, r0
 800cac4:	f001 feac 	bl	800e820 <ucdr_check_buffer_available_for>
 800cac8:	b9e0      	cbnz	r0, 800cb04 <ucdr_serialize_array_uint8_t+0x4c>
 800caca:	463e      	mov	r6, r7
 800cacc:	e009      	b.n	800cae2 <ucdr_serialize_array_uint8_t+0x2a>
 800cace:	68a8      	ldr	r0, [r5, #8]
 800cad0:	f00c fa01 	bl	8018ed6 <memcpy>
 800cad4:	68aa      	ldr	r2, [r5, #8]
 800cad6:	692b      	ldr	r3, [r5, #16]
 800cad8:	4422      	add	r2, r4
 800cada:	4423      	add	r3, r4
 800cadc:	1b36      	subs	r6, r6, r4
 800cade:	60aa      	str	r2, [r5, #8]
 800cae0:	612b      	str	r3, [r5, #16]
 800cae2:	4631      	mov	r1, r6
 800cae4:	2201      	movs	r2, #1
 800cae6:	4628      	mov	r0, r5
 800cae8:	f001 ff22 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800caec:	1bb9      	subs	r1, r7, r6
 800caee:	4441      	add	r1, r8
 800caf0:	4604      	mov	r4, r0
 800caf2:	4602      	mov	r2, r0
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d1ea      	bne.n	800cace <ucdr_serialize_array_uint8_t+0x16>
 800caf8:	2301      	movs	r3, #1
 800cafa:	7da8      	ldrb	r0, [r5, #22]
 800cafc:	756b      	strb	r3, [r5, #21]
 800cafe:	4058      	eors	r0, r3
 800cb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb04:	463a      	mov	r2, r7
 800cb06:	68a8      	ldr	r0, [r5, #8]
 800cb08:	4641      	mov	r1, r8
 800cb0a:	f00c f9e4 	bl	8018ed6 <memcpy>
 800cb0e:	68aa      	ldr	r2, [r5, #8]
 800cb10:	692b      	ldr	r3, [r5, #16]
 800cb12:	443a      	add	r2, r7
 800cb14:	443b      	add	r3, r7
 800cb16:	60aa      	str	r2, [r5, #8]
 800cb18:	612b      	str	r3, [r5, #16]
 800cb1a:	e7ed      	b.n	800caf8 <ucdr_serialize_array_uint8_t+0x40>

0800cb1c <ucdr_serialize_endian_array_uint8_t>:
 800cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb20:	4619      	mov	r1, r3
 800cb22:	461f      	mov	r7, r3
 800cb24:	4605      	mov	r5, r0
 800cb26:	4690      	mov	r8, r2
 800cb28:	f001 fe7a 	bl	800e820 <ucdr_check_buffer_available_for>
 800cb2c:	b9e0      	cbnz	r0, 800cb68 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800cb2e:	463e      	mov	r6, r7
 800cb30:	e009      	b.n	800cb46 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800cb32:	68a8      	ldr	r0, [r5, #8]
 800cb34:	f00c f9cf 	bl	8018ed6 <memcpy>
 800cb38:	68ab      	ldr	r3, [r5, #8]
 800cb3a:	6928      	ldr	r0, [r5, #16]
 800cb3c:	4423      	add	r3, r4
 800cb3e:	4420      	add	r0, r4
 800cb40:	1b36      	subs	r6, r6, r4
 800cb42:	60ab      	str	r3, [r5, #8]
 800cb44:	6128      	str	r0, [r5, #16]
 800cb46:	4631      	mov	r1, r6
 800cb48:	2201      	movs	r2, #1
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f001 fef0 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800cb50:	1bb9      	subs	r1, r7, r6
 800cb52:	4441      	add	r1, r8
 800cb54:	4604      	mov	r4, r0
 800cb56:	4602      	mov	r2, r0
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d1ea      	bne.n	800cb32 <ucdr_serialize_endian_array_uint8_t+0x16>
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	7da8      	ldrb	r0, [r5, #22]
 800cb60:	756b      	strb	r3, [r5, #21]
 800cb62:	4058      	eors	r0, r3
 800cb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb68:	463a      	mov	r2, r7
 800cb6a:	68a8      	ldr	r0, [r5, #8]
 800cb6c:	4641      	mov	r1, r8
 800cb6e:	f00c f9b2 	bl	8018ed6 <memcpy>
 800cb72:	68aa      	ldr	r2, [r5, #8]
 800cb74:	692b      	ldr	r3, [r5, #16]
 800cb76:	443a      	add	r2, r7
 800cb78:	443b      	add	r3, r7
 800cb7a:	60aa      	str	r2, [r5, #8]
 800cb7c:	612b      	str	r3, [r5, #16]
 800cb7e:	e7ed      	b.n	800cb5c <ucdr_serialize_endian_array_uint8_t+0x40>

0800cb80 <ucdr_deserialize_array_uint8_t>:
 800cb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb84:	4688      	mov	r8, r1
 800cb86:	4611      	mov	r1, r2
 800cb88:	4617      	mov	r7, r2
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	f001 fe48 	bl	800e820 <ucdr_check_buffer_available_for>
 800cb90:	b9e0      	cbnz	r0, 800cbcc <ucdr_deserialize_array_uint8_t+0x4c>
 800cb92:	463e      	mov	r6, r7
 800cb94:	e009      	b.n	800cbaa <ucdr_deserialize_array_uint8_t+0x2a>
 800cb96:	68a9      	ldr	r1, [r5, #8]
 800cb98:	f00c f99d 	bl	8018ed6 <memcpy>
 800cb9c:	68aa      	ldr	r2, [r5, #8]
 800cb9e:	692b      	ldr	r3, [r5, #16]
 800cba0:	4422      	add	r2, r4
 800cba2:	4423      	add	r3, r4
 800cba4:	1b36      	subs	r6, r6, r4
 800cba6:	60aa      	str	r2, [r5, #8]
 800cba8:	612b      	str	r3, [r5, #16]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	4631      	mov	r1, r6
 800cbae:	4628      	mov	r0, r5
 800cbb0:	f001 febe 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	1bb8      	subs	r0, r7, r6
 800cbb8:	4440      	add	r0, r8
 800cbba:	4622      	mov	r2, r4
 800cbbc:	2c00      	cmp	r4, #0
 800cbbe:	d1ea      	bne.n	800cb96 <ucdr_deserialize_array_uint8_t+0x16>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	7da8      	ldrb	r0, [r5, #22]
 800cbc4:	756b      	strb	r3, [r5, #21]
 800cbc6:	4058      	eors	r0, r3
 800cbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbcc:	463a      	mov	r2, r7
 800cbce:	68a9      	ldr	r1, [r5, #8]
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	f00c f980 	bl	8018ed6 <memcpy>
 800cbd6:	68aa      	ldr	r2, [r5, #8]
 800cbd8:	692b      	ldr	r3, [r5, #16]
 800cbda:	443a      	add	r2, r7
 800cbdc:	443b      	add	r3, r7
 800cbde:	60aa      	str	r2, [r5, #8]
 800cbe0:	612b      	str	r3, [r5, #16]
 800cbe2:	e7ed      	b.n	800cbc0 <ucdr_deserialize_array_uint8_t+0x40>

0800cbe4 <ucdr_deserialize_endian_array_uint8_t>:
 800cbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe8:	4619      	mov	r1, r3
 800cbea:	461f      	mov	r7, r3
 800cbec:	4605      	mov	r5, r0
 800cbee:	4690      	mov	r8, r2
 800cbf0:	f001 fe16 	bl	800e820 <ucdr_check_buffer_available_for>
 800cbf4:	b9e0      	cbnz	r0, 800cc30 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800cbf6:	463e      	mov	r6, r7
 800cbf8:	e009      	b.n	800cc0e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800cbfa:	68a9      	ldr	r1, [r5, #8]
 800cbfc:	f00c f96b 	bl	8018ed6 <memcpy>
 800cc00:	68ab      	ldr	r3, [r5, #8]
 800cc02:	6928      	ldr	r0, [r5, #16]
 800cc04:	4423      	add	r3, r4
 800cc06:	4420      	add	r0, r4
 800cc08:	1b36      	subs	r6, r6, r4
 800cc0a:	60ab      	str	r3, [r5, #8]
 800cc0c:	6128      	str	r0, [r5, #16]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	4631      	mov	r1, r6
 800cc12:	4628      	mov	r0, r5
 800cc14:	f001 fe8c 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800cc18:	4604      	mov	r4, r0
 800cc1a:	1bb8      	subs	r0, r7, r6
 800cc1c:	4440      	add	r0, r8
 800cc1e:	4622      	mov	r2, r4
 800cc20:	2c00      	cmp	r4, #0
 800cc22:	d1ea      	bne.n	800cbfa <ucdr_deserialize_endian_array_uint8_t+0x16>
 800cc24:	2301      	movs	r3, #1
 800cc26:	7da8      	ldrb	r0, [r5, #22]
 800cc28:	756b      	strb	r3, [r5, #21]
 800cc2a:	4058      	eors	r0, r3
 800cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc30:	463a      	mov	r2, r7
 800cc32:	68a9      	ldr	r1, [r5, #8]
 800cc34:	4640      	mov	r0, r8
 800cc36:	f00c f94e 	bl	8018ed6 <memcpy>
 800cc3a:	68aa      	ldr	r2, [r5, #8]
 800cc3c:	692b      	ldr	r3, [r5, #16]
 800cc3e:	443a      	add	r2, r7
 800cc40:	443b      	add	r3, r7
 800cc42:	60aa      	str	r2, [r5, #8]
 800cc44:	612b      	str	r3, [r5, #16]
 800cc46:	e7ed      	b.n	800cc24 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800cc48 <ucdr_serialize_array_uint16_t>:
 800cc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4c:	460e      	mov	r6, r1
 800cc4e:	2102      	movs	r1, #2
 800cc50:	4604      	mov	r4, r0
 800cc52:	4617      	mov	r7, r2
 800cc54:	f001 fe44 	bl	800e8e0 <ucdr_buffer_alignment>
 800cc58:	4601      	mov	r1, r0
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	7d65      	ldrb	r5, [r4, #21]
 800cc5e:	f001 fe83 	bl	800e968 <ucdr_advance_buffer>
 800cc62:	7d21      	ldrb	r1, [r4, #20]
 800cc64:	7565      	strb	r5, [r4, #21]
 800cc66:	2901      	cmp	r1, #1
 800cc68:	d011      	beq.n	800cc8e <ucdr_serialize_array_uint16_t+0x46>
 800cc6a:	b15f      	cbz	r7, 800cc84 <ucdr_serialize_array_uint16_t+0x3c>
 800cc6c:	3e02      	subs	r6, #2
 800cc6e:	2500      	movs	r5, #0
 800cc70:	e000      	b.n	800cc74 <ucdr_serialize_array_uint16_t+0x2c>
 800cc72:	7d21      	ldrb	r1, [r4, #20]
 800cc74:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800cc78:	4620      	mov	r0, r4
 800cc7a:	3501      	adds	r5, #1
 800cc7c:	f000 fabe 	bl	800d1fc <ucdr_serialize_endian_uint16_t>
 800cc80:	42af      	cmp	r7, r5
 800cc82:	d1f6      	bne.n	800cc72 <ucdr_serialize_array_uint16_t+0x2a>
 800cc84:	7da0      	ldrb	r0, [r4, #22]
 800cc86:	f080 0001 	eor.w	r0, r0, #1
 800cc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc8e:	007f      	lsls	r7, r7, #1
 800cc90:	4639      	mov	r1, r7
 800cc92:	4620      	mov	r0, r4
 800cc94:	f001 fdc4 	bl	800e820 <ucdr_check_buffer_available_for>
 800cc98:	b9f8      	cbnz	r0, 800ccda <ucdr_serialize_array_uint16_t+0x92>
 800cc9a:	46b8      	mov	r8, r7
 800cc9c:	e00a      	b.n	800ccb4 <ucdr_serialize_array_uint16_t+0x6c>
 800cc9e:	68a0      	ldr	r0, [r4, #8]
 800cca0:	f00c f919 	bl	8018ed6 <memcpy>
 800cca4:	68a2      	ldr	r2, [r4, #8]
 800cca6:	6923      	ldr	r3, [r4, #16]
 800cca8:	442a      	add	r2, r5
 800ccaa:	442b      	add	r3, r5
 800ccac:	eba8 0805 	sub.w	r8, r8, r5
 800ccb0:	60a2      	str	r2, [r4, #8]
 800ccb2:	6123      	str	r3, [r4, #16]
 800ccb4:	4641      	mov	r1, r8
 800ccb6:	2202      	movs	r2, #2
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f001 fe39 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800ccbe:	eba7 0108 	sub.w	r1, r7, r8
 800ccc2:	4431      	add	r1, r6
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d1e8      	bne.n	800cc9e <ucdr_serialize_array_uint16_t+0x56>
 800cccc:	7da0      	ldrb	r0, [r4, #22]
 800ccce:	2302      	movs	r3, #2
 800ccd0:	7563      	strb	r3, [r4, #21]
 800ccd2:	f080 0001 	eor.w	r0, r0, #1
 800ccd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccda:	463a      	mov	r2, r7
 800ccdc:	68a0      	ldr	r0, [r4, #8]
 800ccde:	4631      	mov	r1, r6
 800cce0:	f00c f8f9 	bl	8018ed6 <memcpy>
 800cce4:	68a2      	ldr	r2, [r4, #8]
 800cce6:	6923      	ldr	r3, [r4, #16]
 800cce8:	443a      	add	r2, r7
 800ccea:	441f      	add	r7, r3
 800ccec:	60a2      	str	r2, [r4, #8]
 800ccee:	6127      	str	r7, [r4, #16]
 800ccf0:	e7ec      	b.n	800cccc <ucdr_serialize_array_uint16_t+0x84>
 800ccf2:	bf00      	nop

0800ccf4 <ucdr_deserialize_array_uint16_t>:
 800ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf8:	460e      	mov	r6, r1
 800ccfa:	2102      	movs	r1, #2
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	4617      	mov	r7, r2
 800cd00:	f001 fdee 	bl	800e8e0 <ucdr_buffer_alignment>
 800cd04:	4601      	mov	r1, r0
 800cd06:	4620      	mov	r0, r4
 800cd08:	7d65      	ldrb	r5, [r4, #21]
 800cd0a:	f001 fe2d 	bl	800e968 <ucdr_advance_buffer>
 800cd0e:	7d21      	ldrb	r1, [r4, #20]
 800cd10:	7565      	strb	r5, [r4, #21]
 800cd12:	2901      	cmp	r1, #1
 800cd14:	d011      	beq.n	800cd3a <ucdr_deserialize_array_uint16_t+0x46>
 800cd16:	b15f      	cbz	r7, 800cd30 <ucdr_deserialize_array_uint16_t+0x3c>
 800cd18:	2500      	movs	r5, #0
 800cd1a:	e000      	b.n	800cd1e <ucdr_deserialize_array_uint16_t+0x2a>
 800cd1c:	7d21      	ldrb	r1, [r4, #20]
 800cd1e:	4632      	mov	r2, r6
 800cd20:	4620      	mov	r0, r4
 800cd22:	3501      	adds	r5, #1
 800cd24:	f000 fb5e 	bl	800d3e4 <ucdr_deserialize_endian_uint16_t>
 800cd28:	42af      	cmp	r7, r5
 800cd2a:	f106 0602 	add.w	r6, r6, #2
 800cd2e:	d1f5      	bne.n	800cd1c <ucdr_deserialize_array_uint16_t+0x28>
 800cd30:	7da0      	ldrb	r0, [r4, #22]
 800cd32:	f080 0001 	eor.w	r0, r0, #1
 800cd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd3a:	007f      	lsls	r7, r7, #1
 800cd3c:	4639      	mov	r1, r7
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f001 fd6e 	bl	800e820 <ucdr_check_buffer_available_for>
 800cd44:	b9f8      	cbnz	r0, 800cd86 <ucdr_deserialize_array_uint16_t+0x92>
 800cd46:	46b8      	mov	r8, r7
 800cd48:	e00a      	b.n	800cd60 <ucdr_deserialize_array_uint16_t+0x6c>
 800cd4a:	68a1      	ldr	r1, [r4, #8]
 800cd4c:	f00c f8c3 	bl	8018ed6 <memcpy>
 800cd50:	68a2      	ldr	r2, [r4, #8]
 800cd52:	6923      	ldr	r3, [r4, #16]
 800cd54:	442a      	add	r2, r5
 800cd56:	442b      	add	r3, r5
 800cd58:	eba8 0805 	sub.w	r8, r8, r5
 800cd5c:	60a2      	str	r2, [r4, #8]
 800cd5e:	6123      	str	r3, [r4, #16]
 800cd60:	2202      	movs	r2, #2
 800cd62:	4641      	mov	r1, r8
 800cd64:	4620      	mov	r0, r4
 800cd66:	f001 fde3 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800cd6a:	4605      	mov	r5, r0
 800cd6c:	eba7 0008 	sub.w	r0, r7, r8
 800cd70:	4430      	add	r0, r6
 800cd72:	462a      	mov	r2, r5
 800cd74:	2d00      	cmp	r5, #0
 800cd76:	d1e8      	bne.n	800cd4a <ucdr_deserialize_array_uint16_t+0x56>
 800cd78:	7da0      	ldrb	r0, [r4, #22]
 800cd7a:	2302      	movs	r3, #2
 800cd7c:	7563      	strb	r3, [r4, #21]
 800cd7e:	f080 0001 	eor.w	r0, r0, #1
 800cd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd86:	463a      	mov	r2, r7
 800cd88:	68a1      	ldr	r1, [r4, #8]
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	f00c f8a3 	bl	8018ed6 <memcpy>
 800cd90:	68a2      	ldr	r2, [r4, #8]
 800cd92:	6923      	ldr	r3, [r4, #16]
 800cd94:	443a      	add	r2, r7
 800cd96:	441f      	add	r7, r3
 800cd98:	60a2      	str	r2, [r4, #8]
 800cd9a:	6127      	str	r7, [r4, #16]
 800cd9c:	e7ec      	b.n	800cd78 <ucdr_deserialize_array_uint16_t+0x84>
 800cd9e:	bf00      	nop

0800cda0 <ucdr_serialize_array_float>:
 800cda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda4:	460e      	mov	r6, r1
 800cda6:	2104      	movs	r1, #4
 800cda8:	4604      	mov	r4, r0
 800cdaa:	4617      	mov	r7, r2
 800cdac:	f001 fd98 	bl	800e8e0 <ucdr_buffer_alignment>
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	7d65      	ldrb	r5, [r4, #21]
 800cdb6:	f001 fdd7 	bl	800e968 <ucdr_advance_buffer>
 800cdba:	7d21      	ldrb	r1, [r4, #20]
 800cdbc:	7565      	strb	r5, [r4, #21]
 800cdbe:	2901      	cmp	r1, #1
 800cdc0:	d010      	beq.n	800cde4 <ucdr_serialize_array_float+0x44>
 800cdc2:	b157      	cbz	r7, 800cdda <ucdr_serialize_array_float+0x3a>
 800cdc4:	2500      	movs	r5, #0
 800cdc6:	e000      	b.n	800cdca <ucdr_serialize_array_float+0x2a>
 800cdc8:	7d21      	ldrb	r1, [r4, #20]
 800cdca:	ecb6 0a01 	vldmia	r6!, {s0}
 800cdce:	4620      	mov	r0, r4
 800cdd0:	3501      	adds	r5, #1
 800cdd2:	f001 f8bf 	bl	800df54 <ucdr_serialize_endian_float>
 800cdd6:	42af      	cmp	r7, r5
 800cdd8:	d1f6      	bne.n	800cdc8 <ucdr_serialize_array_float+0x28>
 800cdda:	7da0      	ldrb	r0, [r4, #22]
 800cddc:	f080 0001 	eor.w	r0, r0, #1
 800cde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cde4:	00bf      	lsls	r7, r7, #2
 800cde6:	4639      	mov	r1, r7
 800cde8:	4620      	mov	r0, r4
 800cdea:	f001 fd19 	bl	800e820 <ucdr_check_buffer_available_for>
 800cdee:	b9f8      	cbnz	r0, 800ce30 <ucdr_serialize_array_float+0x90>
 800cdf0:	46b8      	mov	r8, r7
 800cdf2:	e00a      	b.n	800ce0a <ucdr_serialize_array_float+0x6a>
 800cdf4:	68a0      	ldr	r0, [r4, #8]
 800cdf6:	f00c f86e 	bl	8018ed6 <memcpy>
 800cdfa:	68a2      	ldr	r2, [r4, #8]
 800cdfc:	6923      	ldr	r3, [r4, #16]
 800cdfe:	442a      	add	r2, r5
 800ce00:	442b      	add	r3, r5
 800ce02:	eba8 0805 	sub.w	r8, r8, r5
 800ce06:	60a2      	str	r2, [r4, #8]
 800ce08:	6123      	str	r3, [r4, #16]
 800ce0a:	4641      	mov	r1, r8
 800ce0c:	2204      	movs	r2, #4
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f001 fd8e 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800ce14:	eba7 0108 	sub.w	r1, r7, r8
 800ce18:	4431      	add	r1, r6
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d1e8      	bne.n	800cdf4 <ucdr_serialize_array_float+0x54>
 800ce22:	7da0      	ldrb	r0, [r4, #22]
 800ce24:	2304      	movs	r3, #4
 800ce26:	7563      	strb	r3, [r4, #21]
 800ce28:	f080 0001 	eor.w	r0, r0, #1
 800ce2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce30:	463a      	mov	r2, r7
 800ce32:	68a0      	ldr	r0, [r4, #8]
 800ce34:	4631      	mov	r1, r6
 800ce36:	f00c f84e 	bl	8018ed6 <memcpy>
 800ce3a:	68a2      	ldr	r2, [r4, #8]
 800ce3c:	6923      	ldr	r3, [r4, #16]
 800ce3e:	443a      	add	r2, r7
 800ce40:	441f      	add	r7, r3
 800ce42:	60a2      	str	r2, [r4, #8]
 800ce44:	6127      	str	r7, [r4, #16]
 800ce46:	e7ec      	b.n	800ce22 <ucdr_serialize_array_float+0x82>

0800ce48 <ucdr_deserialize_array_float>:
 800ce48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4c:	460e      	mov	r6, r1
 800ce4e:	2104      	movs	r1, #4
 800ce50:	4604      	mov	r4, r0
 800ce52:	4617      	mov	r7, r2
 800ce54:	f001 fd44 	bl	800e8e0 <ucdr_buffer_alignment>
 800ce58:	4601      	mov	r1, r0
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	7d65      	ldrb	r5, [r4, #21]
 800ce5e:	f001 fd83 	bl	800e968 <ucdr_advance_buffer>
 800ce62:	7d21      	ldrb	r1, [r4, #20]
 800ce64:	7565      	strb	r5, [r4, #21]
 800ce66:	2901      	cmp	r1, #1
 800ce68:	d011      	beq.n	800ce8e <ucdr_deserialize_array_float+0x46>
 800ce6a:	b15f      	cbz	r7, 800ce84 <ucdr_deserialize_array_float+0x3c>
 800ce6c:	2500      	movs	r5, #0
 800ce6e:	e000      	b.n	800ce72 <ucdr_deserialize_array_float+0x2a>
 800ce70:	7d21      	ldrb	r1, [r4, #20]
 800ce72:	4632      	mov	r2, r6
 800ce74:	4620      	mov	r0, r4
 800ce76:	3501      	adds	r5, #1
 800ce78:	f001 f906 	bl	800e088 <ucdr_deserialize_endian_float>
 800ce7c:	42af      	cmp	r7, r5
 800ce7e:	f106 0604 	add.w	r6, r6, #4
 800ce82:	d1f5      	bne.n	800ce70 <ucdr_deserialize_array_float+0x28>
 800ce84:	7da0      	ldrb	r0, [r4, #22]
 800ce86:	f080 0001 	eor.w	r0, r0, #1
 800ce8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce8e:	00bf      	lsls	r7, r7, #2
 800ce90:	4639      	mov	r1, r7
 800ce92:	4620      	mov	r0, r4
 800ce94:	f001 fcc4 	bl	800e820 <ucdr_check_buffer_available_for>
 800ce98:	b9f8      	cbnz	r0, 800ceda <ucdr_deserialize_array_float+0x92>
 800ce9a:	46b8      	mov	r8, r7
 800ce9c:	e00a      	b.n	800ceb4 <ucdr_deserialize_array_float+0x6c>
 800ce9e:	68a1      	ldr	r1, [r4, #8]
 800cea0:	f00c f819 	bl	8018ed6 <memcpy>
 800cea4:	68a2      	ldr	r2, [r4, #8]
 800cea6:	6923      	ldr	r3, [r4, #16]
 800cea8:	442a      	add	r2, r5
 800ceaa:	442b      	add	r3, r5
 800ceac:	eba8 0805 	sub.w	r8, r8, r5
 800ceb0:	60a2      	str	r2, [r4, #8]
 800ceb2:	6123      	str	r3, [r4, #16]
 800ceb4:	2204      	movs	r2, #4
 800ceb6:	4641      	mov	r1, r8
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f001 fd39 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800cebe:	4605      	mov	r5, r0
 800cec0:	eba7 0008 	sub.w	r0, r7, r8
 800cec4:	4430      	add	r0, r6
 800cec6:	462a      	mov	r2, r5
 800cec8:	2d00      	cmp	r5, #0
 800ceca:	d1e8      	bne.n	800ce9e <ucdr_deserialize_array_float+0x56>
 800cecc:	7da0      	ldrb	r0, [r4, #22]
 800cece:	2304      	movs	r3, #4
 800ced0:	7563      	strb	r3, [r4, #21]
 800ced2:	f080 0001 	eor.w	r0, r0, #1
 800ced6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceda:	463a      	mov	r2, r7
 800cedc:	68a1      	ldr	r1, [r4, #8]
 800cede:	4630      	mov	r0, r6
 800cee0:	f00b fff9 	bl	8018ed6 <memcpy>
 800cee4:	68a2      	ldr	r2, [r4, #8]
 800cee6:	6923      	ldr	r3, [r4, #16]
 800cee8:	443a      	add	r2, r7
 800ceea:	441f      	add	r7, r3
 800ceec:	60a2      	str	r2, [r4, #8]
 800ceee:	6127      	str	r7, [r4, #16]
 800cef0:	e7ec      	b.n	800cecc <ucdr_deserialize_array_float+0x84>
 800cef2:	bf00      	nop

0800cef4 <ucdr_serialize_array_double>:
 800cef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef8:	460e      	mov	r6, r1
 800cefa:	2108      	movs	r1, #8
 800cefc:	4604      	mov	r4, r0
 800cefe:	4617      	mov	r7, r2
 800cf00:	f001 fcee 	bl	800e8e0 <ucdr_buffer_alignment>
 800cf04:	4601      	mov	r1, r0
 800cf06:	4620      	mov	r0, r4
 800cf08:	7d65      	ldrb	r5, [r4, #21]
 800cf0a:	f001 fd2d 	bl	800e968 <ucdr_advance_buffer>
 800cf0e:	7d21      	ldrb	r1, [r4, #20]
 800cf10:	7565      	strb	r5, [r4, #21]
 800cf12:	2901      	cmp	r1, #1
 800cf14:	d010      	beq.n	800cf38 <ucdr_serialize_array_double+0x44>
 800cf16:	b157      	cbz	r7, 800cf2e <ucdr_serialize_array_double+0x3a>
 800cf18:	2500      	movs	r5, #0
 800cf1a:	e000      	b.n	800cf1e <ucdr_serialize_array_double+0x2a>
 800cf1c:	7d21      	ldrb	r1, [r4, #20]
 800cf1e:	ecb6 0b02 	vldmia	r6!, {d0}
 800cf22:	4620      	mov	r0, r4
 800cf24:	3501      	adds	r5, #1
 800cf26:	f001 fa15 	bl	800e354 <ucdr_serialize_endian_double>
 800cf2a:	42af      	cmp	r7, r5
 800cf2c:	d1f6      	bne.n	800cf1c <ucdr_serialize_array_double+0x28>
 800cf2e:	7da0      	ldrb	r0, [r4, #22]
 800cf30:	f080 0001 	eor.w	r0, r0, #1
 800cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf38:	00ff      	lsls	r7, r7, #3
 800cf3a:	4639      	mov	r1, r7
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f001 fc6f 	bl	800e820 <ucdr_check_buffer_available_for>
 800cf42:	b9f8      	cbnz	r0, 800cf84 <ucdr_serialize_array_double+0x90>
 800cf44:	46b8      	mov	r8, r7
 800cf46:	e00a      	b.n	800cf5e <ucdr_serialize_array_double+0x6a>
 800cf48:	68a0      	ldr	r0, [r4, #8]
 800cf4a:	f00b ffc4 	bl	8018ed6 <memcpy>
 800cf4e:	68a2      	ldr	r2, [r4, #8]
 800cf50:	6923      	ldr	r3, [r4, #16]
 800cf52:	442a      	add	r2, r5
 800cf54:	442b      	add	r3, r5
 800cf56:	eba8 0805 	sub.w	r8, r8, r5
 800cf5a:	60a2      	str	r2, [r4, #8]
 800cf5c:	6123      	str	r3, [r4, #16]
 800cf5e:	4641      	mov	r1, r8
 800cf60:	2208      	movs	r2, #8
 800cf62:	4620      	mov	r0, r4
 800cf64:	f001 fce4 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800cf68:	eba7 0108 	sub.w	r1, r7, r8
 800cf6c:	4431      	add	r1, r6
 800cf6e:	4605      	mov	r5, r0
 800cf70:	4602      	mov	r2, r0
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d1e8      	bne.n	800cf48 <ucdr_serialize_array_double+0x54>
 800cf76:	7da0      	ldrb	r0, [r4, #22]
 800cf78:	2308      	movs	r3, #8
 800cf7a:	7563      	strb	r3, [r4, #21]
 800cf7c:	f080 0001 	eor.w	r0, r0, #1
 800cf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf84:	463a      	mov	r2, r7
 800cf86:	68a0      	ldr	r0, [r4, #8]
 800cf88:	4631      	mov	r1, r6
 800cf8a:	f00b ffa4 	bl	8018ed6 <memcpy>
 800cf8e:	68a2      	ldr	r2, [r4, #8]
 800cf90:	6923      	ldr	r3, [r4, #16]
 800cf92:	443a      	add	r2, r7
 800cf94:	441f      	add	r7, r3
 800cf96:	60a2      	str	r2, [r4, #8]
 800cf98:	6127      	str	r7, [r4, #16]
 800cf9a:	e7ec      	b.n	800cf76 <ucdr_serialize_array_double+0x82>

0800cf9c <ucdr_deserialize_array_double>:
 800cf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa0:	460e      	mov	r6, r1
 800cfa2:	2108      	movs	r1, #8
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	4617      	mov	r7, r2
 800cfa8:	f001 fc9a 	bl	800e8e0 <ucdr_buffer_alignment>
 800cfac:	4601      	mov	r1, r0
 800cfae:	4620      	mov	r0, r4
 800cfb0:	7d65      	ldrb	r5, [r4, #21]
 800cfb2:	f001 fcd9 	bl	800e968 <ucdr_advance_buffer>
 800cfb6:	7d21      	ldrb	r1, [r4, #20]
 800cfb8:	7565      	strb	r5, [r4, #21]
 800cfba:	2901      	cmp	r1, #1
 800cfbc:	d011      	beq.n	800cfe2 <ucdr_deserialize_array_double+0x46>
 800cfbe:	b15f      	cbz	r7, 800cfd8 <ucdr_deserialize_array_double+0x3c>
 800cfc0:	2500      	movs	r5, #0
 800cfc2:	e000      	b.n	800cfc6 <ucdr_deserialize_array_double+0x2a>
 800cfc4:	7d21      	ldrb	r1, [r4, #20]
 800cfc6:	4632      	mov	r2, r6
 800cfc8:	4620      	mov	r0, r4
 800cfca:	3501      	adds	r5, #1
 800cfcc:	f001 fb5a 	bl	800e684 <ucdr_deserialize_endian_double>
 800cfd0:	42af      	cmp	r7, r5
 800cfd2:	f106 0608 	add.w	r6, r6, #8
 800cfd6:	d1f5      	bne.n	800cfc4 <ucdr_deserialize_array_double+0x28>
 800cfd8:	7da0      	ldrb	r0, [r4, #22]
 800cfda:	f080 0001 	eor.w	r0, r0, #1
 800cfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe2:	00ff      	lsls	r7, r7, #3
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f001 fc1a 	bl	800e820 <ucdr_check_buffer_available_for>
 800cfec:	b9f8      	cbnz	r0, 800d02e <ucdr_deserialize_array_double+0x92>
 800cfee:	46b8      	mov	r8, r7
 800cff0:	e00a      	b.n	800d008 <ucdr_deserialize_array_double+0x6c>
 800cff2:	68a1      	ldr	r1, [r4, #8]
 800cff4:	f00b ff6f 	bl	8018ed6 <memcpy>
 800cff8:	68a2      	ldr	r2, [r4, #8]
 800cffa:	6923      	ldr	r3, [r4, #16]
 800cffc:	442a      	add	r2, r5
 800cffe:	442b      	add	r3, r5
 800d000:	eba8 0805 	sub.w	r8, r8, r5
 800d004:	60a2      	str	r2, [r4, #8]
 800d006:	6123      	str	r3, [r4, #16]
 800d008:	2208      	movs	r2, #8
 800d00a:	4641      	mov	r1, r8
 800d00c:	4620      	mov	r0, r4
 800d00e:	f001 fc8f 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800d012:	4605      	mov	r5, r0
 800d014:	eba7 0008 	sub.w	r0, r7, r8
 800d018:	4430      	add	r0, r6
 800d01a:	462a      	mov	r2, r5
 800d01c:	2d00      	cmp	r5, #0
 800d01e:	d1e8      	bne.n	800cff2 <ucdr_deserialize_array_double+0x56>
 800d020:	7da0      	ldrb	r0, [r4, #22]
 800d022:	2308      	movs	r3, #8
 800d024:	7563      	strb	r3, [r4, #21]
 800d026:	f080 0001 	eor.w	r0, r0, #1
 800d02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d02e:	463a      	mov	r2, r7
 800d030:	68a1      	ldr	r1, [r4, #8]
 800d032:	4630      	mov	r0, r6
 800d034:	f00b ff4f 	bl	8018ed6 <memcpy>
 800d038:	68a2      	ldr	r2, [r4, #8]
 800d03a:	6923      	ldr	r3, [r4, #16]
 800d03c:	443a      	add	r2, r7
 800d03e:	441f      	add	r7, r3
 800d040:	60a2      	str	r2, [r4, #8]
 800d042:	6127      	str	r7, [r4, #16]
 800d044:	e7ec      	b.n	800d020 <ucdr_deserialize_array_double+0x84>
 800d046:	bf00      	nop

0800d048 <ucdr_serialize_bool>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	460d      	mov	r5, r1
 800d04c:	2101      	movs	r1, #1
 800d04e:	4604      	mov	r4, r0
 800d050:	f001 fbf2 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d054:	b148      	cbz	r0, 800d06a <ucdr_serialize_bool+0x22>
 800d056:	68a3      	ldr	r3, [r4, #8]
 800d058:	701d      	strb	r5, [r3, #0]
 800d05a:	68a2      	ldr	r2, [r4, #8]
 800d05c:	6923      	ldr	r3, [r4, #16]
 800d05e:	2101      	movs	r1, #1
 800d060:	440a      	add	r2, r1
 800d062:	440b      	add	r3, r1
 800d064:	60a2      	str	r2, [r4, #8]
 800d066:	6123      	str	r3, [r4, #16]
 800d068:	7561      	strb	r1, [r4, #21]
 800d06a:	7da0      	ldrb	r0, [r4, #22]
 800d06c:	f080 0001 	eor.w	r0, r0, #1
 800d070:	bd38      	pop	{r3, r4, r5, pc}
 800d072:	bf00      	nop

0800d074 <ucdr_deserialize_bool>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	460d      	mov	r5, r1
 800d078:	2101      	movs	r1, #1
 800d07a:	4604      	mov	r4, r0
 800d07c:	f001 fbdc 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d080:	b160      	cbz	r0, 800d09c <ucdr_deserialize_bool+0x28>
 800d082:	68a2      	ldr	r2, [r4, #8]
 800d084:	6923      	ldr	r3, [r4, #16]
 800d086:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d08a:	3900      	subs	r1, #0
 800d08c:	bf18      	it	ne
 800d08e:	2101      	movne	r1, #1
 800d090:	7029      	strb	r1, [r5, #0]
 800d092:	3301      	adds	r3, #1
 800d094:	2101      	movs	r1, #1
 800d096:	60a2      	str	r2, [r4, #8]
 800d098:	6123      	str	r3, [r4, #16]
 800d09a:	7561      	strb	r1, [r4, #21]
 800d09c:	7da0      	ldrb	r0, [r4, #22]
 800d09e:	f080 0001 	eor.w	r0, r0, #1
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}

0800d0a4 <ucdr_serialize_uint8_t>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	460d      	mov	r5, r1
 800d0a8:	2101      	movs	r1, #1
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	f001 fbc4 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d0b0:	b148      	cbz	r0, 800d0c6 <ucdr_serialize_uint8_t+0x22>
 800d0b2:	68a3      	ldr	r3, [r4, #8]
 800d0b4:	701d      	strb	r5, [r3, #0]
 800d0b6:	68a2      	ldr	r2, [r4, #8]
 800d0b8:	6923      	ldr	r3, [r4, #16]
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	440a      	add	r2, r1
 800d0be:	440b      	add	r3, r1
 800d0c0:	60a2      	str	r2, [r4, #8]
 800d0c2:	6123      	str	r3, [r4, #16]
 800d0c4:	7561      	strb	r1, [r4, #21]
 800d0c6:	7da0      	ldrb	r0, [r4, #22]
 800d0c8:	f080 0001 	eor.w	r0, r0, #1
 800d0cc:	bd38      	pop	{r3, r4, r5, pc}
 800d0ce:	bf00      	nop

0800d0d0 <ucdr_deserialize_uint8_t>:
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	460d      	mov	r5, r1
 800d0d4:	2101      	movs	r1, #1
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	f001 fbae 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d0dc:	b150      	cbz	r0, 800d0f4 <ucdr_deserialize_uint8_t+0x24>
 800d0de:	68a3      	ldr	r3, [r4, #8]
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	702b      	strb	r3, [r5, #0]
 800d0e4:	68a2      	ldr	r2, [r4, #8]
 800d0e6:	6923      	ldr	r3, [r4, #16]
 800d0e8:	2101      	movs	r1, #1
 800d0ea:	440a      	add	r2, r1
 800d0ec:	440b      	add	r3, r1
 800d0ee:	60a2      	str	r2, [r4, #8]
 800d0f0:	6123      	str	r3, [r4, #16]
 800d0f2:	7561      	strb	r1, [r4, #21]
 800d0f4:	7da0      	ldrb	r0, [r4, #22]
 800d0f6:	f080 0001 	eor.w	r0, r0, #1
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}

0800d0fc <ucdr_serialize_uint16_t>:
 800d0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d100:	b082      	sub	sp, #8
 800d102:	460b      	mov	r3, r1
 800d104:	2102      	movs	r1, #2
 800d106:	4604      	mov	r4, r0
 800d108:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d10c:	f001 fbe8 	bl	800e8e0 <ucdr_buffer_alignment>
 800d110:	4601      	mov	r1, r0
 800d112:	4620      	mov	r0, r4
 800d114:	7d67      	ldrb	r7, [r4, #21]
 800d116:	f001 fc27 	bl	800e968 <ucdr_advance_buffer>
 800d11a:	2102      	movs	r1, #2
 800d11c:	4620      	mov	r0, r4
 800d11e:	f001 fb7f 	bl	800e820 <ucdr_check_buffer_available_for>
 800d122:	bb78      	cbnz	r0, 800d184 <ucdr_serialize_uint16_t+0x88>
 800d124:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d128:	42ab      	cmp	r3, r5
 800d12a:	d926      	bls.n	800d17a <ucdr_serialize_uint16_t+0x7e>
 800d12c:	1b5e      	subs	r6, r3, r5
 800d12e:	60a3      	str	r3, [r4, #8]
 800d130:	6923      	ldr	r3, [r4, #16]
 800d132:	f1c6 0802 	rsb	r8, r6, #2
 800d136:	4433      	add	r3, r6
 800d138:	6123      	str	r3, [r4, #16]
 800d13a:	4641      	mov	r1, r8
 800d13c:	4620      	mov	r0, r4
 800d13e:	f001 fb7b 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d142:	2800      	cmp	r0, #0
 800d144:	d03b      	beq.n	800d1be <ucdr_serialize_uint16_t+0xc2>
 800d146:	7d23      	ldrb	r3, [r4, #20]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d04a      	beq.n	800d1e2 <ucdr_serialize_uint16_t+0xe6>
 800d14c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d150:	702b      	strb	r3, [r5, #0]
 800d152:	2e00      	cmp	r6, #0
 800d154:	d040      	beq.n	800d1d8 <ucdr_serialize_uint16_t+0xdc>
 800d156:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d15a:	706b      	strb	r3, [r5, #1]
 800d15c:	6923      	ldr	r3, [r4, #16]
 800d15e:	68a2      	ldr	r2, [r4, #8]
 800d160:	7da0      	ldrb	r0, [r4, #22]
 800d162:	3302      	adds	r3, #2
 800d164:	1b9e      	subs	r6, r3, r6
 800d166:	4442      	add	r2, r8
 800d168:	2302      	movs	r3, #2
 800d16a:	f080 0001 	eor.w	r0, r0, #1
 800d16e:	60a2      	str	r2, [r4, #8]
 800d170:	6126      	str	r6, [r4, #16]
 800d172:	7563      	strb	r3, [r4, #21]
 800d174:	b002      	add	sp, #8
 800d176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d17a:	2102      	movs	r1, #2
 800d17c:	4620      	mov	r0, r4
 800d17e:	f001 fb5b 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d182:	b190      	cbz	r0, 800d1aa <ucdr_serialize_uint16_t+0xae>
 800d184:	7d23      	ldrb	r3, [r4, #20]
 800d186:	2b01      	cmp	r3, #1
 800d188:	68a3      	ldr	r3, [r4, #8]
 800d18a:	d014      	beq.n	800d1b6 <ucdr_serialize_uint16_t+0xba>
 800d18c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d190:	701a      	strb	r2, [r3, #0]
 800d192:	68a3      	ldr	r3, [r4, #8]
 800d194:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d198:	705a      	strb	r2, [r3, #1]
 800d19a:	68a2      	ldr	r2, [r4, #8]
 800d19c:	6923      	ldr	r3, [r4, #16]
 800d19e:	3202      	adds	r2, #2
 800d1a0:	3302      	adds	r3, #2
 800d1a2:	2102      	movs	r1, #2
 800d1a4:	60a2      	str	r2, [r4, #8]
 800d1a6:	6123      	str	r3, [r4, #16]
 800d1a8:	7561      	strb	r1, [r4, #21]
 800d1aa:	7da0      	ldrb	r0, [r4, #22]
 800d1ac:	f080 0001 	eor.w	r0, r0, #1
 800d1b0:	b002      	add	sp, #8
 800d1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d1ba:	801a      	strh	r2, [r3, #0]
 800d1bc:	e7ed      	b.n	800d19a <ucdr_serialize_uint16_t+0x9e>
 800d1be:	68a2      	ldr	r2, [r4, #8]
 800d1c0:	6923      	ldr	r3, [r4, #16]
 800d1c2:	7da0      	ldrb	r0, [r4, #22]
 800d1c4:	7567      	strb	r7, [r4, #21]
 800d1c6:	1b92      	subs	r2, r2, r6
 800d1c8:	1b9b      	subs	r3, r3, r6
 800d1ca:	f080 0001 	eor.w	r0, r0, #1
 800d1ce:	60a2      	str	r2, [r4, #8]
 800d1d0:	6123      	str	r3, [r4, #16]
 800d1d2:	b002      	add	sp, #8
 800d1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d8:	68a3      	ldr	r3, [r4, #8]
 800d1da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d1de:	701a      	strb	r2, [r3, #0]
 800d1e0:	e7bc      	b.n	800d15c <ucdr_serialize_uint16_t+0x60>
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	f10d 0506 	add.w	r5, sp, #6
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	4632      	mov	r2, r6
 800d1ec:	f00b fe73 	bl	8018ed6 <memcpy>
 800d1f0:	68a0      	ldr	r0, [r4, #8]
 800d1f2:	4642      	mov	r2, r8
 800d1f4:	19a9      	adds	r1, r5, r6
 800d1f6:	f00b fe6e 	bl	8018ed6 <memcpy>
 800d1fa:	e7af      	b.n	800d15c <ucdr_serialize_uint16_t+0x60>

0800d1fc <ucdr_serialize_endian_uint16_t>:
 800d1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d200:	b083      	sub	sp, #12
 800d202:	460d      	mov	r5, r1
 800d204:	2102      	movs	r1, #2
 800d206:	4604      	mov	r4, r0
 800d208:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d20c:	f001 fb68 	bl	800e8e0 <ucdr_buffer_alignment>
 800d210:	4601      	mov	r1, r0
 800d212:	4620      	mov	r0, r4
 800d214:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d218:	f001 fba6 	bl	800e968 <ucdr_advance_buffer>
 800d21c:	2102      	movs	r1, #2
 800d21e:	4620      	mov	r0, r4
 800d220:	f001 fafe 	bl	800e820 <ucdr_check_buffer_available_for>
 800d224:	bb70      	cbnz	r0, 800d284 <ucdr_serialize_endian_uint16_t+0x88>
 800d226:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d22a:	42be      	cmp	r6, r7
 800d22c:	d925      	bls.n	800d27a <ucdr_serialize_endian_uint16_t+0x7e>
 800d22e:	6923      	ldr	r3, [r4, #16]
 800d230:	60a6      	str	r6, [r4, #8]
 800d232:	1bf6      	subs	r6, r6, r7
 800d234:	4433      	add	r3, r6
 800d236:	f1c6 0902 	rsb	r9, r6, #2
 800d23a:	6123      	str	r3, [r4, #16]
 800d23c:	4649      	mov	r1, r9
 800d23e:	4620      	mov	r0, r4
 800d240:	f001 fafa 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d244:	2800      	cmp	r0, #0
 800d246:	d039      	beq.n	800d2bc <ucdr_serialize_endian_uint16_t+0xc0>
 800d248:	2d01      	cmp	r5, #1
 800d24a:	d04a      	beq.n	800d2e2 <ucdr_serialize_endian_uint16_t+0xe6>
 800d24c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d250:	703b      	strb	r3, [r7, #0]
 800d252:	2e00      	cmp	r6, #0
 800d254:	d040      	beq.n	800d2d8 <ucdr_serialize_endian_uint16_t+0xdc>
 800d256:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d25a:	707b      	strb	r3, [r7, #1]
 800d25c:	6923      	ldr	r3, [r4, #16]
 800d25e:	68a2      	ldr	r2, [r4, #8]
 800d260:	7da0      	ldrb	r0, [r4, #22]
 800d262:	3302      	adds	r3, #2
 800d264:	444a      	add	r2, r9
 800d266:	1b9b      	subs	r3, r3, r6
 800d268:	2102      	movs	r1, #2
 800d26a:	f080 0001 	eor.w	r0, r0, #1
 800d26e:	60a2      	str	r2, [r4, #8]
 800d270:	6123      	str	r3, [r4, #16]
 800d272:	7561      	strb	r1, [r4, #21]
 800d274:	b003      	add	sp, #12
 800d276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d27a:	2102      	movs	r1, #2
 800d27c:	4620      	mov	r0, r4
 800d27e:	f001 fadb 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d282:	b188      	cbz	r0, 800d2a8 <ucdr_serialize_endian_uint16_t+0xac>
 800d284:	2d01      	cmp	r5, #1
 800d286:	68a3      	ldr	r3, [r4, #8]
 800d288:	d014      	beq.n	800d2b4 <ucdr_serialize_endian_uint16_t+0xb8>
 800d28a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d28e:	701a      	strb	r2, [r3, #0]
 800d290:	68a3      	ldr	r3, [r4, #8]
 800d292:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d296:	705a      	strb	r2, [r3, #1]
 800d298:	68a2      	ldr	r2, [r4, #8]
 800d29a:	6923      	ldr	r3, [r4, #16]
 800d29c:	3202      	adds	r2, #2
 800d29e:	3302      	adds	r3, #2
 800d2a0:	2102      	movs	r1, #2
 800d2a2:	60a2      	str	r2, [r4, #8]
 800d2a4:	6123      	str	r3, [r4, #16]
 800d2a6:	7561      	strb	r1, [r4, #21]
 800d2a8:	7da0      	ldrb	r0, [r4, #22]
 800d2aa:	f080 0001 	eor.w	r0, r0, #1
 800d2ae:	b003      	add	sp, #12
 800d2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d2b8:	801a      	strh	r2, [r3, #0]
 800d2ba:	e7ed      	b.n	800d298 <ucdr_serialize_endian_uint16_t+0x9c>
 800d2bc:	68a2      	ldr	r2, [r4, #8]
 800d2be:	6923      	ldr	r3, [r4, #16]
 800d2c0:	7da0      	ldrb	r0, [r4, #22]
 800d2c2:	f884 8015 	strb.w	r8, [r4, #21]
 800d2c6:	1b92      	subs	r2, r2, r6
 800d2c8:	1b9b      	subs	r3, r3, r6
 800d2ca:	f080 0001 	eor.w	r0, r0, #1
 800d2ce:	60a2      	str	r2, [r4, #8]
 800d2d0:	6123      	str	r3, [r4, #16]
 800d2d2:	b003      	add	sp, #12
 800d2d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2d8:	68a3      	ldr	r3, [r4, #8]
 800d2da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d2de:	701a      	strb	r2, [r3, #0]
 800d2e0:	e7bc      	b.n	800d25c <ucdr_serialize_endian_uint16_t+0x60>
 800d2e2:	f10d 0506 	add.w	r5, sp, #6
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	4632      	mov	r2, r6
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	f00b fdf3 	bl	8018ed6 <memcpy>
 800d2f0:	68a0      	ldr	r0, [r4, #8]
 800d2f2:	464a      	mov	r2, r9
 800d2f4:	19a9      	adds	r1, r5, r6
 800d2f6:	f00b fdee 	bl	8018ed6 <memcpy>
 800d2fa:	e7af      	b.n	800d25c <ucdr_serialize_endian_uint16_t+0x60>

0800d2fc <ucdr_deserialize_uint16_t>:
 800d2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d300:	460d      	mov	r5, r1
 800d302:	2102      	movs	r1, #2
 800d304:	4604      	mov	r4, r0
 800d306:	f001 faeb 	bl	800e8e0 <ucdr_buffer_alignment>
 800d30a:	4601      	mov	r1, r0
 800d30c:	4620      	mov	r0, r4
 800d30e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d312:	f001 fb29 	bl	800e968 <ucdr_advance_buffer>
 800d316:	2102      	movs	r1, #2
 800d318:	4620      	mov	r0, r4
 800d31a:	f001 fa81 	bl	800e820 <ucdr_check_buffer_available_for>
 800d31e:	bb60      	cbnz	r0, 800d37a <ucdr_deserialize_uint16_t+0x7e>
 800d320:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d324:	42be      	cmp	r6, r7
 800d326:	d923      	bls.n	800d370 <ucdr_deserialize_uint16_t+0x74>
 800d328:	6923      	ldr	r3, [r4, #16]
 800d32a:	60a6      	str	r6, [r4, #8]
 800d32c:	1bf6      	subs	r6, r6, r7
 800d32e:	4433      	add	r3, r6
 800d330:	f1c6 0902 	rsb	r9, r6, #2
 800d334:	6123      	str	r3, [r4, #16]
 800d336:	4649      	mov	r1, r9
 800d338:	4620      	mov	r0, r4
 800d33a:	f001 fa7d 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d034      	beq.n	800d3ac <ucdr_deserialize_uint16_t+0xb0>
 800d342:	7d23      	ldrb	r3, [r4, #20]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d042      	beq.n	800d3ce <ucdr_deserialize_uint16_t+0xd2>
 800d348:	787b      	ldrb	r3, [r7, #1]
 800d34a:	702b      	strb	r3, [r5, #0]
 800d34c:	2e00      	cmp	r6, #0
 800d34e:	d03a      	beq.n	800d3c6 <ucdr_deserialize_uint16_t+0xca>
 800d350:	783b      	ldrb	r3, [r7, #0]
 800d352:	706b      	strb	r3, [r5, #1]
 800d354:	6923      	ldr	r3, [r4, #16]
 800d356:	68a2      	ldr	r2, [r4, #8]
 800d358:	7da0      	ldrb	r0, [r4, #22]
 800d35a:	2102      	movs	r1, #2
 800d35c:	3302      	adds	r3, #2
 800d35e:	444a      	add	r2, r9
 800d360:	1b9b      	subs	r3, r3, r6
 800d362:	7561      	strb	r1, [r4, #21]
 800d364:	60a2      	str	r2, [r4, #8]
 800d366:	6123      	str	r3, [r4, #16]
 800d368:	f080 0001 	eor.w	r0, r0, #1
 800d36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d370:	2102      	movs	r1, #2
 800d372:	4620      	mov	r0, r4
 800d374:	f001 fa60 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d378:	b180      	cbz	r0, 800d39c <ucdr_deserialize_uint16_t+0xa0>
 800d37a:	7d23      	ldrb	r3, [r4, #20]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	68a3      	ldr	r3, [r4, #8]
 800d380:	d011      	beq.n	800d3a6 <ucdr_deserialize_uint16_t+0xaa>
 800d382:	785b      	ldrb	r3, [r3, #1]
 800d384:	702b      	strb	r3, [r5, #0]
 800d386:	68a3      	ldr	r3, [r4, #8]
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	706b      	strb	r3, [r5, #1]
 800d38c:	68a2      	ldr	r2, [r4, #8]
 800d38e:	6923      	ldr	r3, [r4, #16]
 800d390:	3202      	adds	r2, #2
 800d392:	3302      	adds	r3, #2
 800d394:	2102      	movs	r1, #2
 800d396:	60a2      	str	r2, [r4, #8]
 800d398:	6123      	str	r3, [r4, #16]
 800d39a:	7561      	strb	r1, [r4, #21]
 800d39c:	7da0      	ldrb	r0, [r4, #22]
 800d39e:	f080 0001 	eor.w	r0, r0, #1
 800d3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3a6:	881b      	ldrh	r3, [r3, #0]
 800d3a8:	802b      	strh	r3, [r5, #0]
 800d3aa:	e7ef      	b.n	800d38c <ucdr_deserialize_uint16_t+0x90>
 800d3ac:	68a2      	ldr	r2, [r4, #8]
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	7da0      	ldrb	r0, [r4, #22]
 800d3b2:	f884 8015 	strb.w	r8, [r4, #21]
 800d3b6:	1b92      	subs	r2, r2, r6
 800d3b8:	1b9b      	subs	r3, r3, r6
 800d3ba:	60a2      	str	r2, [r4, #8]
 800d3bc:	6123      	str	r3, [r4, #16]
 800d3be:	f080 0001 	eor.w	r0, r0, #1
 800d3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3c6:	68a3      	ldr	r3, [r4, #8]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	706b      	strb	r3, [r5, #1]
 800d3cc:	e7c2      	b.n	800d354 <ucdr_deserialize_uint16_t+0x58>
 800d3ce:	4639      	mov	r1, r7
 800d3d0:	4632      	mov	r2, r6
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	f00b fd7f 	bl	8018ed6 <memcpy>
 800d3d8:	68a1      	ldr	r1, [r4, #8]
 800d3da:	464a      	mov	r2, r9
 800d3dc:	19a8      	adds	r0, r5, r6
 800d3de:	f00b fd7a 	bl	8018ed6 <memcpy>
 800d3e2:	e7b7      	b.n	800d354 <ucdr_deserialize_uint16_t+0x58>

0800d3e4 <ucdr_deserialize_endian_uint16_t>:
 800d3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e8:	460e      	mov	r6, r1
 800d3ea:	2102      	movs	r1, #2
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	4615      	mov	r5, r2
 800d3f0:	f001 fa76 	bl	800e8e0 <ucdr_buffer_alignment>
 800d3f4:	4601      	mov	r1, r0
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d3fc:	f001 fab4 	bl	800e968 <ucdr_advance_buffer>
 800d400:	2102      	movs	r1, #2
 800d402:	4620      	mov	r0, r4
 800d404:	f001 fa0c 	bl	800e820 <ucdr_check_buffer_available_for>
 800d408:	bb70      	cbnz	r0, 800d468 <ucdr_deserialize_endian_uint16_t+0x84>
 800d40a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d40e:	4547      	cmp	r7, r8
 800d410:	d925      	bls.n	800d45e <ucdr_deserialize_endian_uint16_t+0x7a>
 800d412:	6923      	ldr	r3, [r4, #16]
 800d414:	60a7      	str	r7, [r4, #8]
 800d416:	eba7 0708 	sub.w	r7, r7, r8
 800d41a:	443b      	add	r3, r7
 800d41c:	f1c7 0a02 	rsb	sl, r7, #2
 800d420:	6123      	str	r3, [r4, #16]
 800d422:	4651      	mov	r1, sl
 800d424:	4620      	mov	r0, r4
 800d426:	f001 fa07 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d034      	beq.n	800d498 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d42e:	2e01      	cmp	r6, #1
 800d430:	d043      	beq.n	800d4ba <ucdr_deserialize_endian_uint16_t+0xd6>
 800d432:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d436:	702b      	strb	r3, [r5, #0]
 800d438:	2f00      	cmp	r7, #0
 800d43a:	d03a      	beq.n	800d4b2 <ucdr_deserialize_endian_uint16_t+0xce>
 800d43c:	f898 3000 	ldrb.w	r3, [r8]
 800d440:	706b      	strb	r3, [r5, #1]
 800d442:	6923      	ldr	r3, [r4, #16]
 800d444:	68a2      	ldr	r2, [r4, #8]
 800d446:	7da0      	ldrb	r0, [r4, #22]
 800d448:	2102      	movs	r1, #2
 800d44a:	3302      	adds	r3, #2
 800d44c:	4452      	add	r2, sl
 800d44e:	1bdb      	subs	r3, r3, r7
 800d450:	7561      	strb	r1, [r4, #21]
 800d452:	60a2      	str	r2, [r4, #8]
 800d454:	6123      	str	r3, [r4, #16]
 800d456:	f080 0001 	eor.w	r0, r0, #1
 800d45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45e:	2102      	movs	r1, #2
 800d460:	4620      	mov	r0, r4
 800d462:	f001 f9e9 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d466:	b178      	cbz	r0, 800d488 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d468:	2e01      	cmp	r6, #1
 800d46a:	68a3      	ldr	r3, [r4, #8]
 800d46c:	d011      	beq.n	800d492 <ucdr_deserialize_endian_uint16_t+0xae>
 800d46e:	785b      	ldrb	r3, [r3, #1]
 800d470:	702b      	strb	r3, [r5, #0]
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	706b      	strb	r3, [r5, #1]
 800d478:	68a2      	ldr	r2, [r4, #8]
 800d47a:	6923      	ldr	r3, [r4, #16]
 800d47c:	3202      	adds	r2, #2
 800d47e:	3302      	adds	r3, #2
 800d480:	2102      	movs	r1, #2
 800d482:	60a2      	str	r2, [r4, #8]
 800d484:	6123      	str	r3, [r4, #16]
 800d486:	7561      	strb	r1, [r4, #21]
 800d488:	7da0      	ldrb	r0, [r4, #22]
 800d48a:	f080 0001 	eor.w	r0, r0, #1
 800d48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d492:	881b      	ldrh	r3, [r3, #0]
 800d494:	802b      	strh	r3, [r5, #0]
 800d496:	e7ef      	b.n	800d478 <ucdr_deserialize_endian_uint16_t+0x94>
 800d498:	68a2      	ldr	r2, [r4, #8]
 800d49a:	6923      	ldr	r3, [r4, #16]
 800d49c:	7da0      	ldrb	r0, [r4, #22]
 800d49e:	f884 9015 	strb.w	r9, [r4, #21]
 800d4a2:	1bd2      	subs	r2, r2, r7
 800d4a4:	1bdb      	subs	r3, r3, r7
 800d4a6:	60a2      	str	r2, [r4, #8]
 800d4a8:	6123      	str	r3, [r4, #16]
 800d4aa:	f080 0001 	eor.w	r0, r0, #1
 800d4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b2:	68a3      	ldr	r3, [r4, #8]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	706b      	strb	r3, [r5, #1]
 800d4b8:	e7c3      	b.n	800d442 <ucdr_deserialize_endian_uint16_t+0x5e>
 800d4ba:	4641      	mov	r1, r8
 800d4bc:	463a      	mov	r2, r7
 800d4be:	4628      	mov	r0, r5
 800d4c0:	f00b fd09 	bl	8018ed6 <memcpy>
 800d4c4:	68a1      	ldr	r1, [r4, #8]
 800d4c6:	4652      	mov	r2, sl
 800d4c8:	19e8      	adds	r0, r5, r7
 800d4ca:	f00b fd04 	bl	8018ed6 <memcpy>
 800d4ce:	e7b8      	b.n	800d442 <ucdr_deserialize_endian_uint16_t+0x5e>

0800d4d0 <ucdr_serialize_uint32_t>:
 800d4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	9101      	str	r1, [sp, #4]
 800d4da:	2104      	movs	r1, #4
 800d4dc:	f001 fa00 	bl	800e8e0 <ucdr_buffer_alignment>
 800d4e0:	4601      	mov	r1, r0
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	7d67      	ldrb	r7, [r4, #21]
 800d4e6:	f001 fa3f 	bl	800e968 <ucdr_advance_buffer>
 800d4ea:	2104      	movs	r1, #4
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f001 f997 	bl	800e820 <ucdr_check_buffer_available_for>
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d139      	bne.n	800d56a <ucdr_serialize_uint32_t+0x9a>
 800d4f6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d4fa:	42ab      	cmp	r3, r5
 800d4fc:	d930      	bls.n	800d560 <ucdr_serialize_uint32_t+0x90>
 800d4fe:	1b5e      	subs	r6, r3, r5
 800d500:	60a3      	str	r3, [r4, #8]
 800d502:	6923      	ldr	r3, [r4, #16]
 800d504:	f1c6 0804 	rsb	r8, r6, #4
 800d508:	4433      	add	r3, r6
 800d50a:	6123      	str	r3, [r4, #16]
 800d50c:	4641      	mov	r1, r8
 800d50e:	4620      	mov	r0, r4
 800d510:	f001 f992 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d514:	2800      	cmp	r0, #0
 800d516:	d04c      	beq.n	800d5b2 <ucdr_serialize_uint32_t+0xe2>
 800d518:	7d23      	ldrb	r3, [r4, #20]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d063      	beq.n	800d5e6 <ucdr_serialize_uint32_t+0x116>
 800d51e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d522:	702b      	strb	r3, [r5, #0]
 800d524:	2e00      	cmp	r6, #0
 800d526:	d051      	beq.n	800d5cc <ucdr_serialize_uint32_t+0xfc>
 800d528:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d52c:	706b      	strb	r3, [r5, #1]
 800d52e:	2e01      	cmp	r6, #1
 800d530:	d050      	beq.n	800d5d4 <ucdr_serialize_uint32_t+0x104>
 800d532:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d536:	70ab      	strb	r3, [r5, #2]
 800d538:	2e02      	cmp	r6, #2
 800d53a:	d04f      	beq.n	800d5dc <ucdr_serialize_uint32_t+0x10c>
 800d53c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d540:	70eb      	strb	r3, [r5, #3]
 800d542:	6923      	ldr	r3, [r4, #16]
 800d544:	68a2      	ldr	r2, [r4, #8]
 800d546:	7da0      	ldrb	r0, [r4, #22]
 800d548:	3304      	adds	r3, #4
 800d54a:	1b9e      	subs	r6, r3, r6
 800d54c:	4442      	add	r2, r8
 800d54e:	2304      	movs	r3, #4
 800d550:	f080 0001 	eor.w	r0, r0, #1
 800d554:	60a2      	str	r2, [r4, #8]
 800d556:	6126      	str	r6, [r4, #16]
 800d558:	7563      	strb	r3, [r4, #21]
 800d55a:	b002      	add	sp, #8
 800d55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d560:	2104      	movs	r1, #4
 800d562:	4620      	mov	r0, r4
 800d564:	f001 f968 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d568:	b1d0      	cbz	r0, 800d5a0 <ucdr_serialize_uint32_t+0xd0>
 800d56a:	7d23      	ldrb	r3, [r4, #20]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	68a3      	ldr	r3, [r4, #8]
 800d570:	d01c      	beq.n	800d5ac <ucdr_serialize_uint32_t+0xdc>
 800d572:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d576:	701a      	strb	r2, [r3, #0]
 800d578:	68a3      	ldr	r3, [r4, #8]
 800d57a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d57e:	705a      	strb	r2, [r3, #1]
 800d580:	68a3      	ldr	r3, [r4, #8]
 800d582:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d586:	709a      	strb	r2, [r3, #2]
 800d588:	68a3      	ldr	r3, [r4, #8]
 800d58a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d58e:	70da      	strb	r2, [r3, #3]
 800d590:	68a2      	ldr	r2, [r4, #8]
 800d592:	6923      	ldr	r3, [r4, #16]
 800d594:	3204      	adds	r2, #4
 800d596:	3304      	adds	r3, #4
 800d598:	2104      	movs	r1, #4
 800d59a:	60a2      	str	r2, [r4, #8]
 800d59c:	6123      	str	r3, [r4, #16]
 800d59e:	7561      	strb	r1, [r4, #21]
 800d5a0:	7da0      	ldrb	r0, [r4, #22]
 800d5a2:	f080 0001 	eor.w	r0, r0, #1
 800d5a6:	b002      	add	sp, #8
 800d5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ac:	9a01      	ldr	r2, [sp, #4]
 800d5ae:	601a      	str	r2, [r3, #0]
 800d5b0:	e7ee      	b.n	800d590 <ucdr_serialize_uint32_t+0xc0>
 800d5b2:	68a2      	ldr	r2, [r4, #8]
 800d5b4:	6923      	ldr	r3, [r4, #16]
 800d5b6:	7da0      	ldrb	r0, [r4, #22]
 800d5b8:	7567      	strb	r7, [r4, #21]
 800d5ba:	1b92      	subs	r2, r2, r6
 800d5bc:	1b9b      	subs	r3, r3, r6
 800d5be:	f080 0001 	eor.w	r0, r0, #1
 800d5c2:	60a2      	str	r2, [r4, #8]
 800d5c4:	6123      	str	r3, [r4, #16]
 800d5c6:	b002      	add	sp, #8
 800d5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5cc:	68a3      	ldr	r3, [r4, #8]
 800d5ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5d2:	701a      	strb	r2, [r3, #0]
 800d5d4:	68a3      	ldr	r3, [r4, #8]
 800d5d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d5da:	701a      	strb	r2, [r3, #0]
 800d5dc:	68a3      	ldr	r3, [r4, #8]
 800d5de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d5e2:	701a      	strb	r2, [r3, #0]
 800d5e4:	e7ad      	b.n	800d542 <ucdr_serialize_uint32_t+0x72>
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	ad01      	add	r5, sp, #4
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	f00b fc72 	bl	8018ed6 <memcpy>
 800d5f2:	68a0      	ldr	r0, [r4, #8]
 800d5f4:	4642      	mov	r2, r8
 800d5f6:	19a9      	adds	r1, r5, r6
 800d5f8:	f00b fc6d 	bl	8018ed6 <memcpy>
 800d5fc:	e7a1      	b.n	800d542 <ucdr_serialize_uint32_t+0x72>
 800d5fe:	bf00      	nop

0800d600 <ucdr_serialize_endian_uint32_t>:
 800d600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d604:	b083      	sub	sp, #12
 800d606:	460d      	mov	r5, r1
 800d608:	2104      	movs	r1, #4
 800d60a:	4604      	mov	r4, r0
 800d60c:	9201      	str	r2, [sp, #4]
 800d60e:	f001 f967 	bl	800e8e0 <ucdr_buffer_alignment>
 800d612:	4601      	mov	r1, r0
 800d614:	4620      	mov	r0, r4
 800d616:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d61a:	f001 f9a5 	bl	800e968 <ucdr_advance_buffer>
 800d61e:	2104      	movs	r1, #4
 800d620:	4620      	mov	r0, r4
 800d622:	f001 f8fd 	bl	800e820 <ucdr_check_buffer_available_for>
 800d626:	2800      	cmp	r0, #0
 800d628:	d138      	bne.n	800d69c <ucdr_serialize_endian_uint32_t+0x9c>
 800d62a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d62e:	42b7      	cmp	r7, r6
 800d630:	d92f      	bls.n	800d692 <ucdr_serialize_endian_uint32_t+0x92>
 800d632:	6923      	ldr	r3, [r4, #16]
 800d634:	60a7      	str	r7, [r4, #8]
 800d636:	1bbf      	subs	r7, r7, r6
 800d638:	443b      	add	r3, r7
 800d63a:	f1c7 0904 	rsb	r9, r7, #4
 800d63e:	6123      	str	r3, [r4, #16]
 800d640:	4649      	mov	r1, r9
 800d642:	4620      	mov	r0, r4
 800d644:	f001 f8f8 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d648:	2800      	cmp	r0, #0
 800d64a:	d04a      	beq.n	800d6e2 <ucdr_serialize_endian_uint32_t+0xe2>
 800d64c:	2d01      	cmp	r5, #1
 800d64e:	d063      	beq.n	800d718 <ucdr_serialize_endian_uint32_t+0x118>
 800d650:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d654:	7033      	strb	r3, [r6, #0]
 800d656:	2f00      	cmp	r7, #0
 800d658:	d051      	beq.n	800d6fe <ucdr_serialize_endian_uint32_t+0xfe>
 800d65a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d65e:	7073      	strb	r3, [r6, #1]
 800d660:	2f01      	cmp	r7, #1
 800d662:	d050      	beq.n	800d706 <ucdr_serialize_endian_uint32_t+0x106>
 800d664:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d668:	70b3      	strb	r3, [r6, #2]
 800d66a:	2f02      	cmp	r7, #2
 800d66c:	d04f      	beq.n	800d70e <ucdr_serialize_endian_uint32_t+0x10e>
 800d66e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d672:	70f3      	strb	r3, [r6, #3]
 800d674:	6923      	ldr	r3, [r4, #16]
 800d676:	68a2      	ldr	r2, [r4, #8]
 800d678:	7da0      	ldrb	r0, [r4, #22]
 800d67a:	3304      	adds	r3, #4
 800d67c:	444a      	add	r2, r9
 800d67e:	1bdb      	subs	r3, r3, r7
 800d680:	2104      	movs	r1, #4
 800d682:	f080 0001 	eor.w	r0, r0, #1
 800d686:	60a2      	str	r2, [r4, #8]
 800d688:	6123      	str	r3, [r4, #16]
 800d68a:	7561      	strb	r1, [r4, #21]
 800d68c:	b003      	add	sp, #12
 800d68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d692:	2104      	movs	r1, #4
 800d694:	4620      	mov	r0, r4
 800d696:	f001 f8cf 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d69a:	b1c8      	cbz	r0, 800d6d0 <ucdr_serialize_endian_uint32_t+0xd0>
 800d69c:	2d01      	cmp	r5, #1
 800d69e:	68a3      	ldr	r3, [r4, #8]
 800d6a0:	d01c      	beq.n	800d6dc <ucdr_serialize_endian_uint32_t+0xdc>
 800d6a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d6a6:	701a      	strb	r2, [r3, #0]
 800d6a8:	68a3      	ldr	r3, [r4, #8]
 800d6aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6ae:	705a      	strb	r2, [r3, #1]
 800d6b0:	68a3      	ldr	r3, [r4, #8]
 800d6b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d6b6:	709a      	strb	r2, [r3, #2]
 800d6b8:	68a3      	ldr	r3, [r4, #8]
 800d6ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6be:	70da      	strb	r2, [r3, #3]
 800d6c0:	68a2      	ldr	r2, [r4, #8]
 800d6c2:	6923      	ldr	r3, [r4, #16]
 800d6c4:	3204      	adds	r2, #4
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	2104      	movs	r1, #4
 800d6ca:	60a2      	str	r2, [r4, #8]
 800d6cc:	6123      	str	r3, [r4, #16]
 800d6ce:	7561      	strb	r1, [r4, #21]
 800d6d0:	7da0      	ldrb	r0, [r4, #22]
 800d6d2:	f080 0001 	eor.w	r0, r0, #1
 800d6d6:	b003      	add	sp, #12
 800d6d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6dc:	9a01      	ldr	r2, [sp, #4]
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	e7ee      	b.n	800d6c0 <ucdr_serialize_endian_uint32_t+0xc0>
 800d6e2:	68a2      	ldr	r2, [r4, #8]
 800d6e4:	6923      	ldr	r3, [r4, #16]
 800d6e6:	7da0      	ldrb	r0, [r4, #22]
 800d6e8:	f884 8015 	strb.w	r8, [r4, #21]
 800d6ec:	1bd2      	subs	r2, r2, r7
 800d6ee:	1bdb      	subs	r3, r3, r7
 800d6f0:	f080 0001 	eor.w	r0, r0, #1
 800d6f4:	60a2      	str	r2, [r4, #8]
 800d6f6:	6123      	str	r3, [r4, #16]
 800d6f8:	b003      	add	sp, #12
 800d6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6fe:	68a3      	ldr	r3, [r4, #8]
 800d700:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d704:	701a      	strb	r2, [r3, #0]
 800d706:	68a3      	ldr	r3, [r4, #8]
 800d708:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d70c:	701a      	strb	r2, [r3, #0]
 800d70e:	68a3      	ldr	r3, [r4, #8]
 800d710:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d714:	701a      	strb	r2, [r3, #0]
 800d716:	e7ad      	b.n	800d674 <ucdr_serialize_endian_uint32_t+0x74>
 800d718:	ad01      	add	r5, sp, #4
 800d71a:	4629      	mov	r1, r5
 800d71c:	463a      	mov	r2, r7
 800d71e:	4630      	mov	r0, r6
 800d720:	f00b fbd9 	bl	8018ed6 <memcpy>
 800d724:	68a0      	ldr	r0, [r4, #8]
 800d726:	464a      	mov	r2, r9
 800d728:	19e9      	adds	r1, r5, r7
 800d72a:	f00b fbd4 	bl	8018ed6 <memcpy>
 800d72e:	e7a1      	b.n	800d674 <ucdr_serialize_endian_uint32_t+0x74>

0800d730 <ucdr_deserialize_uint32_t>:
 800d730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d734:	460d      	mov	r5, r1
 800d736:	2104      	movs	r1, #4
 800d738:	4604      	mov	r4, r0
 800d73a:	f001 f8d1 	bl	800e8e0 <ucdr_buffer_alignment>
 800d73e:	4601      	mov	r1, r0
 800d740:	4620      	mov	r0, r4
 800d742:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d746:	f001 f90f 	bl	800e968 <ucdr_advance_buffer>
 800d74a:	2104      	movs	r1, #4
 800d74c:	4620      	mov	r0, r4
 800d74e:	f001 f867 	bl	800e820 <ucdr_check_buffer_available_for>
 800d752:	2800      	cmp	r0, #0
 800d754:	d138      	bne.n	800d7c8 <ucdr_deserialize_uint32_t+0x98>
 800d756:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d75a:	42b7      	cmp	r7, r6
 800d75c:	d92f      	bls.n	800d7be <ucdr_deserialize_uint32_t+0x8e>
 800d75e:	6923      	ldr	r3, [r4, #16]
 800d760:	60a7      	str	r7, [r4, #8]
 800d762:	1bbf      	subs	r7, r7, r6
 800d764:	443b      	add	r3, r7
 800d766:	f1c7 0904 	rsb	r9, r7, #4
 800d76a:	6123      	str	r3, [r4, #16]
 800d76c:	4649      	mov	r1, r9
 800d76e:	4620      	mov	r0, r4
 800d770:	f001 f862 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d774:	2800      	cmp	r0, #0
 800d776:	d046      	beq.n	800d806 <ucdr_deserialize_uint32_t+0xd6>
 800d778:	7d23      	ldrb	r3, [r4, #20]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d05c      	beq.n	800d838 <ucdr_deserialize_uint32_t+0x108>
 800d77e:	78f3      	ldrb	r3, [r6, #3]
 800d780:	702b      	strb	r3, [r5, #0]
 800d782:	2f00      	cmp	r7, #0
 800d784:	d04c      	beq.n	800d820 <ucdr_deserialize_uint32_t+0xf0>
 800d786:	78b3      	ldrb	r3, [r6, #2]
 800d788:	706b      	strb	r3, [r5, #1]
 800d78a:	2f01      	cmp	r7, #1
 800d78c:	f105 0302 	add.w	r3, r5, #2
 800d790:	d04a      	beq.n	800d828 <ucdr_deserialize_uint32_t+0xf8>
 800d792:	7873      	ldrb	r3, [r6, #1]
 800d794:	70ab      	strb	r3, [r5, #2]
 800d796:	2f02      	cmp	r7, #2
 800d798:	f105 0303 	add.w	r3, r5, #3
 800d79c:	d048      	beq.n	800d830 <ucdr_deserialize_uint32_t+0x100>
 800d79e:	7833      	ldrb	r3, [r6, #0]
 800d7a0:	70eb      	strb	r3, [r5, #3]
 800d7a2:	6923      	ldr	r3, [r4, #16]
 800d7a4:	68a2      	ldr	r2, [r4, #8]
 800d7a6:	7da0      	ldrb	r0, [r4, #22]
 800d7a8:	2104      	movs	r1, #4
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	444a      	add	r2, r9
 800d7ae:	1bdb      	subs	r3, r3, r7
 800d7b0:	7561      	strb	r1, [r4, #21]
 800d7b2:	60a2      	str	r2, [r4, #8]
 800d7b4:	6123      	str	r3, [r4, #16]
 800d7b6:	f080 0001 	eor.w	r0, r0, #1
 800d7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7be:	2104      	movs	r1, #4
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f001 f839 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d7c6:	b1b0      	cbz	r0, 800d7f6 <ucdr_deserialize_uint32_t+0xc6>
 800d7c8:	7d23      	ldrb	r3, [r4, #20]
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	68a3      	ldr	r3, [r4, #8]
 800d7ce:	d017      	beq.n	800d800 <ucdr_deserialize_uint32_t+0xd0>
 800d7d0:	78db      	ldrb	r3, [r3, #3]
 800d7d2:	702b      	strb	r3, [r5, #0]
 800d7d4:	68a3      	ldr	r3, [r4, #8]
 800d7d6:	789b      	ldrb	r3, [r3, #2]
 800d7d8:	706b      	strb	r3, [r5, #1]
 800d7da:	68a3      	ldr	r3, [r4, #8]
 800d7dc:	785b      	ldrb	r3, [r3, #1]
 800d7de:	70ab      	strb	r3, [r5, #2]
 800d7e0:	68a3      	ldr	r3, [r4, #8]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	70eb      	strb	r3, [r5, #3]
 800d7e6:	68a2      	ldr	r2, [r4, #8]
 800d7e8:	6923      	ldr	r3, [r4, #16]
 800d7ea:	3204      	adds	r2, #4
 800d7ec:	3304      	adds	r3, #4
 800d7ee:	2104      	movs	r1, #4
 800d7f0:	60a2      	str	r2, [r4, #8]
 800d7f2:	6123      	str	r3, [r4, #16]
 800d7f4:	7561      	strb	r1, [r4, #21]
 800d7f6:	7da0      	ldrb	r0, [r4, #22]
 800d7f8:	f080 0001 	eor.w	r0, r0, #1
 800d7fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	602b      	str	r3, [r5, #0]
 800d804:	e7ef      	b.n	800d7e6 <ucdr_deserialize_uint32_t+0xb6>
 800d806:	68a2      	ldr	r2, [r4, #8]
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	7da0      	ldrb	r0, [r4, #22]
 800d80c:	f884 8015 	strb.w	r8, [r4, #21]
 800d810:	1bd2      	subs	r2, r2, r7
 800d812:	1bdb      	subs	r3, r3, r7
 800d814:	60a2      	str	r2, [r4, #8]
 800d816:	6123      	str	r3, [r4, #16]
 800d818:	f080 0001 	eor.w	r0, r0, #1
 800d81c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d820:	68a3      	ldr	r3, [r4, #8]
 800d822:	789b      	ldrb	r3, [r3, #2]
 800d824:	706b      	strb	r3, [r5, #1]
 800d826:	1cab      	adds	r3, r5, #2
 800d828:	68a2      	ldr	r2, [r4, #8]
 800d82a:	7852      	ldrb	r2, [r2, #1]
 800d82c:	f803 2b01 	strb.w	r2, [r3], #1
 800d830:	68a2      	ldr	r2, [r4, #8]
 800d832:	7812      	ldrb	r2, [r2, #0]
 800d834:	701a      	strb	r2, [r3, #0]
 800d836:	e7b4      	b.n	800d7a2 <ucdr_deserialize_uint32_t+0x72>
 800d838:	4631      	mov	r1, r6
 800d83a:	463a      	mov	r2, r7
 800d83c:	4628      	mov	r0, r5
 800d83e:	f00b fb4a 	bl	8018ed6 <memcpy>
 800d842:	68a1      	ldr	r1, [r4, #8]
 800d844:	464a      	mov	r2, r9
 800d846:	19e8      	adds	r0, r5, r7
 800d848:	f00b fb45 	bl	8018ed6 <memcpy>
 800d84c:	e7a9      	b.n	800d7a2 <ucdr_deserialize_uint32_t+0x72>
 800d84e:	bf00      	nop

0800d850 <ucdr_deserialize_endian_uint32_t>:
 800d850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d854:	460e      	mov	r6, r1
 800d856:	2104      	movs	r1, #4
 800d858:	4604      	mov	r4, r0
 800d85a:	4615      	mov	r5, r2
 800d85c:	f001 f840 	bl	800e8e0 <ucdr_buffer_alignment>
 800d860:	4601      	mov	r1, r0
 800d862:	4620      	mov	r0, r4
 800d864:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d868:	f001 f87e 	bl	800e968 <ucdr_advance_buffer>
 800d86c:	2104      	movs	r1, #4
 800d86e:	4620      	mov	r0, r4
 800d870:	f000 ffd6 	bl	800e820 <ucdr_check_buffer_available_for>
 800d874:	2800      	cmp	r0, #0
 800d876:	d13c      	bne.n	800d8f2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800d878:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d87c:	42bb      	cmp	r3, r7
 800d87e:	d933      	bls.n	800d8e8 <ucdr_deserialize_endian_uint32_t+0x98>
 800d880:	eba3 0807 	sub.w	r8, r3, r7
 800d884:	60a3      	str	r3, [r4, #8]
 800d886:	6923      	ldr	r3, [r4, #16]
 800d888:	f1c8 0a04 	rsb	sl, r8, #4
 800d88c:	4443      	add	r3, r8
 800d88e:	6123      	str	r3, [r4, #16]
 800d890:	4651      	mov	r1, sl
 800d892:	4620      	mov	r0, r4
 800d894:	f000 ffd0 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d898:	2800      	cmp	r0, #0
 800d89a:	d048      	beq.n	800d92e <ucdr_deserialize_endian_uint32_t+0xde>
 800d89c:	2e01      	cmp	r6, #1
 800d89e:	d061      	beq.n	800d964 <ucdr_deserialize_endian_uint32_t+0x114>
 800d8a0:	78fb      	ldrb	r3, [r7, #3]
 800d8a2:	702b      	strb	r3, [r5, #0]
 800d8a4:	f1b8 0f00 	cmp.w	r8, #0
 800d8a8:	d050      	beq.n	800d94c <ucdr_deserialize_endian_uint32_t+0xfc>
 800d8aa:	78bb      	ldrb	r3, [r7, #2]
 800d8ac:	706b      	strb	r3, [r5, #1]
 800d8ae:	f1b8 0f01 	cmp.w	r8, #1
 800d8b2:	f105 0302 	add.w	r3, r5, #2
 800d8b6:	d04d      	beq.n	800d954 <ucdr_deserialize_endian_uint32_t+0x104>
 800d8b8:	787b      	ldrb	r3, [r7, #1]
 800d8ba:	70ab      	strb	r3, [r5, #2]
 800d8bc:	f1b8 0f02 	cmp.w	r8, #2
 800d8c0:	f105 0303 	add.w	r3, r5, #3
 800d8c4:	d04a      	beq.n	800d95c <ucdr_deserialize_endian_uint32_t+0x10c>
 800d8c6:	783b      	ldrb	r3, [r7, #0]
 800d8c8:	70eb      	strb	r3, [r5, #3]
 800d8ca:	6923      	ldr	r3, [r4, #16]
 800d8cc:	68a2      	ldr	r2, [r4, #8]
 800d8ce:	7da0      	ldrb	r0, [r4, #22]
 800d8d0:	2104      	movs	r1, #4
 800d8d2:	3304      	adds	r3, #4
 800d8d4:	4452      	add	r2, sl
 800d8d6:	eba3 0308 	sub.w	r3, r3, r8
 800d8da:	7561      	strb	r1, [r4, #21]
 800d8dc:	60a2      	str	r2, [r4, #8]
 800d8de:	6123      	str	r3, [r4, #16]
 800d8e0:	f080 0001 	eor.w	r0, r0, #1
 800d8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e8:	2104      	movs	r1, #4
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f000 ffa4 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d8f0:	b1a8      	cbz	r0, 800d91e <ucdr_deserialize_endian_uint32_t+0xce>
 800d8f2:	2e01      	cmp	r6, #1
 800d8f4:	68a3      	ldr	r3, [r4, #8]
 800d8f6:	d017      	beq.n	800d928 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d8f8:	78db      	ldrb	r3, [r3, #3]
 800d8fa:	702b      	strb	r3, [r5, #0]
 800d8fc:	68a3      	ldr	r3, [r4, #8]
 800d8fe:	789b      	ldrb	r3, [r3, #2]
 800d900:	706b      	strb	r3, [r5, #1]
 800d902:	68a3      	ldr	r3, [r4, #8]
 800d904:	785b      	ldrb	r3, [r3, #1]
 800d906:	70ab      	strb	r3, [r5, #2]
 800d908:	68a3      	ldr	r3, [r4, #8]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	70eb      	strb	r3, [r5, #3]
 800d90e:	68a2      	ldr	r2, [r4, #8]
 800d910:	6923      	ldr	r3, [r4, #16]
 800d912:	3204      	adds	r2, #4
 800d914:	3304      	adds	r3, #4
 800d916:	2104      	movs	r1, #4
 800d918:	60a2      	str	r2, [r4, #8]
 800d91a:	6123      	str	r3, [r4, #16]
 800d91c:	7561      	strb	r1, [r4, #21]
 800d91e:	7da0      	ldrb	r0, [r4, #22]
 800d920:	f080 0001 	eor.w	r0, r0, #1
 800d924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	602b      	str	r3, [r5, #0]
 800d92c:	e7ef      	b.n	800d90e <ucdr_deserialize_endian_uint32_t+0xbe>
 800d92e:	68a2      	ldr	r2, [r4, #8]
 800d930:	6923      	ldr	r3, [r4, #16]
 800d932:	7da0      	ldrb	r0, [r4, #22]
 800d934:	f884 9015 	strb.w	r9, [r4, #21]
 800d938:	eba2 0208 	sub.w	r2, r2, r8
 800d93c:	eba3 0308 	sub.w	r3, r3, r8
 800d940:	60a2      	str	r2, [r4, #8]
 800d942:	6123      	str	r3, [r4, #16]
 800d944:	f080 0001 	eor.w	r0, r0, #1
 800d948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94c:	68a3      	ldr	r3, [r4, #8]
 800d94e:	789b      	ldrb	r3, [r3, #2]
 800d950:	706b      	strb	r3, [r5, #1]
 800d952:	1cab      	adds	r3, r5, #2
 800d954:	68a2      	ldr	r2, [r4, #8]
 800d956:	7852      	ldrb	r2, [r2, #1]
 800d958:	f803 2b01 	strb.w	r2, [r3], #1
 800d95c:	68a2      	ldr	r2, [r4, #8]
 800d95e:	7812      	ldrb	r2, [r2, #0]
 800d960:	701a      	strb	r2, [r3, #0]
 800d962:	e7b2      	b.n	800d8ca <ucdr_deserialize_endian_uint32_t+0x7a>
 800d964:	4639      	mov	r1, r7
 800d966:	4642      	mov	r2, r8
 800d968:	4628      	mov	r0, r5
 800d96a:	f00b fab4 	bl	8018ed6 <memcpy>
 800d96e:	68a1      	ldr	r1, [r4, #8]
 800d970:	4652      	mov	r2, sl
 800d972:	eb05 0008 	add.w	r0, r5, r8
 800d976:	f00b faae 	bl	8018ed6 <memcpy>
 800d97a:	e7a6      	b.n	800d8ca <ucdr_deserialize_endian_uint32_t+0x7a>

0800d97c <ucdr_serialize_uint64_t>:
 800d97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d980:	2108      	movs	r1, #8
 800d982:	b082      	sub	sp, #8
 800d984:	4604      	mov	r4, r0
 800d986:	e9cd 2300 	strd	r2, r3, [sp]
 800d98a:	f000 ffa9 	bl	800e8e0 <ucdr_buffer_alignment>
 800d98e:	4601      	mov	r1, r0
 800d990:	4620      	mov	r0, r4
 800d992:	7d67      	ldrb	r7, [r4, #21]
 800d994:	f000 ffe8 	bl	800e968 <ucdr_advance_buffer>
 800d998:	2108      	movs	r1, #8
 800d99a:	4620      	mov	r0, r4
 800d99c:	f000 ff40 	bl	800e820 <ucdr_check_buffer_available_for>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d14e      	bne.n	800da42 <ucdr_serialize_uint64_t+0xc6>
 800d9a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d9a8:	42ab      	cmp	r3, r5
 800d9aa:	d945      	bls.n	800da38 <ucdr_serialize_uint64_t+0xbc>
 800d9ac:	1b5e      	subs	r6, r3, r5
 800d9ae:	60a3      	str	r3, [r4, #8]
 800d9b0:	6923      	ldr	r3, [r4, #16]
 800d9b2:	f1c6 0808 	rsb	r8, r6, #8
 800d9b6:	4433      	add	r3, r6
 800d9b8:	6123      	str	r3, [r4, #16]
 800d9ba:	4641      	mov	r1, r8
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f000 ff3b 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	d074      	beq.n	800dab0 <ucdr_serialize_uint64_t+0x134>
 800d9c6:	7d23      	ldrb	r3, [r4, #20]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	f000 809b 	beq.w	800db04 <ucdr_serialize_uint64_t+0x188>
 800d9ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d9d2:	702b      	strb	r3, [r5, #0]
 800d9d4:	2e00      	cmp	r6, #0
 800d9d6:	d078      	beq.n	800daca <ucdr_serialize_uint64_t+0x14e>
 800d9d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d9dc:	706b      	strb	r3, [r5, #1]
 800d9de:	2e01      	cmp	r6, #1
 800d9e0:	d077      	beq.n	800dad2 <ucdr_serialize_uint64_t+0x156>
 800d9e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9e6:	70ab      	strb	r3, [r5, #2]
 800d9e8:	2e02      	cmp	r6, #2
 800d9ea:	d076      	beq.n	800dada <ucdr_serialize_uint64_t+0x15e>
 800d9ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d9f0:	70eb      	strb	r3, [r5, #3]
 800d9f2:	2e03      	cmp	r6, #3
 800d9f4:	d075      	beq.n	800dae2 <ucdr_serialize_uint64_t+0x166>
 800d9f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d9fa:	712b      	strb	r3, [r5, #4]
 800d9fc:	2e04      	cmp	r6, #4
 800d9fe:	d074      	beq.n	800daea <ucdr_serialize_uint64_t+0x16e>
 800da00:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800da04:	716b      	strb	r3, [r5, #5]
 800da06:	2e05      	cmp	r6, #5
 800da08:	d073      	beq.n	800daf2 <ucdr_serialize_uint64_t+0x176>
 800da0a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800da0e:	71ab      	strb	r3, [r5, #6]
 800da10:	2e06      	cmp	r6, #6
 800da12:	d072      	beq.n	800dafa <ucdr_serialize_uint64_t+0x17e>
 800da14:	f89d 3000 	ldrb.w	r3, [sp]
 800da18:	71eb      	strb	r3, [r5, #7]
 800da1a:	6923      	ldr	r3, [r4, #16]
 800da1c:	68a2      	ldr	r2, [r4, #8]
 800da1e:	7da0      	ldrb	r0, [r4, #22]
 800da20:	3308      	adds	r3, #8
 800da22:	1b9e      	subs	r6, r3, r6
 800da24:	4442      	add	r2, r8
 800da26:	2308      	movs	r3, #8
 800da28:	f080 0001 	eor.w	r0, r0, #1
 800da2c:	60a2      	str	r2, [r4, #8]
 800da2e:	6126      	str	r6, [r4, #16]
 800da30:	7563      	strb	r3, [r4, #21]
 800da32:	b002      	add	sp, #8
 800da34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da38:	2108      	movs	r1, #8
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 fefc 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800da40:	b350      	cbz	r0, 800da98 <ucdr_serialize_uint64_t+0x11c>
 800da42:	7d23      	ldrb	r3, [r4, #20]
 800da44:	2b01      	cmp	r3, #1
 800da46:	d02d      	beq.n	800daa4 <ucdr_serialize_uint64_t+0x128>
 800da48:	68a3      	ldr	r3, [r4, #8]
 800da4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800da4e:	701a      	strb	r2, [r3, #0]
 800da50:	68a3      	ldr	r3, [r4, #8]
 800da52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da56:	705a      	strb	r2, [r3, #1]
 800da58:	68a3      	ldr	r3, [r4, #8]
 800da5a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da5e:	709a      	strb	r2, [r3, #2]
 800da60:	68a3      	ldr	r3, [r4, #8]
 800da62:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da66:	70da      	strb	r2, [r3, #3]
 800da68:	68a3      	ldr	r3, [r4, #8]
 800da6a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800da6e:	711a      	strb	r2, [r3, #4]
 800da70:	68a3      	ldr	r3, [r4, #8]
 800da72:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800da76:	715a      	strb	r2, [r3, #5]
 800da78:	68a3      	ldr	r3, [r4, #8]
 800da7a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800da7e:	719a      	strb	r2, [r3, #6]
 800da80:	68a3      	ldr	r3, [r4, #8]
 800da82:	f89d 2000 	ldrb.w	r2, [sp]
 800da86:	71da      	strb	r2, [r3, #7]
 800da88:	68a2      	ldr	r2, [r4, #8]
 800da8a:	6923      	ldr	r3, [r4, #16]
 800da8c:	3208      	adds	r2, #8
 800da8e:	3308      	adds	r3, #8
 800da90:	2108      	movs	r1, #8
 800da92:	60a2      	str	r2, [r4, #8]
 800da94:	6123      	str	r3, [r4, #16]
 800da96:	7561      	strb	r1, [r4, #21]
 800da98:	7da0      	ldrb	r0, [r4, #22]
 800da9a:	f080 0001 	eor.w	r0, r0, #1
 800da9e:	b002      	add	sp, #8
 800daa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa4:	466b      	mov	r3, sp
 800daa6:	cb03      	ldmia	r3!, {r0, r1}
 800daa8:	68a3      	ldr	r3, [r4, #8]
 800daaa:	6018      	str	r0, [r3, #0]
 800daac:	6059      	str	r1, [r3, #4]
 800daae:	e7eb      	b.n	800da88 <ucdr_serialize_uint64_t+0x10c>
 800dab0:	68a2      	ldr	r2, [r4, #8]
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	7da0      	ldrb	r0, [r4, #22]
 800dab6:	7567      	strb	r7, [r4, #21]
 800dab8:	1b92      	subs	r2, r2, r6
 800daba:	1b9b      	subs	r3, r3, r6
 800dabc:	f080 0001 	eor.w	r0, r0, #1
 800dac0:	60a2      	str	r2, [r4, #8]
 800dac2:	6123      	str	r3, [r4, #16]
 800dac4:	b002      	add	sp, #8
 800dac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daca:	68a3      	ldr	r3, [r4, #8]
 800dacc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dad0:	701a      	strb	r2, [r3, #0]
 800dad2:	68a3      	ldr	r3, [r4, #8]
 800dad4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dad8:	701a      	strb	r2, [r3, #0]
 800dada:	68a3      	ldr	r3, [r4, #8]
 800dadc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dae0:	701a      	strb	r2, [r3, #0]
 800dae2:	68a3      	ldr	r3, [r4, #8]
 800dae4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dae8:	701a      	strb	r2, [r3, #0]
 800daea:	68a3      	ldr	r3, [r4, #8]
 800daec:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800daf0:	701a      	strb	r2, [r3, #0]
 800daf2:	68a3      	ldr	r3, [r4, #8]
 800daf4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800daf8:	701a      	strb	r2, [r3, #0]
 800dafa:	68a3      	ldr	r3, [r4, #8]
 800dafc:	f89d 2000 	ldrb.w	r2, [sp]
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	e78a      	b.n	800da1a <ucdr_serialize_uint64_t+0x9e>
 800db04:	4628      	mov	r0, r5
 800db06:	466d      	mov	r5, sp
 800db08:	4629      	mov	r1, r5
 800db0a:	4632      	mov	r2, r6
 800db0c:	f00b f9e3 	bl	8018ed6 <memcpy>
 800db10:	68a0      	ldr	r0, [r4, #8]
 800db12:	4642      	mov	r2, r8
 800db14:	19a9      	adds	r1, r5, r6
 800db16:	f00b f9de 	bl	8018ed6 <memcpy>
 800db1a:	e77e      	b.n	800da1a <ucdr_serialize_uint64_t+0x9e>

0800db1c <ucdr_serialize_int16_t>:
 800db1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db20:	b082      	sub	sp, #8
 800db22:	460b      	mov	r3, r1
 800db24:	2102      	movs	r1, #2
 800db26:	4604      	mov	r4, r0
 800db28:	f8ad 3006 	strh.w	r3, [sp, #6]
 800db2c:	f000 fed8 	bl	800e8e0 <ucdr_buffer_alignment>
 800db30:	4601      	mov	r1, r0
 800db32:	4620      	mov	r0, r4
 800db34:	7d67      	ldrb	r7, [r4, #21]
 800db36:	f000 ff17 	bl	800e968 <ucdr_advance_buffer>
 800db3a:	2102      	movs	r1, #2
 800db3c:	4620      	mov	r0, r4
 800db3e:	f000 fe6f 	bl	800e820 <ucdr_check_buffer_available_for>
 800db42:	bb78      	cbnz	r0, 800dba4 <ucdr_serialize_int16_t+0x88>
 800db44:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800db48:	42ab      	cmp	r3, r5
 800db4a:	d926      	bls.n	800db9a <ucdr_serialize_int16_t+0x7e>
 800db4c:	1b5e      	subs	r6, r3, r5
 800db4e:	60a3      	str	r3, [r4, #8]
 800db50:	6923      	ldr	r3, [r4, #16]
 800db52:	f1c6 0802 	rsb	r8, r6, #2
 800db56:	4433      	add	r3, r6
 800db58:	6123      	str	r3, [r4, #16]
 800db5a:	4641      	mov	r1, r8
 800db5c:	4620      	mov	r0, r4
 800db5e:	f000 fe6b 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800db62:	2800      	cmp	r0, #0
 800db64:	d03b      	beq.n	800dbde <ucdr_serialize_int16_t+0xc2>
 800db66:	7d23      	ldrb	r3, [r4, #20]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d04a      	beq.n	800dc02 <ucdr_serialize_int16_t+0xe6>
 800db6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800db70:	702b      	strb	r3, [r5, #0]
 800db72:	2e00      	cmp	r6, #0
 800db74:	d040      	beq.n	800dbf8 <ucdr_serialize_int16_t+0xdc>
 800db76:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800db7a:	706b      	strb	r3, [r5, #1]
 800db7c:	6923      	ldr	r3, [r4, #16]
 800db7e:	68a2      	ldr	r2, [r4, #8]
 800db80:	7da0      	ldrb	r0, [r4, #22]
 800db82:	3302      	adds	r3, #2
 800db84:	1b9e      	subs	r6, r3, r6
 800db86:	4442      	add	r2, r8
 800db88:	2302      	movs	r3, #2
 800db8a:	f080 0001 	eor.w	r0, r0, #1
 800db8e:	60a2      	str	r2, [r4, #8]
 800db90:	6126      	str	r6, [r4, #16]
 800db92:	7563      	strb	r3, [r4, #21]
 800db94:	b002      	add	sp, #8
 800db96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db9a:	2102      	movs	r1, #2
 800db9c:	4620      	mov	r0, r4
 800db9e:	f000 fe4b 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800dba2:	b190      	cbz	r0, 800dbca <ucdr_serialize_int16_t+0xae>
 800dba4:	7d23      	ldrb	r3, [r4, #20]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	68a3      	ldr	r3, [r4, #8]
 800dbaa:	d014      	beq.n	800dbd6 <ucdr_serialize_int16_t+0xba>
 800dbac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dbb0:	701a      	strb	r2, [r3, #0]
 800dbb2:	68a3      	ldr	r3, [r4, #8]
 800dbb4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dbb8:	705a      	strb	r2, [r3, #1]
 800dbba:	68a2      	ldr	r2, [r4, #8]
 800dbbc:	6923      	ldr	r3, [r4, #16]
 800dbbe:	3202      	adds	r2, #2
 800dbc0:	3302      	adds	r3, #2
 800dbc2:	2102      	movs	r1, #2
 800dbc4:	60a2      	str	r2, [r4, #8]
 800dbc6:	6123      	str	r3, [r4, #16]
 800dbc8:	7561      	strb	r1, [r4, #21]
 800dbca:	7da0      	ldrb	r0, [r4, #22]
 800dbcc:	f080 0001 	eor.w	r0, r0, #1
 800dbd0:	b002      	add	sp, #8
 800dbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dbda:	801a      	strh	r2, [r3, #0]
 800dbdc:	e7ed      	b.n	800dbba <ucdr_serialize_int16_t+0x9e>
 800dbde:	68a2      	ldr	r2, [r4, #8]
 800dbe0:	6923      	ldr	r3, [r4, #16]
 800dbe2:	7da0      	ldrb	r0, [r4, #22]
 800dbe4:	7567      	strb	r7, [r4, #21]
 800dbe6:	1b92      	subs	r2, r2, r6
 800dbe8:	1b9b      	subs	r3, r3, r6
 800dbea:	f080 0001 	eor.w	r0, r0, #1
 800dbee:	60a2      	str	r2, [r4, #8]
 800dbf0:	6123      	str	r3, [r4, #16]
 800dbf2:	b002      	add	sp, #8
 800dbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbf8:	68a3      	ldr	r3, [r4, #8]
 800dbfa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dbfe:	701a      	strb	r2, [r3, #0]
 800dc00:	e7bc      	b.n	800db7c <ucdr_serialize_int16_t+0x60>
 800dc02:	4628      	mov	r0, r5
 800dc04:	f10d 0506 	add.w	r5, sp, #6
 800dc08:	4629      	mov	r1, r5
 800dc0a:	4632      	mov	r2, r6
 800dc0c:	f00b f963 	bl	8018ed6 <memcpy>
 800dc10:	68a0      	ldr	r0, [r4, #8]
 800dc12:	4642      	mov	r2, r8
 800dc14:	19a9      	adds	r1, r5, r6
 800dc16:	f00b f95e 	bl	8018ed6 <memcpy>
 800dc1a:	e7af      	b.n	800db7c <ucdr_serialize_int16_t+0x60>

0800dc1c <ucdr_deserialize_int16_t>:
 800dc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc20:	460d      	mov	r5, r1
 800dc22:	2102      	movs	r1, #2
 800dc24:	4604      	mov	r4, r0
 800dc26:	f000 fe5b 	bl	800e8e0 <ucdr_buffer_alignment>
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dc32:	f000 fe99 	bl	800e968 <ucdr_advance_buffer>
 800dc36:	2102      	movs	r1, #2
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f000 fdf1 	bl	800e820 <ucdr_check_buffer_available_for>
 800dc3e:	bb60      	cbnz	r0, 800dc9a <ucdr_deserialize_int16_t+0x7e>
 800dc40:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dc44:	42be      	cmp	r6, r7
 800dc46:	d923      	bls.n	800dc90 <ucdr_deserialize_int16_t+0x74>
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	60a6      	str	r6, [r4, #8]
 800dc4c:	1bf6      	subs	r6, r6, r7
 800dc4e:	4433      	add	r3, r6
 800dc50:	f1c6 0902 	rsb	r9, r6, #2
 800dc54:	6123      	str	r3, [r4, #16]
 800dc56:	4649      	mov	r1, r9
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f000 fded 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d034      	beq.n	800dccc <ucdr_deserialize_int16_t+0xb0>
 800dc62:	7d23      	ldrb	r3, [r4, #20]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d042      	beq.n	800dcee <ucdr_deserialize_int16_t+0xd2>
 800dc68:	787b      	ldrb	r3, [r7, #1]
 800dc6a:	702b      	strb	r3, [r5, #0]
 800dc6c:	2e00      	cmp	r6, #0
 800dc6e:	d03a      	beq.n	800dce6 <ucdr_deserialize_int16_t+0xca>
 800dc70:	783b      	ldrb	r3, [r7, #0]
 800dc72:	706b      	strb	r3, [r5, #1]
 800dc74:	6923      	ldr	r3, [r4, #16]
 800dc76:	68a2      	ldr	r2, [r4, #8]
 800dc78:	7da0      	ldrb	r0, [r4, #22]
 800dc7a:	2102      	movs	r1, #2
 800dc7c:	3302      	adds	r3, #2
 800dc7e:	444a      	add	r2, r9
 800dc80:	1b9b      	subs	r3, r3, r6
 800dc82:	7561      	strb	r1, [r4, #21]
 800dc84:	60a2      	str	r2, [r4, #8]
 800dc86:	6123      	str	r3, [r4, #16]
 800dc88:	f080 0001 	eor.w	r0, r0, #1
 800dc8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc90:	2102      	movs	r1, #2
 800dc92:	4620      	mov	r0, r4
 800dc94:	f000 fdd0 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800dc98:	b180      	cbz	r0, 800dcbc <ucdr_deserialize_int16_t+0xa0>
 800dc9a:	7d23      	ldrb	r3, [r4, #20]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	68a3      	ldr	r3, [r4, #8]
 800dca0:	d011      	beq.n	800dcc6 <ucdr_deserialize_int16_t+0xaa>
 800dca2:	785b      	ldrb	r3, [r3, #1]
 800dca4:	702b      	strb	r3, [r5, #0]
 800dca6:	68a3      	ldr	r3, [r4, #8]
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	706b      	strb	r3, [r5, #1]
 800dcac:	68a2      	ldr	r2, [r4, #8]
 800dcae:	6923      	ldr	r3, [r4, #16]
 800dcb0:	3202      	adds	r2, #2
 800dcb2:	3302      	adds	r3, #2
 800dcb4:	2102      	movs	r1, #2
 800dcb6:	60a2      	str	r2, [r4, #8]
 800dcb8:	6123      	str	r3, [r4, #16]
 800dcba:	7561      	strb	r1, [r4, #21]
 800dcbc:	7da0      	ldrb	r0, [r4, #22]
 800dcbe:	f080 0001 	eor.w	r0, r0, #1
 800dcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcc6:	881b      	ldrh	r3, [r3, #0]
 800dcc8:	802b      	strh	r3, [r5, #0]
 800dcca:	e7ef      	b.n	800dcac <ucdr_deserialize_int16_t+0x90>
 800dccc:	68a2      	ldr	r2, [r4, #8]
 800dcce:	6923      	ldr	r3, [r4, #16]
 800dcd0:	7da0      	ldrb	r0, [r4, #22]
 800dcd2:	f884 8015 	strb.w	r8, [r4, #21]
 800dcd6:	1b92      	subs	r2, r2, r6
 800dcd8:	1b9b      	subs	r3, r3, r6
 800dcda:	60a2      	str	r2, [r4, #8]
 800dcdc:	6123      	str	r3, [r4, #16]
 800dcde:	f080 0001 	eor.w	r0, r0, #1
 800dce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dce6:	68a3      	ldr	r3, [r4, #8]
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	706b      	strb	r3, [r5, #1]
 800dcec:	e7c2      	b.n	800dc74 <ucdr_deserialize_int16_t+0x58>
 800dcee:	4639      	mov	r1, r7
 800dcf0:	4632      	mov	r2, r6
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	f00b f8ef 	bl	8018ed6 <memcpy>
 800dcf8:	68a1      	ldr	r1, [r4, #8]
 800dcfa:	464a      	mov	r2, r9
 800dcfc:	19a8      	adds	r0, r5, r6
 800dcfe:	f00b f8ea 	bl	8018ed6 <memcpy>
 800dd02:	e7b7      	b.n	800dc74 <ucdr_deserialize_int16_t+0x58>

0800dd04 <ucdr_serialize_int32_t>:
 800dd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd08:	b082      	sub	sp, #8
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	9101      	str	r1, [sp, #4]
 800dd0e:	2104      	movs	r1, #4
 800dd10:	f000 fde6 	bl	800e8e0 <ucdr_buffer_alignment>
 800dd14:	4601      	mov	r1, r0
 800dd16:	4620      	mov	r0, r4
 800dd18:	7d67      	ldrb	r7, [r4, #21]
 800dd1a:	f000 fe25 	bl	800e968 <ucdr_advance_buffer>
 800dd1e:	2104      	movs	r1, #4
 800dd20:	4620      	mov	r0, r4
 800dd22:	f000 fd7d 	bl	800e820 <ucdr_check_buffer_available_for>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d139      	bne.n	800dd9e <ucdr_serialize_int32_t+0x9a>
 800dd2a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dd2e:	42ab      	cmp	r3, r5
 800dd30:	d930      	bls.n	800dd94 <ucdr_serialize_int32_t+0x90>
 800dd32:	1b5e      	subs	r6, r3, r5
 800dd34:	60a3      	str	r3, [r4, #8]
 800dd36:	6923      	ldr	r3, [r4, #16]
 800dd38:	f1c6 0804 	rsb	r8, r6, #4
 800dd3c:	4433      	add	r3, r6
 800dd3e:	6123      	str	r3, [r4, #16]
 800dd40:	4641      	mov	r1, r8
 800dd42:	4620      	mov	r0, r4
 800dd44:	f000 fd78 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d04c      	beq.n	800dde6 <ucdr_serialize_int32_t+0xe2>
 800dd4c:	7d23      	ldrb	r3, [r4, #20]
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d063      	beq.n	800de1a <ucdr_serialize_int32_t+0x116>
 800dd52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd56:	702b      	strb	r3, [r5, #0]
 800dd58:	2e00      	cmp	r6, #0
 800dd5a:	d051      	beq.n	800de00 <ucdr_serialize_int32_t+0xfc>
 800dd5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dd60:	706b      	strb	r3, [r5, #1]
 800dd62:	2e01      	cmp	r6, #1
 800dd64:	d050      	beq.n	800de08 <ucdr_serialize_int32_t+0x104>
 800dd66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dd6a:	70ab      	strb	r3, [r5, #2]
 800dd6c:	2e02      	cmp	r6, #2
 800dd6e:	d04f      	beq.n	800de10 <ucdr_serialize_int32_t+0x10c>
 800dd70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dd74:	70eb      	strb	r3, [r5, #3]
 800dd76:	6923      	ldr	r3, [r4, #16]
 800dd78:	68a2      	ldr	r2, [r4, #8]
 800dd7a:	7da0      	ldrb	r0, [r4, #22]
 800dd7c:	3304      	adds	r3, #4
 800dd7e:	1b9e      	subs	r6, r3, r6
 800dd80:	4442      	add	r2, r8
 800dd82:	2304      	movs	r3, #4
 800dd84:	f080 0001 	eor.w	r0, r0, #1
 800dd88:	60a2      	str	r2, [r4, #8]
 800dd8a:	6126      	str	r6, [r4, #16]
 800dd8c:	7563      	strb	r3, [r4, #21]
 800dd8e:	b002      	add	sp, #8
 800dd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd94:	2104      	movs	r1, #4
 800dd96:	4620      	mov	r0, r4
 800dd98:	f000 fd4e 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800dd9c:	b1d0      	cbz	r0, 800ddd4 <ucdr_serialize_int32_t+0xd0>
 800dd9e:	7d23      	ldrb	r3, [r4, #20]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	68a3      	ldr	r3, [r4, #8]
 800dda4:	d01c      	beq.n	800dde0 <ucdr_serialize_int32_t+0xdc>
 800dda6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ddaa:	701a      	strb	r2, [r3, #0]
 800ddac:	68a3      	ldr	r3, [r4, #8]
 800ddae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddb2:	705a      	strb	r2, [r3, #1]
 800ddb4:	68a3      	ldr	r3, [r4, #8]
 800ddb6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ddba:	709a      	strb	r2, [r3, #2]
 800ddbc:	68a3      	ldr	r3, [r4, #8]
 800ddbe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddc2:	70da      	strb	r2, [r3, #3]
 800ddc4:	68a2      	ldr	r2, [r4, #8]
 800ddc6:	6923      	ldr	r3, [r4, #16]
 800ddc8:	3204      	adds	r2, #4
 800ddca:	3304      	adds	r3, #4
 800ddcc:	2104      	movs	r1, #4
 800ddce:	60a2      	str	r2, [r4, #8]
 800ddd0:	6123      	str	r3, [r4, #16]
 800ddd2:	7561      	strb	r1, [r4, #21]
 800ddd4:	7da0      	ldrb	r0, [r4, #22]
 800ddd6:	f080 0001 	eor.w	r0, r0, #1
 800ddda:	b002      	add	sp, #8
 800dddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde0:	9a01      	ldr	r2, [sp, #4]
 800dde2:	601a      	str	r2, [r3, #0]
 800dde4:	e7ee      	b.n	800ddc4 <ucdr_serialize_int32_t+0xc0>
 800dde6:	68a2      	ldr	r2, [r4, #8]
 800dde8:	6923      	ldr	r3, [r4, #16]
 800ddea:	7da0      	ldrb	r0, [r4, #22]
 800ddec:	7567      	strb	r7, [r4, #21]
 800ddee:	1b92      	subs	r2, r2, r6
 800ddf0:	1b9b      	subs	r3, r3, r6
 800ddf2:	f080 0001 	eor.w	r0, r0, #1
 800ddf6:	60a2      	str	r2, [r4, #8]
 800ddf8:	6123      	str	r3, [r4, #16]
 800ddfa:	b002      	add	sp, #8
 800ddfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de00:	68a3      	ldr	r3, [r4, #8]
 800de02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de06:	701a      	strb	r2, [r3, #0]
 800de08:	68a3      	ldr	r3, [r4, #8]
 800de0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800de0e:	701a      	strb	r2, [r3, #0]
 800de10:	68a3      	ldr	r3, [r4, #8]
 800de12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800de16:	701a      	strb	r2, [r3, #0]
 800de18:	e7ad      	b.n	800dd76 <ucdr_serialize_int32_t+0x72>
 800de1a:	4628      	mov	r0, r5
 800de1c:	ad01      	add	r5, sp, #4
 800de1e:	4629      	mov	r1, r5
 800de20:	4632      	mov	r2, r6
 800de22:	f00b f858 	bl	8018ed6 <memcpy>
 800de26:	68a0      	ldr	r0, [r4, #8]
 800de28:	4642      	mov	r2, r8
 800de2a:	19a9      	adds	r1, r5, r6
 800de2c:	f00b f853 	bl	8018ed6 <memcpy>
 800de30:	e7a1      	b.n	800dd76 <ucdr_serialize_int32_t+0x72>
 800de32:	bf00      	nop

0800de34 <ucdr_deserialize_int32_t>:
 800de34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de38:	460d      	mov	r5, r1
 800de3a:	2104      	movs	r1, #4
 800de3c:	4604      	mov	r4, r0
 800de3e:	f000 fd4f 	bl	800e8e0 <ucdr_buffer_alignment>
 800de42:	4601      	mov	r1, r0
 800de44:	4620      	mov	r0, r4
 800de46:	f894 8015 	ldrb.w	r8, [r4, #21]
 800de4a:	f000 fd8d 	bl	800e968 <ucdr_advance_buffer>
 800de4e:	2104      	movs	r1, #4
 800de50:	4620      	mov	r0, r4
 800de52:	f000 fce5 	bl	800e820 <ucdr_check_buffer_available_for>
 800de56:	2800      	cmp	r0, #0
 800de58:	d138      	bne.n	800decc <ucdr_deserialize_int32_t+0x98>
 800de5a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800de5e:	42b7      	cmp	r7, r6
 800de60:	d92f      	bls.n	800dec2 <ucdr_deserialize_int32_t+0x8e>
 800de62:	6923      	ldr	r3, [r4, #16]
 800de64:	60a7      	str	r7, [r4, #8]
 800de66:	1bbf      	subs	r7, r7, r6
 800de68:	443b      	add	r3, r7
 800de6a:	f1c7 0904 	rsb	r9, r7, #4
 800de6e:	6123      	str	r3, [r4, #16]
 800de70:	4649      	mov	r1, r9
 800de72:	4620      	mov	r0, r4
 800de74:	f000 fce0 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d046      	beq.n	800df0a <ucdr_deserialize_int32_t+0xd6>
 800de7c:	7d23      	ldrb	r3, [r4, #20]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d05c      	beq.n	800df3c <ucdr_deserialize_int32_t+0x108>
 800de82:	78f3      	ldrb	r3, [r6, #3]
 800de84:	702b      	strb	r3, [r5, #0]
 800de86:	2f00      	cmp	r7, #0
 800de88:	d04c      	beq.n	800df24 <ucdr_deserialize_int32_t+0xf0>
 800de8a:	78b3      	ldrb	r3, [r6, #2]
 800de8c:	706b      	strb	r3, [r5, #1]
 800de8e:	2f01      	cmp	r7, #1
 800de90:	f105 0302 	add.w	r3, r5, #2
 800de94:	d04a      	beq.n	800df2c <ucdr_deserialize_int32_t+0xf8>
 800de96:	7873      	ldrb	r3, [r6, #1]
 800de98:	70ab      	strb	r3, [r5, #2]
 800de9a:	2f02      	cmp	r7, #2
 800de9c:	f105 0303 	add.w	r3, r5, #3
 800dea0:	d048      	beq.n	800df34 <ucdr_deserialize_int32_t+0x100>
 800dea2:	7833      	ldrb	r3, [r6, #0]
 800dea4:	70eb      	strb	r3, [r5, #3]
 800dea6:	6923      	ldr	r3, [r4, #16]
 800dea8:	68a2      	ldr	r2, [r4, #8]
 800deaa:	7da0      	ldrb	r0, [r4, #22]
 800deac:	2104      	movs	r1, #4
 800deae:	3304      	adds	r3, #4
 800deb0:	444a      	add	r2, r9
 800deb2:	1bdb      	subs	r3, r3, r7
 800deb4:	7561      	strb	r1, [r4, #21]
 800deb6:	60a2      	str	r2, [r4, #8]
 800deb8:	6123      	str	r3, [r4, #16]
 800deba:	f080 0001 	eor.w	r0, r0, #1
 800debe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dec2:	2104      	movs	r1, #4
 800dec4:	4620      	mov	r0, r4
 800dec6:	f000 fcb7 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800deca:	b1b0      	cbz	r0, 800defa <ucdr_deserialize_int32_t+0xc6>
 800decc:	7d23      	ldrb	r3, [r4, #20]
 800dece:	2b01      	cmp	r3, #1
 800ded0:	68a3      	ldr	r3, [r4, #8]
 800ded2:	d017      	beq.n	800df04 <ucdr_deserialize_int32_t+0xd0>
 800ded4:	78db      	ldrb	r3, [r3, #3]
 800ded6:	702b      	strb	r3, [r5, #0]
 800ded8:	68a3      	ldr	r3, [r4, #8]
 800deda:	789b      	ldrb	r3, [r3, #2]
 800dedc:	706b      	strb	r3, [r5, #1]
 800dede:	68a3      	ldr	r3, [r4, #8]
 800dee0:	785b      	ldrb	r3, [r3, #1]
 800dee2:	70ab      	strb	r3, [r5, #2]
 800dee4:	68a3      	ldr	r3, [r4, #8]
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	70eb      	strb	r3, [r5, #3]
 800deea:	68a2      	ldr	r2, [r4, #8]
 800deec:	6923      	ldr	r3, [r4, #16]
 800deee:	3204      	adds	r2, #4
 800def0:	3304      	adds	r3, #4
 800def2:	2104      	movs	r1, #4
 800def4:	60a2      	str	r2, [r4, #8]
 800def6:	6123      	str	r3, [r4, #16]
 800def8:	7561      	strb	r1, [r4, #21]
 800defa:	7da0      	ldrb	r0, [r4, #22]
 800defc:	f080 0001 	eor.w	r0, r0, #1
 800df00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	602b      	str	r3, [r5, #0]
 800df08:	e7ef      	b.n	800deea <ucdr_deserialize_int32_t+0xb6>
 800df0a:	68a2      	ldr	r2, [r4, #8]
 800df0c:	6923      	ldr	r3, [r4, #16]
 800df0e:	7da0      	ldrb	r0, [r4, #22]
 800df10:	f884 8015 	strb.w	r8, [r4, #21]
 800df14:	1bd2      	subs	r2, r2, r7
 800df16:	1bdb      	subs	r3, r3, r7
 800df18:	60a2      	str	r2, [r4, #8]
 800df1a:	6123      	str	r3, [r4, #16]
 800df1c:	f080 0001 	eor.w	r0, r0, #1
 800df20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df24:	68a3      	ldr	r3, [r4, #8]
 800df26:	789b      	ldrb	r3, [r3, #2]
 800df28:	706b      	strb	r3, [r5, #1]
 800df2a:	1cab      	adds	r3, r5, #2
 800df2c:	68a2      	ldr	r2, [r4, #8]
 800df2e:	7852      	ldrb	r2, [r2, #1]
 800df30:	f803 2b01 	strb.w	r2, [r3], #1
 800df34:	68a2      	ldr	r2, [r4, #8]
 800df36:	7812      	ldrb	r2, [r2, #0]
 800df38:	701a      	strb	r2, [r3, #0]
 800df3a:	e7b4      	b.n	800dea6 <ucdr_deserialize_int32_t+0x72>
 800df3c:	4631      	mov	r1, r6
 800df3e:	463a      	mov	r2, r7
 800df40:	4628      	mov	r0, r5
 800df42:	f00a ffc8 	bl	8018ed6 <memcpy>
 800df46:	68a1      	ldr	r1, [r4, #8]
 800df48:	464a      	mov	r2, r9
 800df4a:	19e8      	adds	r0, r5, r7
 800df4c:	f00a ffc3 	bl	8018ed6 <memcpy>
 800df50:	e7a9      	b.n	800dea6 <ucdr_deserialize_int32_t+0x72>
 800df52:	bf00      	nop

0800df54 <ucdr_serialize_endian_float>:
 800df54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df58:	460d      	mov	r5, r1
 800df5a:	b083      	sub	sp, #12
 800df5c:	2104      	movs	r1, #4
 800df5e:	4604      	mov	r4, r0
 800df60:	ed8d 0a01 	vstr	s0, [sp, #4]
 800df64:	f000 fcbc 	bl	800e8e0 <ucdr_buffer_alignment>
 800df68:	4601      	mov	r1, r0
 800df6a:	4620      	mov	r0, r4
 800df6c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800df70:	f000 fcfa 	bl	800e968 <ucdr_advance_buffer>
 800df74:	2104      	movs	r1, #4
 800df76:	4620      	mov	r0, r4
 800df78:	f000 fc52 	bl	800e820 <ucdr_check_buffer_available_for>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d138      	bne.n	800dff2 <ucdr_serialize_endian_float+0x9e>
 800df80:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800df84:	42b7      	cmp	r7, r6
 800df86:	d92f      	bls.n	800dfe8 <ucdr_serialize_endian_float+0x94>
 800df88:	6923      	ldr	r3, [r4, #16]
 800df8a:	60a7      	str	r7, [r4, #8]
 800df8c:	1bbf      	subs	r7, r7, r6
 800df8e:	443b      	add	r3, r7
 800df90:	f1c7 0904 	rsb	r9, r7, #4
 800df94:	6123      	str	r3, [r4, #16]
 800df96:	4649      	mov	r1, r9
 800df98:	4620      	mov	r0, r4
 800df9a:	f000 fc4d 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d04a      	beq.n	800e038 <ucdr_serialize_endian_float+0xe4>
 800dfa2:	2d01      	cmp	r5, #1
 800dfa4:	d063      	beq.n	800e06e <ucdr_serialize_endian_float+0x11a>
 800dfa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dfaa:	7033      	strb	r3, [r6, #0]
 800dfac:	2f00      	cmp	r7, #0
 800dfae:	d051      	beq.n	800e054 <ucdr_serialize_endian_float+0x100>
 800dfb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dfb4:	7073      	strb	r3, [r6, #1]
 800dfb6:	2f01      	cmp	r7, #1
 800dfb8:	d050      	beq.n	800e05c <ucdr_serialize_endian_float+0x108>
 800dfba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dfbe:	70b3      	strb	r3, [r6, #2]
 800dfc0:	2f02      	cmp	r7, #2
 800dfc2:	d04f      	beq.n	800e064 <ucdr_serialize_endian_float+0x110>
 800dfc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dfc8:	70f3      	strb	r3, [r6, #3]
 800dfca:	6923      	ldr	r3, [r4, #16]
 800dfcc:	68a2      	ldr	r2, [r4, #8]
 800dfce:	7da0      	ldrb	r0, [r4, #22]
 800dfd0:	3304      	adds	r3, #4
 800dfd2:	444a      	add	r2, r9
 800dfd4:	1bdb      	subs	r3, r3, r7
 800dfd6:	2104      	movs	r1, #4
 800dfd8:	f080 0001 	eor.w	r0, r0, #1
 800dfdc:	60a2      	str	r2, [r4, #8]
 800dfde:	6123      	str	r3, [r4, #16]
 800dfe0:	7561      	strb	r1, [r4, #21]
 800dfe2:	b003      	add	sp, #12
 800dfe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfe8:	2104      	movs	r1, #4
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 fc24 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800dff0:	b1c8      	cbz	r0, 800e026 <ucdr_serialize_endian_float+0xd2>
 800dff2:	2d01      	cmp	r5, #1
 800dff4:	68a3      	ldr	r3, [r4, #8]
 800dff6:	d01c      	beq.n	800e032 <ucdr_serialize_endian_float+0xde>
 800dff8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dffc:	701a      	strb	r2, [r3, #0]
 800dffe:	68a3      	ldr	r3, [r4, #8]
 800e000:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e004:	705a      	strb	r2, [r3, #1]
 800e006:	68a3      	ldr	r3, [r4, #8]
 800e008:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e00c:	709a      	strb	r2, [r3, #2]
 800e00e:	68a3      	ldr	r3, [r4, #8]
 800e010:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e014:	70da      	strb	r2, [r3, #3]
 800e016:	68a2      	ldr	r2, [r4, #8]
 800e018:	6923      	ldr	r3, [r4, #16]
 800e01a:	3204      	adds	r2, #4
 800e01c:	3304      	adds	r3, #4
 800e01e:	2104      	movs	r1, #4
 800e020:	60a2      	str	r2, [r4, #8]
 800e022:	6123      	str	r3, [r4, #16]
 800e024:	7561      	strb	r1, [r4, #21]
 800e026:	7da0      	ldrb	r0, [r4, #22]
 800e028:	f080 0001 	eor.w	r0, r0, #1
 800e02c:	b003      	add	sp, #12
 800e02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e032:	9a01      	ldr	r2, [sp, #4]
 800e034:	601a      	str	r2, [r3, #0]
 800e036:	e7ee      	b.n	800e016 <ucdr_serialize_endian_float+0xc2>
 800e038:	68a2      	ldr	r2, [r4, #8]
 800e03a:	6923      	ldr	r3, [r4, #16]
 800e03c:	7da0      	ldrb	r0, [r4, #22]
 800e03e:	f884 8015 	strb.w	r8, [r4, #21]
 800e042:	1bd2      	subs	r2, r2, r7
 800e044:	1bdb      	subs	r3, r3, r7
 800e046:	f080 0001 	eor.w	r0, r0, #1
 800e04a:	60a2      	str	r2, [r4, #8]
 800e04c:	6123      	str	r3, [r4, #16]
 800e04e:	b003      	add	sp, #12
 800e050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e054:	68a3      	ldr	r3, [r4, #8]
 800e056:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e05a:	701a      	strb	r2, [r3, #0]
 800e05c:	68a3      	ldr	r3, [r4, #8]
 800e05e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e062:	701a      	strb	r2, [r3, #0]
 800e064:	68a3      	ldr	r3, [r4, #8]
 800e066:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e06a:	701a      	strb	r2, [r3, #0]
 800e06c:	e7ad      	b.n	800dfca <ucdr_serialize_endian_float+0x76>
 800e06e:	ad01      	add	r5, sp, #4
 800e070:	4629      	mov	r1, r5
 800e072:	463a      	mov	r2, r7
 800e074:	4630      	mov	r0, r6
 800e076:	f00a ff2e 	bl	8018ed6 <memcpy>
 800e07a:	68a0      	ldr	r0, [r4, #8]
 800e07c:	464a      	mov	r2, r9
 800e07e:	19e9      	adds	r1, r5, r7
 800e080:	f00a ff29 	bl	8018ed6 <memcpy>
 800e084:	e7a1      	b.n	800dfca <ucdr_serialize_endian_float+0x76>
 800e086:	bf00      	nop

0800e088 <ucdr_deserialize_endian_float>:
 800e088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e08c:	460e      	mov	r6, r1
 800e08e:	2104      	movs	r1, #4
 800e090:	4604      	mov	r4, r0
 800e092:	4615      	mov	r5, r2
 800e094:	f000 fc24 	bl	800e8e0 <ucdr_buffer_alignment>
 800e098:	4601      	mov	r1, r0
 800e09a:	4620      	mov	r0, r4
 800e09c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e0a0:	f000 fc62 	bl	800e968 <ucdr_advance_buffer>
 800e0a4:	2104      	movs	r1, #4
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f000 fbba 	bl	800e820 <ucdr_check_buffer_available_for>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d13c      	bne.n	800e12a <ucdr_deserialize_endian_float+0xa2>
 800e0b0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e0b4:	42bb      	cmp	r3, r7
 800e0b6:	d933      	bls.n	800e120 <ucdr_deserialize_endian_float+0x98>
 800e0b8:	eba3 0807 	sub.w	r8, r3, r7
 800e0bc:	60a3      	str	r3, [r4, #8]
 800e0be:	6923      	ldr	r3, [r4, #16]
 800e0c0:	f1c8 0a04 	rsb	sl, r8, #4
 800e0c4:	4443      	add	r3, r8
 800e0c6:	6123      	str	r3, [r4, #16]
 800e0c8:	4651      	mov	r1, sl
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f000 fbb4 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d048      	beq.n	800e166 <ucdr_deserialize_endian_float+0xde>
 800e0d4:	2e01      	cmp	r6, #1
 800e0d6:	d061      	beq.n	800e19c <ucdr_deserialize_endian_float+0x114>
 800e0d8:	78fb      	ldrb	r3, [r7, #3]
 800e0da:	702b      	strb	r3, [r5, #0]
 800e0dc:	f1b8 0f00 	cmp.w	r8, #0
 800e0e0:	d050      	beq.n	800e184 <ucdr_deserialize_endian_float+0xfc>
 800e0e2:	78bb      	ldrb	r3, [r7, #2]
 800e0e4:	706b      	strb	r3, [r5, #1]
 800e0e6:	f1b8 0f01 	cmp.w	r8, #1
 800e0ea:	f105 0302 	add.w	r3, r5, #2
 800e0ee:	d04d      	beq.n	800e18c <ucdr_deserialize_endian_float+0x104>
 800e0f0:	787b      	ldrb	r3, [r7, #1]
 800e0f2:	70ab      	strb	r3, [r5, #2]
 800e0f4:	f1b8 0f02 	cmp.w	r8, #2
 800e0f8:	f105 0303 	add.w	r3, r5, #3
 800e0fc:	d04a      	beq.n	800e194 <ucdr_deserialize_endian_float+0x10c>
 800e0fe:	783b      	ldrb	r3, [r7, #0]
 800e100:	70eb      	strb	r3, [r5, #3]
 800e102:	6923      	ldr	r3, [r4, #16]
 800e104:	68a2      	ldr	r2, [r4, #8]
 800e106:	7da0      	ldrb	r0, [r4, #22]
 800e108:	2104      	movs	r1, #4
 800e10a:	3304      	adds	r3, #4
 800e10c:	4452      	add	r2, sl
 800e10e:	eba3 0308 	sub.w	r3, r3, r8
 800e112:	7561      	strb	r1, [r4, #21]
 800e114:	60a2      	str	r2, [r4, #8]
 800e116:	6123      	str	r3, [r4, #16]
 800e118:	f080 0001 	eor.w	r0, r0, #1
 800e11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e120:	2104      	movs	r1, #4
 800e122:	4620      	mov	r0, r4
 800e124:	f000 fb88 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800e128:	b1a8      	cbz	r0, 800e156 <ucdr_deserialize_endian_float+0xce>
 800e12a:	2e01      	cmp	r6, #1
 800e12c:	68a3      	ldr	r3, [r4, #8]
 800e12e:	d017      	beq.n	800e160 <ucdr_deserialize_endian_float+0xd8>
 800e130:	78db      	ldrb	r3, [r3, #3]
 800e132:	702b      	strb	r3, [r5, #0]
 800e134:	68a3      	ldr	r3, [r4, #8]
 800e136:	789b      	ldrb	r3, [r3, #2]
 800e138:	706b      	strb	r3, [r5, #1]
 800e13a:	68a3      	ldr	r3, [r4, #8]
 800e13c:	785b      	ldrb	r3, [r3, #1]
 800e13e:	70ab      	strb	r3, [r5, #2]
 800e140:	68a3      	ldr	r3, [r4, #8]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	70eb      	strb	r3, [r5, #3]
 800e146:	68a2      	ldr	r2, [r4, #8]
 800e148:	6923      	ldr	r3, [r4, #16]
 800e14a:	3204      	adds	r2, #4
 800e14c:	3304      	adds	r3, #4
 800e14e:	2104      	movs	r1, #4
 800e150:	60a2      	str	r2, [r4, #8]
 800e152:	6123      	str	r3, [r4, #16]
 800e154:	7561      	strb	r1, [r4, #21]
 800e156:	7da0      	ldrb	r0, [r4, #22]
 800e158:	f080 0001 	eor.w	r0, r0, #1
 800e15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	602b      	str	r3, [r5, #0]
 800e164:	e7ef      	b.n	800e146 <ucdr_deserialize_endian_float+0xbe>
 800e166:	68a2      	ldr	r2, [r4, #8]
 800e168:	6923      	ldr	r3, [r4, #16]
 800e16a:	7da0      	ldrb	r0, [r4, #22]
 800e16c:	f884 9015 	strb.w	r9, [r4, #21]
 800e170:	eba2 0208 	sub.w	r2, r2, r8
 800e174:	eba3 0308 	sub.w	r3, r3, r8
 800e178:	60a2      	str	r2, [r4, #8]
 800e17a:	6123      	str	r3, [r4, #16]
 800e17c:	f080 0001 	eor.w	r0, r0, #1
 800e180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e184:	68a3      	ldr	r3, [r4, #8]
 800e186:	789b      	ldrb	r3, [r3, #2]
 800e188:	706b      	strb	r3, [r5, #1]
 800e18a:	1cab      	adds	r3, r5, #2
 800e18c:	68a2      	ldr	r2, [r4, #8]
 800e18e:	7852      	ldrb	r2, [r2, #1]
 800e190:	f803 2b01 	strb.w	r2, [r3], #1
 800e194:	68a2      	ldr	r2, [r4, #8]
 800e196:	7812      	ldrb	r2, [r2, #0]
 800e198:	701a      	strb	r2, [r3, #0]
 800e19a:	e7b2      	b.n	800e102 <ucdr_deserialize_endian_float+0x7a>
 800e19c:	4639      	mov	r1, r7
 800e19e:	4642      	mov	r2, r8
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	f00a fe98 	bl	8018ed6 <memcpy>
 800e1a6:	68a1      	ldr	r1, [r4, #8]
 800e1a8:	4652      	mov	r2, sl
 800e1aa:	eb05 0008 	add.w	r0, r5, r8
 800e1ae:	f00a fe92 	bl	8018ed6 <memcpy>
 800e1b2:	e7a6      	b.n	800e102 <ucdr_deserialize_endian_float+0x7a>

0800e1b4 <ucdr_serialize_double>:
 800e1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b8:	2108      	movs	r1, #8
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	4604      	mov	r4, r0
 800e1be:	ed8d 0b00 	vstr	d0, [sp]
 800e1c2:	f000 fb8d 	bl	800e8e0 <ucdr_buffer_alignment>
 800e1c6:	4601      	mov	r1, r0
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	7d67      	ldrb	r7, [r4, #21]
 800e1cc:	f000 fbcc 	bl	800e968 <ucdr_advance_buffer>
 800e1d0:	2108      	movs	r1, #8
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f000 fb24 	bl	800e820 <ucdr_check_buffer_available_for>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d14e      	bne.n	800e27a <ucdr_serialize_double+0xc6>
 800e1dc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e1e0:	42ab      	cmp	r3, r5
 800e1e2:	d945      	bls.n	800e270 <ucdr_serialize_double+0xbc>
 800e1e4:	1b5e      	subs	r6, r3, r5
 800e1e6:	60a3      	str	r3, [r4, #8]
 800e1e8:	6923      	ldr	r3, [r4, #16]
 800e1ea:	f1c6 0808 	rsb	r8, r6, #8
 800e1ee:	4433      	add	r3, r6
 800e1f0:	6123      	str	r3, [r4, #16]
 800e1f2:	4641      	mov	r1, r8
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f000 fb1f 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	d074      	beq.n	800e2e8 <ucdr_serialize_double+0x134>
 800e1fe:	7d23      	ldrb	r3, [r4, #20]
 800e200:	2b01      	cmp	r3, #1
 800e202:	f000 809b 	beq.w	800e33c <ucdr_serialize_double+0x188>
 800e206:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e20a:	702b      	strb	r3, [r5, #0]
 800e20c:	2e00      	cmp	r6, #0
 800e20e:	d078      	beq.n	800e302 <ucdr_serialize_double+0x14e>
 800e210:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e214:	706b      	strb	r3, [r5, #1]
 800e216:	2e01      	cmp	r6, #1
 800e218:	d077      	beq.n	800e30a <ucdr_serialize_double+0x156>
 800e21a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e21e:	70ab      	strb	r3, [r5, #2]
 800e220:	2e02      	cmp	r6, #2
 800e222:	d076      	beq.n	800e312 <ucdr_serialize_double+0x15e>
 800e224:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e228:	70eb      	strb	r3, [r5, #3]
 800e22a:	2e03      	cmp	r6, #3
 800e22c:	d075      	beq.n	800e31a <ucdr_serialize_double+0x166>
 800e22e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e232:	712b      	strb	r3, [r5, #4]
 800e234:	2e04      	cmp	r6, #4
 800e236:	d074      	beq.n	800e322 <ucdr_serialize_double+0x16e>
 800e238:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e23c:	716b      	strb	r3, [r5, #5]
 800e23e:	2e05      	cmp	r6, #5
 800e240:	d073      	beq.n	800e32a <ucdr_serialize_double+0x176>
 800e242:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e246:	71ab      	strb	r3, [r5, #6]
 800e248:	2e06      	cmp	r6, #6
 800e24a:	d072      	beq.n	800e332 <ucdr_serialize_double+0x17e>
 800e24c:	f89d 3000 	ldrb.w	r3, [sp]
 800e250:	71eb      	strb	r3, [r5, #7]
 800e252:	6923      	ldr	r3, [r4, #16]
 800e254:	68a2      	ldr	r2, [r4, #8]
 800e256:	7da0      	ldrb	r0, [r4, #22]
 800e258:	3308      	adds	r3, #8
 800e25a:	1b9e      	subs	r6, r3, r6
 800e25c:	4442      	add	r2, r8
 800e25e:	2308      	movs	r3, #8
 800e260:	f080 0001 	eor.w	r0, r0, #1
 800e264:	60a2      	str	r2, [r4, #8]
 800e266:	6126      	str	r6, [r4, #16]
 800e268:	7563      	strb	r3, [r4, #21]
 800e26a:	b002      	add	sp, #8
 800e26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e270:	2108      	movs	r1, #8
 800e272:	4620      	mov	r0, r4
 800e274:	f000 fae0 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800e278:	b350      	cbz	r0, 800e2d0 <ucdr_serialize_double+0x11c>
 800e27a:	7d23      	ldrb	r3, [r4, #20]
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d02d      	beq.n	800e2dc <ucdr_serialize_double+0x128>
 800e280:	68a3      	ldr	r3, [r4, #8]
 800e282:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e286:	701a      	strb	r2, [r3, #0]
 800e288:	68a3      	ldr	r3, [r4, #8]
 800e28a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e28e:	705a      	strb	r2, [r3, #1]
 800e290:	68a3      	ldr	r3, [r4, #8]
 800e292:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e296:	709a      	strb	r2, [r3, #2]
 800e298:	68a3      	ldr	r3, [r4, #8]
 800e29a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e29e:	70da      	strb	r2, [r3, #3]
 800e2a0:	68a3      	ldr	r3, [r4, #8]
 800e2a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e2a6:	711a      	strb	r2, [r3, #4]
 800e2a8:	68a3      	ldr	r3, [r4, #8]
 800e2aa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e2ae:	715a      	strb	r2, [r3, #5]
 800e2b0:	68a3      	ldr	r3, [r4, #8]
 800e2b2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e2b6:	719a      	strb	r2, [r3, #6]
 800e2b8:	68a3      	ldr	r3, [r4, #8]
 800e2ba:	f89d 2000 	ldrb.w	r2, [sp]
 800e2be:	71da      	strb	r2, [r3, #7]
 800e2c0:	68a2      	ldr	r2, [r4, #8]
 800e2c2:	6923      	ldr	r3, [r4, #16]
 800e2c4:	3208      	adds	r2, #8
 800e2c6:	3308      	adds	r3, #8
 800e2c8:	2108      	movs	r1, #8
 800e2ca:	60a2      	str	r2, [r4, #8]
 800e2cc:	6123      	str	r3, [r4, #16]
 800e2ce:	7561      	strb	r1, [r4, #21]
 800e2d0:	7da0      	ldrb	r0, [r4, #22]
 800e2d2:	f080 0001 	eor.w	r0, r0, #1
 800e2d6:	b002      	add	sp, #8
 800e2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2dc:	466b      	mov	r3, sp
 800e2de:	cb03      	ldmia	r3!, {r0, r1}
 800e2e0:	68a3      	ldr	r3, [r4, #8]
 800e2e2:	6018      	str	r0, [r3, #0]
 800e2e4:	6059      	str	r1, [r3, #4]
 800e2e6:	e7eb      	b.n	800e2c0 <ucdr_serialize_double+0x10c>
 800e2e8:	68a2      	ldr	r2, [r4, #8]
 800e2ea:	6923      	ldr	r3, [r4, #16]
 800e2ec:	7da0      	ldrb	r0, [r4, #22]
 800e2ee:	7567      	strb	r7, [r4, #21]
 800e2f0:	1b92      	subs	r2, r2, r6
 800e2f2:	1b9b      	subs	r3, r3, r6
 800e2f4:	f080 0001 	eor.w	r0, r0, #1
 800e2f8:	60a2      	str	r2, [r4, #8]
 800e2fa:	6123      	str	r3, [r4, #16]
 800e2fc:	b002      	add	sp, #8
 800e2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e302:	68a3      	ldr	r3, [r4, #8]
 800e304:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e308:	701a      	strb	r2, [r3, #0]
 800e30a:	68a3      	ldr	r3, [r4, #8]
 800e30c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e310:	701a      	strb	r2, [r3, #0]
 800e312:	68a3      	ldr	r3, [r4, #8]
 800e314:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e318:	701a      	strb	r2, [r3, #0]
 800e31a:	68a3      	ldr	r3, [r4, #8]
 800e31c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e320:	701a      	strb	r2, [r3, #0]
 800e322:	68a3      	ldr	r3, [r4, #8]
 800e324:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e328:	701a      	strb	r2, [r3, #0]
 800e32a:	68a3      	ldr	r3, [r4, #8]
 800e32c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e330:	701a      	strb	r2, [r3, #0]
 800e332:	68a3      	ldr	r3, [r4, #8]
 800e334:	f89d 2000 	ldrb.w	r2, [sp]
 800e338:	701a      	strb	r2, [r3, #0]
 800e33a:	e78a      	b.n	800e252 <ucdr_serialize_double+0x9e>
 800e33c:	4628      	mov	r0, r5
 800e33e:	466d      	mov	r5, sp
 800e340:	4629      	mov	r1, r5
 800e342:	4632      	mov	r2, r6
 800e344:	f00a fdc7 	bl	8018ed6 <memcpy>
 800e348:	68a0      	ldr	r0, [r4, #8]
 800e34a:	4642      	mov	r2, r8
 800e34c:	19a9      	adds	r1, r5, r6
 800e34e:	f00a fdc2 	bl	8018ed6 <memcpy>
 800e352:	e77e      	b.n	800e252 <ucdr_serialize_double+0x9e>

0800e354 <ucdr_serialize_endian_double>:
 800e354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e358:	460e      	mov	r6, r1
 800e35a:	b083      	sub	sp, #12
 800e35c:	2108      	movs	r1, #8
 800e35e:	4604      	mov	r4, r0
 800e360:	ed8d 0b00 	vstr	d0, [sp]
 800e364:	f000 fabc 	bl	800e8e0 <ucdr_buffer_alignment>
 800e368:	4601      	mov	r1, r0
 800e36a:	4620      	mov	r0, r4
 800e36c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e370:	f000 fafa 	bl	800e968 <ucdr_advance_buffer>
 800e374:	2108      	movs	r1, #8
 800e376:	4620      	mov	r0, r4
 800e378:	f000 fa52 	bl	800e820 <ucdr_check_buffer_available_for>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d14d      	bne.n	800e41c <ucdr_serialize_endian_double+0xc8>
 800e380:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800e384:	42bd      	cmp	r5, r7
 800e386:	d944      	bls.n	800e412 <ucdr_serialize_endian_double+0xbe>
 800e388:	6923      	ldr	r3, [r4, #16]
 800e38a:	60a5      	str	r5, [r4, #8]
 800e38c:	1bed      	subs	r5, r5, r7
 800e38e:	442b      	add	r3, r5
 800e390:	f1c5 0908 	rsb	r9, r5, #8
 800e394:	6123      	str	r3, [r4, #16]
 800e396:	4649      	mov	r1, r9
 800e398:	4620      	mov	r0, r4
 800e39a:	f000 fa4d 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	d072      	beq.n	800e488 <ucdr_serialize_endian_double+0x134>
 800e3a2:	2e01      	cmp	r6, #1
 800e3a4:	f000 809b 	beq.w	800e4de <ucdr_serialize_endian_double+0x18a>
 800e3a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e3ac:	703b      	strb	r3, [r7, #0]
 800e3ae:	2d00      	cmp	r5, #0
 800e3b0:	d078      	beq.n	800e4a4 <ucdr_serialize_endian_double+0x150>
 800e3b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e3b6:	707b      	strb	r3, [r7, #1]
 800e3b8:	2d01      	cmp	r5, #1
 800e3ba:	d077      	beq.n	800e4ac <ucdr_serialize_endian_double+0x158>
 800e3bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e3c0:	70bb      	strb	r3, [r7, #2]
 800e3c2:	2d02      	cmp	r5, #2
 800e3c4:	d076      	beq.n	800e4b4 <ucdr_serialize_endian_double+0x160>
 800e3c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e3ca:	70fb      	strb	r3, [r7, #3]
 800e3cc:	2d03      	cmp	r5, #3
 800e3ce:	d075      	beq.n	800e4bc <ucdr_serialize_endian_double+0x168>
 800e3d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e3d4:	713b      	strb	r3, [r7, #4]
 800e3d6:	2d04      	cmp	r5, #4
 800e3d8:	d074      	beq.n	800e4c4 <ucdr_serialize_endian_double+0x170>
 800e3da:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e3de:	717b      	strb	r3, [r7, #5]
 800e3e0:	2d05      	cmp	r5, #5
 800e3e2:	d073      	beq.n	800e4cc <ucdr_serialize_endian_double+0x178>
 800e3e4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e3e8:	71bb      	strb	r3, [r7, #6]
 800e3ea:	2d06      	cmp	r5, #6
 800e3ec:	d072      	beq.n	800e4d4 <ucdr_serialize_endian_double+0x180>
 800e3ee:	f89d 3000 	ldrb.w	r3, [sp]
 800e3f2:	71fb      	strb	r3, [r7, #7]
 800e3f4:	6923      	ldr	r3, [r4, #16]
 800e3f6:	68a2      	ldr	r2, [r4, #8]
 800e3f8:	7da0      	ldrb	r0, [r4, #22]
 800e3fa:	3308      	adds	r3, #8
 800e3fc:	1b5d      	subs	r5, r3, r5
 800e3fe:	444a      	add	r2, r9
 800e400:	2308      	movs	r3, #8
 800e402:	f080 0001 	eor.w	r0, r0, #1
 800e406:	60a2      	str	r2, [r4, #8]
 800e408:	6125      	str	r5, [r4, #16]
 800e40a:	7563      	strb	r3, [r4, #21]
 800e40c:	b003      	add	sp, #12
 800e40e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e412:	2108      	movs	r1, #8
 800e414:	4620      	mov	r0, r4
 800e416:	f000 fa0f 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800e41a:	b348      	cbz	r0, 800e470 <ucdr_serialize_endian_double+0x11c>
 800e41c:	2e01      	cmp	r6, #1
 800e41e:	d02d      	beq.n	800e47c <ucdr_serialize_endian_double+0x128>
 800e420:	68a3      	ldr	r3, [r4, #8]
 800e422:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e426:	701a      	strb	r2, [r3, #0]
 800e428:	68a3      	ldr	r3, [r4, #8]
 800e42a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e42e:	705a      	strb	r2, [r3, #1]
 800e430:	68a3      	ldr	r3, [r4, #8]
 800e432:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e436:	709a      	strb	r2, [r3, #2]
 800e438:	68a3      	ldr	r3, [r4, #8]
 800e43a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e43e:	70da      	strb	r2, [r3, #3]
 800e440:	68a3      	ldr	r3, [r4, #8]
 800e442:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e446:	711a      	strb	r2, [r3, #4]
 800e448:	68a3      	ldr	r3, [r4, #8]
 800e44a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e44e:	715a      	strb	r2, [r3, #5]
 800e450:	68a3      	ldr	r3, [r4, #8]
 800e452:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e456:	719a      	strb	r2, [r3, #6]
 800e458:	68a3      	ldr	r3, [r4, #8]
 800e45a:	f89d 2000 	ldrb.w	r2, [sp]
 800e45e:	71da      	strb	r2, [r3, #7]
 800e460:	68a2      	ldr	r2, [r4, #8]
 800e462:	6923      	ldr	r3, [r4, #16]
 800e464:	3208      	adds	r2, #8
 800e466:	3308      	adds	r3, #8
 800e468:	2108      	movs	r1, #8
 800e46a:	60a2      	str	r2, [r4, #8]
 800e46c:	6123      	str	r3, [r4, #16]
 800e46e:	7561      	strb	r1, [r4, #21]
 800e470:	7da0      	ldrb	r0, [r4, #22]
 800e472:	f080 0001 	eor.w	r0, r0, #1
 800e476:	b003      	add	sp, #12
 800e478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e47c:	466b      	mov	r3, sp
 800e47e:	cb03      	ldmia	r3!, {r0, r1}
 800e480:	68a3      	ldr	r3, [r4, #8]
 800e482:	6018      	str	r0, [r3, #0]
 800e484:	6059      	str	r1, [r3, #4]
 800e486:	e7eb      	b.n	800e460 <ucdr_serialize_endian_double+0x10c>
 800e488:	68a2      	ldr	r2, [r4, #8]
 800e48a:	6923      	ldr	r3, [r4, #16]
 800e48c:	7da0      	ldrb	r0, [r4, #22]
 800e48e:	f884 8015 	strb.w	r8, [r4, #21]
 800e492:	1b52      	subs	r2, r2, r5
 800e494:	1b5b      	subs	r3, r3, r5
 800e496:	f080 0001 	eor.w	r0, r0, #1
 800e49a:	60a2      	str	r2, [r4, #8]
 800e49c:	6123      	str	r3, [r4, #16]
 800e49e:	b003      	add	sp, #12
 800e4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4a4:	68a3      	ldr	r3, [r4, #8]
 800e4a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e4aa:	701a      	strb	r2, [r3, #0]
 800e4ac:	68a3      	ldr	r3, [r4, #8]
 800e4ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e4b2:	701a      	strb	r2, [r3, #0]
 800e4b4:	68a3      	ldr	r3, [r4, #8]
 800e4b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e4ba:	701a      	strb	r2, [r3, #0]
 800e4bc:	68a3      	ldr	r3, [r4, #8]
 800e4be:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e4c2:	701a      	strb	r2, [r3, #0]
 800e4c4:	68a3      	ldr	r3, [r4, #8]
 800e4c6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e4ca:	701a      	strb	r2, [r3, #0]
 800e4cc:	68a3      	ldr	r3, [r4, #8]
 800e4ce:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e4d2:	701a      	strb	r2, [r3, #0]
 800e4d4:	68a3      	ldr	r3, [r4, #8]
 800e4d6:	f89d 2000 	ldrb.w	r2, [sp]
 800e4da:	701a      	strb	r2, [r3, #0]
 800e4dc:	e78a      	b.n	800e3f4 <ucdr_serialize_endian_double+0xa0>
 800e4de:	466e      	mov	r6, sp
 800e4e0:	4631      	mov	r1, r6
 800e4e2:	462a      	mov	r2, r5
 800e4e4:	4638      	mov	r0, r7
 800e4e6:	f00a fcf6 	bl	8018ed6 <memcpy>
 800e4ea:	68a0      	ldr	r0, [r4, #8]
 800e4ec:	464a      	mov	r2, r9
 800e4ee:	1971      	adds	r1, r6, r5
 800e4f0:	f00a fcf1 	bl	8018ed6 <memcpy>
 800e4f4:	e77e      	b.n	800e3f4 <ucdr_serialize_endian_double+0xa0>
 800e4f6:	bf00      	nop

0800e4f8 <ucdr_deserialize_double>:
 800e4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4fc:	460d      	mov	r5, r1
 800e4fe:	2108      	movs	r1, #8
 800e500:	4604      	mov	r4, r0
 800e502:	f000 f9ed 	bl	800e8e0 <ucdr_buffer_alignment>
 800e506:	4601      	mov	r1, r0
 800e508:	4620      	mov	r0, r4
 800e50a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e50e:	f000 fa2b 	bl	800e968 <ucdr_advance_buffer>
 800e512:	2108      	movs	r1, #8
 800e514:	4620      	mov	r0, r4
 800e516:	f000 f983 	bl	800e820 <ucdr_check_buffer_available_for>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d151      	bne.n	800e5c2 <ucdr_deserialize_double+0xca>
 800e51e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e522:	42be      	cmp	r6, r7
 800e524:	d948      	bls.n	800e5b8 <ucdr_deserialize_double+0xc0>
 800e526:	6923      	ldr	r3, [r4, #16]
 800e528:	60a6      	str	r6, [r4, #8]
 800e52a:	1bf6      	subs	r6, r6, r7
 800e52c:	4433      	add	r3, r6
 800e52e:	f1c6 0808 	rsb	r8, r6, #8
 800e532:	6123      	str	r3, [r4, #16]
 800e534:	4641      	mov	r1, r8
 800e536:	4620      	mov	r0, r4
 800e538:	f000 f97e 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d06d      	beq.n	800e61c <ucdr_deserialize_double+0x124>
 800e540:	7d23      	ldrb	r3, [r4, #20]
 800e542:	2b01      	cmp	r3, #1
 800e544:	f000 8093 	beq.w	800e66e <ucdr_deserialize_double+0x176>
 800e548:	79fb      	ldrb	r3, [r7, #7]
 800e54a:	702b      	strb	r3, [r5, #0]
 800e54c:	2e00      	cmp	r6, #0
 800e54e:	d072      	beq.n	800e636 <ucdr_deserialize_double+0x13e>
 800e550:	79bb      	ldrb	r3, [r7, #6]
 800e552:	706b      	strb	r3, [r5, #1]
 800e554:	2e01      	cmp	r6, #1
 800e556:	f105 0302 	add.w	r3, r5, #2
 800e55a:	d070      	beq.n	800e63e <ucdr_deserialize_double+0x146>
 800e55c:	797b      	ldrb	r3, [r7, #5]
 800e55e:	70ab      	strb	r3, [r5, #2]
 800e560:	2e02      	cmp	r6, #2
 800e562:	f105 0303 	add.w	r3, r5, #3
 800e566:	d06e      	beq.n	800e646 <ucdr_deserialize_double+0x14e>
 800e568:	793b      	ldrb	r3, [r7, #4]
 800e56a:	70eb      	strb	r3, [r5, #3]
 800e56c:	2e03      	cmp	r6, #3
 800e56e:	f105 0304 	add.w	r3, r5, #4
 800e572:	d06c      	beq.n	800e64e <ucdr_deserialize_double+0x156>
 800e574:	78fb      	ldrb	r3, [r7, #3]
 800e576:	712b      	strb	r3, [r5, #4]
 800e578:	2e04      	cmp	r6, #4
 800e57a:	f105 0305 	add.w	r3, r5, #5
 800e57e:	d06a      	beq.n	800e656 <ucdr_deserialize_double+0x15e>
 800e580:	78bb      	ldrb	r3, [r7, #2]
 800e582:	716b      	strb	r3, [r5, #5]
 800e584:	2e05      	cmp	r6, #5
 800e586:	f105 0306 	add.w	r3, r5, #6
 800e58a:	d068      	beq.n	800e65e <ucdr_deserialize_double+0x166>
 800e58c:	787b      	ldrb	r3, [r7, #1]
 800e58e:	71ab      	strb	r3, [r5, #6]
 800e590:	2e06      	cmp	r6, #6
 800e592:	f105 0307 	add.w	r3, r5, #7
 800e596:	d066      	beq.n	800e666 <ucdr_deserialize_double+0x16e>
 800e598:	783b      	ldrb	r3, [r7, #0]
 800e59a:	71eb      	strb	r3, [r5, #7]
 800e59c:	6923      	ldr	r3, [r4, #16]
 800e59e:	68a2      	ldr	r2, [r4, #8]
 800e5a0:	7da0      	ldrb	r0, [r4, #22]
 800e5a2:	3308      	adds	r3, #8
 800e5a4:	1b9e      	subs	r6, r3, r6
 800e5a6:	2308      	movs	r3, #8
 800e5a8:	4442      	add	r2, r8
 800e5aa:	7563      	strb	r3, [r4, #21]
 800e5ac:	60a2      	str	r2, [r4, #8]
 800e5ae:	6126      	str	r6, [r4, #16]
 800e5b0:	f080 0001 	eor.w	r0, r0, #1
 800e5b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5b8:	2108      	movs	r1, #8
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	f000 f93c 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800e5c0:	b310      	cbz	r0, 800e608 <ucdr_deserialize_double+0x110>
 800e5c2:	7d23      	ldrb	r3, [r4, #20]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	68a3      	ldr	r3, [r4, #8]
 800e5c8:	d023      	beq.n	800e612 <ucdr_deserialize_double+0x11a>
 800e5ca:	79db      	ldrb	r3, [r3, #7]
 800e5cc:	702b      	strb	r3, [r5, #0]
 800e5ce:	68a3      	ldr	r3, [r4, #8]
 800e5d0:	799b      	ldrb	r3, [r3, #6]
 800e5d2:	706b      	strb	r3, [r5, #1]
 800e5d4:	68a3      	ldr	r3, [r4, #8]
 800e5d6:	795b      	ldrb	r3, [r3, #5]
 800e5d8:	70ab      	strb	r3, [r5, #2]
 800e5da:	68a3      	ldr	r3, [r4, #8]
 800e5dc:	791b      	ldrb	r3, [r3, #4]
 800e5de:	70eb      	strb	r3, [r5, #3]
 800e5e0:	68a3      	ldr	r3, [r4, #8]
 800e5e2:	78db      	ldrb	r3, [r3, #3]
 800e5e4:	712b      	strb	r3, [r5, #4]
 800e5e6:	68a3      	ldr	r3, [r4, #8]
 800e5e8:	789b      	ldrb	r3, [r3, #2]
 800e5ea:	716b      	strb	r3, [r5, #5]
 800e5ec:	68a3      	ldr	r3, [r4, #8]
 800e5ee:	785b      	ldrb	r3, [r3, #1]
 800e5f0:	71ab      	strb	r3, [r5, #6]
 800e5f2:	68a3      	ldr	r3, [r4, #8]
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	71eb      	strb	r3, [r5, #7]
 800e5f8:	68a2      	ldr	r2, [r4, #8]
 800e5fa:	6923      	ldr	r3, [r4, #16]
 800e5fc:	3208      	adds	r2, #8
 800e5fe:	3308      	adds	r3, #8
 800e600:	2108      	movs	r1, #8
 800e602:	60a2      	str	r2, [r4, #8]
 800e604:	6123      	str	r3, [r4, #16]
 800e606:	7561      	strb	r1, [r4, #21]
 800e608:	7da0      	ldrb	r0, [r4, #22]
 800e60a:	f080 0001 	eor.w	r0, r0, #1
 800e60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	606b      	str	r3, [r5, #4]
 800e618:	602a      	str	r2, [r5, #0]
 800e61a:	e7ed      	b.n	800e5f8 <ucdr_deserialize_double+0x100>
 800e61c:	68a2      	ldr	r2, [r4, #8]
 800e61e:	6923      	ldr	r3, [r4, #16]
 800e620:	7da0      	ldrb	r0, [r4, #22]
 800e622:	f884 9015 	strb.w	r9, [r4, #21]
 800e626:	1b92      	subs	r2, r2, r6
 800e628:	1b9b      	subs	r3, r3, r6
 800e62a:	60a2      	str	r2, [r4, #8]
 800e62c:	6123      	str	r3, [r4, #16]
 800e62e:	f080 0001 	eor.w	r0, r0, #1
 800e632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e636:	68a3      	ldr	r3, [r4, #8]
 800e638:	799b      	ldrb	r3, [r3, #6]
 800e63a:	706b      	strb	r3, [r5, #1]
 800e63c:	1cab      	adds	r3, r5, #2
 800e63e:	68a2      	ldr	r2, [r4, #8]
 800e640:	7952      	ldrb	r2, [r2, #5]
 800e642:	f803 2b01 	strb.w	r2, [r3], #1
 800e646:	68a2      	ldr	r2, [r4, #8]
 800e648:	7912      	ldrb	r2, [r2, #4]
 800e64a:	f803 2b01 	strb.w	r2, [r3], #1
 800e64e:	68a2      	ldr	r2, [r4, #8]
 800e650:	78d2      	ldrb	r2, [r2, #3]
 800e652:	f803 2b01 	strb.w	r2, [r3], #1
 800e656:	68a2      	ldr	r2, [r4, #8]
 800e658:	7892      	ldrb	r2, [r2, #2]
 800e65a:	f803 2b01 	strb.w	r2, [r3], #1
 800e65e:	68a2      	ldr	r2, [r4, #8]
 800e660:	7852      	ldrb	r2, [r2, #1]
 800e662:	f803 2b01 	strb.w	r2, [r3], #1
 800e666:	68a2      	ldr	r2, [r4, #8]
 800e668:	7812      	ldrb	r2, [r2, #0]
 800e66a:	701a      	strb	r2, [r3, #0]
 800e66c:	e796      	b.n	800e59c <ucdr_deserialize_double+0xa4>
 800e66e:	4639      	mov	r1, r7
 800e670:	4632      	mov	r2, r6
 800e672:	4628      	mov	r0, r5
 800e674:	f00a fc2f 	bl	8018ed6 <memcpy>
 800e678:	68a1      	ldr	r1, [r4, #8]
 800e67a:	4642      	mov	r2, r8
 800e67c:	19a8      	adds	r0, r5, r6
 800e67e:	f00a fc2a 	bl	8018ed6 <memcpy>
 800e682:	e78b      	b.n	800e59c <ucdr_deserialize_double+0xa4>

0800e684 <ucdr_deserialize_endian_double>:
 800e684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e688:	460f      	mov	r7, r1
 800e68a:	2108      	movs	r1, #8
 800e68c:	4604      	mov	r4, r0
 800e68e:	4615      	mov	r5, r2
 800e690:	f000 f926 	bl	800e8e0 <ucdr_buffer_alignment>
 800e694:	4601      	mov	r1, r0
 800e696:	4620      	mov	r0, r4
 800e698:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e69c:	f000 f964 	bl	800e968 <ucdr_advance_buffer>
 800e6a0:	2108      	movs	r1, #8
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f000 f8bc 	bl	800e820 <ucdr_check_buffer_available_for>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d159      	bne.n	800e760 <ucdr_deserialize_endian_double+0xdc>
 800e6ac:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800e6b0:	4546      	cmp	r6, r8
 800e6b2:	d950      	bls.n	800e756 <ucdr_deserialize_endian_double+0xd2>
 800e6b4:	6923      	ldr	r3, [r4, #16]
 800e6b6:	60a6      	str	r6, [r4, #8]
 800e6b8:	eba6 0608 	sub.w	r6, r6, r8
 800e6bc:	4433      	add	r3, r6
 800e6be:	f1c6 0a08 	rsb	sl, r6, #8
 800e6c2:	6123      	str	r3, [r4, #16]
 800e6c4:	4651      	mov	r1, sl
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f000 f8b6 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	d073      	beq.n	800e7b8 <ucdr_deserialize_endian_double+0x134>
 800e6d0:	2f01      	cmp	r7, #1
 800e6d2:	f000 809a 	beq.w	800e80a <ucdr_deserialize_endian_double+0x186>
 800e6d6:	f898 3007 	ldrb.w	r3, [r8, #7]
 800e6da:	702b      	strb	r3, [r5, #0]
 800e6dc:	2e00      	cmp	r6, #0
 800e6de:	d078      	beq.n	800e7d2 <ucdr_deserialize_endian_double+0x14e>
 800e6e0:	f898 3006 	ldrb.w	r3, [r8, #6]
 800e6e4:	706b      	strb	r3, [r5, #1]
 800e6e6:	2e01      	cmp	r6, #1
 800e6e8:	f105 0302 	add.w	r3, r5, #2
 800e6ec:	d075      	beq.n	800e7da <ucdr_deserialize_endian_double+0x156>
 800e6ee:	f898 3005 	ldrb.w	r3, [r8, #5]
 800e6f2:	70ab      	strb	r3, [r5, #2]
 800e6f4:	2e02      	cmp	r6, #2
 800e6f6:	f105 0303 	add.w	r3, r5, #3
 800e6fa:	d072      	beq.n	800e7e2 <ucdr_deserialize_endian_double+0x15e>
 800e6fc:	f898 3004 	ldrb.w	r3, [r8, #4]
 800e700:	70eb      	strb	r3, [r5, #3]
 800e702:	2e03      	cmp	r6, #3
 800e704:	f105 0304 	add.w	r3, r5, #4
 800e708:	d06f      	beq.n	800e7ea <ucdr_deserialize_endian_double+0x166>
 800e70a:	f898 3003 	ldrb.w	r3, [r8, #3]
 800e70e:	712b      	strb	r3, [r5, #4]
 800e710:	2e04      	cmp	r6, #4
 800e712:	f105 0305 	add.w	r3, r5, #5
 800e716:	d06c      	beq.n	800e7f2 <ucdr_deserialize_endian_double+0x16e>
 800e718:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e71c:	716b      	strb	r3, [r5, #5]
 800e71e:	2e05      	cmp	r6, #5
 800e720:	f105 0306 	add.w	r3, r5, #6
 800e724:	d069      	beq.n	800e7fa <ucdr_deserialize_endian_double+0x176>
 800e726:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e72a:	71ab      	strb	r3, [r5, #6]
 800e72c:	2e06      	cmp	r6, #6
 800e72e:	f105 0307 	add.w	r3, r5, #7
 800e732:	d066      	beq.n	800e802 <ucdr_deserialize_endian_double+0x17e>
 800e734:	f898 3000 	ldrb.w	r3, [r8]
 800e738:	71eb      	strb	r3, [r5, #7]
 800e73a:	6923      	ldr	r3, [r4, #16]
 800e73c:	68a2      	ldr	r2, [r4, #8]
 800e73e:	7da0      	ldrb	r0, [r4, #22]
 800e740:	3308      	adds	r3, #8
 800e742:	1b9e      	subs	r6, r3, r6
 800e744:	2308      	movs	r3, #8
 800e746:	4452      	add	r2, sl
 800e748:	7563      	strb	r3, [r4, #21]
 800e74a:	60a2      	str	r2, [r4, #8]
 800e74c:	6126      	str	r6, [r4, #16]
 800e74e:	f080 0001 	eor.w	r0, r0, #1
 800e752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e756:	2108      	movs	r1, #8
 800e758:	4620      	mov	r0, r4
 800e75a:	f000 f86d 	bl	800e838 <ucdr_check_final_buffer_behavior>
 800e75e:	b308      	cbz	r0, 800e7a4 <ucdr_deserialize_endian_double+0x120>
 800e760:	2f01      	cmp	r7, #1
 800e762:	68a3      	ldr	r3, [r4, #8]
 800e764:	d023      	beq.n	800e7ae <ucdr_deserialize_endian_double+0x12a>
 800e766:	79db      	ldrb	r3, [r3, #7]
 800e768:	702b      	strb	r3, [r5, #0]
 800e76a:	68a3      	ldr	r3, [r4, #8]
 800e76c:	799b      	ldrb	r3, [r3, #6]
 800e76e:	706b      	strb	r3, [r5, #1]
 800e770:	68a3      	ldr	r3, [r4, #8]
 800e772:	795b      	ldrb	r3, [r3, #5]
 800e774:	70ab      	strb	r3, [r5, #2]
 800e776:	68a3      	ldr	r3, [r4, #8]
 800e778:	791b      	ldrb	r3, [r3, #4]
 800e77a:	70eb      	strb	r3, [r5, #3]
 800e77c:	68a3      	ldr	r3, [r4, #8]
 800e77e:	78db      	ldrb	r3, [r3, #3]
 800e780:	712b      	strb	r3, [r5, #4]
 800e782:	68a3      	ldr	r3, [r4, #8]
 800e784:	789b      	ldrb	r3, [r3, #2]
 800e786:	716b      	strb	r3, [r5, #5]
 800e788:	68a3      	ldr	r3, [r4, #8]
 800e78a:	785b      	ldrb	r3, [r3, #1]
 800e78c:	71ab      	strb	r3, [r5, #6]
 800e78e:	68a3      	ldr	r3, [r4, #8]
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	71eb      	strb	r3, [r5, #7]
 800e794:	68a2      	ldr	r2, [r4, #8]
 800e796:	6923      	ldr	r3, [r4, #16]
 800e798:	3208      	adds	r2, #8
 800e79a:	3308      	adds	r3, #8
 800e79c:	2108      	movs	r1, #8
 800e79e:	60a2      	str	r2, [r4, #8]
 800e7a0:	6123      	str	r3, [r4, #16]
 800e7a2:	7561      	strb	r1, [r4, #21]
 800e7a4:	7da0      	ldrb	r0, [r4, #22]
 800e7a6:	f080 0001 	eor.w	r0, r0, #1
 800e7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	606b      	str	r3, [r5, #4]
 800e7b4:	602a      	str	r2, [r5, #0]
 800e7b6:	e7ed      	b.n	800e794 <ucdr_deserialize_endian_double+0x110>
 800e7b8:	68a2      	ldr	r2, [r4, #8]
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	7da0      	ldrb	r0, [r4, #22]
 800e7be:	f884 9015 	strb.w	r9, [r4, #21]
 800e7c2:	1b92      	subs	r2, r2, r6
 800e7c4:	1b9b      	subs	r3, r3, r6
 800e7c6:	60a2      	str	r2, [r4, #8]
 800e7c8:	6123      	str	r3, [r4, #16]
 800e7ca:	f080 0001 	eor.w	r0, r0, #1
 800e7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d2:	68a3      	ldr	r3, [r4, #8]
 800e7d4:	799b      	ldrb	r3, [r3, #6]
 800e7d6:	706b      	strb	r3, [r5, #1]
 800e7d8:	1cab      	adds	r3, r5, #2
 800e7da:	68a2      	ldr	r2, [r4, #8]
 800e7dc:	7952      	ldrb	r2, [r2, #5]
 800e7de:	f803 2b01 	strb.w	r2, [r3], #1
 800e7e2:	68a2      	ldr	r2, [r4, #8]
 800e7e4:	7912      	ldrb	r2, [r2, #4]
 800e7e6:	f803 2b01 	strb.w	r2, [r3], #1
 800e7ea:	68a2      	ldr	r2, [r4, #8]
 800e7ec:	78d2      	ldrb	r2, [r2, #3]
 800e7ee:	f803 2b01 	strb.w	r2, [r3], #1
 800e7f2:	68a2      	ldr	r2, [r4, #8]
 800e7f4:	7892      	ldrb	r2, [r2, #2]
 800e7f6:	f803 2b01 	strb.w	r2, [r3], #1
 800e7fa:	68a2      	ldr	r2, [r4, #8]
 800e7fc:	7852      	ldrb	r2, [r2, #1]
 800e7fe:	f803 2b01 	strb.w	r2, [r3], #1
 800e802:	68a2      	ldr	r2, [r4, #8]
 800e804:	7812      	ldrb	r2, [r2, #0]
 800e806:	701a      	strb	r2, [r3, #0]
 800e808:	e797      	b.n	800e73a <ucdr_deserialize_endian_double+0xb6>
 800e80a:	4641      	mov	r1, r8
 800e80c:	4632      	mov	r2, r6
 800e80e:	4628      	mov	r0, r5
 800e810:	f00a fb61 	bl	8018ed6 <memcpy>
 800e814:	68a1      	ldr	r1, [r4, #8]
 800e816:	4652      	mov	r2, sl
 800e818:	19a8      	adds	r0, r5, r6
 800e81a:	f00a fb5c 	bl	8018ed6 <memcpy>
 800e81e:	e78c      	b.n	800e73a <ucdr_deserialize_endian_double+0xb6>

0800e820 <ucdr_check_buffer_available_for>:
 800e820:	7d83      	ldrb	r3, [r0, #22]
 800e822:	b93b      	cbnz	r3, 800e834 <ucdr_check_buffer_available_for+0x14>
 800e824:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e828:	4419      	add	r1, r3
 800e82a:	4288      	cmp	r0, r1
 800e82c:	bf34      	ite	cc
 800e82e:	2000      	movcc	r0, #0
 800e830:	2001      	movcs	r0, #1
 800e832:	4770      	bx	lr
 800e834:	2000      	movs	r0, #0
 800e836:	4770      	bx	lr

0800e838 <ucdr_check_final_buffer_behavior>:
 800e838:	7d83      	ldrb	r3, [r0, #22]
 800e83a:	b943      	cbnz	r3, 800e84e <ucdr_check_final_buffer_behavior+0x16>
 800e83c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e840:	4291      	cmp	r1, r2
 800e842:	b510      	push	{r4, lr}
 800e844:	4604      	mov	r4, r0
 800e846:	d205      	bcs.n	800e854 <ucdr_check_final_buffer_behavior+0x1c>
 800e848:	2301      	movs	r3, #1
 800e84a:	4618      	mov	r0, r3
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	2300      	movs	r3, #0
 800e850:	4618      	mov	r0, r3
 800e852:	4770      	bx	lr
 800e854:	6982      	ldr	r2, [r0, #24]
 800e856:	b13a      	cbz	r2, 800e868 <ucdr_check_final_buffer_behavior+0x30>
 800e858:	69c1      	ldr	r1, [r0, #28]
 800e85a:	4790      	blx	r2
 800e85c:	f080 0301 	eor.w	r3, r0, #1
 800e860:	b2db      	uxtb	r3, r3
 800e862:	75a0      	strb	r0, [r4, #22]
 800e864:	4618      	mov	r0, r3
 800e866:	bd10      	pop	{r4, pc}
 800e868:	2001      	movs	r0, #1
 800e86a:	75a0      	strb	r0, [r4, #22]
 800e86c:	e7fa      	b.n	800e864 <ucdr_check_final_buffer_behavior+0x2c>
 800e86e:	bf00      	nop

0800e870 <ucdr_set_on_full_buffer_callback>:
 800e870:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop

0800e878 <ucdr_init_buffer_origin_offset_endian>:
 800e878:	b410      	push	{r4}
 800e87a:	9c01      	ldr	r4, [sp, #4]
 800e87c:	6001      	str	r1, [r0, #0]
 800e87e:	440a      	add	r2, r1
 800e880:	6042      	str	r2, [r0, #4]
 800e882:	190a      	adds	r2, r1, r4
 800e884:	441c      	add	r4, r3
 800e886:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e88a:	6082      	str	r2, [r0, #8]
 800e88c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e890:	7503      	strb	r3, [r0, #20]
 800e892:	2200      	movs	r2, #0
 800e894:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e89c:	7542      	strb	r2, [r0, #21]
 800e89e:	7582      	strb	r2, [r0, #22]
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop

0800e8a4 <ucdr_init_buffer_origin_offset>:
 800e8a4:	b510      	push	{r4, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	9c04      	ldr	r4, [sp, #16]
 800e8aa:	9400      	str	r4, [sp, #0]
 800e8ac:	2401      	movs	r4, #1
 800e8ae:	9401      	str	r4, [sp, #4]
 800e8b0:	f7ff ffe2 	bl	800e878 <ucdr_init_buffer_origin_offset_endian>
 800e8b4:	b002      	add	sp, #8
 800e8b6:	bd10      	pop	{r4, pc}

0800e8b8 <ucdr_init_buffer_origin>:
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	2400      	movs	r4, #0
 800e8be:	9400      	str	r4, [sp, #0]
 800e8c0:	f7ff fff0 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 800e8c4:	b002      	add	sp, #8
 800e8c6:	bd10      	pop	{r4, pc}

0800e8c8 <ucdr_init_buffer>:
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	f7ff bff5 	b.w	800e8b8 <ucdr_init_buffer_origin>
 800e8ce:	bf00      	nop

0800e8d0 <ucdr_alignment>:
 800e8d0:	fbb0 f3f1 	udiv	r3, r0, r1
 800e8d4:	fb03 0011 	mls	r0, r3, r1, r0
 800e8d8:	1a08      	subs	r0, r1, r0
 800e8da:	3901      	subs	r1, #1
 800e8dc:	4008      	ands	r0, r1
 800e8de:	4770      	bx	lr

0800e8e0 <ucdr_buffer_alignment>:
 800e8e0:	7d43      	ldrb	r3, [r0, #21]
 800e8e2:	428b      	cmp	r3, r1
 800e8e4:	d208      	bcs.n	800e8f8 <ucdr_buffer_alignment+0x18>
 800e8e6:	6900      	ldr	r0, [r0, #16]
 800e8e8:	fbb0 f3f1 	udiv	r3, r0, r1
 800e8ec:	fb01 0013 	mls	r0, r1, r3, r0
 800e8f0:	1a08      	subs	r0, r1, r0
 800e8f2:	3901      	subs	r1, #1
 800e8f4:	4008      	ands	r0, r1
 800e8f6:	4770      	bx	lr
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	4770      	bx	lr

0800e8fc <ucdr_align_to>:
 800e8fc:	b538      	push	{r3, r4, r5, lr}
 800e8fe:	4604      	mov	r4, r0
 800e900:	460d      	mov	r5, r1
 800e902:	f7ff ffed 	bl	800e8e0 <ucdr_buffer_alignment>
 800e906:	68a3      	ldr	r3, [r4, #8]
 800e908:	6921      	ldr	r1, [r4, #16]
 800e90a:	7565      	strb	r5, [r4, #21]
 800e90c:	181a      	adds	r2, r3, r0
 800e90e:	6863      	ldr	r3, [r4, #4]
 800e910:	4293      	cmp	r3, r2
 800e912:	4408      	add	r0, r1
 800e914:	bf28      	it	cs
 800e916:	4613      	movcs	r3, r2
 800e918:	6120      	str	r0, [r4, #16]
 800e91a:	60a3      	str	r3, [r4, #8]
 800e91c:	bd38      	pop	{r3, r4, r5, pc}
 800e91e:	bf00      	nop

0800e920 <ucdr_buffer_length>:
 800e920:	6882      	ldr	r2, [r0, #8]
 800e922:	6800      	ldr	r0, [r0, #0]
 800e924:	1a10      	subs	r0, r2, r0
 800e926:	4770      	bx	lr

0800e928 <ucdr_buffer_remaining>:
 800e928:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e92c:	1a10      	subs	r0, r2, r0
 800e92e:	4770      	bx	lr

0800e930 <ucdr_check_final_buffer_behavior_array>:
 800e930:	b538      	push	{r3, r4, r5, lr}
 800e932:	7d83      	ldrb	r3, [r0, #22]
 800e934:	b963      	cbnz	r3, 800e950 <ucdr_check_final_buffer_behavior_array+0x20>
 800e936:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	4604      	mov	r4, r0
 800e93e:	460d      	mov	r5, r1
 800e940:	d308      	bcc.n	800e954 <ucdr_check_final_buffer_behavior_array+0x24>
 800e942:	b139      	cbz	r1, 800e954 <ucdr_check_final_buffer_behavior_array+0x24>
 800e944:	6983      	ldr	r3, [r0, #24]
 800e946:	b163      	cbz	r3, 800e962 <ucdr_check_final_buffer_behavior_array+0x32>
 800e948:	69c1      	ldr	r1, [r0, #28]
 800e94a:	4798      	blx	r3
 800e94c:	75a0      	strb	r0, [r4, #22]
 800e94e:	b108      	cbz	r0, 800e954 <ucdr_check_final_buffer_behavior_array+0x24>
 800e950:	2000      	movs	r0, #0
 800e952:	bd38      	pop	{r3, r4, r5, pc}
 800e954:	4620      	mov	r0, r4
 800e956:	f7ff ffe7 	bl	800e928 <ucdr_buffer_remaining>
 800e95a:	42a8      	cmp	r0, r5
 800e95c:	bf28      	it	cs
 800e95e:	4628      	movcs	r0, r5
 800e960:	bd38      	pop	{r3, r4, r5, pc}
 800e962:	2301      	movs	r3, #1
 800e964:	7583      	strb	r3, [r0, #22]
 800e966:	e7f3      	b.n	800e950 <ucdr_check_final_buffer_behavior_array+0x20>

0800e968 <ucdr_advance_buffer>:
 800e968:	b538      	push	{r3, r4, r5, lr}
 800e96a:	4604      	mov	r4, r0
 800e96c:	460d      	mov	r5, r1
 800e96e:	f7ff ff57 	bl	800e820 <ucdr_check_buffer_available_for>
 800e972:	b178      	cbz	r0, 800e994 <ucdr_advance_buffer+0x2c>
 800e974:	6923      	ldr	r3, [r4, #16]
 800e976:	68a2      	ldr	r2, [r4, #8]
 800e978:	442b      	add	r3, r5
 800e97a:	6123      	str	r3, [r4, #16]
 800e97c:	2301      	movs	r3, #1
 800e97e:	442a      	add	r2, r5
 800e980:	7563      	strb	r3, [r4, #21]
 800e982:	60a2      	str	r2, [r4, #8]
 800e984:	bd38      	pop	{r3, r4, r5, pc}
 800e986:	68a2      	ldr	r2, [r4, #8]
 800e988:	6923      	ldr	r3, [r4, #16]
 800e98a:	4402      	add	r2, r0
 800e98c:	4403      	add	r3, r0
 800e98e:	1a2d      	subs	r5, r5, r0
 800e990:	60a2      	str	r2, [r4, #8]
 800e992:	6123      	str	r3, [r4, #16]
 800e994:	4629      	mov	r1, r5
 800e996:	2201      	movs	r2, #1
 800e998:	4620      	mov	r0, r4
 800e99a:	f7ff ffc9 	bl	800e930 <ucdr_check_final_buffer_behavior_array>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d1f1      	bne.n	800e986 <ucdr_advance_buffer+0x1e>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	7563      	strb	r3, [r4, #21]
 800e9a6:	bd38      	pop	{r3, r4, r5, pc}

0800e9a8 <ucdr_serialize_sequence_char>:
 800e9a8:	b570      	push	{r4, r5, r6, lr}
 800e9aa:	4615      	mov	r5, r2
 800e9ac:	460e      	mov	r6, r1
 800e9ae:	7d01      	ldrb	r1, [r0, #20]
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	f7fe fe25 	bl	800d600 <ucdr_serialize_endian_uint32_t>
 800e9b6:	b90d      	cbnz	r5, 800e9bc <ucdr_serialize_sequence_char+0x14>
 800e9b8:	2001      	movs	r0, #1
 800e9ba:	bd70      	pop	{r4, r5, r6, pc}
 800e9bc:	7d21      	ldrb	r1, [r4, #20]
 800e9be:	462b      	mov	r3, r5
 800e9c0:	4632      	mov	r2, r6
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9c8:	f7fe b812 	b.w	800c9f0 <ucdr_serialize_endian_array_char>

0800e9cc <ucdr_deserialize_sequence_char>:
 800e9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d0:	461d      	mov	r5, r3
 800e9d2:	4616      	mov	r6, r2
 800e9d4:	460f      	mov	r7, r1
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	7d01      	ldrb	r1, [r0, #20]
 800e9da:	4604      	mov	r4, r0
 800e9dc:	f7fe ff38 	bl	800d850 <ucdr_deserialize_endian_uint32_t>
 800e9e0:	682b      	ldr	r3, [r5, #0]
 800e9e2:	429e      	cmp	r6, r3
 800e9e4:	bf3c      	itt	cc
 800e9e6:	2201      	movcc	r2, #1
 800e9e8:	75a2      	strbcc	r2, [r4, #22]
 800e9ea:	b913      	cbnz	r3, 800e9f2 <ucdr_deserialize_sequence_char+0x26>
 800e9ec:	2001      	movs	r0, #1
 800e9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f2:	7d21      	ldrb	r1, [r4, #20]
 800e9f4:	463a      	mov	r2, r7
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9fc:	f7fe b82a 	b.w	800ca54 <ucdr_deserialize_endian_array_char>

0800ea00 <ucdr_serialize_sequence_uint8_t>:
 800ea00:	b570      	push	{r4, r5, r6, lr}
 800ea02:	4615      	mov	r5, r2
 800ea04:	460e      	mov	r6, r1
 800ea06:	7d01      	ldrb	r1, [r0, #20]
 800ea08:	4604      	mov	r4, r0
 800ea0a:	f7fe fdf9 	bl	800d600 <ucdr_serialize_endian_uint32_t>
 800ea0e:	b90d      	cbnz	r5, 800ea14 <ucdr_serialize_sequence_uint8_t+0x14>
 800ea10:	2001      	movs	r0, #1
 800ea12:	bd70      	pop	{r4, r5, r6, pc}
 800ea14:	7d21      	ldrb	r1, [r4, #20]
 800ea16:	462b      	mov	r3, r5
 800ea18:	4632      	mov	r2, r6
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea20:	f7fe b87c 	b.w	800cb1c <ucdr_serialize_endian_array_uint8_t>

0800ea24 <ucdr_deserialize_sequence_uint8_t>:
 800ea24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea28:	461d      	mov	r5, r3
 800ea2a:	4616      	mov	r6, r2
 800ea2c:	460f      	mov	r7, r1
 800ea2e:	461a      	mov	r2, r3
 800ea30:	7d01      	ldrb	r1, [r0, #20]
 800ea32:	4604      	mov	r4, r0
 800ea34:	f7fe ff0c 	bl	800d850 <ucdr_deserialize_endian_uint32_t>
 800ea38:	682b      	ldr	r3, [r5, #0]
 800ea3a:	429e      	cmp	r6, r3
 800ea3c:	bf3c      	itt	cc
 800ea3e:	2201      	movcc	r2, #1
 800ea40:	75a2      	strbcc	r2, [r4, #22]
 800ea42:	b913      	cbnz	r3, 800ea4a <ucdr_deserialize_sequence_uint8_t+0x26>
 800ea44:	2001      	movs	r0, #1
 800ea46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea4a:	7d21      	ldrb	r1, [r4, #20]
 800ea4c:	463a      	mov	r2, r7
 800ea4e:	4620      	mov	r0, r4
 800ea50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea54:	f7fe b8c6 	b.w	800cbe4 <ucdr_deserialize_endian_array_uint8_t>

0800ea58 <uxr_buffer_delete_entity>:
 800ea58:	b510      	push	{r4, lr}
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	b08e      	sub	sp, #56	@ 0x38
 800ea5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ea62:	2303      	movs	r3, #3
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	2204      	movs	r2, #4
 800ea68:	ab06      	add	r3, sp, #24
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	9103      	str	r1, [sp, #12]
 800ea6e:	f001 f951 	bl	800fd14 <uxr_prepare_stream_to_write_submessage>
 800ea72:	b918      	cbnz	r0, 800ea7c <uxr_buffer_delete_entity+0x24>
 800ea74:	4604      	mov	r4, r0
 800ea76:	4620      	mov	r0, r4
 800ea78:	b00e      	add	sp, #56	@ 0x38
 800ea7a:	bd10      	pop	{r4, pc}
 800ea7c:	9902      	ldr	r1, [sp, #8]
 800ea7e:	aa05      	add	r2, sp, #20
 800ea80:	4620      	mov	r0, r4
 800ea82:	f001 fa7d 	bl	800ff80 <uxr_init_base_object_request>
 800ea86:	a905      	add	r1, sp, #20
 800ea88:	4604      	mov	r4, r0
 800ea8a:	a806      	add	r0, sp, #24
 800ea8c:	f002 fcce 	bl	801142c <uxr_serialize_DELETE_Payload>
 800ea90:	4620      	mov	r0, r4
 800ea92:	b00e      	add	sp, #56	@ 0x38
 800ea94:	bd10      	pop	{r4, pc}
 800ea96:	bf00      	nop

0800ea98 <uxr_common_create_entity>:
 800ea98:	b510      	push	{r4, lr}
 800ea9a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ea9e:	b08c      	sub	sp, #48	@ 0x30
 800eaa0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800eaa4:	f1bc 0f01 	cmp.w	ip, #1
 800eaa8:	bf0c      	ite	eq
 800eaaa:	f003 0201 	andeq.w	r2, r3, #1
 800eaae:	2200      	movne	r2, #0
 800eab0:	330e      	adds	r3, #14
 800eab2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800eab6:	9101      	str	r1, [sp, #4]
 800eab8:	441a      	add	r2, r3
 800eaba:	2301      	movs	r3, #1
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	9903      	ldr	r1, [sp, #12]
 800eac0:	ab04      	add	r3, sp, #16
 800eac2:	b292      	uxth	r2, r2
 800eac4:	4604      	mov	r4, r0
 800eac6:	f001 f925 	bl	800fd14 <uxr_prepare_stream_to_write_submessage>
 800eaca:	b918      	cbnz	r0, 800ead4 <uxr_common_create_entity+0x3c>
 800eacc:	4604      	mov	r4, r0
 800eace:	4620      	mov	r0, r4
 800ead0:	b00c      	add	sp, #48	@ 0x30
 800ead2:	bd10      	pop	{r4, pc}
 800ead4:	9902      	ldr	r1, [sp, #8]
 800ead6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ead8:	4620      	mov	r0, r4
 800eada:	f001 fa51 	bl	800ff80 <uxr_init_base_object_request>
 800eade:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eae0:	4604      	mov	r4, r0
 800eae2:	a804      	add	r0, sp, #16
 800eae4:	f002 fbfe 	bl	80112e4 <uxr_serialize_CREATE_Payload>
 800eae8:	4620      	mov	r0, r4
 800eaea:	b00c      	add	sp, #48	@ 0x30
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	bf00      	nop

0800eaf0 <uxr_buffer_create_participant_bin>:
 800eaf0:	b570      	push	{r4, r5, r6, lr}
 800eaf2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800eaf6:	ac11      	add	r4, sp, #68	@ 0x44
 800eaf8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800eafc:	2303      	movs	r3, #3
 800eafe:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800eb02:	7223      	strb	r3, [r4, #8]
 800eb04:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800eb06:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	4605      	mov	r5, r0
 800eb10:	7122      	strb	r2, [r4, #4]
 800eb12:	f88d 1014 	strb.w	r1, [sp, #20]
 800eb16:	b1cb      	cbz	r3, 800eb4c <uxr_buffer_create_participant_bin+0x5c>
 800eb18:	f88d 201c 	strb.w	r2, [sp, #28]
 800eb1c:	9308      	str	r3, [sp, #32]
 800eb1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb22:	a915      	add	r1, sp, #84	@ 0x54
 800eb24:	a809      	add	r0, sp, #36	@ 0x24
 800eb26:	f7ff fecf 	bl	800e8c8 <ucdr_init_buffer>
 800eb2a:	a905      	add	r1, sp, #20
 800eb2c:	a809      	add	r0, sp, #36	@ 0x24
 800eb2e:	f001 ffbb 	bl	8010aa8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800eb32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb34:	9600      	str	r6, [sp, #0]
 800eb36:	9401      	str	r4, [sp, #4]
 800eb38:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eb3c:	60e3      	str	r3, [r4, #12]
 800eb3e:	4628      	mov	r0, r5
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	f7ff ffa9 	bl	800ea98 <uxr_common_create_entity>
 800eb46:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800eb4a:	bd70      	pop	{r4, r5, r6, pc}
 800eb4c:	f88d 301c 	strb.w	r3, [sp, #28]
 800eb50:	e7e5      	b.n	800eb1e <uxr_buffer_create_participant_bin+0x2e>
 800eb52:	bf00      	nop

0800eb54 <uxr_buffer_create_topic_bin>:
 800eb54:	b570      	push	{r4, r5, r6, lr}
 800eb56:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800eb5a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800eb5e:	9105      	str	r1, [sp, #20]
 800eb60:	4605      	mov	r5, r0
 800eb62:	a997      	add	r1, sp, #604	@ 0x25c
 800eb64:	4618      	mov	r0, r3
 800eb66:	2302      	movs	r3, #2
 800eb68:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800eb6c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800eb70:	f000 f996 	bl	800eea0 <uxr_object_id_to_raw>
 800eb74:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800eb76:	9306      	str	r3, [sp, #24]
 800eb78:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800eb7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800eb82:	2301      	movs	r3, #1
 800eb84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb88:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800eb8c:	a917      	add	r1, sp, #92	@ 0x5c
 800eb8e:	2300      	movs	r3, #0
 800eb90:	a80b      	add	r0, sp, #44	@ 0x2c
 800eb92:	f88d 301c 	strb.w	r3, [sp, #28]
 800eb96:	f7ff fe97 	bl	800e8c8 <ucdr_init_buffer>
 800eb9a:	a906      	add	r1, sp, #24
 800eb9c:	a80b      	add	r0, sp, #44	@ 0x2c
 800eb9e:	f001 ffa5 	bl	8010aec <uxr_serialize_OBJK_Topic_Binary>
 800eba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eba4:	9316      	str	r3, [sp, #88]	@ 0x58
 800eba6:	ac13      	add	r4, sp, #76	@ 0x4c
 800eba8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ebac:	9600      	str	r6, [sp, #0]
 800ebae:	9401      	str	r4, [sp, #4]
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f7ff ff70 	bl	800ea98 <uxr_common_create_entity>
 800ebb8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800ebbc:	bd70      	pop	{r4, r5, r6, pc}
 800ebbe:	bf00      	nop

0800ebc0 <uxr_buffer_create_publisher_bin>:
 800ebc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebc2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800ebc6:	4605      	mov	r5, r0
 800ebc8:	9105      	str	r1, [sp, #20]
 800ebca:	4618      	mov	r0, r3
 800ebcc:	2603      	movs	r6, #3
 800ebce:	a992      	add	r1, sp, #584	@ 0x248
 800ebd0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ebd4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800ebd8:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800ebdc:	f000 f960 	bl	800eea0 <uxr_object_id_to_raw>
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebe6:	a912      	add	r1, sp, #72	@ 0x48
 800ebe8:	a806      	add	r0, sp, #24
 800ebea:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800ebee:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800ebf2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800ebf6:	f7ff fe67 	bl	800e8c8 <ucdr_init_buffer>
 800ebfa:	a993      	add	r1, sp, #588	@ 0x24c
 800ebfc:	a806      	add	r0, sp, #24
 800ebfe:	f002 f829 	bl	8010c54 <uxr_serialize_OBJK_Publisher_Binary>
 800ec02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec04:	9311      	str	r3, [sp, #68]	@ 0x44
 800ec06:	ac0e      	add	r4, sp, #56	@ 0x38
 800ec08:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ec0c:	9700      	str	r7, [sp, #0]
 800ec0e:	9401      	str	r4, [sp, #4]
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	4628      	mov	r0, r5
 800ec14:	f7ff ff40 	bl	800ea98 <uxr_common_create_entity>
 800ec18:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800ec1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec1e:	bf00      	nop

0800ec20 <uxr_buffer_create_subscriber_bin>:
 800ec20:	b570      	push	{r4, r5, r6, lr}
 800ec22:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800ec26:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ec2a:	9105      	str	r1, [sp, #20]
 800ec2c:	4605      	mov	r5, r0
 800ec2e:	a992      	add	r1, sp, #584	@ 0x248
 800ec30:	4618      	mov	r0, r3
 800ec32:	2304      	movs	r3, #4
 800ec34:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800ec38:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800ec3c:	f000 f930 	bl	800eea0 <uxr_object_id_to_raw>
 800ec40:	2300      	movs	r3, #0
 800ec42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec46:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800ec4a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800ec4e:	a912      	add	r1, sp, #72	@ 0x48
 800ec50:	2303      	movs	r3, #3
 800ec52:	a806      	add	r0, sp, #24
 800ec54:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800ec58:	f7ff fe36 	bl	800e8c8 <ucdr_init_buffer>
 800ec5c:	a993      	add	r1, sp, #588	@ 0x24c
 800ec5e:	a806      	add	r0, sp, #24
 800ec60:	f002 f8a8 	bl	8010db4 <uxr_serialize_OBJK_Subscriber_Binary>
 800ec64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec66:	9311      	str	r3, [sp, #68]	@ 0x44
 800ec68:	ac0e      	add	r4, sp, #56	@ 0x38
 800ec6a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ec6e:	9600      	str	r6, [sp, #0]
 800ec70:	9401      	str	r4, [sp, #4]
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	4628      	mov	r0, r5
 800ec76:	f7ff ff0f 	bl	800ea98 <uxr_common_create_entity>
 800ec7a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800ec7e:	bd70      	pop	{r4, r5, r6, pc}

0800ec80 <uxr_buffer_create_datawriter_bin>:
 800ec80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec84:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ec88:	ac1d      	add	r4, sp, #116	@ 0x74
 800ec8a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ec8e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800ec92:	9105      	str	r1, [sp, #20]
 800ec94:	4606      	mov	r6, r0
 800ec96:	a9a1      	add	r1, sp, #644	@ 0x284
 800ec98:	4618      	mov	r0, r3
 800ec9a:	2305      	movs	r3, #5
 800ec9c:	7123      	strb	r3, [r4, #4]
 800ec9e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800eca2:	2703      	movs	r7, #3
 800eca4:	f000 f8fc 	bl	800eea0 <uxr_object_id_to_raw>
 800eca8:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800ecaa:	7227      	strb	r7, [r4, #8]
 800ecac:	a90e      	add	r1, sp, #56	@ 0x38
 800ecae:	f000 f8f7 	bl	800eea0 <uxr_object_id_to_raw>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800ecb8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800ecbc:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ecc0:	3d00      	subs	r5, #0
 800ecc2:	bf18      	it	ne
 800ecc4:	2501      	movne	r5, #1
 800ecc6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800ecca:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800ecce:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ecd2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800ecdc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ece0:	bb8a      	cbnz	r2, 800ed46 <uxr_buffer_create_datawriter_bin+0xc6>
 800ece2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ece6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ecea:	f04f 0c13 	mov.w	ip, #19
 800ecee:	250b      	movs	r5, #11
 800ecf0:	2221      	movs	r2, #33	@ 0x21
 800ecf2:	2111      	movs	r1, #17
 800ecf4:	2009      	movs	r0, #9
 800ecf6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800ecfa:	b923      	cbnz	r3, 800ed06 <uxr_buffer_create_datawriter_bin+0x86>
 800ecfc:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ed00:	4672      	mov	r2, lr
 800ed02:	4661      	mov	r1, ip
 800ed04:	4628      	mov	r0, r5
 800ed06:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d025      	beq.n	800ed5a <uxr_buffer_create_datawriter_bin+0xda>
 800ed0e:	2b03      	cmp	r3, #3
 800ed10:	d029      	beq.n	800ed66 <uxr_buffer_create_datawriter_bin+0xe6>
 800ed12:	b32b      	cbz	r3, 800ed60 <uxr_buffer_create_datawriter_bin+0xe0>
 800ed14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed18:	a921      	add	r1, sp, #132	@ 0x84
 800ed1a:	a806      	add	r0, sp, #24
 800ed1c:	f7ff fdd4 	bl	800e8c8 <ucdr_init_buffer>
 800ed20:	a90e      	add	r1, sp, #56	@ 0x38
 800ed22:	a806      	add	r0, sp, #24
 800ed24:	f002 f8f8 	bl	8010f18 <uxr_serialize_OBJK_DataWriter_Binary>
 800ed28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed2a:	f8cd 8000 	str.w	r8, [sp]
 800ed2e:	9401      	str	r4, [sp, #4]
 800ed30:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ed34:	60e3      	str	r3, [r4, #12]
 800ed36:	4630      	mov	r0, r6
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	f7ff fead 	bl	800ea98 <uxr_common_create_entity>
 800ed3e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ed42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed46:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ed4a:	f04f 0c12 	mov.w	ip, #18
 800ed4e:	250a      	movs	r5, #10
 800ed50:	2220      	movs	r2, #32
 800ed52:	2110      	movs	r1, #16
 800ed54:	2008      	movs	r0, #8
 800ed56:	2702      	movs	r7, #2
 800ed58:	e7cd      	b.n	800ecf6 <uxr_buffer_create_datawriter_bin+0x76>
 800ed5a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ed5e:	e7d9      	b.n	800ed14 <uxr_buffer_create_datawriter_bin+0x94>
 800ed60:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ed64:	e7d6      	b.n	800ed14 <uxr_buffer_create_datawriter_bin+0x94>
 800ed66:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ed6a:	e7d3      	b.n	800ed14 <uxr_buffer_create_datawriter_bin+0x94>

0800ed6c <uxr_buffer_create_datareader_bin>:
 800ed6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed70:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ed74:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ed76:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ed7a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800ed7e:	9105      	str	r1, [sp, #20]
 800ed80:	4606      	mov	r6, r0
 800ed82:	a9a3      	add	r1, sp, #652	@ 0x28c
 800ed84:	4618      	mov	r0, r3
 800ed86:	2306      	movs	r3, #6
 800ed88:	7123      	strb	r3, [r4, #4]
 800ed8a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800ed8e:	2703      	movs	r7, #3
 800ed90:	f000 f886 	bl	800eea0 <uxr_object_id_to_raw>
 800ed94:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800ed96:	7227      	strb	r7, [r4, #8]
 800ed98:	a90e      	add	r1, sp, #56	@ 0x38
 800ed9a:	f000 f881 	bl	800eea0 <uxr_object_id_to_raw>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800eda4:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800eda8:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800edac:	3d00      	subs	r5, #0
 800edae:	bf18      	it	ne
 800edb0:	2501      	movne	r5, #1
 800edb2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800edb6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800edba:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800edbe:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800edc2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800edc6:	2301      	movs	r3, #1
 800edc8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800edcc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800edd0:	bb8a      	cbnz	r2, 800ee36 <uxr_buffer_create_datareader_bin+0xca>
 800edd2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800edd6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800edda:	f04f 0c13 	mov.w	ip, #19
 800edde:	250b      	movs	r5, #11
 800ede0:	2221      	movs	r2, #33	@ 0x21
 800ede2:	2111      	movs	r1, #17
 800ede4:	2009      	movs	r0, #9
 800ede6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800edea:	b923      	cbnz	r3, 800edf6 <uxr_buffer_create_datareader_bin+0x8a>
 800edec:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800edf0:	4672      	mov	r2, lr
 800edf2:	4661      	mov	r1, ip
 800edf4:	4628      	mov	r0, r5
 800edf6:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d025      	beq.n	800ee4a <uxr_buffer_create_datareader_bin+0xde>
 800edfe:	2b03      	cmp	r3, #3
 800ee00:	d029      	beq.n	800ee56 <uxr_buffer_create_datareader_bin+0xea>
 800ee02:	b32b      	cbz	r3, 800ee50 <uxr_buffer_create_datareader_bin+0xe4>
 800ee04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee08:	a923      	add	r1, sp, #140	@ 0x8c
 800ee0a:	a806      	add	r0, sp, #24
 800ee0c:	f7ff fd5c 	bl	800e8c8 <ucdr_init_buffer>
 800ee10:	a90e      	add	r1, sp, #56	@ 0x38
 800ee12:	a806      	add	r0, sp, #24
 800ee14:	f002 f844 	bl	8010ea0 <uxr_serialize_OBJK_DataReader_Binary>
 800ee18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee1a:	f8cd 8000 	str.w	r8, [sp]
 800ee1e:	9401      	str	r4, [sp, #4]
 800ee20:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ee24:	60e3      	str	r3, [r4, #12]
 800ee26:	4630      	mov	r0, r6
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	f7ff fe35 	bl	800ea98 <uxr_common_create_entity>
 800ee2e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ee32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee36:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ee3a:	f04f 0c12 	mov.w	ip, #18
 800ee3e:	250a      	movs	r5, #10
 800ee40:	2220      	movs	r2, #32
 800ee42:	2110      	movs	r1, #16
 800ee44:	2008      	movs	r0, #8
 800ee46:	2702      	movs	r7, #2
 800ee48:	e7cd      	b.n	800ede6 <uxr_buffer_create_datareader_bin+0x7a>
 800ee4a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ee4e:	e7d9      	b.n	800ee04 <uxr_buffer_create_datareader_bin+0x98>
 800ee50:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ee54:	e7d6      	b.n	800ee04 <uxr_buffer_create_datareader_bin+0x98>
 800ee56:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ee5a:	e7d3      	b.n	800ee04 <uxr_buffer_create_datareader_bin+0x98>

0800ee5c <uxr_object_id>:
 800ee5c:	b082      	sub	sp, #8
 800ee5e:	2300      	movs	r3, #0
 800ee60:	f88d 1006 	strb.w	r1, [sp, #6]
 800ee64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee68:	f360 030f 	bfi	r3, r0, #0, #16
 800ee6c:	f362 431f 	bfi	r3, r2, #16, #16
 800ee70:	4618      	mov	r0, r3
 800ee72:	b002      	add	sp, #8
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop

0800ee78 <uxr_object_id_from_raw>:
 800ee78:	7843      	ldrb	r3, [r0, #1]
 800ee7a:	7801      	ldrb	r1, [r0, #0]
 800ee7c:	b082      	sub	sp, #8
 800ee7e:	f003 020f 	and.w	r2, r3, #15
 800ee82:	f88d 2006 	strb.w	r2, [sp, #6]
 800ee86:	091b      	lsrs	r3, r3, #4
 800ee88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee8c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ee90:	2000      	movs	r0, #0
 800ee92:	f363 000f 	bfi	r0, r3, #0, #16
 800ee96:	f362 401f 	bfi	r0, r2, #16, #16
 800ee9a:	b002      	add	sp, #8
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop

0800eea0 <uxr_object_id_to_raw>:
 800eea0:	4602      	mov	r2, r0
 800eea2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800eea6:	b082      	sub	sp, #8
 800eea8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800eeac:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800eeb0:	f881 c000 	strb.w	ip, [r1]
 800eeb4:	7048      	strb	r0, [r1, #1]
 800eeb6:	b002      	add	sp, #8
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop

0800eebc <on_get_fragmentation_info>:
 800eebc:	b500      	push	{lr}
 800eebe:	b08b      	sub	sp, #44	@ 0x2c
 800eec0:	4601      	mov	r1, r0
 800eec2:	2204      	movs	r2, #4
 800eec4:	a802      	add	r0, sp, #8
 800eec6:	f7ff fcff 	bl	800e8c8 <ucdr_init_buffer>
 800eeca:	f10d 0305 	add.w	r3, sp, #5
 800eece:	f10d 0206 	add.w	r2, sp, #6
 800eed2:	a901      	add	r1, sp, #4
 800eed4:	a802      	add	r0, sp, #8
 800eed6:	f001 f9d5 	bl	8010284 <uxr_read_submessage_header>
 800eeda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eede:	2b0d      	cmp	r3, #13
 800eee0:	d003      	beq.n	800eeea <on_get_fragmentation_info+0x2e>
 800eee2:	2000      	movs	r0, #0
 800eee4:	b00b      	add	sp, #44	@ 0x2c
 800eee6:	f85d fb04 	ldr.w	pc, [sp], #4
 800eeea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eeee:	f013 0f02 	tst.w	r3, #2
 800eef2:	bf14      	ite	ne
 800eef4:	2002      	movne	r0, #2
 800eef6:	2001      	moveq	r0, #1
 800eef8:	b00b      	add	sp, #44	@ 0x2c
 800eefa:	f85d fb04 	ldr.w	pc, [sp], #4
 800eefe:	bf00      	nop

0800ef00 <read_submessage_get_info>:
 800ef00:	b570      	push	{r4, r5, r6, lr}
 800ef02:	2500      	movs	r5, #0
 800ef04:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800ef08:	4604      	mov	r4, r0
 800ef0a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800ef0e:	460e      	mov	r6, r1
 800ef10:	a810      	add	r0, sp, #64	@ 0x40
 800ef12:	4629      	mov	r1, r5
 800ef14:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ef18:	f009 ff75 	bl	8018e06 <memset>
 800ef1c:	a903      	add	r1, sp, #12
 800ef1e:	4630      	mov	r0, r6
 800ef20:	f002 fa70 	bl	8011404 <uxr_deserialize_GET_INFO_Payload>
 800ef24:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ef28:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f001 f81f 	bl	800ff70 <uxr_session_header_offset>
 800ef32:	462b      	mov	r3, r5
 800ef34:	9000      	str	r0, [sp, #0]
 800ef36:	220c      	movs	r2, #12
 800ef38:	a905      	add	r1, sp, #20
 800ef3a:	a808      	add	r0, sp, #32
 800ef3c:	f7ff fcb2 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 800ef40:	a910      	add	r1, sp, #64	@ 0x40
 800ef42:	a808      	add	r0, sp, #32
 800ef44:	f002 fad0 	bl	80114e8 <uxr_serialize_INFO_Payload>
 800ef48:	9b08      	ldr	r3, [sp, #32]
 800ef4a:	462a      	mov	r2, r5
 800ef4c:	4629      	mov	r1, r5
 800ef4e:	4620      	mov	r0, r4
 800ef50:	f000 ffb8 	bl	800fec4 <uxr_stamp_session_header>
 800ef54:	a808      	add	r0, sp, #32
 800ef56:	f7ff fce3 	bl	800e920 <ucdr_buffer_length>
 800ef5a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	a905      	add	r1, sp, #20
 800ef60:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ef64:	47a0      	blx	r4
 800ef66:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ef6a:	bd70      	pop	{r4, r5, r6, pc}

0800ef6c <write_submessage_acknack.isra.0>:
 800ef6c:	b570      	push	{r4, r5, r6, lr}
 800ef6e:	b092      	sub	sp, #72	@ 0x48
 800ef70:	4605      	mov	r5, r0
 800ef72:	460e      	mov	r6, r1
 800ef74:	4614      	mov	r4, r2
 800ef76:	f000 fffb 	bl	800ff70 <uxr_session_header_offset>
 800ef7a:	a905      	add	r1, sp, #20
 800ef7c:	9000      	str	r0, [sp, #0]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	a80a      	add	r0, sp, #40	@ 0x28
 800ef82:	2211      	movs	r2, #17
 800ef84:	f7ff fc8e 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 800ef88:	2218      	movs	r2, #24
 800ef8a:	fb02 5404 	mla	r4, r2, r4, r5
 800ef8e:	2300      	movs	r3, #0
 800ef90:	2205      	movs	r2, #5
 800ef92:	3450      	adds	r4, #80	@ 0x50
 800ef94:	210a      	movs	r1, #10
 800ef96:	a80a      	add	r0, sp, #40	@ 0x28
 800ef98:	f001 f95a 	bl	8010250 <uxr_buffer_submessage_header>
 800ef9c:	a903      	add	r1, sp, #12
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f007 fb5a 	bl	8016658 <uxr_compute_acknack>
 800efa4:	ba40      	rev16	r0, r0
 800efa6:	f8ad 000e 	strh.w	r0, [sp, #14]
 800efaa:	a903      	add	r1, sp, #12
 800efac:	a80a      	add	r0, sp, #40	@ 0x28
 800efae:	f88d 6010 	strb.w	r6, [sp, #16]
 800efb2:	f002 fb09 	bl	80115c8 <uxr_serialize_ACKNACK_Payload>
 800efb6:	2200      	movs	r2, #0
 800efb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efba:	4611      	mov	r1, r2
 800efbc:	4628      	mov	r0, r5
 800efbe:	f000 ff81 	bl	800fec4 <uxr_stamp_session_header>
 800efc2:	a80a      	add	r0, sp, #40	@ 0x28
 800efc4:	f7ff fcac 	bl	800e920 <ucdr_buffer_length>
 800efc8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800efca:	4602      	mov	r2, r0
 800efcc:	a905      	add	r1, sp, #20
 800efce:	e9d3 0400 	ldrd	r0, r4, [r3]
 800efd2:	47a0      	blx	r4
 800efd4:	b012      	add	sp, #72	@ 0x48
 800efd6:	bd70      	pop	{r4, r5, r6, pc}

0800efd8 <uxr_init_session>:
 800efd8:	b510      	push	{r4, lr}
 800efda:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f010 <uxr_init_session+0x38>
 800efde:	2300      	movs	r3, #0
 800efe0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800efe4:	4604      	mov	r4, r0
 800efe6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800efea:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800efee:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800eff2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800eff6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800effa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800effe:	2181      	movs	r1, #129	@ 0x81
 800f000:	f000 fecc 	bl	800fd9c <uxr_init_session_info>
 800f004:	f104 0008 	add.w	r0, r4, #8
 800f008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f00c:	f001 b83c 	b.w	8010088 <uxr_init_stream_storage>
	...

0800f018 <uxr_set_status_callback>:
 800f018:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop

0800f020 <uxr_set_topic_callback>:
 800f020:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f024:	4770      	bx	lr
 800f026:	bf00      	nop

0800f028 <uxr_set_request_callback>:
 800f028:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop

0800f030 <uxr_set_reply_callback>:
 800f030:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop

0800f038 <uxr_create_output_best_effort_stream>:
 800f038:	b510      	push	{r4, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	e9cd 2100 	strd	r2, r1, [sp]
 800f040:	4604      	mov	r4, r0
 800f042:	f000 ff95 	bl	800ff70 <uxr_session_header_offset>
 800f046:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f04a:	4603      	mov	r3, r0
 800f04c:	f104 0008 	add.w	r0, r4, #8
 800f050:	b004      	add	sp, #16
 800f052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f056:	f001 b861 	b.w	801011c <uxr_add_output_best_effort_buffer>
 800f05a:	bf00      	nop

0800f05c <uxr_create_output_reliable_stream>:
 800f05c:	b510      	push	{r4, lr}
 800f05e:	b088      	sub	sp, #32
 800f060:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f064:	4604      	mov	r4, r0
 800f066:	9303      	str	r3, [sp, #12]
 800f068:	f000 ff82 	bl	800ff70 <uxr_session_header_offset>
 800f06c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f070:	9000      	str	r0, [sp, #0]
 800f072:	9905      	ldr	r1, [sp, #20]
 800f074:	f104 0008 	add.w	r0, r4, #8
 800f078:	f001 f864 	bl	8010144 <uxr_add_output_reliable_buffer>
 800f07c:	2200      	movs	r2, #0
 800f07e:	b2c3      	uxtb	r3, r0
 800f080:	f363 0207 	bfi	r2, r3, #0, #8
 800f084:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f088:	f363 220f 	bfi	r2, r3, #8, #8
 800f08c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f090:	f363 4217 	bfi	r2, r3, #16, #8
 800f094:	0e03      	lsrs	r3, r0, #24
 800f096:	f363 621f 	bfi	r2, r3, #24, #8
 800f09a:	4610      	mov	r0, r2
 800f09c:	b008      	add	sp, #32
 800f09e:	bd10      	pop	{r4, pc}

0800f0a0 <uxr_create_input_best_effort_stream>:
 800f0a0:	b082      	sub	sp, #8
 800f0a2:	3008      	adds	r0, #8
 800f0a4:	b002      	add	sp, #8
 800f0a6:	f001 b867 	b.w	8010178 <uxr_add_input_best_effort_buffer>
 800f0aa:	bf00      	nop

0800f0ac <uxr_create_input_reliable_stream>:
 800f0ac:	b510      	push	{r4, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	4c0b      	ldr	r4, [pc, #44]	@ (800f0e0 <uxr_create_input_reliable_stream+0x34>)
 800f0b2:	9400      	str	r4, [sp, #0]
 800f0b4:	3008      	adds	r0, #8
 800f0b6:	f001 f875 	bl	80101a4 <uxr_add_input_reliable_buffer>
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	b2c3      	uxtb	r3, r0
 800f0be:	f363 0207 	bfi	r2, r3, #0, #8
 800f0c2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f0c6:	f363 220f 	bfi	r2, r3, #8, #8
 800f0ca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f0ce:	f363 4217 	bfi	r2, r3, #16, #8
 800f0d2:	0e03      	lsrs	r3, r0, #24
 800f0d4:	f363 621f 	bfi	r2, r3, #24, #8
 800f0d8:	4610      	mov	r0, r2
 800f0da:	b004      	add	sp, #16
 800f0dc:	bd10      	pop	{r4, pc}
 800f0de:	bf00      	nop
 800f0e0:	0800eebd 	.word	0x0800eebd

0800f0e4 <uxr_epoch_nanos>:
 800f0e4:	b510      	push	{r4, lr}
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	f001 f912 	bl	8010310 <uxr_nanos>
 800f0ec:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f0f0:	1ac0      	subs	r0, r0, r3
 800f0f2:	eb61 0102 	sbc.w	r1, r1, r2
 800f0f6:	bd10      	pop	{r4, pc}

0800f0f8 <uxr_flash_output_streams>:
 800f0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0fc:	7e03      	ldrb	r3, [r0, #24]
 800f0fe:	b084      	sub	sp, #16
 800f100:	4604      	mov	r4, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d035      	beq.n	800f172 <uxr_flash_output_streams+0x7a>
 800f106:	f04f 0900 	mov.w	r9, #0
 800f10a:	4648      	mov	r0, r9
 800f10c:	f10d 0802 	add.w	r8, sp, #2
 800f110:	af03      	add	r7, sp, #12
 800f112:	ae02      	add	r6, sp, #8
 800f114:	e006      	b.n	800f124 <uxr_flash_output_streams+0x2c>
 800f116:	7e23      	ldrb	r3, [r4, #24]
 800f118:	f109 0901 	add.w	r9, r9, #1
 800f11c:	fa5f f089 	uxtb.w	r0, r9
 800f120:	4283      	cmp	r3, r0
 800f122:	d926      	bls.n	800f172 <uxr_flash_output_streams+0x7a>
 800f124:	2201      	movs	r2, #1
 800f126:	4611      	mov	r1, r2
 800f128:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f12c:	f000 ff58 	bl	800ffe0 <uxr_stream_id>
 800f130:	3508      	adds	r5, #8
 800f132:	4684      	mov	ip, r0
 800f134:	4643      	mov	r3, r8
 800f136:	463a      	mov	r2, r7
 800f138:	4631      	mov	r1, r6
 800f13a:	4628      	mov	r0, r5
 800f13c:	f8cd c004 	str.w	ip, [sp, #4]
 800f140:	f007 fb10 	bl	8016764 <uxr_prepare_best_effort_buffer_to_send>
 800f144:	2800      	cmp	r0, #0
 800f146:	d0e6      	beq.n	800f116 <uxr_flash_output_streams+0x1e>
 800f148:	9b02      	ldr	r3, [sp, #8]
 800f14a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f14e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f152:	4620      	mov	r0, r4
 800f154:	f000 feb6 	bl	800fec4 <uxr_stamp_session_header>
 800f158:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f15a:	9a03      	ldr	r2, [sp, #12]
 800f15c:	685d      	ldr	r5, [r3, #4]
 800f15e:	6818      	ldr	r0, [r3, #0]
 800f160:	9902      	ldr	r1, [sp, #8]
 800f162:	47a8      	blx	r5
 800f164:	f109 0901 	add.w	r9, r9, #1
 800f168:	7e23      	ldrb	r3, [r4, #24]
 800f16a:	fa5f f089 	uxtb.w	r0, r9
 800f16e:	4283      	cmp	r3, r0
 800f170:	d8d8      	bhi.n	800f124 <uxr_flash_output_streams+0x2c>
 800f172:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f176:	b38b      	cbz	r3, 800f1dc <uxr_flash_output_streams+0xe4>
 800f178:	f04f 0900 	mov.w	r9, #0
 800f17c:	f10d 0802 	add.w	r8, sp, #2
 800f180:	af03      	add	r7, sp, #12
 800f182:	ae02      	add	r6, sp, #8
 800f184:	4648      	mov	r0, r9
 800f186:	2201      	movs	r2, #1
 800f188:	2102      	movs	r1, #2
 800f18a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f18e:	f000 ff27 	bl	800ffe0 <uxr_stream_id>
 800f192:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f196:	3520      	adds	r5, #32
 800f198:	9001      	str	r0, [sp, #4]
 800f19a:	e00d      	b.n	800f1b8 <uxr_flash_output_streams+0xc0>
 800f19c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f1a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f1a4:	9b02      	ldr	r3, [sp, #8]
 800f1a6:	f000 fe8d 	bl	800fec4 <uxr_stamp_session_header>
 800f1aa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f1ac:	9a03      	ldr	r2, [sp, #12]
 800f1ae:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f1b2:	9902      	ldr	r1, [sp, #8]
 800f1b4:	6818      	ldr	r0, [r3, #0]
 800f1b6:	47d0      	blx	sl
 800f1b8:	4643      	mov	r3, r8
 800f1ba:	463a      	mov	r2, r7
 800f1bc:	4631      	mov	r1, r6
 800f1be:	4628      	mov	r0, r5
 800f1c0:	f007 fcee 	bl	8016ba0 <uxr_prepare_next_reliable_buffer_to_send>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1e7      	bne.n	800f19c <uxr_flash_output_streams+0xa4>
 800f1cc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f1d0:	f109 0901 	add.w	r9, r9, #1
 800f1d4:	fa5f f089 	uxtb.w	r0, r9
 800f1d8:	4283      	cmp	r3, r0
 800f1da:	d8d4      	bhi.n	800f186 <uxr_flash_output_streams+0x8e>
 800f1dc:	b004      	add	sp, #16
 800f1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1e2:	bf00      	nop

0800f1e4 <read_submessage_info>:
 800f1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e8:	460d      	mov	r5, r1
 800f1ea:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f1ee:	4669      	mov	r1, sp
 800f1f0:	4607      	mov	r7, r0
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	f002 f814 	bl	8011220 <uxr_deserialize_BaseObjectReply>
 800f1f8:	a902      	add	r1, sp, #8
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f202:	f7fd ff37 	bl	800d074 <ucdr_deserialize_bool>
 800f206:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f20a:	4004      	ands	r4, r0
 800f20c:	b2e4      	uxtb	r4, r4
 800f20e:	b95b      	cbnz	r3, 800f228 <read_submessage_info+0x44>
 800f210:	a987      	add	r1, sp, #540	@ 0x21c
 800f212:	4628      	mov	r0, r5
 800f214:	f7fd ff2e 	bl	800d074 <ucdr_deserialize_bool>
 800f218:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f21c:	4606      	mov	r6, r0
 800f21e:	b94b      	cbnz	r3, 800f234 <read_submessage_info+0x50>
 800f220:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f228:	a903      	add	r1, sp, #12
 800f22a:	4628      	mov	r0, r5
 800f22c:	f001 fea0 	bl	8010f70 <uxr_deserialize_ObjectVariant>
 800f230:	4004      	ands	r4, r0
 800f232:	e7ed      	b.n	800f210 <read_submessage_info+0x2c>
 800f234:	a988      	add	r1, sp, #544	@ 0x220
 800f236:	4628      	mov	r0, r5
 800f238:	f7fd ff4a 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 800f23c:	4234      	tst	r4, r6
 800f23e:	d0ef      	beq.n	800f220 <read_submessage_info+0x3c>
 800f240:	2800      	cmp	r0, #0
 800f242:	d0ed      	beq.n	800f220 <read_submessage_info+0x3c>
 800f244:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f248:	2b0d      	cmp	r3, #13
 800f24a:	d1e9      	bne.n	800f220 <read_submessage_info+0x3c>
 800f24c:	a98a      	add	r1, sp, #552	@ 0x228
 800f24e:	4628      	mov	r0, r5
 800f250:	f7fe fce4 	bl	800dc1c <ucdr_deserialize_int16_t>
 800f254:	b140      	cbz	r0, 800f268 <read_submessage_info+0x84>
 800f256:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	dd07      	ble.n	800f26e <read_submessage_info+0x8a>
 800f25e:	f1b8 0f00 	cmp.w	r8, #0
 800f262:	bf14      	ite	ne
 800f264:	2001      	movne	r0, #1
 800f266:	2002      	moveq	r0, #2
 800f268:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f26c:	e7d8      	b.n	800f220 <read_submessage_info+0x3c>
 800f26e:	2000      	movs	r0, #0
 800f270:	e7fa      	b.n	800f268 <read_submessage_info+0x84>
 800f272:	bf00      	nop

0800f274 <read_submessage_list>:
 800f274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f278:	b097      	sub	sp, #92	@ 0x5c
 800f27a:	4ec1      	ldr	r6, [pc, #772]	@ (800f580 <read_submessage_list+0x30c>)
 800f27c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f27e:	4604      	mov	r4, r0
 800f280:	460d      	mov	r5, r1
 800f282:	f04f 0801 	mov.w	r8, #1
 800f286:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f28a:	aa0c      	add	r2, sp, #48	@ 0x30
 800f28c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f290:	4628      	mov	r0, r5
 800f292:	f000 fff7 	bl	8010284 <uxr_read_submessage_header>
 800f296:	2800      	cmp	r0, #0
 800f298:	f000 813e 	beq.w	800f518 <read_submessage_list+0x2a4>
 800f29c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f2a0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f2a4:	3b02      	subs	r3, #2
 800f2a6:	2b0d      	cmp	r3, #13
 800f2a8:	d8ed      	bhi.n	800f286 <read_submessage_list+0x12>
 800f2aa:	a101      	add	r1, pc, #4	@ (adr r1, 800f2b0 <read_submessage_list+0x3c>)
 800f2ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2b0:	0800f50f 	.word	0x0800f50f
 800f2b4:	0800f287 	.word	0x0800f287
 800f2b8:	0800f4ff 	.word	0x0800f4ff
 800f2bc:	0800f49d 	.word	0x0800f49d
 800f2c0:	0800f493 	.word	0x0800f493
 800f2c4:	0800f287 	.word	0x0800f287
 800f2c8:	0800f287 	.word	0x0800f287
 800f2cc:	0800f3f3 	.word	0x0800f3f3
 800f2d0:	0800f383 	.word	0x0800f383
 800f2d4:	0800f343 	.word	0x0800f343
 800f2d8:	0800f287 	.word	0x0800f287
 800f2dc:	0800f287 	.word	0x0800f287
 800f2e0:	0800f287 	.word	0x0800f287
 800f2e4:	0800f2e9 	.word	0x0800f2e9
 800f2e8:	a910      	add	r1, sp, #64	@ 0x40
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f002 f9bc 	bl	8011668 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f2f0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800f2f4:	f1b9 0f00 	cmp.w	r9, #0
 800f2f8:	f000 8116 	beq.w	800f528 <read_submessage_list+0x2b4>
 800f2fc:	f001 f808 	bl	8010310 <uxr_nanos>
 800f300:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f302:	4602      	mov	r2, r0
 800f304:	460b      	mov	r3, r1
 800f306:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f308:	2100      	movs	r1, #0
 800f30a:	468c      	mov	ip, r1
 800f30c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f310:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f314:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f316:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f318:	468c      	mov	ip, r1
 800f31a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f31e:	46e2      	mov	sl, ip
 800f320:	46bc      	mov	ip, r7
 800f322:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f326:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f32a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f32e:	e9cd 7100 	strd	r7, r1, [sp]
 800f332:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f336:	9106      	str	r1, [sp, #24]
 800f338:	4620      	mov	r0, r4
 800f33a:	47c8      	blx	r9
 800f33c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800f340:	e7a1      	b.n	800f286 <read_submessage_list+0x12>
 800f342:	a910      	add	r1, sp, #64	@ 0x40
 800f344:	4628      	mov	r0, r5
 800f346:	f002 f97d 	bl	8011644 <uxr_deserialize_HEARTBEAT_Payload>
 800f34a:	2100      	movs	r1, #0
 800f34c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f350:	f000 fe70 	bl	8010034 <uxr_stream_id_from_raw>
 800f354:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f358:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f35a:	4639      	mov	r1, r7
 800f35c:	f104 0008 	add.w	r0, r4, #8
 800f360:	f000 ff56 	bl	8010210 <uxr_get_input_reliable_stream>
 800f364:	2800      	cmp	r0, #0
 800f366:	d08e      	beq.n	800f286 <read_submessage_list+0x12>
 800f368:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f36c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f370:	f007 f966 	bl	8016640 <uxr_process_heartbeat>
 800f374:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f378:	463a      	mov	r2, r7
 800f37a:	4620      	mov	r0, r4
 800f37c:	f7ff fdf6 	bl	800ef6c <write_submessage_acknack.isra.0>
 800f380:	e781      	b.n	800f286 <read_submessage_list+0x12>
 800f382:	a910      	add	r1, sp, #64	@ 0x40
 800f384:	4628      	mov	r0, r5
 800f386:	f002 f935 	bl	80115f4 <uxr_deserialize_ACKNACK_Payload>
 800f38a:	2100      	movs	r1, #0
 800f38c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f390:	f000 fe50 	bl	8010034 <uxr_stream_id_from_raw>
 800f394:	900d      	str	r0, [sp, #52]	@ 0x34
 800f396:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f39a:	f104 0008 	add.w	r0, r4, #8
 800f39e:	f000 ff23 	bl	80101e8 <uxr_get_output_reliable_stream>
 800f3a2:	4607      	mov	r7, r0
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	f43f af6e 	beq.w	800f286 <read_submessage_list+0x12>
 800f3aa:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800f3ae:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800f3b2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f3b6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f3ba:	b289      	uxth	r1, r1
 800f3bc:	f007 fc9a 	bl	8016cf4 <uxr_process_acknack>
 800f3c0:	4638      	mov	r0, r7
 800f3c2:	f007 fc57 	bl	8016c74 <uxr_begin_output_nack_buffer_it>
 800f3c6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f3ca:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800f3ce:	e006      	b.n	800f3de <read_submessage_list+0x16a>
 800f3d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f3d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f3d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f3d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f3da:	6818      	ldr	r0, [r3, #0]
 800f3dc:	47c8      	blx	r9
 800f3de:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800f3e2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f3e4:	4651      	mov	r1, sl
 800f3e6:	4638      	mov	r0, r7
 800f3e8:	f007 fc46 	bl	8016c78 <uxr_next_reliable_nack_buffer_to_send>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d1ef      	bne.n	800f3d0 <read_submessage_list+0x15c>
 800f3f0:	e749      	b.n	800f286 <read_submessage_list+0x12>
 800f3f2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800f3f6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800f3fa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f3fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800f402:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800f406:	4651      	mov	r1, sl
 800f408:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f40c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800f410:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800f414:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800f418:	4628      	mov	r0, r5
 800f41a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800f41e:	f001 fe49 	bl	80110b4 <uxr_deserialize_BaseObjectRequest>
 800f422:	4650      	mov	r0, sl
 800f424:	a90f      	add	r1, sp, #60	@ 0x3c
 800f426:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f42a:	f000 fdc7 	bl	800ffbc <uxr_parse_base_object_request>
 800f42e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800f432:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f434:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800f438:	9110      	str	r1, [sp, #64]	@ 0x40
 800f43a:	3f04      	subs	r7, #4
 800f43c:	f009 090e 	and.w	r9, r9, #14
 800f440:	b2bf      	uxth	r7, r7
 800f442:	f1bb 0f00 	cmp.w	fp, #0
 800f446:	d006      	beq.n	800f456 <read_submessage_list+0x1e2>
 800f448:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	4652      	mov	r2, sl
 800f450:	2300      	movs	r3, #0
 800f452:	4620      	mov	r0, r4
 800f454:	47d8      	blx	fp
 800f456:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f458:	b16a      	cbz	r2, 800f476 <read_submessage_list+0x202>
 800f45a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f45c:	2100      	movs	r1, #0
 800f45e:	3802      	subs	r0, #2
 800f460:	e002      	b.n	800f468 <read_submessage_list+0x1f4>
 800f462:	3101      	adds	r1, #1
 800f464:	4291      	cmp	r1, r2
 800f466:	d006      	beq.n	800f476 <read_submessage_list+0x202>
 800f468:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f46c:	4553      	cmp	r3, sl
 800f46e:	d1f8      	bne.n	800f462 <read_submessage_list+0x1ee>
 800f470:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f472:	2200      	movs	r2, #0
 800f474:	545a      	strb	r2, [r3, r1]
 800f476:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800f47a:	9102      	str	r1, [sp, #8]
 800f47c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f47e:	9101      	str	r1, [sp, #4]
 800f480:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f482:	9100      	str	r1, [sp, #0]
 800f484:	464b      	mov	r3, r9
 800f486:	463a      	mov	r2, r7
 800f488:	4629      	mov	r1, r5
 800f48a:	4620      	mov	r0, r4
 800f48c:	f007 fcf0 	bl	8016e70 <read_submessage_format>
 800f490:	e6f9      	b.n	800f286 <read_submessage_list+0x12>
 800f492:	4629      	mov	r1, r5
 800f494:	4620      	mov	r0, r4
 800f496:	f7ff fea5 	bl	800f1e4 <read_submessage_info>
 800f49a:	e6f4      	b.n	800f286 <read_submessage_list+0x12>
 800f49c:	2a00      	cmp	r2, #0
 800f49e:	d03e      	beq.n	800f51e <read_submessage_list+0x2aa>
 800f4a0:	a910      	add	r1, sp, #64	@ 0x40
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	f002 f802 	bl	80114ac <uxr_deserialize_STATUS_Payload>
 800f4a8:	a90e      	add	r1, sp, #56	@ 0x38
 800f4aa:	aa0d      	add	r2, sp, #52	@ 0x34
 800f4ac:	a810      	add	r0, sp, #64	@ 0x40
 800f4ae:	f000 fd85 	bl	800ffbc <uxr_parse_base_object_request>
 800f4b2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800f4b6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f4b8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800f4bc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800f4c0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f4c2:	f1ba 0f00 	cmp.w	sl, #0
 800f4c6:	d006      	beq.n	800f4d6 <read_submessage_list+0x262>
 800f4c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f4cc:	9300      	str	r3, [sp, #0]
 800f4ce:	463a      	mov	r2, r7
 800f4d0:	464b      	mov	r3, r9
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	47d0      	blx	sl
 800f4d6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f4d8:	2a00      	cmp	r2, #0
 800f4da:	f43f aed4 	beq.w	800f286 <read_submessage_list+0x12>
 800f4de:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	3802      	subs	r0, #2
 800f4e4:	e003      	b.n	800f4ee <read_submessage_list+0x27a>
 800f4e6:	3101      	adds	r1, #1
 800f4e8:	4291      	cmp	r1, r2
 800f4ea:	f43f aecc 	beq.w	800f286 <read_submessage_list+0x12>
 800f4ee:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f4f2:	42bb      	cmp	r3, r7
 800f4f4:	d1f7      	bne.n	800f4e6 <read_submessage_list+0x272>
 800f4f6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f4f8:	f803 9001 	strb.w	r9, [r3, r1]
 800f4fc:	e6c3      	b.n	800f286 <read_submessage_list+0x12>
 800f4fe:	2a00      	cmp	r2, #0
 800f500:	f47f aec1 	bne.w	800f286 <read_submessage_list+0x12>
 800f504:	4629      	mov	r1, r5
 800f506:	4620      	mov	r0, r4
 800f508:	f000 fc9e 	bl	800fe48 <uxr_read_create_session_status>
 800f50c:	e6bb      	b.n	800f286 <read_submessage_list+0x12>
 800f50e:	4629      	mov	r1, r5
 800f510:	4620      	mov	r0, r4
 800f512:	f7ff fcf5 	bl	800ef00 <read_submessage_get_info>
 800f516:	e6b6      	b.n	800f286 <read_submessage_list+0x12>
 800f518:	b017      	add	sp, #92	@ 0x5c
 800f51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51e:	4629      	mov	r1, r5
 800f520:	4620      	mov	r0, r4
 800f522:	f000 fc9d 	bl	800fe60 <uxr_read_delete_session_status>
 800f526:	e6ae      	b.n	800f286 <read_submessage_list+0x12>
 800f528:	f000 fef2 	bl	8010310 <uxr_nanos>
 800f52c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f52e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f530:	464f      	mov	r7, r9
 800f532:	fbc3 2706 	smlal	r2, r7, r3, r6
 800f536:	1812      	adds	r2, r2, r0
 800f538:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f53a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f53c:	eb47 0101 	adc.w	r1, r7, r1
 800f540:	464f      	mov	r7, r9
 800f542:	fbc3 0706 	smlal	r0, r7, r3, r6
 800f546:	463b      	mov	r3, r7
 800f548:	4684      	mov	ip, r0
 800f54a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800f54e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800f552:	eb1c 0c00 	adds.w	ip, ip, r0
 800f556:	464f      	mov	r7, r9
 800f558:	eb43 0307 	adc.w	r3, r3, r7
 800f55c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800f560:	eb61 0303 	sbc.w	r3, r1, r3
 800f564:	0fda      	lsrs	r2, r3, #31
 800f566:	eb12 020c 	adds.w	r2, r2, ip
 800f56a:	f143 0300 	adc.w	r3, r3, #0
 800f56e:	0852      	lsrs	r2, r2, #1
 800f570:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f574:	105b      	asrs	r3, r3, #1
 800f576:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f57a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f57e:	e6dd      	b.n	800f33c <read_submessage_list+0xc8>
 800f580:	3b9aca00 	.word	0x3b9aca00

0800f584 <listen_message_reliably>:
 800f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f588:	1e0b      	subs	r3, r1, #0
 800f58a:	b09d      	sub	sp, #116	@ 0x74
 800f58c:	bfb8      	it	lt
 800f58e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f592:	4680      	mov	r8, r0
 800f594:	9305      	str	r3, [sp, #20]
 800f596:	f000 fea1 	bl	80102dc <uxr_millis>
 800f59a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f59e:	4681      	mov	r9, r0
 800f5a0:	2a00      	cmp	r2, #0
 800f5a2:	f000 80a1 	beq.w	800f6e8 <listen_message_reliably+0x164>
 800f5a6:	2600      	movs	r6, #0
 800f5a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f5ac:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f5b0:	9303      	str	r3, [sp, #12]
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	460f      	mov	r7, r1
 800f5b6:	e00f      	b.n	800f5d8 <listen_message_reliably+0x54>
 800f5b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f5bc:	9903      	ldr	r1, [sp, #12]
 800f5be:	455a      	cmp	r2, fp
 800f5c0:	f106 0601 	add.w	r6, r6, #1
 800f5c4:	eb73 0101 	sbcs.w	r1, r3, r1
 800f5c8:	b2f0      	uxtb	r0, r6
 800f5ca:	da01      	bge.n	800f5d0 <listen_message_reliably+0x4c>
 800f5cc:	4693      	mov	fp, r2
 800f5ce:	9303      	str	r3, [sp, #12]
 800f5d0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f5d4:	4283      	cmp	r3, r0
 800f5d6:	d960      	bls.n	800f69a <listen_message_reliably+0x116>
 800f5d8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f5dc:	2102      	movs	r1, #2
 800f5de:	2201      	movs	r2, #1
 800f5e0:	f000 fcfe 	bl	800ffe0 <uxr_stream_id>
 800f5e4:	00e4      	lsls	r4, r4, #3
 800f5e6:	f104 0520 	add.w	r5, r4, #32
 800f5ea:	4445      	add	r5, r8
 800f5ec:	4601      	mov	r1, r0
 800f5ee:	463b      	mov	r3, r7
 800f5f0:	464a      	mov	r2, r9
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5f6:	f007 fb13 	bl	8016c20 <uxr_update_output_stream_heartbeat_timestamp>
 800f5fa:	eb08 0304 	add.w	r3, r8, r4
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d0da      	beq.n	800f5b8 <listen_message_reliably+0x34>
 800f602:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f606:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f60a:	9304      	str	r3, [sp, #16]
 800f60c:	4640      	mov	r0, r8
 800f60e:	f000 fcaf 	bl	800ff70 <uxr_session_header_offset>
 800f612:	3501      	adds	r5, #1
 800f614:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f618:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f61c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f620:	2300      	movs	r3, #0
 800f622:	2211      	movs	r2, #17
 800f624:	9000      	str	r0, [sp, #0]
 800f626:	a90c      	add	r1, sp, #48	@ 0x30
 800f628:	4650      	mov	r0, sl
 800f62a:	f7ff f93b 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 800f62e:	2300      	movs	r3, #0
 800f630:	2205      	movs	r2, #5
 800f632:	210b      	movs	r1, #11
 800f634:	4650      	mov	r0, sl
 800f636:	f000 fe0b 	bl	8010250 <uxr_buffer_submessage_header>
 800f63a:	8968      	ldrh	r0, [r5, #10]
 800f63c:	2101      	movs	r1, #1
 800f63e:	f007 fce1 	bl	8017004 <uxr_seq_num_add>
 800f642:	892b      	ldrh	r3, [r5, #8]
 800f644:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f648:	4602      	mov	r2, r0
 800f64a:	9b04      	ldr	r3, [sp, #16]
 800f64c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f650:	a90a      	add	r1, sp, #40	@ 0x28
 800f652:	4650      	mov	r0, sl
 800f654:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f658:	f001 ffe0 	bl	801161c <uxr_serialize_HEARTBEAT_Payload>
 800f65c:	2200      	movs	r2, #0
 800f65e:	4611      	mov	r1, r2
 800f660:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f662:	4640      	mov	r0, r8
 800f664:	f000 fc2e 	bl	800fec4 <uxr_stamp_session_header>
 800f668:	4650      	mov	r0, sl
 800f66a:	f7ff f959 	bl	800e920 <ucdr_buffer_length>
 800f66e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f672:	4602      	mov	r2, r0
 800f674:	a90c      	add	r1, sp, #48	@ 0x30
 800f676:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f67a:	4444      	add	r4, r8
 800f67c:	47a8      	blx	r5
 800f67e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f682:	9903      	ldr	r1, [sp, #12]
 800f684:	455a      	cmp	r2, fp
 800f686:	f106 0601 	add.w	r6, r6, #1
 800f68a:	eb73 0101 	sbcs.w	r1, r3, r1
 800f68e:	b2f0      	uxtb	r0, r6
 800f690:	db9c      	blt.n	800f5cc <listen_message_reliably+0x48>
 800f692:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f696:	4283      	cmp	r3, r0
 800f698:	d89e      	bhi.n	800f5d8 <listen_message_reliably+0x54>
 800f69a:	9a03      	ldr	r2, [sp, #12]
 800f69c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	bf08      	it	eq
 800f6a4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f6a8:	d01e      	beq.n	800f6e8 <listen_message_reliably+0x164>
 800f6aa:	ebab 0309 	sub.w	r3, fp, r9
 800f6ae:	9905      	ldr	r1, [sp, #20]
 800f6b0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	bf08      	it	eq
 800f6b8:	2301      	moveq	r3, #1
 800f6ba:	4299      	cmp	r1, r3
 800f6bc:	bfa8      	it	ge
 800f6be:	4619      	movge	r1, r3
 800f6c0:	6894      	ldr	r4, [r2, #8]
 800f6c2:	6810      	ldr	r0, [r2, #0]
 800f6c4:	4689      	mov	r9, r1
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	aa08      	add	r2, sp, #32
 800f6ca:	a907      	add	r1, sp, #28
 800f6cc:	47a0      	blx	r4
 800f6ce:	b968      	cbnz	r0, 800f6ec <listen_message_reliably+0x168>
 800f6d0:	9b05      	ldr	r3, [sp, #20]
 800f6d2:	eba3 0309 	sub.w	r3, r3, r9
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	9305      	str	r3, [sp, #20]
 800f6da:	f73f af5c 	bgt.w	800f596 <listen_message_reliably+0x12>
 800f6de:	4604      	mov	r4, r0
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	b01d      	add	sp, #116	@ 0x74
 800f6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6e8:	9b05      	ldr	r3, [sp, #20]
 800f6ea:	e7e0      	b.n	800f6ae <listen_message_reliably+0x12a>
 800f6ec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	a80c      	add	r0, sp, #48	@ 0x30
 800f6f4:	f7ff f8e8 	bl	800e8c8 <ucdr_init_buffer>
 800f6f8:	2500      	movs	r5, #0
 800f6fa:	f10d 031a 	add.w	r3, sp, #26
 800f6fe:	aa06      	add	r2, sp, #24
 800f700:	a90c      	add	r1, sp, #48	@ 0x30
 800f702:	4640      	mov	r0, r8
 800f704:	f88d 5018 	strb.w	r5, [sp, #24]
 800f708:	f000 fbf0 	bl	800feec <uxr_read_session_header>
 800f70c:	b918      	cbnz	r0, 800f716 <listen_message_reliably+0x192>
 800f70e:	4620      	mov	r0, r4
 800f710:	b01d      	add	sp, #116	@ 0x74
 800f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f716:	4629      	mov	r1, r5
 800f718:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f71c:	f000 fc8a 	bl	8010034 <uxr_stream_id_from_raw>
 800f720:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f724:	2d01      	cmp	r5, #1
 800f726:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f72a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f72e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f732:	d04b      	beq.n	800f7cc <listen_message_reliably+0x248>
 800f734:	2d02      	cmp	r5, #2
 800f736:	d00f      	beq.n	800f758 <listen_message_reliably+0x1d4>
 800f738:	2d00      	cmp	r5, #0
 800f73a:	d1e8      	bne.n	800f70e <listen_message_reliably+0x18a>
 800f73c:	4629      	mov	r1, r5
 800f73e:	4628      	mov	r0, r5
 800f740:	f000 fc78 	bl	8010034 <uxr_stream_id_from_raw>
 800f744:	a90c      	add	r1, sp, #48	@ 0x30
 800f746:	4602      	mov	r2, r0
 800f748:	4640      	mov	r0, r8
 800f74a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f74c:	f7ff fd92 	bl	800f274 <read_submessage_list>
 800f750:	4620      	mov	r0, r4
 800f752:	b01d      	add	sp, #116	@ 0x74
 800f754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f758:	4631      	mov	r1, r6
 800f75a:	f108 0008 	add.w	r0, r8, #8
 800f75e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f762:	f000 fd55 	bl	8010210 <uxr_get_input_reliable_stream>
 800f766:	4607      	mov	r7, r0
 800f768:	b338      	cbz	r0, 800f7ba <listen_message_reliably+0x236>
 800f76a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f76c:	9203      	str	r2, [sp, #12]
 800f76e:	a80c      	add	r0, sp, #48	@ 0x30
 800f770:	f7ff f8da 	bl	800e928 <ucdr_buffer_remaining>
 800f774:	4603      	mov	r3, r0
 800f776:	f10d 0019 	add.w	r0, sp, #25
 800f77a:	9000      	str	r0, [sp, #0]
 800f77c:	9a03      	ldr	r2, [sp, #12]
 800f77e:	4651      	mov	r1, sl
 800f780:	4638      	mov	r0, r7
 800f782:	f006 fe63 	bl	801644c <uxr_receive_reliable_message>
 800f786:	b1c0      	cbz	r0, 800f7ba <listen_message_reliably+0x236>
 800f788:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f78c:	b393      	cbz	r3, 800f7f4 <listen_message_reliably+0x270>
 800f78e:	ad14      	add	r5, sp, #80	@ 0x50
 800f790:	f04f 0a02 	mov.w	sl, #2
 800f794:	e00a      	b.n	800f7ac <listen_message_reliably+0x228>
 800f796:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f79a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f79e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f7a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f7a4:	4629      	mov	r1, r5
 800f7a6:	4640      	mov	r0, r8
 800f7a8:	f7ff fd64 	bl	800f274 <read_submessage_list>
 800f7ac:	2204      	movs	r2, #4
 800f7ae:	4629      	mov	r1, r5
 800f7b0:	4638      	mov	r0, r7
 800f7b2:	f006 fecb 	bl	801654c <uxr_next_input_reliable_buffer_available>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d1ed      	bne.n	800f796 <listen_message_reliably+0x212>
 800f7ba:	4640      	mov	r0, r8
 800f7bc:	4632      	mov	r2, r6
 800f7be:	4649      	mov	r1, r9
 800f7c0:	f7ff fbd4 	bl	800ef6c <write_submessage_acknack.isra.0>
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	b01d      	add	sp, #116	@ 0x74
 800f7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7cc:	4631      	mov	r1, r6
 800f7ce:	f108 0008 	add.w	r0, r8, #8
 800f7d2:	f000 fd13 	bl	80101fc <uxr_get_input_best_effort_stream>
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	d099      	beq.n	800f70e <listen_message_reliably+0x18a>
 800f7da:	4651      	mov	r1, sl
 800f7dc:	f006 fda2 	bl	8016324 <uxr_receive_best_effort_message>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d094      	beq.n	800f70e <listen_message_reliably+0x18a>
 800f7e4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f7e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f7ea:	a90c      	add	r1, sp, #48	@ 0x30
 800f7ec:	4640      	mov	r0, r8
 800f7ee:	f7ff fd41 	bl	800f274 <read_submessage_list>
 800f7f2:	e78c      	b.n	800f70e <listen_message_reliably+0x18a>
 800f7f4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f7f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f7fa:	a90c      	add	r1, sp, #48	@ 0x30
 800f7fc:	4640      	mov	r0, r8
 800f7fe:	f7ff fd39 	bl	800f274 <read_submessage_list>
 800f802:	e7c4      	b.n	800f78e <listen_message_reliably+0x20a>

0800f804 <uxr_run_session_timeout>:
 800f804:	b570      	push	{r4, r5, r6, lr}
 800f806:	4604      	mov	r4, r0
 800f808:	460d      	mov	r5, r1
 800f80a:	f000 fd67 	bl	80102dc <uxr_millis>
 800f80e:	4606      	mov	r6, r0
 800f810:	4620      	mov	r0, r4
 800f812:	f7ff fc71 	bl	800f0f8 <uxr_flash_output_streams>
 800f816:	4629      	mov	r1, r5
 800f818:	4620      	mov	r0, r4
 800f81a:	f7ff feb3 	bl	800f584 <listen_message_reliably>
 800f81e:	f000 fd5d 	bl	80102dc <uxr_millis>
 800f822:	1b83      	subs	r3, r0, r6
 800f824:	1ae9      	subs	r1, r5, r3
 800f826:	2900      	cmp	r1, #0
 800f828:	dcf6      	bgt.n	800f818 <uxr_run_session_timeout+0x14>
 800f82a:	f104 0008 	add.w	r0, r4, #8
 800f82e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f832:	f000 bcf7 	b.w	8010224 <uxr_output_streams_confirmed>
 800f836:	bf00      	nop

0800f838 <uxr_run_session_until_data>:
 800f838:	b570      	push	{r4, r5, r6, lr}
 800f83a:	4604      	mov	r4, r0
 800f83c:	460d      	mov	r5, r1
 800f83e:	f000 fd4d 	bl	80102dc <uxr_millis>
 800f842:	4606      	mov	r6, r0
 800f844:	4620      	mov	r0, r4
 800f846:	f7ff fc57 	bl	800f0f8 <uxr_flash_output_streams>
 800f84a:	2300      	movs	r3, #0
 800f84c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f850:	4629      	mov	r1, r5
 800f852:	e005      	b.n	800f860 <uxr_run_session_until_data+0x28>
 800f854:	f000 fd42 	bl	80102dc <uxr_millis>
 800f858:	1b83      	subs	r3, r0, r6
 800f85a:	1ae9      	subs	r1, r5, r3
 800f85c:	2900      	cmp	r1, #0
 800f85e:	dd07      	ble.n	800f870 <uxr_run_session_until_data+0x38>
 800f860:	4620      	mov	r0, r4
 800f862:	f7ff fe8f 	bl	800f584 <listen_message_reliably>
 800f866:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f86a:	2800      	cmp	r0, #0
 800f86c:	d0f2      	beq.n	800f854 <uxr_run_session_until_data+0x1c>
 800f86e:	bd70      	pop	{r4, r5, r6, pc}
 800f870:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f874:	bd70      	pop	{r4, r5, r6, pc}
 800f876:	bf00      	nop

0800f878 <uxr_run_session_until_confirm_delivery>:
 800f878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f87c:	4606      	mov	r6, r0
 800f87e:	460d      	mov	r5, r1
 800f880:	f000 fd2c 	bl	80102dc <uxr_millis>
 800f884:	4607      	mov	r7, r0
 800f886:	4630      	mov	r0, r6
 800f888:	f7ff fc36 	bl	800f0f8 <uxr_flash_output_streams>
 800f88c:	2d00      	cmp	r5, #0
 800f88e:	f106 0808 	add.w	r8, r6, #8
 800f892:	bfa8      	it	ge
 800f894:	462c      	movge	r4, r5
 800f896:	da07      	bge.n	800f8a8 <uxr_run_session_until_confirm_delivery+0x30>
 800f898:	e00e      	b.n	800f8b8 <uxr_run_session_until_confirm_delivery+0x40>
 800f89a:	f7ff fe73 	bl	800f584 <listen_message_reliably>
 800f89e:	f000 fd1d 	bl	80102dc <uxr_millis>
 800f8a2:	1bc3      	subs	r3, r0, r7
 800f8a4:	1aec      	subs	r4, r5, r3
 800f8a6:	d407      	bmi.n	800f8b8 <uxr_run_session_until_confirm_delivery+0x40>
 800f8a8:	4640      	mov	r0, r8
 800f8aa:	f000 fcbb 	bl	8010224 <uxr_output_streams_confirmed>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d0f0      	beq.n	800f89a <uxr_run_session_until_confirm_delivery+0x22>
 800f8b8:	4640      	mov	r0, r8
 800f8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8be:	f000 bcb1 	b.w	8010224 <uxr_output_streams_confirmed>
 800f8c2:	bf00      	nop

0800f8c4 <uxr_run_session_until_all_status>:
 800f8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c8:	9c08      	ldr	r4, [sp, #32]
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	460f      	mov	r7, r1
 800f8ce:	4691      	mov	r9, r2
 800f8d0:	461d      	mov	r5, r3
 800f8d2:	f7ff fc11 	bl	800f0f8 <uxr_flash_output_streams>
 800f8d6:	b124      	cbz	r4, 800f8e2 <uxr_run_session_until_all_status+0x1e>
 800f8d8:	4622      	mov	r2, r4
 800f8da:	21ff      	movs	r1, #255	@ 0xff
 800f8dc:	4628      	mov	r0, r5
 800f8de:	f009 fa92 	bl	8018e06 <memset>
 800f8e2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f8e6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f8e8:	f000 fcf8 	bl	80102dc <uxr_millis>
 800f8ec:	3d01      	subs	r5, #1
 800f8ee:	f1a9 0902 	sub.w	r9, r9, #2
 800f8f2:	4680      	mov	r8, r0
 800f8f4:	4639      	mov	r1, r7
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	f7ff fe44 	bl	800f584 <listen_message_reliably>
 800f8fc:	f000 fcee 	bl	80102dc <uxr_millis>
 800f900:	eba0 0008 	sub.w	r0, r0, r8
 800f904:	1a39      	subs	r1, r7, r0
 800f906:	b344      	cbz	r4, 800f95a <uxr_run_session_until_all_status+0x96>
 800f908:	4628      	mov	r0, r5
 800f90a:	46ac      	mov	ip, r5
 800f90c:	2301      	movs	r3, #1
 800f90e:	e002      	b.n	800f916 <uxr_run_session_until_all_status+0x52>
 800f910:	42a3      	cmp	r3, r4
 800f912:	d20d      	bcs.n	800f930 <uxr_run_session_until_all_status+0x6c>
 800f914:	3301      	adds	r3, #1
 800f916:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f91a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f91e:	d1f7      	bne.n	800f910 <uxr_run_session_until_all_status+0x4c>
 800f920:	42a3      	cmp	r3, r4
 800f922:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f926:	d213      	bcs.n	800f950 <uxr_run_session_until_all_status+0x8c>
 800f928:	2a00      	cmp	r2, #0
 800f92a:	d0f3      	beq.n	800f914 <uxr_run_session_until_all_status+0x50>
 800f92c:	2900      	cmp	r1, #0
 800f92e:	dce2      	bgt.n	800f8f6 <uxr_run_session_until_all_status+0x32>
 800f930:	2300      	movs	r3, #0
 800f932:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f934:	442c      	add	r4, r5
 800f936:	e001      	b.n	800f93c <uxr_run_session_until_all_status+0x78>
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d812      	bhi.n	800f962 <uxr_run_session_until_all_status+0x9e>
 800f93c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f940:	4284      	cmp	r4, r0
 800f942:	d1f9      	bne.n	800f938 <uxr_run_session_until_all_status+0x74>
 800f944:	2b01      	cmp	r3, #1
 800f946:	bf8c      	ite	hi
 800f948:	2000      	movhi	r0, #0
 800f94a:	2001      	movls	r0, #1
 800f94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f950:	2900      	cmp	r1, #0
 800f952:	dded      	ble.n	800f930 <uxr_run_session_until_all_status+0x6c>
 800f954:	2a00      	cmp	r2, #0
 800f956:	d1ce      	bne.n	800f8f6 <uxr_run_session_until_all_status+0x32>
 800f958:	e7ea      	b.n	800f930 <uxr_run_session_until_all_status+0x6c>
 800f95a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f95c:	2001      	movs	r0, #1
 800f95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f962:	2000      	movs	r0, #0
 800f964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f968 <wait_session_status>:
 800f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f96c:	4604      	mov	r4, r0
 800f96e:	b09d      	sub	sp, #116	@ 0x74
 800f970:	20ff      	movs	r0, #255	@ 0xff
 800f972:	7160      	strb	r0, [r4, #5]
 800f974:	9303      	str	r3, [sp, #12]
 800f976:	2b00      	cmp	r3, #0
 800f978:	f000 80b6 	beq.w	800fae8 <wait_session_status+0x180>
 800f97c:	468a      	mov	sl, r1
 800f97e:	4691      	mov	r9, r2
 800f980:	f04f 0b00 	mov.w	fp, #0
 800f984:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f986:	464a      	mov	r2, r9
 800f988:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f98c:	4651      	mov	r1, sl
 800f98e:	47a8      	blx	r5
 800f990:	f000 fca4 	bl	80102dc <uxr_millis>
 800f994:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f998:	4605      	mov	r5, r0
 800f99a:	e009      	b.n	800f9b0 <wait_session_status+0x48>
 800f99c:	f000 fc9e 	bl	80102dc <uxr_millis>
 800f9a0:	1b40      	subs	r0, r0, r5
 800f9a2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	dd40      	ble.n	800fa2c <wait_session_status+0xc4>
 800f9aa:	7960      	ldrb	r0, [r4, #5]
 800f9ac:	28ff      	cmp	r0, #255	@ 0xff
 800f9ae:	d145      	bne.n	800fa3c <wait_session_status+0xd4>
 800f9b0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f9b2:	a908      	add	r1, sp, #32
 800f9b4:	6896      	ldr	r6, [r2, #8]
 800f9b6:	6810      	ldr	r0, [r2, #0]
 800f9b8:	aa09      	add	r2, sp, #36	@ 0x24
 800f9ba:	47b0      	blx	r6
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	d0ed      	beq.n	800f99c <wait_session_status+0x34>
 800f9c0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f9c4:	a80c      	add	r0, sp, #48	@ 0x30
 800f9c6:	f7fe ff7f 	bl	800e8c8 <ucdr_init_buffer>
 800f9ca:	2600      	movs	r6, #0
 800f9cc:	f10d 031e 	add.w	r3, sp, #30
 800f9d0:	aa07      	add	r2, sp, #28
 800f9d2:	a90c      	add	r1, sp, #48	@ 0x30
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f88d 601c 	strb.w	r6, [sp, #28]
 800f9da:	f000 fa87 	bl	800feec <uxr_read_session_header>
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	d0dc      	beq.n	800f99c <wait_session_status+0x34>
 800f9e2:	4631      	mov	r1, r6
 800f9e4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f9e8:	f000 fb24 	bl	8010034 <uxr_stream_id_from_raw>
 800f9ec:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f9f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f9f4:	9302      	str	r3, [sp, #8]
 800f9f6:	2f01      	cmp	r7, #1
 800f9f8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f9fc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fa00:	d05c      	beq.n	800fabc <wait_session_status+0x154>
 800fa02:	2f02      	cmp	r7, #2
 800fa04:	d020      	beq.n	800fa48 <wait_session_status+0xe0>
 800fa06:	2f00      	cmp	r7, #0
 800fa08:	d1c8      	bne.n	800f99c <wait_session_status+0x34>
 800fa0a:	4639      	mov	r1, r7
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	f000 fb11 	bl	8010034 <uxr_stream_id_from_raw>
 800fa12:	a90c      	add	r1, sp, #48	@ 0x30
 800fa14:	4602      	mov	r2, r0
 800fa16:	900b      	str	r0, [sp, #44]	@ 0x2c
 800fa18:	4620      	mov	r0, r4
 800fa1a:	f7ff fc2b 	bl	800f274 <read_submessage_list>
 800fa1e:	f000 fc5d 	bl	80102dc <uxr_millis>
 800fa22:	1b40      	subs	r0, r0, r5
 800fa24:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	dcbe      	bgt.n	800f9aa <wait_session_status+0x42>
 800fa2c:	9b03      	ldr	r3, [sp, #12]
 800fa2e:	7960      	ldrb	r0, [r4, #5]
 800fa30:	f10b 0b01 	add.w	fp, fp, #1
 800fa34:	455b      	cmp	r3, fp
 800fa36:	d001      	beq.n	800fa3c <wait_session_status+0xd4>
 800fa38:	28ff      	cmp	r0, #255	@ 0xff
 800fa3a:	d0a3      	beq.n	800f984 <wait_session_status+0x1c>
 800fa3c:	38ff      	subs	r0, #255	@ 0xff
 800fa3e:	bf18      	it	ne
 800fa40:	2001      	movne	r0, #1
 800fa42:	b01d      	add	sp, #116	@ 0x74
 800fa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa48:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800fa4c:	9304      	str	r3, [sp, #16]
 800fa4e:	4631      	mov	r1, r6
 800fa50:	f104 0008 	add.w	r0, r4, #8
 800fa54:	f000 fbdc 	bl	8010210 <uxr_get_input_reliable_stream>
 800fa58:	4680      	mov	r8, r0
 800fa5a:	b348      	cbz	r0, 800fab0 <wait_session_status+0x148>
 800fa5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa5e:	9205      	str	r2, [sp, #20]
 800fa60:	a80c      	add	r0, sp, #48	@ 0x30
 800fa62:	f7fe ff61 	bl	800e928 <ucdr_buffer_remaining>
 800fa66:	4603      	mov	r3, r0
 800fa68:	f10d 001d 	add.w	r0, sp, #29
 800fa6c:	9000      	str	r0, [sp, #0]
 800fa6e:	9a05      	ldr	r2, [sp, #20]
 800fa70:	9902      	ldr	r1, [sp, #8]
 800fa72:	4640      	mov	r0, r8
 800fa74:	f006 fcea 	bl	801644c <uxr_receive_reliable_message>
 800fa78:	b1d0      	cbz	r0, 800fab0 <wait_session_status+0x148>
 800fa7a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d03a      	beq.n	800faf8 <wait_session_status+0x190>
 800fa82:	9f04      	ldr	r7, [sp, #16]
 800fa84:	e00a      	b.n	800fa9c <wait_session_status+0x134>
 800fa86:	f04f 0302 	mov.w	r3, #2
 800fa8a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800fa8e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800fa92:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800fa96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fa98:	f7ff fbec 	bl	800f274 <read_submessage_list>
 800fa9c:	a914      	add	r1, sp, #80	@ 0x50
 800fa9e:	2204      	movs	r2, #4
 800faa0:	4640      	mov	r0, r8
 800faa2:	f006 fd53 	bl	801654c <uxr_next_input_reliable_buffer_available>
 800faa6:	4603      	mov	r3, r0
 800faa8:	a914      	add	r1, sp, #80	@ 0x50
 800faaa:	4620      	mov	r0, r4
 800faac:	2b00      	cmp	r3, #0
 800faae:	d1ea      	bne.n	800fa86 <wait_session_status+0x11e>
 800fab0:	9904      	ldr	r1, [sp, #16]
 800fab2:	4632      	mov	r2, r6
 800fab4:	4620      	mov	r0, r4
 800fab6:	f7ff fa59 	bl	800ef6c <write_submessage_acknack.isra.0>
 800faba:	e76f      	b.n	800f99c <wait_session_status+0x34>
 800fabc:	4631      	mov	r1, r6
 800fabe:	f104 0008 	add.w	r0, r4, #8
 800fac2:	f000 fb9b 	bl	80101fc <uxr_get_input_best_effort_stream>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	f43f af68 	beq.w	800f99c <wait_session_status+0x34>
 800facc:	9902      	ldr	r1, [sp, #8]
 800face:	f006 fc29 	bl	8016324 <uxr_receive_best_effort_message>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	f43f af62 	beq.w	800f99c <wait_session_status+0x34>
 800fad8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800fadc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fade:	a90c      	add	r1, sp, #48	@ 0x30
 800fae0:	4620      	mov	r0, r4
 800fae2:	f7ff fbc7 	bl	800f274 <read_submessage_list>
 800fae6:	e759      	b.n	800f99c <wait_session_status+0x34>
 800fae8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800faea:	e9d3 0400 	ldrd	r0, r4, [r3]
 800faee:	47a0      	blx	r4
 800faf0:	2001      	movs	r0, #1
 800faf2:	b01d      	add	sp, #116	@ 0x74
 800faf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800fafc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fafe:	a90c      	add	r1, sp, #48	@ 0x30
 800fb00:	4620      	mov	r0, r4
 800fb02:	f7ff fbb7 	bl	800f274 <read_submessage_list>
 800fb06:	e7bc      	b.n	800fa82 <wait_session_status+0x11a>

0800fb08 <uxr_delete_session_retries>:
 800fb08:	b530      	push	{r4, r5, lr}
 800fb0a:	b08f      	sub	sp, #60	@ 0x3c
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	460d      	mov	r5, r1
 800fb10:	f000 fa2e 	bl	800ff70 <uxr_session_header_offset>
 800fb14:	2300      	movs	r3, #0
 800fb16:	2210      	movs	r2, #16
 800fb18:	9000      	str	r0, [sp, #0]
 800fb1a:	a902      	add	r1, sp, #8
 800fb1c:	a806      	add	r0, sp, #24
 800fb1e:	f7fe fec1 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 800fb22:	a906      	add	r1, sp, #24
 800fb24:	4620      	mov	r0, r4
 800fb26:	f000 f973 	bl	800fe10 <uxr_buffer_delete_session>
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	4611      	mov	r1, r2
 800fb2e:	9b06      	ldr	r3, [sp, #24]
 800fb30:	4620      	mov	r0, r4
 800fb32:	f000 f9c7 	bl	800fec4 <uxr_stamp_session_header>
 800fb36:	a806      	add	r0, sp, #24
 800fb38:	f7fe fef2 	bl	800e920 <ucdr_buffer_length>
 800fb3c:	462b      	mov	r3, r5
 800fb3e:	4602      	mov	r2, r0
 800fb40:	a902      	add	r1, sp, #8
 800fb42:	4620      	mov	r0, r4
 800fb44:	f7ff ff10 	bl	800f968 <wait_session_status>
 800fb48:	b118      	cbz	r0, 800fb52 <uxr_delete_session_retries+0x4a>
 800fb4a:	7960      	ldrb	r0, [r4, #5]
 800fb4c:	fab0 f080 	clz	r0, r0
 800fb50:	0940      	lsrs	r0, r0, #5
 800fb52:	b00f      	add	sp, #60	@ 0x3c
 800fb54:	bd30      	pop	{r4, r5, pc}
 800fb56:	bf00      	nop

0800fb58 <uxr_create_session>:
 800fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	f100 0b08 	add.w	fp, r0, #8
 800fb60:	b0ab      	sub	sp, #172	@ 0xac
 800fb62:	4604      	mov	r4, r0
 800fb64:	4658      	mov	r0, fp
 800fb66:	f000 fa99 	bl	801009c <uxr_reset_stream_storage>
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f000 fa00 	bl	800ff70 <uxr_session_header_offset>
 800fb70:	2300      	movs	r3, #0
 800fb72:	9000      	str	r0, [sp, #0]
 800fb74:	221c      	movs	r2, #28
 800fb76:	a90b      	add	r1, sp, #44	@ 0x2c
 800fb78:	a812      	add	r0, sp, #72	@ 0x48
 800fb7a:	f7fe fe93 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 800fb7e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb80:	8a1a      	ldrh	r2, [r3, #16]
 800fb82:	3a04      	subs	r2, #4
 800fb84:	b292      	uxth	r2, r2
 800fb86:	a912      	add	r1, sp, #72	@ 0x48
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f000 f917 	bl	800fdbc <uxr_buffer_create_session>
 800fb8e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fb90:	4620      	mov	r0, r4
 800fb92:	f000 f983 	bl	800fe9c <uxr_stamp_create_session_header>
 800fb96:	a812      	add	r0, sp, #72	@ 0x48
 800fb98:	f7fe fec2 	bl	800e920 <ucdr_buffer_length>
 800fb9c:	23ff      	movs	r3, #255	@ 0xff
 800fb9e:	7163      	strb	r3, [r4, #5]
 800fba0:	230a      	movs	r3, #10
 800fba2:	46da      	mov	sl, fp
 800fba4:	9303      	str	r3, [sp, #12]
 800fba6:	4683      	mov	fp, r0
 800fba8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fbaa:	465a      	mov	r2, fp
 800fbac:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fbb0:	a90b      	add	r1, sp, #44	@ 0x2c
 800fbb2:	47a8      	blx	r5
 800fbb4:	f000 fb92 	bl	80102dc <uxr_millis>
 800fbb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	e009      	b.n	800fbd4 <uxr_create_session+0x7c>
 800fbc0:	f000 fb8c 	bl	80102dc <uxr_millis>
 800fbc4:	1b40      	subs	r0, r0, r5
 800fbc6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	7962      	ldrb	r2, [r4, #5]
 800fbce:	dd38      	ble.n	800fc42 <uxr_create_session+0xea>
 800fbd0:	2aff      	cmp	r2, #255	@ 0xff
 800fbd2:	d13c      	bne.n	800fc4e <uxr_create_session+0xf6>
 800fbd4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fbd6:	a907      	add	r1, sp, #28
 800fbd8:	6896      	ldr	r6, [r2, #8]
 800fbda:	6810      	ldr	r0, [r2, #0]
 800fbdc:	aa08      	add	r2, sp, #32
 800fbde:	47b0      	blx	r6
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	d0ed      	beq.n	800fbc0 <uxr_create_session+0x68>
 800fbe4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fbe8:	a81a      	add	r0, sp, #104	@ 0x68
 800fbea:	f7fe fe6d 	bl	800e8c8 <ucdr_init_buffer>
 800fbee:	2600      	movs	r6, #0
 800fbf0:	f10d 031a 	add.w	r3, sp, #26
 800fbf4:	aa06      	add	r2, sp, #24
 800fbf6:	a91a      	add	r1, sp, #104	@ 0x68
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	f88d 6018 	strb.w	r6, [sp, #24]
 800fbfe:	f000 f975 	bl	800feec <uxr_read_session_header>
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d0dc      	beq.n	800fbc0 <uxr_create_session+0x68>
 800fc06:	4631      	mov	r1, r6
 800fc08:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fc0c:	f000 fa12 	bl	8010034 <uxr_stream_id_from_raw>
 800fc10:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800fc14:	2e01      	cmp	r6, #1
 800fc16:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fc1a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800fc1e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800fc22:	d053      	beq.n	800fccc <uxr_create_session+0x174>
 800fc24:	2e02      	cmp	r6, #2
 800fc26:	d018      	beq.n	800fc5a <uxr_create_session+0x102>
 800fc28:	2e00      	cmp	r6, #0
 800fc2a:	d1c9      	bne.n	800fbc0 <uxr_create_session+0x68>
 800fc2c:	4631      	mov	r1, r6
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f000 fa00 	bl	8010034 <uxr_stream_id_from_raw>
 800fc34:	a91a      	add	r1, sp, #104	@ 0x68
 800fc36:	4602      	mov	r2, r0
 800fc38:	900a      	str	r0, [sp, #40]	@ 0x28
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f7ff fb1a 	bl	800f274 <read_submessage_list>
 800fc40:	e7be      	b.n	800fbc0 <uxr_create_session+0x68>
 800fc42:	9b03      	ldr	r3, [sp, #12]
 800fc44:	3b01      	subs	r3, #1
 800fc46:	9303      	str	r3, [sp, #12]
 800fc48:	d001      	beq.n	800fc4e <uxr_create_session+0xf6>
 800fc4a:	2aff      	cmp	r2, #255	@ 0xff
 800fc4c:	d0ac      	beq.n	800fba8 <uxr_create_session+0x50>
 800fc4e:	2a00      	cmp	r2, #0
 800fc50:	d051      	beq.n	800fcf6 <uxr_create_session+0x19e>
 800fc52:	2000      	movs	r0, #0
 800fc54:	b02b      	add	sp, #172	@ 0xac
 800fc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fc5e:	9304      	str	r3, [sp, #16]
 800fc60:	4639      	mov	r1, r7
 800fc62:	4650      	mov	r0, sl
 800fc64:	f000 fad4 	bl	8010210 <uxr_get_input_reliable_stream>
 800fc68:	4680      	mov	r8, r0
 800fc6a:	b348      	cbz	r0, 800fcc0 <uxr_create_session+0x168>
 800fc6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fc6e:	9205      	str	r2, [sp, #20]
 800fc70:	a81a      	add	r0, sp, #104	@ 0x68
 800fc72:	f7fe fe59 	bl	800e928 <ucdr_buffer_remaining>
 800fc76:	4603      	mov	r3, r0
 800fc78:	f10d 0019 	add.w	r0, sp, #25
 800fc7c:	9000      	str	r0, [sp, #0]
 800fc7e:	9a05      	ldr	r2, [sp, #20]
 800fc80:	4649      	mov	r1, r9
 800fc82:	4640      	mov	r0, r8
 800fc84:	f006 fbe2 	bl	801644c <uxr_receive_reliable_message>
 800fc88:	b1d0      	cbz	r0, 800fcc0 <uxr_create_session+0x168>
 800fc8a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d038      	beq.n	800fd04 <uxr_create_session+0x1ac>
 800fc92:	9e04      	ldr	r6, [sp, #16]
 800fc94:	e00a      	b.n	800fcac <uxr_create_session+0x154>
 800fc96:	f04f 0302 	mov.w	r3, #2
 800fc9a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800fc9e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800fca2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fca8:	f7ff fae4 	bl	800f274 <read_submessage_list>
 800fcac:	a922      	add	r1, sp, #136	@ 0x88
 800fcae:	2204      	movs	r2, #4
 800fcb0:	4640      	mov	r0, r8
 800fcb2:	f006 fc4b 	bl	801654c <uxr_next_input_reliable_buffer_available>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	a922      	add	r1, sp, #136	@ 0x88
 800fcba:	4620      	mov	r0, r4
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d1ea      	bne.n	800fc96 <uxr_create_session+0x13e>
 800fcc0:	9904      	ldr	r1, [sp, #16]
 800fcc2:	463a      	mov	r2, r7
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	f7ff f951 	bl	800ef6c <write_submessage_acknack.isra.0>
 800fcca:	e779      	b.n	800fbc0 <uxr_create_session+0x68>
 800fccc:	4639      	mov	r1, r7
 800fcce:	4650      	mov	r0, sl
 800fcd0:	f000 fa94 	bl	80101fc <uxr_get_input_best_effort_stream>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	f43f af73 	beq.w	800fbc0 <uxr_create_session+0x68>
 800fcda:	4649      	mov	r1, r9
 800fcdc:	f006 fb22 	bl	8016324 <uxr_receive_best_effort_message>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	f43f af6d 	beq.w	800fbc0 <uxr_create_session+0x68>
 800fce6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fcea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fcec:	a91a      	add	r1, sp, #104	@ 0x68
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f7ff fac0 	bl	800f274 <read_submessage_list>
 800fcf4:	e764      	b.n	800fbc0 <uxr_create_session+0x68>
 800fcf6:	4650      	mov	r0, sl
 800fcf8:	f000 f9d0 	bl	801009c <uxr_reset_stream_storage>
 800fcfc:	2001      	movs	r0, #1
 800fcfe:	b02b      	add	sp, #172	@ 0xac
 800fd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd04:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fd08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd0a:	a91a      	add	r1, sp, #104	@ 0x68
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f7ff fab1 	bl	800f274 <read_submessage_list>
 800fd12:	e7be      	b.n	800fc92 <uxr_create_session+0x13a>

0800fd14 <uxr_prepare_stream_to_write_submessage>:
 800fd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd18:	b082      	sub	sp, #8
 800fd1a:	4682      	mov	sl, r0
 800fd1c:	4610      	mov	r0, r2
 800fd1e:	4615      	mov	r5, r2
 800fd20:	461e      	mov	r6, r3
 800fd22:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800fd26:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800fd2a:	9101      	str	r1, [sp, #4]
 800fd2c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800fd30:	f000 face 	bl	80102d0 <uxr_submessage_padding>
 800fd34:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fd38:	f105 0904 	add.w	r9, r5, #4
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	4481      	add	r9, r0
 800fd40:	d01d      	beq.n	800fd7e <uxr_prepare_stream_to_write_submessage+0x6a>
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d116      	bne.n	800fd74 <uxr_prepare_stream_to_write_submessage+0x60>
 800fd46:	4621      	mov	r1, r4
 800fd48:	f10a 0008 	add.w	r0, sl, #8
 800fd4c:	f000 fa4c 	bl	80101e8 <uxr_get_output_reliable_stream>
 800fd50:	4604      	mov	r4, r0
 800fd52:	b158      	cbz	r0, 800fd6c <uxr_prepare_stream_to_write_submessage+0x58>
 800fd54:	4649      	mov	r1, r9
 800fd56:	4632      	mov	r2, r6
 800fd58:	f006 fdb4 	bl	80168c4 <uxr_prepare_reliable_buffer_to_write>
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	b12c      	cbz	r4, 800fd6c <uxr_prepare_stream_to_write_submessage+0x58>
 800fd60:	4643      	mov	r3, r8
 800fd62:	b2aa      	uxth	r2, r5
 800fd64:	4639      	mov	r1, r7
 800fd66:	4630      	mov	r0, r6
 800fd68:	f000 fa72 	bl	8010250 <uxr_buffer_submessage_header>
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	b002      	add	sp, #8
 800fd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd74:	2400      	movs	r4, #0
 800fd76:	4620      	mov	r0, r4
 800fd78:	b002      	add	sp, #8
 800fd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd7e:	4621      	mov	r1, r4
 800fd80:	f10a 0008 	add.w	r0, sl, #8
 800fd84:	f000 fa28 	bl	80101d8 <uxr_get_output_best_effort_stream>
 800fd88:	4604      	mov	r4, r0
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	d0ee      	beq.n	800fd6c <uxr_prepare_stream_to_write_submessage+0x58>
 800fd8e:	4649      	mov	r1, r9
 800fd90:	4632      	mov	r2, r6
 800fd92:	f006 fcc7 	bl	8016724 <uxr_prepare_best_effort_buffer_to_write>
 800fd96:	4604      	mov	r4, r0
 800fd98:	e7e1      	b.n	800fd5e <uxr_prepare_stream_to_write_submessage+0x4a>
 800fd9a:	bf00      	nop

0800fd9c <uxr_init_session_info>:
 800fd9c:	0e13      	lsrs	r3, r2, #24
 800fd9e:	7043      	strb	r3, [r0, #1]
 800fda0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800fda4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fda8:	7001      	strb	r1, [r0, #0]
 800fdaa:	70c3      	strb	r3, [r0, #3]
 800fdac:	2109      	movs	r1, #9
 800fdae:	23ff      	movs	r3, #255	@ 0xff
 800fdb0:	f880 c002 	strb.w	ip, [r0, #2]
 800fdb4:	7102      	strb	r2, [r0, #4]
 800fdb6:	80c1      	strh	r1, [r0, #6]
 800fdb8:	7143      	strb	r3, [r0, #5]
 800fdba:	4770      	bx	lr

0800fdbc <uxr_buffer_create_session>:
 800fdbc:	b530      	push	{r4, r5, lr}
 800fdbe:	b089      	sub	sp, #36	@ 0x24
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	4d12      	ldr	r5, [pc, #72]	@ (800fe0c <uxr_buffer_create_session+0x50>)
 800fdc4:	9307      	str	r3, [sp, #28]
 800fdc6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	9301      	str	r3, [sp, #4]
 800fdce:	80c2      	strh	r2, [r0, #6]
 800fdd0:	f88d 2004 	strb.w	r2, [sp, #4]
 800fdd4:	682a      	ldr	r2, [r5, #0]
 800fdd6:	9200      	str	r2, [sp, #0]
 800fdd8:	88aa      	ldrh	r2, [r5, #4]
 800fdda:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fdde:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800fde2:	9202      	str	r2, [sp, #8]
 800fde4:	460c      	mov	r4, r1
 800fde6:	7802      	ldrb	r2, [r0, #0]
 800fde8:	9303      	str	r3, [sp, #12]
 800fdea:	4619      	mov	r1, r3
 800fdec:	f88d 200c 	strb.w	r2, [sp, #12]
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	2210      	movs	r2, #16
 800fdf4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800fdf8:	9306      	str	r3, [sp, #24]
 800fdfa:	f000 fa29 	bl	8010250 <uxr_buffer_submessage_header>
 800fdfe:	4669      	mov	r1, sp
 800fe00:	4620      	mov	r0, r4
 800fe02:	f001 fa6d 	bl	80112e0 <uxr_serialize_CREATE_CLIENT_Payload>
 800fe06:	b009      	add	sp, #36	@ 0x24
 800fe08:	bd30      	pop	{r4, r5, pc}
 800fe0a:	bf00      	nop
 800fe0c:	0801a1e4 	.word	0x0801a1e4

0800fe10 <uxr_buffer_delete_session>:
 800fe10:	b510      	push	{r4, lr}
 800fe12:	4b0c      	ldr	r3, [pc, #48]	@ (800fe44 <uxr_buffer_delete_session+0x34>)
 800fe14:	b082      	sub	sp, #8
 800fe16:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800fe1a:	f8ad c006 	strh.w	ip, [sp, #6]
 800fe1e:	460c      	mov	r4, r1
 800fe20:	2202      	movs	r2, #2
 800fe22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe26:	80c2      	strh	r2, [r0, #6]
 800fe28:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fe2c:	2204      	movs	r2, #4
 800fe2e:	2300      	movs	r3, #0
 800fe30:	2103      	movs	r1, #3
 800fe32:	4620      	mov	r0, r4
 800fe34:	f000 fa0c 	bl	8010250 <uxr_buffer_submessage_header>
 800fe38:	a901      	add	r1, sp, #4
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	f001 faf6 	bl	801142c <uxr_serialize_DELETE_Payload>
 800fe40:	b002      	add	sp, #8
 800fe42:	bd10      	pop	{r4, pc}
 800fe44:	0801a1e4 	.word	0x0801a1e4

0800fe48 <uxr_read_create_session_status>:
 800fe48:	b510      	push	{r4, lr}
 800fe4a:	b088      	sub	sp, #32
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	4608      	mov	r0, r1
 800fe50:	a901      	add	r1, sp, #4
 800fe52:	f001 fafb 	bl	801144c <uxr_deserialize_STATUS_AGENT_Payload>
 800fe56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fe5a:	7163      	strb	r3, [r4, #5]
 800fe5c:	b008      	add	sp, #32
 800fe5e:	bd10      	pop	{r4, pc}

0800fe60 <uxr_read_delete_session_status>:
 800fe60:	b510      	push	{r4, lr}
 800fe62:	4604      	mov	r4, r0
 800fe64:	b084      	sub	sp, #16
 800fe66:	4608      	mov	r0, r1
 800fe68:	a902      	add	r1, sp, #8
 800fe6a:	f001 fb1f 	bl	80114ac <uxr_deserialize_STATUS_Payload>
 800fe6e:	88e3      	ldrh	r3, [r4, #6]
 800fe70:	2b02      	cmp	r3, #2
 800fe72:	d001      	beq.n	800fe78 <uxr_read_delete_session_status+0x18>
 800fe74:	b004      	add	sp, #16
 800fe76:	bd10      	pop	{r4, pc}
 800fe78:	f10d 000a 	add.w	r0, sp, #10
 800fe7c:	f7fe fffc 	bl	800ee78 <uxr_object_id_from_raw>
 800fe80:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800fe84:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800fe88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	2b02      	cmp	r3, #2
 800fe90:	bf04      	itt	eq
 800fe92:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800fe96:	7163      	strbeq	r3, [r4, #5]
 800fe98:	b004      	add	sp, #16
 800fe9a:	bd10      	pop	{r4, pc}

0800fe9c <uxr_stamp_create_session_header>:
 800fe9c:	b510      	push	{r4, lr}
 800fe9e:	2208      	movs	r2, #8
 800fea0:	b08a      	sub	sp, #40	@ 0x28
 800fea2:	4604      	mov	r4, r0
 800fea4:	eb0d 0002 	add.w	r0, sp, r2
 800fea8:	f7fe fd0e 	bl	800e8c8 <ucdr_init_buffer>
 800feac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feb0:	9400      	str	r4, [sp, #0]
 800feb2:	2300      	movs	r3, #0
 800feb4:	461a      	mov	r2, r3
 800feb6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800feba:	a802      	add	r0, sp, #8
 800febc:	f000 fbc2 	bl	8010644 <uxr_serialize_message_header>
 800fec0:	b00a      	add	sp, #40	@ 0x28
 800fec2:	bd10      	pop	{r4, pc}

0800fec4 <uxr_stamp_session_header>:
 800fec4:	b530      	push	{r4, r5, lr}
 800fec6:	b08d      	sub	sp, #52	@ 0x34
 800fec8:	4604      	mov	r4, r0
 800feca:	460d      	mov	r5, r1
 800fecc:	9203      	str	r2, [sp, #12]
 800fece:	4619      	mov	r1, r3
 800fed0:	a804      	add	r0, sp, #16
 800fed2:	2208      	movs	r2, #8
 800fed4:	f7fe fcf8 	bl	800e8c8 <ucdr_init_buffer>
 800fed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fedc:	9b03      	ldr	r3, [sp, #12]
 800fede:	9400      	str	r4, [sp, #0]
 800fee0:	462a      	mov	r2, r5
 800fee2:	a804      	add	r0, sp, #16
 800fee4:	f000 fbae 	bl	8010644 <uxr_serialize_message_header>
 800fee8:	b00d      	add	sp, #52	@ 0x34
 800feea:	bd30      	pop	{r4, r5, pc}

0800feec <uxr_read_session_header>:
 800feec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef0:	4607      	mov	r7, r0
 800fef2:	b084      	sub	sp, #16
 800fef4:	4608      	mov	r0, r1
 800fef6:	460c      	mov	r4, r1
 800fef8:	4615      	mov	r5, r2
 800fefa:	461e      	mov	r6, r3
 800fefc:	f7fe fd14 	bl	800e928 <ucdr_buffer_remaining>
 800ff00:	2808      	cmp	r0, #8
 800ff02:	d803      	bhi.n	800ff0c <uxr_read_session_header+0x20>
 800ff04:	2000      	movs	r0, #0
 800ff06:	b004      	add	sp, #16
 800ff08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff0c:	f10d 080c 	add.w	r8, sp, #12
 800ff10:	4633      	mov	r3, r6
 800ff12:	462a      	mov	r2, r5
 800ff14:	f8cd 8000 	str.w	r8, [sp]
 800ff18:	4620      	mov	r0, r4
 800ff1a:	f10d 010b 	add.w	r1, sp, #11
 800ff1e:	f000 fbaf 	bl	8010680 <uxr_deserialize_message_header>
 800ff22:	783a      	ldrb	r2, [r7, #0]
 800ff24:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	d1eb      	bne.n	800ff04 <uxr_read_session_header+0x18>
 800ff2c:	061b      	lsls	r3, r3, #24
 800ff2e:	d41c      	bmi.n	800ff6a <uxr_read_session_header+0x7e>
 800ff30:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ff34:	787b      	ldrb	r3, [r7, #1]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d003      	beq.n	800ff42 <uxr_read_session_header+0x56>
 800ff3a:	2001      	movs	r0, #1
 800ff3c:	f080 0001 	eor.w	r0, r0, #1
 800ff40:	e7e1      	b.n	800ff06 <uxr_read_session_header+0x1a>
 800ff42:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ff46:	78bb      	ldrb	r3, [r7, #2]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	f107 0102 	add.w	r1, r7, #2
 800ff4e:	d1f4      	bne.n	800ff3a <uxr_read_session_header+0x4e>
 800ff50:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ff54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d1ee      	bne.n	800ff3a <uxr_read_session_header+0x4e>
 800ff5c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ff60:	784b      	ldrb	r3, [r1, #1]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d1e9      	bne.n	800ff3a <uxr_read_session_header+0x4e>
 800ff66:	2000      	movs	r0, #0
 800ff68:	e7e8      	b.n	800ff3c <uxr_read_session_header+0x50>
 800ff6a:	2001      	movs	r0, #1
 800ff6c:	e7cb      	b.n	800ff06 <uxr_read_session_header+0x1a>
 800ff6e:	bf00      	nop

0800ff70 <uxr_session_header_offset>:
 800ff70:	f990 3000 	ldrsb.w	r3, [r0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	bfac      	ite	ge
 800ff78:	2008      	movge	r0, #8
 800ff7a:	2004      	movlt	r0, #4
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop

0800ff80 <uxr_init_base_object_request>:
 800ff80:	b510      	push	{r4, lr}
 800ff82:	88c3      	ldrh	r3, [r0, #6]
 800ff84:	b082      	sub	sp, #8
 800ff86:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800ff8a:	9101      	str	r1, [sp, #4]
 800ff8c:	f1a3 010a 	sub.w	r1, r3, #10
 800ff90:	b289      	uxth	r1, r1
 800ff92:	42a1      	cmp	r1, r4
 800ff94:	d80e      	bhi.n	800ffb4 <uxr_init_base_object_request+0x34>
 800ff96:	3301      	adds	r3, #1
 800ff98:	b29c      	uxth	r4, r3
 800ff9a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	80c4      	strh	r4, [r0, #6]
 800ffa2:	9801      	ldr	r0, [sp, #4]
 800ffa4:	7011      	strb	r1, [r2, #0]
 800ffa6:	7053      	strb	r3, [r2, #1]
 800ffa8:	1c91      	adds	r1, r2, #2
 800ffaa:	f7fe ff79 	bl	800eea0 <uxr_object_id_to_raw>
 800ffae:	4620      	mov	r0, r4
 800ffb0:	b002      	add	sp, #8
 800ffb2:	bd10      	pop	{r4, pc}
 800ffb4:	230a      	movs	r3, #10
 800ffb6:	2100      	movs	r1, #0
 800ffb8:	461c      	mov	r4, r3
 800ffba:	e7f1      	b.n	800ffa0 <uxr_init_base_object_request+0x20>

0800ffbc <uxr_parse_base_object_request>:
 800ffbc:	b570      	push	{r4, r5, r6, lr}
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	3002      	adds	r0, #2
 800ffc2:	460d      	mov	r5, r1
 800ffc4:	4616      	mov	r6, r2
 800ffc6:	f7fe ff57 	bl	800ee78 <uxr_object_id_from_raw>
 800ffca:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ffce:	8028      	strh	r0, [r5, #0]
 800ffd0:	806b      	strh	r3, [r5, #2]
 800ffd2:	7822      	ldrb	r2, [r4, #0]
 800ffd4:	7863      	ldrb	r3, [r4, #1]
 800ffd6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ffda:	8033      	strh	r3, [r6, #0]
 800ffdc:	bd70      	pop	{r4, r5, r6, pc}
 800ffde:	bf00      	nop

0800ffe0 <uxr_stream_id>:
 800ffe0:	2901      	cmp	r1, #1
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	d01d      	beq.n	8010022 <uxr_stream_id+0x42>
 800ffe6:	2902      	cmp	r1, #2
 800ffe8:	f04f 0c00 	mov.w	ip, #0
 800ffec:	d01e      	beq.n	801002c <uxr_stream_id+0x4c>
 800ffee:	2300      	movs	r3, #0
 800fff0:	f36c 0307 	bfi	r3, ip, #0, #8
 800fff4:	f360 230f 	bfi	r3, r0, #8, #8
 800fff8:	f361 4317 	bfi	r3, r1, #16, #8
 800fffc:	f362 631f 	bfi	r3, r2, #24, #8
 8010000:	b2da      	uxtb	r2, r3
 8010002:	2000      	movs	r0, #0
 8010004:	f362 0007 	bfi	r0, r2, #0, #8
 8010008:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801000c:	f362 200f 	bfi	r0, r2, #8, #8
 8010010:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010014:	f362 4017 	bfi	r0, r2, #16, #8
 8010018:	0e1b      	lsrs	r3, r3, #24
 801001a:	f363 601f 	bfi	r0, r3, #24, #8
 801001e:	b002      	add	sp, #8
 8010020:	4770      	bx	lr
 8010022:	f100 0c01 	add.w	ip, r0, #1
 8010026:	fa5f fc8c 	uxtb.w	ip, ip
 801002a:	e7e0      	b.n	800ffee <uxr_stream_id+0xe>
 801002c:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010030:	e7dd      	b.n	800ffee <uxr_stream_id+0xe>
 8010032:	bf00      	nop

08010034 <uxr_stream_id_from_raw>:
 8010034:	b082      	sub	sp, #8
 8010036:	b130      	cbz	r0, 8010046 <uxr_stream_id_from_raw+0x12>
 8010038:	0603      	lsls	r3, r0, #24
 801003a:	d420      	bmi.n	801007e <uxr_stream_id_from_raw+0x4a>
 801003c:	1e42      	subs	r2, r0, #1
 801003e:	b2d2      	uxtb	r2, r2
 8010040:	f04f 0c01 	mov.w	ip, #1
 8010044:	e001      	b.n	801004a <uxr_stream_id_from_raw+0x16>
 8010046:	4684      	mov	ip, r0
 8010048:	4602      	mov	r2, r0
 801004a:	2300      	movs	r3, #0
 801004c:	f360 0307 	bfi	r3, r0, #0, #8
 8010050:	f362 230f 	bfi	r3, r2, #8, #8
 8010054:	f36c 4317 	bfi	r3, ip, #16, #8
 8010058:	f361 631f 	bfi	r3, r1, #24, #8
 801005c:	b2da      	uxtb	r2, r3
 801005e:	2000      	movs	r0, #0
 8010060:	f362 0007 	bfi	r0, r2, #0, #8
 8010064:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010068:	f362 200f 	bfi	r0, r2, #8, #8
 801006c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010070:	f362 4017 	bfi	r0, r2, #16, #8
 8010074:	0e1b      	lsrs	r3, r3, #24
 8010076:	f363 601f 	bfi	r0, r3, #24, #8
 801007a:	b002      	add	sp, #8
 801007c:	4770      	bx	lr
 801007e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010082:	f04f 0c02 	mov.w	ip, #2
 8010086:	e7e0      	b.n	801004a <uxr_stream_id_from_raw+0x16>

08010088 <uxr_init_stream_storage>:
 8010088:	2300      	movs	r3, #0
 801008a:	7403      	strb	r3, [r0, #16]
 801008c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010090:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010094:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010098:	4770      	bx	lr
 801009a:	bf00      	nop

0801009c <uxr_reset_stream_storage>:
 801009c:	b570      	push	{r4, r5, r6, lr}
 801009e:	7c03      	ldrb	r3, [r0, #16]
 80100a0:	4604      	mov	r4, r0
 80100a2:	b153      	cbz	r3, 80100ba <uxr_reset_stream_storage+0x1e>
 80100a4:	4606      	mov	r6, r0
 80100a6:	2500      	movs	r5, #0
 80100a8:	4630      	mov	r0, r6
 80100aa:	f006 fb35 	bl	8016718 <uxr_reset_output_best_effort_stream>
 80100ae:	7c23      	ldrb	r3, [r4, #16]
 80100b0:	3501      	adds	r5, #1
 80100b2:	42ab      	cmp	r3, r5
 80100b4:	f106 0610 	add.w	r6, r6, #16
 80100b8:	d8f6      	bhi.n	80100a8 <uxr_reset_stream_storage+0xc>
 80100ba:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80100be:	b163      	cbz	r3, 80100da <uxr_reset_stream_storage+0x3e>
 80100c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100c4:	2500      	movs	r5, #0
 80100c6:	4630      	mov	r0, r6
 80100c8:	f006 f928 	bl	801631c <uxr_reset_input_best_effort_stream>
 80100cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80100d0:	3501      	adds	r5, #1
 80100d2:	42ab      	cmp	r3, r5
 80100d4:	f106 0602 	add.w	r6, r6, #2
 80100d8:	d8f5      	bhi.n	80100c6 <uxr_reset_stream_storage+0x2a>
 80100da:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80100de:	b163      	cbz	r3, 80100fa <uxr_reset_stream_storage+0x5e>
 80100e0:	f104 0618 	add.w	r6, r4, #24
 80100e4:	2500      	movs	r5, #0
 80100e6:	4630      	mov	r0, r6
 80100e8:	f006 fbc2 	bl	8016870 <uxr_reset_output_reliable_stream>
 80100ec:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80100f0:	3501      	adds	r5, #1
 80100f2:	42ab      	cmp	r3, r5
 80100f4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80100f8:	d8f5      	bhi.n	80100e6 <uxr_reset_stream_storage+0x4a>
 80100fa:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80100fe:	b163      	cbz	r3, 801011a <uxr_reset_stream_storage+0x7e>
 8010100:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010104:	2500      	movs	r5, #0
 8010106:	4630      	mov	r0, r6
 8010108:	f006 f97c 	bl	8016404 <uxr_reset_input_reliable_stream>
 801010c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010110:	3501      	adds	r5, #1
 8010112:	42ab      	cmp	r3, r5
 8010114:	f106 0618 	add.w	r6, r6, #24
 8010118:	d8f5      	bhi.n	8010106 <uxr_reset_stream_storage+0x6a>
 801011a:	bd70      	pop	{r4, r5, r6, pc}

0801011c <uxr_add_output_best_effort_buffer>:
 801011c:	b510      	push	{r4, lr}
 801011e:	7c04      	ldrb	r4, [r0, #16]
 8010120:	f104 0c01 	add.w	ip, r4, #1
 8010124:	b082      	sub	sp, #8
 8010126:	f880 c010 	strb.w	ip, [r0, #16]
 801012a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801012e:	f006 fae9 	bl	8016704 <uxr_init_output_best_effort_stream>
 8010132:	2201      	movs	r2, #1
 8010134:	4611      	mov	r1, r2
 8010136:	4620      	mov	r0, r4
 8010138:	b002      	add	sp, #8
 801013a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801013e:	f7ff bf4f 	b.w	800ffe0 <uxr_stream_id>
 8010142:	bf00      	nop

08010144 <uxr_add_output_reliable_buffer>:
 8010144:	b510      	push	{r4, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	4684      	mov	ip, r0
 801014a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801014e:	9000      	str	r0, [sp, #0]
 8010150:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010154:	2028      	movs	r0, #40	@ 0x28
 8010156:	fb00 c004 	mla	r0, r0, r4, ip
 801015a:	f104 0e01 	add.w	lr, r4, #1
 801015e:	3018      	adds	r0, #24
 8010160:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010164:	f006 fb4c 	bl	8016800 <uxr_init_output_reliable_stream>
 8010168:	2201      	movs	r2, #1
 801016a:	2102      	movs	r1, #2
 801016c:	4620      	mov	r0, r4
 801016e:	b004      	add	sp, #16
 8010170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010174:	f7ff bf34 	b.w	800ffe0 <uxr_stream_id>

08010178 <uxr_add_input_best_effort_buffer>:
 8010178:	b510      	push	{r4, lr}
 801017a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801017e:	4603      	mov	r3, r0
 8010180:	1c62      	adds	r2, r4, #1
 8010182:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8010186:	b082      	sub	sp, #8
 8010188:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801018c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010190:	f006 f8c0 	bl	8016314 <uxr_init_input_best_effort_stream>
 8010194:	2200      	movs	r2, #0
 8010196:	2101      	movs	r1, #1
 8010198:	4620      	mov	r0, r4
 801019a:	b002      	add	sp, #8
 801019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101a0:	f7ff bf1e 	b.w	800ffe0 <uxr_stream_id>

080101a4 <uxr_add_input_reliable_buffer>:
 80101a4:	b510      	push	{r4, lr}
 80101a6:	b084      	sub	sp, #16
 80101a8:	4684      	mov	ip, r0
 80101aa:	9806      	ldr	r0, [sp, #24]
 80101ac:	9000      	str	r0, [sp, #0]
 80101ae:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80101b2:	2018      	movs	r0, #24
 80101b4:	fb00 c004 	mla	r0, r0, r4, ip
 80101b8:	f104 0e01 	add.w	lr, r4, #1
 80101bc:	3048      	adds	r0, #72	@ 0x48
 80101be:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80101c2:	f006 f8f3 	bl	80163ac <uxr_init_input_reliable_stream>
 80101c6:	2200      	movs	r2, #0
 80101c8:	2102      	movs	r1, #2
 80101ca:	4620      	mov	r0, r4
 80101cc:	b004      	add	sp, #16
 80101ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101d2:	f7ff bf05 	b.w	800ffe0 <uxr_stream_id>
 80101d6:	bf00      	nop

080101d8 <uxr_get_output_best_effort_stream>:
 80101d8:	7c03      	ldrb	r3, [r0, #16]
 80101da:	428b      	cmp	r3, r1
 80101dc:	bf8c      	ite	hi
 80101de:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80101e2:	2000      	movls	r0, #0
 80101e4:	4770      	bx	lr
 80101e6:	bf00      	nop

080101e8 <uxr_get_output_reliable_stream>:
 80101e8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80101ec:	428b      	cmp	r3, r1
 80101ee:	bf83      	ittte	hi
 80101f0:	2328      	movhi	r3, #40	@ 0x28
 80101f2:	fb03 0001 	mlahi	r0, r3, r1, r0
 80101f6:	3018      	addhi	r0, #24
 80101f8:	2000      	movls	r0, #0
 80101fa:	4770      	bx	lr

080101fc <uxr_get_input_best_effort_stream>:
 80101fc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010200:	428b      	cmp	r3, r1
 8010202:	bf86      	itte	hi
 8010204:	3121      	addhi	r1, #33	@ 0x21
 8010206:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801020a:	2000      	movls	r0, #0
 801020c:	4770      	bx	lr
 801020e:	bf00      	nop

08010210 <uxr_get_input_reliable_stream>:
 8010210:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010214:	428b      	cmp	r3, r1
 8010216:	bf83      	ittte	hi
 8010218:	2318      	movhi	r3, #24
 801021a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801021e:	3048      	addhi	r0, #72	@ 0x48
 8010220:	2000      	movls	r0, #0
 8010222:	4770      	bx	lr

08010224 <uxr_output_streams_confirmed>:
 8010224:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010228:	b183      	cbz	r3, 801024c <uxr_output_streams_confirmed+0x28>
 801022a:	b570      	push	{r4, r5, r6, lr}
 801022c:	4606      	mov	r6, r0
 801022e:	f100 0518 	add.w	r5, r0, #24
 8010232:	2400      	movs	r4, #0
 8010234:	e001      	b.n	801023a <uxr_output_streams_confirmed+0x16>
 8010236:	3528      	adds	r5, #40	@ 0x28
 8010238:	b138      	cbz	r0, 801024a <uxr_output_streams_confirmed+0x26>
 801023a:	4628      	mov	r0, r5
 801023c:	f006 fd88 	bl	8016d50 <uxr_is_output_up_to_date>
 8010240:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010244:	3401      	adds	r4, #1
 8010246:	42a3      	cmp	r3, r4
 8010248:	d8f5      	bhi.n	8010236 <uxr_output_streams_confirmed+0x12>
 801024a:	bd70      	pop	{r4, r5, r6, pc}
 801024c:	2001      	movs	r0, #1
 801024e:	4770      	bx	lr

08010250 <uxr_buffer_submessage_header>:
 8010250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010252:	4604      	mov	r4, r0
 8010254:	460e      	mov	r6, r1
 8010256:	2104      	movs	r1, #4
 8010258:	4615      	mov	r5, r2
 801025a:	461f      	mov	r7, r3
 801025c:	f7fe fb4e 	bl	800e8fc <ucdr_align_to>
 8010260:	2301      	movs	r3, #1
 8010262:	ea47 0203 	orr.w	r2, r7, r3
 8010266:	4631      	mov	r1, r6
 8010268:	7523      	strb	r3, [r4, #20]
 801026a:	4620      	mov	r0, r4
 801026c:	462b      	mov	r3, r5
 801026e:	f000 fa27 	bl	80106c0 <uxr_serialize_submessage_header>
 8010272:	4620      	mov	r0, r4
 8010274:	f7fe fb58 	bl	800e928 <ucdr_buffer_remaining>
 8010278:	42a8      	cmp	r0, r5
 801027a:	bf34      	ite	cc
 801027c:	2000      	movcc	r0, #0
 801027e:	2001      	movcs	r0, #1
 8010280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010282:	bf00      	nop

08010284 <uxr_read_submessage_header>:
 8010284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010288:	4604      	mov	r4, r0
 801028a:	460d      	mov	r5, r1
 801028c:	2104      	movs	r1, #4
 801028e:	4616      	mov	r6, r2
 8010290:	4698      	mov	r8, r3
 8010292:	f7fe fb33 	bl	800e8fc <ucdr_align_to>
 8010296:	4620      	mov	r0, r4
 8010298:	f7fe fb46 	bl	800e928 <ucdr_buffer_remaining>
 801029c:	2803      	cmp	r0, #3
 801029e:	bf8c      	ite	hi
 80102a0:	2701      	movhi	r7, #1
 80102a2:	2700      	movls	r7, #0
 80102a4:	d802      	bhi.n	80102ac <uxr_read_submessage_header+0x28>
 80102a6:	4638      	mov	r0, r7
 80102a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ac:	4633      	mov	r3, r6
 80102ae:	4642      	mov	r2, r8
 80102b0:	4620      	mov	r0, r4
 80102b2:	4629      	mov	r1, r5
 80102b4:	f000 fa18 	bl	80106e8 <uxr_deserialize_submessage_header>
 80102b8:	f898 3000 	ldrb.w	r3, [r8]
 80102bc:	f003 0201 	and.w	r2, r3, #1
 80102c0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80102c4:	f888 3000 	strb.w	r3, [r8]
 80102c8:	7522      	strb	r2, [r4, #20]
 80102ca:	4638      	mov	r0, r7
 80102cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080102d0 <uxr_submessage_padding>:
 80102d0:	f010 0003 	ands.w	r0, r0, #3
 80102d4:	bf18      	it	ne
 80102d6:	f1c0 0004 	rsbne	r0, r0, #4
 80102da:	4770      	bx	lr

080102dc <uxr_millis>:
 80102dc:	b510      	push	{r4, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	4669      	mov	r1, sp
 80102e2:	2001      	movs	r0, #1
 80102e4:	f7f1 ff00 	bl	80020e8 <clock_gettime>
 80102e8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80102ec:	4906      	ldr	r1, [pc, #24]	@ (8010308 <uxr_millis+0x2c>)
 80102ee:	fba0 0301 	umull	r0, r3, r0, r1
 80102f2:	1900      	adds	r0, r0, r4
 80102f4:	fb01 3102 	mla	r1, r1, r2, r3
 80102f8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80102fc:	4a03      	ldr	r2, [pc, #12]	@ (801030c <uxr_millis+0x30>)
 80102fe:	2300      	movs	r3, #0
 8010300:	f7f0 fc8c 	bl	8000c1c <__aeabi_ldivmod>
 8010304:	b004      	add	sp, #16
 8010306:	bd10      	pop	{r4, pc}
 8010308:	3b9aca00 	.word	0x3b9aca00
 801030c:	000f4240 	.word	0x000f4240

08010310 <uxr_nanos>:
 8010310:	b510      	push	{r4, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	4669      	mov	r1, sp
 8010316:	2001      	movs	r0, #1
 8010318:	f7f1 fee6 	bl	80020e8 <clock_gettime>
 801031c:	4a06      	ldr	r2, [pc, #24]	@ (8010338 <uxr_nanos+0x28>)
 801031e:	9800      	ldr	r0, [sp, #0]
 8010320:	9902      	ldr	r1, [sp, #8]
 8010322:	9c01      	ldr	r4, [sp, #4]
 8010324:	fba0 0302 	umull	r0, r3, r0, r2
 8010328:	1840      	adds	r0, r0, r1
 801032a:	fb02 3304 	mla	r3, r2, r4, r3
 801032e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010332:	b004      	add	sp, #16
 8010334:	bd10      	pop	{r4, pc}
 8010336:	bf00      	nop
 8010338:	3b9aca00 	.word	0x3b9aca00

0801033c <on_full_output_buffer_fragmented>:
 801033c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010340:	460c      	mov	r4, r1
 8010342:	b08a      	sub	sp, #40	@ 0x28
 8010344:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010348:	4606      	mov	r6, r0
 801034a:	f104 0008 	add.w	r0, r4, #8
 801034e:	f7ff ff4b 	bl	80101e8 <uxr_get_output_reliable_stream>
 8010352:	4605      	mov	r5, r0
 8010354:	f006 fd06 	bl	8016d64 <get_available_free_slots>
 8010358:	b968      	cbnz	r0, 8010376 <on_full_output_buffer_fragmented+0x3a>
 801035a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801035e:	4620      	mov	r0, r4
 8010360:	4798      	blx	r3
 8010362:	b918      	cbnz	r0, 801036c <on_full_output_buffer_fragmented+0x30>
 8010364:	2001      	movs	r0, #1
 8010366:	b00a      	add	sp, #40	@ 0x28
 8010368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801036c:	4628      	mov	r0, r5
 801036e:	f006 fcf9 	bl	8016d64 <get_available_free_slots>
 8010372:	2800      	cmp	r0, #0
 8010374:	d0f6      	beq.n	8010364 <on_full_output_buffer_fragmented+0x28>
 8010376:	8929      	ldrh	r1, [r5, #8]
 8010378:	89eb      	ldrh	r3, [r5, #14]
 801037a:	7b28      	ldrb	r0, [r5, #12]
 801037c:	686a      	ldr	r2, [r5, #4]
 801037e:	fbb2 f8f1 	udiv	r8, r2, r1
 8010382:	fbb3 f2f1 	udiv	r2, r3, r1
 8010386:	fb01 3112 	mls	r1, r1, r2, r3
 801038a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801038e:	b289      	uxth	r1, r1
 8010390:	fb08 f101 	mul.w	r1, r8, r1
 8010394:	30fc      	adds	r0, #252	@ 0xfc
 8010396:	f1a8 0804 	sub.w	r8, r8, #4
 801039a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801039e:	4440      	add	r0, r8
 80103a0:	b287      	uxth	r7, r0
 80103a2:	1bdb      	subs	r3, r3, r7
 80103a4:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80103a8:	682b      	ldr	r3, [r5, #0]
 80103aa:	3104      	adds	r1, #4
 80103ac:	4419      	add	r1, r3
 80103ae:	4642      	mov	r2, r8
 80103b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103b4:	9300      	str	r3, [sp, #0]
 80103b6:	a802      	add	r0, sp, #8
 80103b8:	2300      	movs	r3, #0
 80103ba:	f7fe fa73 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 80103be:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80103c2:	f102 0308 	add.w	r3, r2, #8
 80103c6:	4543      	cmp	r3, r8
 80103c8:	d928      	bls.n	801041c <on_full_output_buffer_fragmented+0xe0>
 80103ca:	463a      	mov	r2, r7
 80103cc:	2300      	movs	r3, #0
 80103ce:	210d      	movs	r1, #13
 80103d0:	a802      	add	r0, sp, #8
 80103d2:	f7ff ff3d 	bl	8010250 <uxr_buffer_submessage_header>
 80103d6:	8929      	ldrh	r1, [r5, #8]
 80103d8:	89eb      	ldrh	r3, [r5, #14]
 80103da:	fbb3 f2f1 	udiv	r2, r3, r1
 80103de:	fb01 3312 	mls	r3, r1, r2, r3
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	686a      	ldr	r2, [r5, #4]
 80103e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80103ea:	fb02 f303 	mul.w	r3, r2, r3
 80103ee:	682a      	ldr	r2, [r5, #0]
 80103f0:	f842 8003 	str.w	r8, [r2, r3]
 80103f4:	89e8      	ldrh	r0, [r5, #14]
 80103f6:	2101      	movs	r1, #1
 80103f8:	f006 fe04 	bl	8017004 <uxr_seq_num_add>
 80103fc:	9904      	ldr	r1, [sp, #16]
 80103fe:	9a03      	ldr	r2, [sp, #12]
 8010400:	81e8      	strh	r0, [r5, #14]
 8010402:	1a52      	subs	r2, r2, r1
 8010404:	4630      	mov	r0, r6
 8010406:	f7fe fa5f 	bl	800e8c8 <ucdr_init_buffer>
 801040a:	4630      	mov	r0, r6
 801040c:	490f      	ldr	r1, [pc, #60]	@ (801044c <on_full_output_buffer_fragmented+0x110>)
 801040e:	4622      	mov	r2, r4
 8010410:	f7fe fa2e 	bl	800e870 <ucdr_set_on_full_buffer_callback>
 8010414:	2000      	movs	r0, #0
 8010416:	b00a      	add	sp, #40	@ 0x28
 8010418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801041c:	b292      	uxth	r2, r2
 801041e:	2302      	movs	r3, #2
 8010420:	210d      	movs	r1, #13
 8010422:	a802      	add	r0, sp, #8
 8010424:	f7ff ff14 	bl	8010250 <uxr_buffer_submessage_header>
 8010428:	8928      	ldrh	r0, [r5, #8]
 801042a:	89eb      	ldrh	r3, [r5, #14]
 801042c:	fbb3 f1f0 	udiv	r1, r3, r0
 8010430:	fb00 3311 	mls	r3, r0, r1, r3
 8010434:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010438:	6869      	ldr	r1, [r5, #4]
 801043a:	fbb1 f1f0 	udiv	r1, r1, r0
 801043e:	b29b      	uxth	r3, r3
 8010440:	fb01 f303 	mul.w	r3, r1, r3
 8010444:	6829      	ldr	r1, [r5, #0]
 8010446:	3208      	adds	r2, #8
 8010448:	50ca      	str	r2, [r1, r3]
 801044a:	e7d3      	b.n	80103f4 <on_full_output_buffer_fragmented+0xb8>
 801044c:	0801033d 	.word	0x0801033d

08010450 <uxr_prepare_output_stream>:
 8010450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010452:	b087      	sub	sp, #28
 8010454:	2707      	movs	r7, #7
 8010456:	9202      	str	r2, [sp, #8]
 8010458:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801045a:	9103      	str	r1, [sp, #12]
 801045c:	2500      	movs	r5, #0
 801045e:	3204      	adds	r2, #4
 8010460:	e9cd 7500 	strd	r7, r5, [sp]
 8010464:	461c      	mov	r4, r3
 8010466:	4606      	mov	r6, r0
 8010468:	f7ff fc54 	bl	800fd14 <uxr_prepare_stream_to_write_submessage>
 801046c:	f080 0201 	eor.w	r2, r0, #1
 8010470:	b2d2      	uxtb	r2, r2
 8010472:	75a2      	strb	r2, [r4, #22]
 8010474:	b112      	cbz	r2, 801047c <uxr_prepare_output_stream+0x2c>
 8010476:	4628      	mov	r0, r5
 8010478:	b007      	add	sp, #28
 801047a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801047c:	aa05      	add	r2, sp, #20
 801047e:	9902      	ldr	r1, [sp, #8]
 8010480:	4630      	mov	r0, r6
 8010482:	f7ff fd7d 	bl	800ff80 <uxr_init_base_object_request>
 8010486:	a905      	add	r1, sp, #20
 8010488:	4605      	mov	r5, r0
 801048a:	4620      	mov	r0, r4
 801048c:	f001 f88c 	bl	80115a8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010490:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010494:	69a6      	ldr	r6, [r4, #24]
 8010496:	69e7      	ldr	r7, [r4, #28]
 8010498:	1a52      	subs	r2, r2, r1
 801049a:	4620      	mov	r0, r4
 801049c:	f7fe fa14 	bl	800e8c8 <ucdr_init_buffer>
 80104a0:	4620      	mov	r0, r4
 80104a2:	463a      	mov	r2, r7
 80104a4:	4631      	mov	r1, r6
 80104a6:	f7fe f9e3 	bl	800e870 <ucdr_set_on_full_buffer_callback>
 80104aa:	4628      	mov	r0, r5
 80104ac:	b007      	add	sp, #28
 80104ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080104b0 <uxr_prepare_output_stream_fragmented>:
 80104b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b4:	b091      	sub	sp, #68	@ 0x44
 80104b6:	4605      	mov	r5, r0
 80104b8:	9105      	str	r1, [sp, #20]
 80104ba:	3008      	adds	r0, #8
 80104bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80104c0:	461e      	mov	r6, r3
 80104c2:	9204      	str	r2, [sp, #16]
 80104c4:	f7ff fe90 	bl	80101e8 <uxr_get_output_reliable_stream>
 80104c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	f000 8091 	beq.w	80105f4 <uxr_prepare_output_stream_fragmented+0x144>
 80104d2:	4604      	mov	r4, r0
 80104d4:	2800      	cmp	r0, #0
 80104d6:	f000 808d 	beq.w	80105f4 <uxr_prepare_output_stream_fragmented+0x144>
 80104da:	f006 fc43 	bl	8016d64 <get_available_free_slots>
 80104de:	2800      	cmp	r0, #0
 80104e0:	f000 8083 	beq.w	80105ea <uxr_prepare_output_stream_fragmented+0x13a>
 80104e4:	8922      	ldrh	r2, [r4, #8]
 80104e6:	89e7      	ldrh	r7, [r4, #14]
 80104e8:	fbb7 f9f2 	udiv	r9, r7, r2
 80104ec:	fb02 7919 	mls	r9, r2, r9, r7
 80104f0:	fa1f f989 	uxth.w	r9, r9
 80104f4:	6863      	ldr	r3, [r4, #4]
 80104f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80104fa:	6823      	ldr	r3, [r4, #0]
 80104fc:	9203      	str	r2, [sp, #12]
 80104fe:	fb02 f909 	mul.w	r9, r2, r9
 8010502:	f109 0904 	add.w	r9, r9, #4
 8010506:	4499      	add	r9, r3
 8010508:	7b23      	ldrb	r3, [r4, #12]
 801050a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801050e:	4543      	cmp	r3, r8
 8010510:	f1a2 0b04 	sub.w	fp, r2, #4
 8010514:	d37a      	bcc.n	801060c <uxr_prepare_output_stream_fragmented+0x15c>
 8010516:	f1ab 0a04 	sub.w	sl, fp, #4
 801051a:	ebaa 0a03 	sub.w	sl, sl, r3
 801051e:	465a      	mov	r2, fp
 8010520:	2300      	movs	r3, #0
 8010522:	4649      	mov	r1, r9
 8010524:	a808      	add	r0, sp, #32
 8010526:	f8cd 8000 	str.w	r8, [sp]
 801052a:	f7fe f9bb 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 801052e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010530:	fa1f fa8a 	uxth.w	sl, sl
 8010534:	4652      	mov	r2, sl
 8010536:	f103 0a08 	add.w	sl, r3, #8
 801053a:	45da      	cmp	sl, fp
 801053c:	bf34      	ite	cc
 801053e:	2302      	movcc	r3, #2
 8010540:	2300      	movcs	r3, #0
 8010542:	210d      	movs	r1, #13
 8010544:	a808      	add	r0, sp, #32
 8010546:	f7ff fe83 	bl	8010250 <uxr_buffer_submessage_header>
 801054a:	8921      	ldrh	r1, [r4, #8]
 801054c:	fbb7 f2f1 	udiv	r2, r7, r1
 8010550:	fb01 7212 	mls	r2, r1, r2, r7
 8010554:	b292      	uxth	r2, r2
 8010556:	6863      	ldr	r3, [r4, #4]
 8010558:	fbb3 f3f1 	udiv	r3, r3, r1
 801055c:	fb02 f303 	mul.w	r3, r2, r3
 8010560:	6822      	ldr	r2, [r4, #0]
 8010562:	4638      	mov	r0, r7
 8010564:	f842 b003 	str.w	fp, [r2, r3]
 8010568:	2101      	movs	r1, #1
 801056a:	f006 fd4b 	bl	8017004 <uxr_seq_num_add>
 801056e:	9b03      	ldr	r3, [sp, #12]
 8010570:	f108 0104 	add.w	r1, r8, #4
 8010574:	f1a3 0208 	sub.w	r2, r3, #8
 8010578:	eba2 0208 	sub.w	r2, r2, r8
 801057c:	4449      	add	r1, r9
 801057e:	4607      	mov	r7, r0
 8010580:	4630      	mov	r0, r6
 8010582:	f7fe f9a1 	bl	800e8c8 <ucdr_init_buffer>
 8010586:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010588:	81e7      	strh	r7, [r4, #14]
 801058a:	1d1a      	adds	r2, r3, #4
 801058c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010590:	bf28      	it	cs
 8010592:	2200      	movcs	r2, #0
 8010594:	2300      	movs	r3, #0
 8010596:	b292      	uxth	r2, r2
 8010598:	2107      	movs	r1, #7
 801059a:	4630      	mov	r0, r6
 801059c:	f7ff fe58 	bl	8010250 <uxr_buffer_submessage_header>
 80105a0:	9904      	ldr	r1, [sp, #16]
 80105a2:	aa07      	add	r2, sp, #28
 80105a4:	4628      	mov	r0, r5
 80105a6:	f7ff fceb 	bl	800ff80 <uxr_init_base_object_request>
 80105aa:	4604      	mov	r4, r0
 80105ac:	b318      	cbz	r0, 80105f6 <uxr_prepare_output_stream_fragmented+0x146>
 80105ae:	a907      	add	r1, sp, #28
 80105b0:	4630      	mov	r0, r6
 80105b2:	f000 fff9 	bl	80115a8 <uxr_serialize_WRITE_DATA_Payload_Data>
 80105b6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80105ba:	4630      	mov	r0, r6
 80105bc:	1a52      	subs	r2, r2, r1
 80105be:	f7fe f983 	bl	800e8c8 <ucdr_init_buffer>
 80105c2:	9b05      	ldr	r3, [sp, #20]
 80105c4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80105c8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80105ca:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80105ce:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80105d0:	491b      	ldr	r1, [pc, #108]	@ (8010640 <uxr_prepare_output_stream_fragmented+0x190>)
 80105d2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80105d6:	4630      	mov	r0, r6
 80105d8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80105dc:	462a      	mov	r2, r5
 80105de:	f7fe f947 	bl	800e870 <ucdr_set_on_full_buffer_callback>
 80105e2:	4620      	mov	r0, r4
 80105e4:	b011      	add	sp, #68	@ 0x44
 80105e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ea:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80105ec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80105ee:	4628      	mov	r0, r5
 80105f0:	4798      	blx	r3
 80105f2:	b920      	cbnz	r0, 80105fe <uxr_prepare_output_stream_fragmented+0x14e>
 80105f4:	2400      	movs	r4, #0
 80105f6:	4620      	mov	r0, r4
 80105f8:	b011      	add	sp, #68	@ 0x44
 80105fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105fe:	4620      	mov	r0, r4
 8010600:	f006 fbb0 	bl	8016d64 <get_available_free_slots>
 8010604:	2800      	cmp	r0, #0
 8010606:	f47f af6d 	bne.w	80104e4 <uxr_prepare_output_stream_fragmented+0x34>
 801060a:	e7f3      	b.n	80105f4 <uxr_prepare_output_stream_fragmented+0x144>
 801060c:	4638      	mov	r0, r7
 801060e:	2101      	movs	r1, #1
 8010610:	f006 fcf8 	bl	8017004 <uxr_seq_num_add>
 8010614:	8921      	ldrh	r1, [r4, #8]
 8010616:	fbb0 f2f1 	udiv	r2, r0, r1
 801061a:	fb01 0912 	mls	r9, r1, r2, r0
 801061e:	fa1f f289 	uxth.w	r2, r9
 8010622:	6863      	ldr	r3, [r4, #4]
 8010624:	fbb3 f9f1 	udiv	r9, r3, r1
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	fb02 f909 	mul.w	r9, r2, r9
 801062e:	f109 0904 	add.w	r9, r9, #4
 8010632:	4499      	add	r9, r3
 8010634:	4607      	mov	r7, r0
 8010636:	7b23      	ldrb	r3, [r4, #12]
 8010638:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801063c:	e76b      	b.n	8010516 <uxr_prepare_output_stream_fragmented+0x66>
 801063e:	bf00      	nop
 8010640:	0801033d 	.word	0x0801033d

08010644 <uxr_serialize_message_header>:
 8010644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010646:	b083      	sub	sp, #12
 8010648:	4616      	mov	r6, r2
 801064a:	4604      	mov	r4, r0
 801064c:	9301      	str	r3, [sp, #4]
 801064e:	460d      	mov	r5, r1
 8010650:	9f08      	ldr	r7, [sp, #32]
 8010652:	f7fc fd27 	bl	800d0a4 <ucdr_serialize_uint8_t>
 8010656:	4631      	mov	r1, r6
 8010658:	4620      	mov	r0, r4
 801065a:	f7fc fd23 	bl	800d0a4 <ucdr_serialize_uint8_t>
 801065e:	9a01      	ldr	r2, [sp, #4]
 8010660:	2101      	movs	r1, #1
 8010662:	4620      	mov	r0, r4
 8010664:	f7fc fdca 	bl	800d1fc <ucdr_serialize_endian_uint16_t>
 8010668:	062b      	lsls	r3, r5, #24
 801066a:	d501      	bpl.n	8010670 <uxr_serialize_message_header+0x2c>
 801066c:	b003      	add	sp, #12
 801066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010670:	2204      	movs	r2, #4
 8010672:	4639      	mov	r1, r7
 8010674:	4620      	mov	r0, r4
 8010676:	b003      	add	sp, #12
 8010678:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801067c:	f7fc ba1c 	b.w	800cab8 <ucdr_serialize_array_uint8_t>

08010680 <uxr_deserialize_message_header>:
 8010680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010682:	b083      	sub	sp, #12
 8010684:	4616      	mov	r6, r2
 8010686:	4604      	mov	r4, r0
 8010688:	9301      	str	r3, [sp, #4]
 801068a:	460d      	mov	r5, r1
 801068c:	9f08      	ldr	r7, [sp, #32]
 801068e:	f7fc fd1f 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8010692:	4631      	mov	r1, r6
 8010694:	4620      	mov	r0, r4
 8010696:	f7fc fd1b 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 801069a:	9a01      	ldr	r2, [sp, #4]
 801069c:	2101      	movs	r1, #1
 801069e:	4620      	mov	r0, r4
 80106a0:	f7fc fea0 	bl	800d3e4 <ucdr_deserialize_endian_uint16_t>
 80106a4:	f995 3000 	ldrsb.w	r3, [r5]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	da01      	bge.n	80106b0 <uxr_deserialize_message_header+0x30>
 80106ac:	b003      	add	sp, #12
 80106ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106b0:	2204      	movs	r2, #4
 80106b2:	4639      	mov	r1, r7
 80106b4:	4620      	mov	r0, r4
 80106b6:	b003      	add	sp, #12
 80106b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80106bc:	f7fc ba60 	b.w	800cb80 <ucdr_deserialize_array_uint8_t>

080106c0 <uxr_serialize_submessage_header>:
 80106c0:	b530      	push	{r4, r5, lr}
 80106c2:	b083      	sub	sp, #12
 80106c4:	4615      	mov	r5, r2
 80106c6:	4604      	mov	r4, r0
 80106c8:	9301      	str	r3, [sp, #4]
 80106ca:	f7fc fceb 	bl	800d0a4 <ucdr_serialize_uint8_t>
 80106ce:	4629      	mov	r1, r5
 80106d0:	4620      	mov	r0, r4
 80106d2:	f7fc fce7 	bl	800d0a4 <ucdr_serialize_uint8_t>
 80106d6:	9a01      	ldr	r2, [sp, #4]
 80106d8:	2101      	movs	r1, #1
 80106da:	4620      	mov	r0, r4
 80106dc:	b003      	add	sp, #12
 80106de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106e2:	f7fc bd8b 	b.w	800d1fc <ucdr_serialize_endian_uint16_t>
 80106e6:	bf00      	nop

080106e8 <uxr_deserialize_submessage_header>:
 80106e8:	b530      	push	{r4, r5, lr}
 80106ea:	b083      	sub	sp, #12
 80106ec:	4615      	mov	r5, r2
 80106ee:	4604      	mov	r4, r0
 80106f0:	9301      	str	r3, [sp, #4]
 80106f2:	f7fc fced 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 80106f6:	4629      	mov	r1, r5
 80106f8:	4620      	mov	r0, r4
 80106fa:	f7fc fce9 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 80106fe:	9a01      	ldr	r2, [sp, #4]
 8010700:	2101      	movs	r1, #1
 8010702:	4620      	mov	r0, r4
 8010704:	b003      	add	sp, #12
 8010706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801070a:	f7fc be6b 	b.w	800d3e4 <ucdr_deserialize_endian_uint16_t>
 801070e:	bf00      	nop

08010710 <uxr_serialize_CLIENT_Representation>:
 8010710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010714:	2204      	movs	r2, #4
 8010716:	460e      	mov	r6, r1
 8010718:	4605      	mov	r5, r0
 801071a:	f7fc f9cd 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 801071e:	2202      	movs	r2, #2
 8010720:	4607      	mov	r7, r0
 8010722:	1d31      	adds	r1, r6, #4
 8010724:	4628      	mov	r0, r5
 8010726:	f7fc f9c7 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 801072a:	4038      	ands	r0, r7
 801072c:	2202      	movs	r2, #2
 801072e:	1db1      	adds	r1, r6, #6
 8010730:	b2c7      	uxtb	r7, r0
 8010732:	4628      	mov	r0, r5
 8010734:	f7fc f9c0 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8010738:	2204      	movs	r2, #4
 801073a:	4007      	ands	r7, r0
 801073c:	f106 0108 	add.w	r1, r6, #8
 8010740:	4628      	mov	r0, r5
 8010742:	f7fc f9b9 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8010746:	7b31      	ldrb	r1, [r6, #12]
 8010748:	4007      	ands	r7, r0
 801074a:	4628      	mov	r0, r5
 801074c:	f7fc fcaa 	bl	800d0a4 <ucdr_serialize_uint8_t>
 8010750:	7b71      	ldrb	r1, [r6, #13]
 8010752:	4007      	ands	r7, r0
 8010754:	4628      	mov	r0, r5
 8010756:	f7fc fc77 	bl	800d048 <ucdr_serialize_bool>
 801075a:	7b73      	ldrb	r3, [r6, #13]
 801075c:	ea07 0800 	and.w	r8, r7, r0
 8010760:	b93b      	cbnz	r3, 8010772 <uxr_serialize_CLIENT_Representation+0x62>
 8010762:	8bb1      	ldrh	r1, [r6, #28]
 8010764:	4628      	mov	r0, r5
 8010766:	f7fc fcc9 	bl	800d0fc <ucdr_serialize_uint16_t>
 801076a:	ea08 0000 	and.w	r0, r8, r0
 801076e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010772:	6931      	ldr	r1, [r6, #16]
 8010774:	4628      	mov	r0, r5
 8010776:	f7fc feab 	bl	800d4d0 <ucdr_serialize_uint32_t>
 801077a:	6933      	ldr	r3, [r6, #16]
 801077c:	b1e3      	cbz	r3, 80107b8 <uxr_serialize_CLIENT_Representation+0xa8>
 801077e:	b1c0      	cbz	r0, 80107b2 <uxr_serialize_CLIENT_Representation+0xa2>
 8010780:	4637      	mov	r7, r6
 8010782:	f04f 0900 	mov.w	r9, #0
 8010786:	e001      	b.n	801078c <uxr_serialize_CLIENT_Representation+0x7c>
 8010788:	3708      	adds	r7, #8
 801078a:	b194      	cbz	r4, 80107b2 <uxr_serialize_CLIENT_Representation+0xa2>
 801078c:	6979      	ldr	r1, [r7, #20]
 801078e:	4628      	mov	r0, r5
 8010790:	f005 fce6 	bl	8016160 <ucdr_serialize_string>
 8010794:	69b9      	ldr	r1, [r7, #24]
 8010796:	4604      	mov	r4, r0
 8010798:	4628      	mov	r0, r5
 801079a:	f005 fce1 	bl	8016160 <ucdr_serialize_string>
 801079e:	6933      	ldr	r3, [r6, #16]
 80107a0:	f109 0901 	add.w	r9, r9, #1
 80107a4:	4004      	ands	r4, r0
 80107a6:	4599      	cmp	r9, r3
 80107a8:	b2e4      	uxtb	r4, r4
 80107aa:	d3ed      	bcc.n	8010788 <uxr_serialize_CLIENT_Representation+0x78>
 80107ac:	ea08 0804 	and.w	r8, r8, r4
 80107b0:	e7d7      	b.n	8010762 <uxr_serialize_CLIENT_Representation+0x52>
 80107b2:	f04f 0800 	mov.w	r8, #0
 80107b6:	e7d4      	b.n	8010762 <uxr_serialize_CLIENT_Representation+0x52>
 80107b8:	ea08 0800 	and.w	r8, r8, r0
 80107bc:	e7d1      	b.n	8010762 <uxr_serialize_CLIENT_Representation+0x52>
 80107be:	bf00      	nop

080107c0 <uxr_deserialize_CLIENT_Representation>:
 80107c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107c4:	2204      	movs	r2, #4
 80107c6:	460c      	mov	r4, r1
 80107c8:	4605      	mov	r5, r0
 80107ca:	f7fc f9d9 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 80107ce:	2202      	movs	r2, #2
 80107d0:	4607      	mov	r7, r0
 80107d2:	1d21      	adds	r1, r4, #4
 80107d4:	4628      	mov	r0, r5
 80107d6:	f7fc f9d3 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 80107da:	4038      	ands	r0, r7
 80107dc:	2202      	movs	r2, #2
 80107de:	1da1      	adds	r1, r4, #6
 80107e0:	b2c6      	uxtb	r6, r0
 80107e2:	4628      	mov	r0, r5
 80107e4:	f7fc f9cc 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 80107e8:	2204      	movs	r2, #4
 80107ea:	4006      	ands	r6, r0
 80107ec:	f104 0108 	add.w	r1, r4, #8
 80107f0:	4628      	mov	r0, r5
 80107f2:	f7fc f9c5 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 80107f6:	f104 010c 	add.w	r1, r4, #12
 80107fa:	4006      	ands	r6, r0
 80107fc:	4628      	mov	r0, r5
 80107fe:	f7fc fc67 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8010802:	f104 010d 	add.w	r1, r4, #13
 8010806:	ea06 0700 	and.w	r7, r6, r0
 801080a:	4628      	mov	r0, r5
 801080c:	f7fc fc32 	bl	800d074 <ucdr_deserialize_bool>
 8010810:	7b63      	ldrb	r3, [r4, #13]
 8010812:	4007      	ands	r7, r0
 8010814:	b93b      	cbnz	r3, 8010826 <uxr_deserialize_CLIENT_Representation+0x66>
 8010816:	f104 011c 	add.w	r1, r4, #28
 801081a:	4628      	mov	r0, r5
 801081c:	f7fc fd6e 	bl	800d2fc <ucdr_deserialize_uint16_t>
 8010820:	4038      	ands	r0, r7
 8010822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010826:	f104 0110 	add.w	r1, r4, #16
 801082a:	4628      	mov	r0, r5
 801082c:	f7fc ff80 	bl	800d730 <ucdr_deserialize_uint32_t>
 8010830:	6923      	ldr	r3, [r4, #16]
 8010832:	2b01      	cmp	r3, #1
 8010834:	d903      	bls.n	801083e <uxr_deserialize_CLIENT_Representation+0x7e>
 8010836:	2301      	movs	r3, #1
 8010838:	75ab      	strb	r3, [r5, #22]
 801083a:	2700      	movs	r7, #0
 801083c:	e7eb      	b.n	8010816 <uxr_deserialize_CLIENT_Representation+0x56>
 801083e:	b30b      	cbz	r3, 8010884 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010840:	2800      	cmp	r0, #0
 8010842:	d0fa      	beq.n	801083a <uxr_deserialize_CLIENT_Representation+0x7a>
 8010844:	46a0      	mov	r8, r4
 8010846:	f04f 0900 	mov.w	r9, #0
 801084a:	e001      	b.n	8010850 <uxr_deserialize_CLIENT_Representation+0x90>
 801084c:	2e00      	cmp	r6, #0
 801084e:	d0f4      	beq.n	801083a <uxr_deserialize_CLIENT_Representation+0x7a>
 8010850:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010858:	4628      	mov	r0, r5
 801085a:	f005 fc91 	bl	8016180 <ucdr_deserialize_string>
 801085e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010862:	4606      	mov	r6, r0
 8010864:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010868:	4628      	mov	r0, r5
 801086a:	f005 fc89 	bl	8016180 <ucdr_deserialize_string>
 801086e:	6923      	ldr	r3, [r4, #16]
 8010870:	f109 0901 	add.w	r9, r9, #1
 8010874:	4006      	ands	r6, r0
 8010876:	4599      	cmp	r9, r3
 8010878:	f108 0808 	add.w	r8, r8, #8
 801087c:	b2f6      	uxtb	r6, r6
 801087e:	d3e5      	bcc.n	801084c <uxr_deserialize_CLIENT_Representation+0x8c>
 8010880:	4037      	ands	r7, r6
 8010882:	e7c8      	b.n	8010816 <uxr_deserialize_CLIENT_Representation+0x56>
 8010884:	4007      	ands	r7, r0
 8010886:	e7c6      	b.n	8010816 <uxr_deserialize_CLIENT_Representation+0x56>

08010888 <uxr_serialize_AGENT_Representation>:
 8010888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801088c:	2204      	movs	r2, #4
 801088e:	460f      	mov	r7, r1
 8010890:	4605      	mov	r5, r0
 8010892:	f7fc f911 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8010896:	2202      	movs	r2, #2
 8010898:	4604      	mov	r4, r0
 801089a:	1d39      	adds	r1, r7, #4
 801089c:	4628      	mov	r0, r5
 801089e:	f7fc f90b 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80108a2:	4020      	ands	r0, r4
 80108a4:	2202      	movs	r2, #2
 80108a6:	1db9      	adds	r1, r7, #6
 80108a8:	b2c4      	uxtb	r4, r0
 80108aa:	4628      	mov	r0, r5
 80108ac:	f7fc f904 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80108b0:	7a39      	ldrb	r1, [r7, #8]
 80108b2:	4004      	ands	r4, r0
 80108b4:	4628      	mov	r0, r5
 80108b6:	f7fc fbc7 	bl	800d048 <ucdr_serialize_bool>
 80108ba:	7a3b      	ldrb	r3, [r7, #8]
 80108bc:	ea00 0804 	and.w	r8, r0, r4
 80108c0:	b913      	cbnz	r3, 80108c8 <uxr_serialize_AGENT_Representation+0x40>
 80108c2:	4640      	mov	r0, r8
 80108c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108c8:	68f9      	ldr	r1, [r7, #12]
 80108ca:	4628      	mov	r0, r5
 80108cc:	f7fc fe00 	bl	800d4d0 <ucdr_serialize_uint32_t>
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	b303      	cbz	r3, 8010916 <uxr_serialize_AGENT_Representation+0x8e>
 80108d4:	b1d0      	cbz	r0, 801090c <uxr_serialize_AGENT_Representation+0x84>
 80108d6:	463e      	mov	r6, r7
 80108d8:	f04f 0900 	mov.w	r9, #0
 80108dc:	e001      	b.n	80108e2 <uxr_serialize_AGENT_Representation+0x5a>
 80108de:	3608      	adds	r6, #8
 80108e0:	b1a4      	cbz	r4, 801090c <uxr_serialize_AGENT_Representation+0x84>
 80108e2:	6931      	ldr	r1, [r6, #16]
 80108e4:	4628      	mov	r0, r5
 80108e6:	f005 fc3b 	bl	8016160 <ucdr_serialize_string>
 80108ea:	6971      	ldr	r1, [r6, #20]
 80108ec:	4604      	mov	r4, r0
 80108ee:	4628      	mov	r0, r5
 80108f0:	f005 fc36 	bl	8016160 <ucdr_serialize_string>
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f109 0901 	add.w	r9, r9, #1
 80108fa:	4004      	ands	r4, r0
 80108fc:	4599      	cmp	r9, r3
 80108fe:	b2e4      	uxtb	r4, r4
 8010900:	d3ed      	bcc.n	80108de <uxr_serialize_AGENT_Representation+0x56>
 8010902:	ea08 0804 	and.w	r8, r8, r4
 8010906:	4640      	mov	r0, r8
 8010908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801090c:	f04f 0800 	mov.w	r8, #0
 8010910:	4640      	mov	r0, r8
 8010912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010916:	ea08 0800 	and.w	r8, r8, r0
 801091a:	e7d2      	b.n	80108c2 <uxr_serialize_AGENT_Representation+0x3a>

0801091c <uxr_serialize_DATAWRITER_Representation>:
 801091c:	b570      	push	{r4, r5, r6, lr}
 801091e:	460d      	mov	r5, r1
 8010920:	7809      	ldrb	r1, [r1, #0]
 8010922:	4606      	mov	r6, r0
 8010924:	f7fc fbbe 	bl	800d0a4 <ucdr_serialize_uint8_t>
 8010928:	4604      	mov	r4, r0
 801092a:	b130      	cbz	r0, 801093a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801092c:	782b      	ldrb	r3, [r5, #0]
 801092e:	2b02      	cmp	r3, #2
 8010930:	d00c      	beq.n	801094c <uxr_serialize_DATAWRITER_Representation+0x30>
 8010932:	2b03      	cmp	r3, #3
 8010934:	d010      	beq.n	8010958 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010936:	2b01      	cmp	r3, #1
 8010938:	d008      	beq.n	801094c <uxr_serialize_DATAWRITER_Representation+0x30>
 801093a:	2202      	movs	r2, #2
 801093c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010940:	4630      	mov	r0, r6
 8010942:	f7fc f8b9 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8010946:	4020      	ands	r0, r4
 8010948:	b2c0      	uxtb	r0, r0
 801094a:	bd70      	pop	{r4, r5, r6, pc}
 801094c:	6869      	ldr	r1, [r5, #4]
 801094e:	4630      	mov	r0, r6
 8010950:	f005 fc06 	bl	8016160 <ucdr_serialize_string>
 8010954:	4604      	mov	r4, r0
 8010956:	e7f0      	b.n	801093a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010958:	4629      	mov	r1, r5
 801095a:	4630      	mov	r0, r6
 801095c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010960:	3104      	adds	r1, #4
 8010962:	f7fe f84d 	bl	800ea00 <ucdr_serialize_sequence_uint8_t>
 8010966:	4604      	mov	r4, r0
 8010968:	e7e7      	b.n	801093a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801096a:	bf00      	nop

0801096c <uxr_serialize_ObjectVariant.part.0>:
 801096c:	b570      	push	{r4, r5, r6, lr}
 801096e:	780b      	ldrb	r3, [r1, #0]
 8010970:	3b01      	subs	r3, #1
 8010972:	460c      	mov	r4, r1
 8010974:	4605      	mov	r5, r0
 8010976:	2b0d      	cmp	r3, #13
 8010978:	d854      	bhi.n	8010a24 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801097a:	e8df f003 	tbb	[pc, r3]
 801097e:	0730      	.short	0x0730
 8010980:	07071b1b 	.word	0x07071b1b
 8010984:	0c530707 	.word	0x0c530707
 8010988:	494e0c0c 	.word	0x494e0c0c
 801098c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010990:	3104      	adds	r1, #4
 8010992:	f7ff bfc3 	b.w	801091c <uxr_serialize_DATAWRITER_Representation>
 8010996:	7909      	ldrb	r1, [r1, #4]
 8010998:	f7fc fb84 	bl	800d0a4 <ucdr_serialize_uint8_t>
 801099c:	b1e8      	cbz	r0, 80109da <uxr_serialize_ObjectVariant.part.0+0x6e>
 801099e:	7923      	ldrb	r3, [r4, #4]
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d001      	beq.n	80109a8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80109a4:	2b02      	cmp	r3, #2
 80109a6:	d13d      	bne.n	8010a24 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80109a8:	68a1      	ldr	r1, [r4, #8]
 80109aa:	4628      	mov	r0, r5
 80109ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109b0:	f005 bbd6 	b.w	8016160 <ucdr_serialize_string>
 80109b4:	7909      	ldrb	r1, [r1, #4]
 80109b6:	f7fc fb75 	bl	800d0a4 <ucdr_serialize_uint8_t>
 80109ba:	4606      	mov	r6, r0
 80109bc:	b120      	cbz	r0, 80109c8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80109be:	7923      	ldrb	r3, [r4, #4]
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d039      	beq.n	8010a38 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80109c4:	2b03      	cmp	r3, #3
 80109c6:	d02f      	beq.n	8010a28 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80109c8:	2202      	movs	r2, #2
 80109ca:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80109ce:	4628      	mov	r0, r5
 80109d0:	f7fc f872 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80109d4:	4030      	ands	r0, r6
 80109d6:	b2c0      	uxtb	r0, r0
 80109d8:	bd70      	pop	{r4, r5, r6, pc}
 80109da:	2000      	movs	r0, #0
 80109dc:	bd70      	pop	{r4, r5, r6, pc}
 80109de:	7909      	ldrb	r1, [r1, #4]
 80109e0:	f7fc fb60 	bl	800d0a4 <ucdr_serialize_uint8_t>
 80109e4:	4606      	mov	r6, r0
 80109e6:	b158      	cbz	r0, 8010a00 <uxr_serialize_ObjectVariant.part.0+0x94>
 80109e8:	7923      	ldrb	r3, [r4, #4]
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	d003      	beq.n	80109f6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80109ee:	2b03      	cmp	r3, #3
 80109f0:	d028      	beq.n	8010a44 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d104      	bne.n	8010a00 <uxr_serialize_ObjectVariant.part.0+0x94>
 80109f6:	68a1      	ldr	r1, [r4, #8]
 80109f8:	4628      	mov	r0, r5
 80109fa:	f005 fbb1 	bl	8016160 <ucdr_serialize_string>
 80109fe:	4606      	mov	r6, r0
 8010a00:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010a04:	4628      	mov	r0, r5
 8010a06:	f7fd f889 	bl	800db1c <ucdr_serialize_int16_t>
 8010a0a:	4030      	ands	r0, r6
 8010a0c:	b2c0      	uxtb	r0, r0
 8010a0e:	bd70      	pop	{r4, r5, r6, pc}
 8010a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a14:	3104      	adds	r1, #4
 8010a16:	f7ff be7b 	b.w	8010710 <uxr_serialize_CLIENT_Representation>
 8010a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a1e:	3104      	adds	r1, #4
 8010a20:	f7ff bf32 	b.w	8010888 <uxr_serialize_AGENT_Representation>
 8010a24:	2001      	movs	r0, #1
 8010a26:	bd70      	pop	{r4, r5, r6, pc}
 8010a28:	68a2      	ldr	r2, [r4, #8]
 8010a2a:	f104 010c 	add.w	r1, r4, #12
 8010a2e:	4628      	mov	r0, r5
 8010a30:	f7fd ffe6 	bl	800ea00 <ucdr_serialize_sequence_uint8_t>
 8010a34:	4606      	mov	r6, r0
 8010a36:	e7c7      	b.n	80109c8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010a38:	68a1      	ldr	r1, [r4, #8]
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f005 fb90 	bl	8016160 <ucdr_serialize_string>
 8010a40:	4606      	mov	r6, r0
 8010a42:	e7c1      	b.n	80109c8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010a44:	68a2      	ldr	r2, [r4, #8]
 8010a46:	f104 010c 	add.w	r1, r4, #12
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	f7fd ffd8 	bl	800ea00 <ucdr_serialize_sequence_uint8_t>
 8010a50:	4606      	mov	r6, r0
 8010a52:	e7d5      	b.n	8010a00 <uxr_serialize_ObjectVariant.part.0+0x94>

08010a54 <uxr_deserialize_DATAWRITER_Representation>:
 8010a54:	b570      	push	{r4, r5, r6, lr}
 8010a56:	4606      	mov	r6, r0
 8010a58:	460d      	mov	r5, r1
 8010a5a:	f7fc fb39 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8010a5e:	4604      	mov	r4, r0
 8010a60:	b130      	cbz	r0, 8010a70 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010a62:	782b      	ldrb	r3, [r5, #0]
 8010a64:	2b02      	cmp	r3, #2
 8010a66:	d00c      	beq.n	8010a82 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010a68:	2b03      	cmp	r3, #3
 8010a6a:	d012      	beq.n	8010a92 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010a6c:	2b01      	cmp	r3, #1
 8010a6e:	d008      	beq.n	8010a82 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010a70:	2202      	movs	r2, #2
 8010a72:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010a76:	4630      	mov	r0, r6
 8010a78:	f7fc f882 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 8010a7c:	4020      	ands	r0, r4
 8010a7e:	b2c0      	uxtb	r0, r0
 8010a80:	bd70      	pop	{r4, r5, r6, pc}
 8010a82:	6869      	ldr	r1, [r5, #4]
 8010a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a88:	4630      	mov	r0, r6
 8010a8a:	f005 fb79 	bl	8016180 <ucdr_deserialize_string>
 8010a8e:	4604      	mov	r4, r0
 8010a90:	e7ee      	b.n	8010a70 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010a92:	1d2b      	adds	r3, r5, #4
 8010a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a98:	f105 0108 	add.w	r1, r5, #8
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	f7fd ffc1 	bl	800ea24 <ucdr_deserialize_sequence_uint8_t>
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	e7e4      	b.n	8010a70 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010aa6:	bf00      	nop

08010aa8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010aa8:	b570      	push	{r4, r5, r6, lr}
 8010aaa:	460d      	mov	r5, r1
 8010aac:	7809      	ldrb	r1, [r1, #0]
 8010aae:	4606      	mov	r6, r0
 8010ab0:	f7fc faca 	bl	800d048 <ucdr_serialize_bool>
 8010ab4:	782b      	ldrb	r3, [r5, #0]
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	b94b      	cbnz	r3, 8010ace <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010aba:	7a29      	ldrb	r1, [r5, #8]
 8010abc:	4630      	mov	r0, r6
 8010abe:	f7fc fac3 	bl	800d048 <ucdr_serialize_bool>
 8010ac2:	7a2b      	ldrb	r3, [r5, #8]
 8010ac4:	4004      	ands	r4, r0
 8010ac6:	b2e4      	uxtb	r4, r4
 8010ac8:	b943      	cbnz	r3, 8010adc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8010aca:	4620      	mov	r0, r4
 8010acc:	bd70      	pop	{r4, r5, r6, pc}
 8010ace:	6869      	ldr	r1, [r5, #4]
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	f005 fb45 	bl	8016160 <ucdr_serialize_string>
 8010ad6:	4004      	ands	r4, r0
 8010ad8:	b2e4      	uxtb	r4, r4
 8010ada:	e7ee      	b.n	8010aba <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010adc:	68e9      	ldr	r1, [r5, #12]
 8010ade:	4630      	mov	r0, r6
 8010ae0:	f005 fb3e 	bl	8016160 <ucdr_serialize_string>
 8010ae4:	4004      	ands	r4, r0
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	bd70      	pop	{r4, r5, r6, pc}
 8010aea:	bf00      	nop

08010aec <uxr_serialize_OBJK_Topic_Binary>:
 8010aec:	b570      	push	{r4, r5, r6, lr}
 8010aee:	460d      	mov	r5, r1
 8010af0:	6809      	ldr	r1, [r1, #0]
 8010af2:	4606      	mov	r6, r0
 8010af4:	f005 fb34 	bl	8016160 <ucdr_serialize_string>
 8010af8:	7929      	ldrb	r1, [r5, #4]
 8010afa:	4604      	mov	r4, r0
 8010afc:	4630      	mov	r0, r6
 8010afe:	f7fc faa3 	bl	800d048 <ucdr_serialize_bool>
 8010b02:	792b      	ldrb	r3, [r5, #4]
 8010b04:	4004      	ands	r4, r0
 8010b06:	b2e4      	uxtb	r4, r4
 8010b08:	b943      	cbnz	r3, 8010b1c <uxr_serialize_OBJK_Topic_Binary+0x30>
 8010b0a:	7b29      	ldrb	r1, [r5, #12]
 8010b0c:	4630      	mov	r0, r6
 8010b0e:	f7fc fa9b 	bl	800d048 <ucdr_serialize_bool>
 8010b12:	7b2b      	ldrb	r3, [r5, #12]
 8010b14:	4004      	ands	r4, r0
 8010b16:	b93b      	cbnz	r3, 8010b28 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010b18:	4620      	mov	r0, r4
 8010b1a:	bd70      	pop	{r4, r5, r6, pc}
 8010b1c:	68a9      	ldr	r1, [r5, #8]
 8010b1e:	4630      	mov	r0, r6
 8010b20:	f005 fb1e 	bl	8016160 <ucdr_serialize_string>
 8010b24:	4004      	ands	r4, r0
 8010b26:	e7f0      	b.n	8010b0a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010b28:	6929      	ldr	r1, [r5, #16]
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	f005 fb18 	bl	8016160 <ucdr_serialize_string>
 8010b30:	4004      	ands	r4, r0
 8010b32:	b2e4      	uxtb	r4, r4
 8010b34:	4620      	mov	r0, r4
 8010b36:	bd70      	pop	{r4, r5, r6, pc}

08010b38 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b3c:	460c      	mov	r4, r1
 8010b3e:	7809      	ldrb	r1, [r1, #0]
 8010b40:	4606      	mov	r6, r0
 8010b42:	f7fc fa81 	bl	800d048 <ucdr_serialize_bool>
 8010b46:	7823      	ldrb	r3, [r4, #0]
 8010b48:	4605      	mov	r5, r0
 8010b4a:	b96b      	cbnz	r3, 8010b68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8010b4c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010b50:	4630      	mov	r0, r6
 8010b52:	f7fc fa79 	bl	800d048 <ucdr_serialize_bool>
 8010b56:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010b5a:	4005      	ands	r5, r0
 8010b5c:	b2ed      	uxtb	r5, r5
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d169      	bne.n	8010c36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8010b62:	4628      	mov	r0, r5
 8010b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b68:	6861      	ldr	r1, [r4, #4]
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	f7fc fcb0 	bl	800d4d0 <ucdr_serialize_uint32_t>
 8010b70:	6863      	ldr	r3, [r4, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d06b      	beq.n	8010c4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d067      	beq.n	8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010b7a:	68a1      	ldr	r1, [r4, #8]
 8010b7c:	4630      	mov	r0, r6
 8010b7e:	f005 faef 	bl	8016160 <ucdr_serialize_string>
 8010b82:	6863      	ldr	r3, [r4, #4]
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d953      	bls.n	8010c30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d05e      	beq.n	8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010b8c:	68e1      	ldr	r1, [r4, #12]
 8010b8e:	4630      	mov	r0, r6
 8010b90:	f005 fae6 	bl	8016160 <ucdr_serialize_string>
 8010b94:	6863      	ldr	r3, [r4, #4]
 8010b96:	2b02      	cmp	r3, #2
 8010b98:	d94a      	bls.n	8010c30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d055      	beq.n	8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010b9e:	6921      	ldr	r1, [r4, #16]
 8010ba0:	4630      	mov	r0, r6
 8010ba2:	f005 fadd 	bl	8016160 <ucdr_serialize_string>
 8010ba6:	6863      	ldr	r3, [r4, #4]
 8010ba8:	2b03      	cmp	r3, #3
 8010baa:	d941      	bls.n	8010c30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010bac:	2800      	cmp	r0, #0
 8010bae:	d04c      	beq.n	8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010bb0:	6961      	ldr	r1, [r4, #20]
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	f005 fad4 	bl	8016160 <ucdr_serialize_string>
 8010bb8:	6863      	ldr	r3, [r4, #4]
 8010bba:	2b04      	cmp	r3, #4
 8010bbc:	d938      	bls.n	8010c30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	d043      	beq.n	8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010bc2:	69a1      	ldr	r1, [r4, #24]
 8010bc4:	4630      	mov	r0, r6
 8010bc6:	f005 facb 	bl	8016160 <ucdr_serialize_string>
 8010bca:	6863      	ldr	r3, [r4, #4]
 8010bcc:	2b05      	cmp	r3, #5
 8010bce:	d92f      	bls.n	8010c30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	d03a      	beq.n	8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010bd4:	69e1      	ldr	r1, [r4, #28]
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	f005 fac2 	bl	8016160 <ucdr_serialize_string>
 8010bdc:	6863      	ldr	r3, [r4, #4]
 8010bde:	2b06      	cmp	r3, #6
 8010be0:	d926      	bls.n	8010c30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010be2:	b390      	cbz	r0, 8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010be4:	6a21      	ldr	r1, [r4, #32]
 8010be6:	4630      	mov	r0, r6
 8010be8:	f005 faba 	bl	8016160 <ucdr_serialize_string>
 8010bec:	6863      	ldr	r3, [r4, #4]
 8010bee:	2b07      	cmp	r3, #7
 8010bf0:	d91e      	bls.n	8010c30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010bf2:	b350      	cbz	r0, 8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010bf4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	f005 fab2 	bl	8016160 <ucdr_serialize_string>
 8010bfc:	6863      	ldr	r3, [r4, #4]
 8010bfe:	2b08      	cmp	r3, #8
 8010c00:	d916      	bls.n	8010c30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010c02:	b310      	cbz	r0, 8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010c04:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010c06:	4630      	mov	r0, r6
 8010c08:	f005 faaa 	bl	8016160 <ucdr_serialize_string>
 8010c0c:	6863      	ldr	r3, [r4, #4]
 8010c0e:	2b09      	cmp	r3, #9
 8010c10:	d90e      	bls.n	8010c30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010c12:	b1d0      	cbz	r0, 8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010c14:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010c18:	2709      	movs	r7, #9
 8010c1a:	e000      	b.n	8010c1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8010c1c:	b1a8      	cbz	r0, 8010c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010c1e:	f858 1b04 	ldr.w	r1, [r8], #4
 8010c22:	4630      	mov	r0, r6
 8010c24:	f005 fa9c 	bl	8016160 <ucdr_serialize_string>
 8010c28:	6862      	ldr	r2, [r4, #4]
 8010c2a:	3701      	adds	r7, #1
 8010c2c:	4297      	cmp	r7, r2
 8010c2e:	d3f5      	bcc.n	8010c1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8010c30:	4005      	ands	r5, r0
 8010c32:	b2ed      	uxtb	r5, r5
 8010c34:	e78a      	b.n	8010b4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010c36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010c38:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	f7fd fedf 	bl	800ea00 <ucdr_serialize_sequence_uint8_t>
 8010c42:	4005      	ands	r5, r0
 8010c44:	4628      	mov	r0, r5
 8010c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c4a:	2500      	movs	r5, #0
 8010c4c:	e77e      	b.n	8010b4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010c4e:	4028      	ands	r0, r5
 8010c50:	b2c5      	uxtb	r5, r0
 8010c52:	e77b      	b.n	8010b4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08010c54 <uxr_serialize_OBJK_Publisher_Binary>:
 8010c54:	b570      	push	{r4, r5, r6, lr}
 8010c56:	460d      	mov	r5, r1
 8010c58:	7809      	ldrb	r1, [r1, #0]
 8010c5a:	4606      	mov	r6, r0
 8010c5c:	f7fc f9f4 	bl	800d048 <ucdr_serialize_bool>
 8010c60:	782b      	ldrb	r3, [r5, #0]
 8010c62:	4604      	mov	r4, r0
 8010c64:	b94b      	cbnz	r3, 8010c7a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8010c66:	7a29      	ldrb	r1, [r5, #8]
 8010c68:	4630      	mov	r0, r6
 8010c6a:	f7fc f9ed 	bl	800d048 <ucdr_serialize_bool>
 8010c6e:	7a2b      	ldrb	r3, [r5, #8]
 8010c70:	4004      	ands	r4, r0
 8010c72:	b2e4      	uxtb	r4, r4
 8010c74:	b943      	cbnz	r3, 8010c88 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8010c76:	4620      	mov	r0, r4
 8010c78:	bd70      	pop	{r4, r5, r6, pc}
 8010c7a:	6869      	ldr	r1, [r5, #4]
 8010c7c:	4630      	mov	r0, r6
 8010c7e:	f005 fa6f 	bl	8016160 <ucdr_serialize_string>
 8010c82:	4004      	ands	r4, r0
 8010c84:	b2e4      	uxtb	r4, r4
 8010c86:	e7ee      	b.n	8010c66 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010c88:	f105 010c 	add.w	r1, r5, #12
 8010c8c:	4630      	mov	r0, r6
 8010c8e:	f7ff ff53 	bl	8010b38 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8010c92:	4004      	ands	r4, r0
 8010c94:	4620      	mov	r0, r4
 8010c96:	bd70      	pop	{r4, r5, r6, pc}

08010c98 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8010c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c9c:	460c      	mov	r4, r1
 8010c9e:	7809      	ldrb	r1, [r1, #0]
 8010ca0:	4606      	mov	r6, r0
 8010ca2:	f7fc f9d1 	bl	800d048 <ucdr_serialize_bool>
 8010ca6:	7823      	ldrb	r3, [r4, #0]
 8010ca8:	4605      	mov	r5, r0
 8010caa:	b96b      	cbnz	r3, 8010cc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8010cac:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	f7fc f9c9 	bl	800d048 <ucdr_serialize_bool>
 8010cb6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010cba:	4005      	ands	r5, r0
 8010cbc:	b2ed      	uxtb	r5, r5
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d169      	bne.n	8010d96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc8:	6861      	ldr	r1, [r4, #4]
 8010cca:	4630      	mov	r0, r6
 8010ccc:	f7fc fc00 	bl	800d4d0 <ucdr_serialize_uint32_t>
 8010cd0:	6863      	ldr	r3, [r4, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d06b      	beq.n	8010dae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d067      	beq.n	8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010cda:	68a1      	ldr	r1, [r4, #8]
 8010cdc:	4630      	mov	r0, r6
 8010cde:	f005 fa3f 	bl	8016160 <ucdr_serialize_string>
 8010ce2:	6863      	ldr	r3, [r4, #4]
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d953      	bls.n	8010d90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	d05e      	beq.n	8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010cec:	68e1      	ldr	r1, [r4, #12]
 8010cee:	4630      	mov	r0, r6
 8010cf0:	f005 fa36 	bl	8016160 <ucdr_serialize_string>
 8010cf4:	6863      	ldr	r3, [r4, #4]
 8010cf6:	2b02      	cmp	r3, #2
 8010cf8:	d94a      	bls.n	8010d90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	d055      	beq.n	8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010cfe:	6921      	ldr	r1, [r4, #16]
 8010d00:	4630      	mov	r0, r6
 8010d02:	f005 fa2d 	bl	8016160 <ucdr_serialize_string>
 8010d06:	6863      	ldr	r3, [r4, #4]
 8010d08:	2b03      	cmp	r3, #3
 8010d0a:	d941      	bls.n	8010d90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	d04c      	beq.n	8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d10:	6961      	ldr	r1, [r4, #20]
 8010d12:	4630      	mov	r0, r6
 8010d14:	f005 fa24 	bl	8016160 <ucdr_serialize_string>
 8010d18:	6863      	ldr	r3, [r4, #4]
 8010d1a:	2b04      	cmp	r3, #4
 8010d1c:	d938      	bls.n	8010d90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d1e:	2800      	cmp	r0, #0
 8010d20:	d043      	beq.n	8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d22:	69a1      	ldr	r1, [r4, #24]
 8010d24:	4630      	mov	r0, r6
 8010d26:	f005 fa1b 	bl	8016160 <ucdr_serialize_string>
 8010d2a:	6863      	ldr	r3, [r4, #4]
 8010d2c:	2b05      	cmp	r3, #5
 8010d2e:	d92f      	bls.n	8010d90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d03a      	beq.n	8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d34:	69e1      	ldr	r1, [r4, #28]
 8010d36:	4630      	mov	r0, r6
 8010d38:	f005 fa12 	bl	8016160 <ucdr_serialize_string>
 8010d3c:	6863      	ldr	r3, [r4, #4]
 8010d3e:	2b06      	cmp	r3, #6
 8010d40:	d926      	bls.n	8010d90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d42:	b390      	cbz	r0, 8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d44:	6a21      	ldr	r1, [r4, #32]
 8010d46:	4630      	mov	r0, r6
 8010d48:	f005 fa0a 	bl	8016160 <ucdr_serialize_string>
 8010d4c:	6863      	ldr	r3, [r4, #4]
 8010d4e:	2b07      	cmp	r3, #7
 8010d50:	d91e      	bls.n	8010d90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d52:	b350      	cbz	r0, 8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d54:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010d56:	4630      	mov	r0, r6
 8010d58:	f005 fa02 	bl	8016160 <ucdr_serialize_string>
 8010d5c:	6863      	ldr	r3, [r4, #4]
 8010d5e:	2b08      	cmp	r3, #8
 8010d60:	d916      	bls.n	8010d90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d62:	b310      	cbz	r0, 8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d64:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010d66:	4630      	mov	r0, r6
 8010d68:	f005 f9fa 	bl	8016160 <ucdr_serialize_string>
 8010d6c:	6863      	ldr	r3, [r4, #4]
 8010d6e:	2b09      	cmp	r3, #9
 8010d70:	d90e      	bls.n	8010d90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d72:	b1d0      	cbz	r0, 8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d74:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010d78:	2709      	movs	r7, #9
 8010d7a:	e000      	b.n	8010d7e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8010d7c:	b1a8      	cbz	r0, 8010daa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d7e:	f858 1b04 	ldr.w	r1, [r8], #4
 8010d82:	4630      	mov	r0, r6
 8010d84:	f005 f9ec 	bl	8016160 <ucdr_serialize_string>
 8010d88:	6862      	ldr	r2, [r4, #4]
 8010d8a:	3701      	adds	r7, #1
 8010d8c:	4297      	cmp	r7, r2
 8010d8e:	d3f5      	bcc.n	8010d7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8010d90:	4005      	ands	r5, r0
 8010d92:	b2ed      	uxtb	r5, r5
 8010d94:	e78a      	b.n	8010cac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010d96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010d98:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010d9c:	4630      	mov	r0, r6
 8010d9e:	f7fd fe2f 	bl	800ea00 <ucdr_serialize_sequence_uint8_t>
 8010da2:	4005      	ands	r5, r0
 8010da4:	4628      	mov	r0, r5
 8010da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010daa:	2500      	movs	r5, #0
 8010dac:	e77e      	b.n	8010cac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010dae:	4028      	ands	r0, r5
 8010db0:	b2c5      	uxtb	r5, r0
 8010db2:	e77b      	b.n	8010cac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08010db4 <uxr_serialize_OBJK_Subscriber_Binary>:
 8010db4:	b570      	push	{r4, r5, r6, lr}
 8010db6:	460d      	mov	r5, r1
 8010db8:	7809      	ldrb	r1, [r1, #0]
 8010dba:	4606      	mov	r6, r0
 8010dbc:	f7fc f944 	bl	800d048 <ucdr_serialize_bool>
 8010dc0:	782b      	ldrb	r3, [r5, #0]
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	b94b      	cbnz	r3, 8010dda <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8010dc6:	7a29      	ldrb	r1, [r5, #8]
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f7fc f93d 	bl	800d048 <ucdr_serialize_bool>
 8010dce:	7a2b      	ldrb	r3, [r5, #8]
 8010dd0:	4004      	ands	r4, r0
 8010dd2:	b2e4      	uxtb	r4, r4
 8010dd4:	b943      	cbnz	r3, 8010de8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	bd70      	pop	{r4, r5, r6, pc}
 8010dda:	6869      	ldr	r1, [r5, #4]
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f005 f9bf 	bl	8016160 <ucdr_serialize_string>
 8010de2:	4004      	ands	r4, r0
 8010de4:	b2e4      	uxtb	r4, r4
 8010de6:	e7ee      	b.n	8010dc6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8010de8:	f105 010c 	add.w	r1, r5, #12
 8010dec:	4630      	mov	r0, r6
 8010dee:	f7ff ff53 	bl	8010c98 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8010df2:	4004      	ands	r4, r0
 8010df4:	4620      	mov	r0, r4
 8010df6:	bd70      	pop	{r4, r5, r6, pc}

08010df8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010df8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8010dfc:	4688      	mov	r8, r1
 8010dfe:	8809      	ldrh	r1, [r1, #0]
 8010e00:	4681      	mov	r9, r0
 8010e02:	f7fc f97b 	bl	800d0fc <ucdr_serialize_uint16_t>
 8010e06:	f898 1002 	ldrb.w	r1, [r8, #2]
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	4648      	mov	r0, r9
 8010e0e:	f7fc f91b 	bl	800d048 <ucdr_serialize_bool>
 8010e12:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010e16:	4006      	ands	r6, r0
 8010e18:	b2f5      	uxtb	r5, r6
 8010e1a:	b9eb      	cbnz	r3, 8010e58 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8010e1c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8010e20:	4648      	mov	r0, r9
 8010e22:	f7fc f911 	bl	800d048 <ucdr_serialize_bool>
 8010e26:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010e2a:	4005      	ands	r5, r0
 8010e2c:	bb7b      	cbnz	r3, 8010e8e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8010e2e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8010e32:	4648      	mov	r0, r9
 8010e34:	f7fc f908 	bl	800d048 <ucdr_serialize_bool>
 8010e38:	f898 300c 	ldrb.w	r3, [r8, #12]
 8010e3c:	4005      	ands	r5, r0
 8010e3e:	b9f3      	cbnz	r3, 8010e7e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8010e40:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010e44:	4648      	mov	r0, r9
 8010e46:	f7fc f8ff 	bl	800d048 <ucdr_serialize_bool>
 8010e4a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010e4e:	4005      	ands	r5, r0
 8010e50:	b94b      	cbnz	r3, 8010e66 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8010e52:	4628      	mov	r0, r5
 8010e54:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010e58:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8010e5c:	4648      	mov	r0, r9
 8010e5e:	f7fc f94d 	bl	800d0fc <ucdr_serialize_uint16_t>
 8010e62:	4005      	ands	r5, r0
 8010e64:	e7da      	b.n	8010e1c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010e66:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010e6a:	f108 011c 	add.w	r1, r8, #28
 8010e6e:	4648      	mov	r0, r9
 8010e70:	f7fd fdc6 	bl	800ea00 <ucdr_serialize_sequence_uint8_t>
 8010e74:	4028      	ands	r0, r5
 8010e76:	b2c5      	uxtb	r5, r0
 8010e78:	4628      	mov	r0, r5
 8010e7a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010e7e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010e82:	4648      	mov	r0, r9
 8010e84:	f7fc fb24 	bl	800d4d0 <ucdr_serialize_uint32_t>
 8010e88:	4028      	ands	r0, r5
 8010e8a:	b2c5      	uxtb	r5, r0
 8010e8c:	e7d8      	b.n	8010e40 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8010e8e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010e92:	4648      	mov	r0, r9
 8010e94:	f7fc fb1c 	bl	800d4d0 <ucdr_serialize_uint32_t>
 8010e98:	4028      	ands	r0, r5
 8010e9a:	b2c5      	uxtb	r5, r0
 8010e9c:	e7c7      	b.n	8010e2e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8010e9e:	bf00      	nop

08010ea0 <uxr_serialize_OBJK_DataReader_Binary>:
 8010ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ea2:	2202      	movs	r2, #2
 8010ea4:	460c      	mov	r4, r1
 8010ea6:	4606      	mov	r6, r0
 8010ea8:	f7fb fe06 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8010eac:	78a1      	ldrb	r1, [r4, #2]
 8010eae:	4605      	mov	r5, r0
 8010eb0:	4630      	mov	r0, r6
 8010eb2:	f7fc f8c9 	bl	800d048 <ucdr_serialize_bool>
 8010eb6:	78a3      	ldrb	r3, [r4, #2]
 8010eb8:	4005      	ands	r5, r0
 8010eba:	b2ed      	uxtb	r5, r5
 8010ebc:	b90b      	cbnz	r3, 8010ec2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ec2:	f104 0108 	add.w	r1, r4, #8
 8010ec6:	4630      	mov	r0, r6
 8010ec8:	f7ff ff96 	bl	8010df8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010ecc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010ed0:	4607      	mov	r7, r0
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	f7fc f8b8 	bl	800d048 <ucdr_serialize_bool>
 8010ed8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010edc:	4038      	ands	r0, r7
 8010ede:	b2c7      	uxtb	r7, r0
 8010ee0:	b95b      	cbnz	r3, 8010efa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8010ee2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	f7fc f8ae 	bl	800d048 <ucdr_serialize_bool>
 8010eec:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010ef0:	4007      	ands	r7, r0
 8010ef2:	b94b      	cbnz	r3, 8010f08 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8010ef4:	403d      	ands	r5, r7
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010efa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8010efe:	4630      	mov	r0, r6
 8010f00:	f7fc fd3c 	bl	800d97c <ucdr_serialize_uint64_t>
 8010f04:	4007      	ands	r7, r0
 8010f06:	e7ec      	b.n	8010ee2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8010f08:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	f005 f928 	bl	8016160 <ucdr_serialize_string>
 8010f10:	4007      	ands	r7, r0
 8010f12:	b2ff      	uxtb	r7, r7
 8010f14:	e7ee      	b.n	8010ef4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8010f16:	bf00      	nop

08010f18 <uxr_serialize_OBJK_DataWriter_Binary>:
 8010f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f1a:	2202      	movs	r2, #2
 8010f1c:	460d      	mov	r5, r1
 8010f1e:	4606      	mov	r6, r0
 8010f20:	f7fb fdca 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8010f24:	78a9      	ldrb	r1, [r5, #2]
 8010f26:	4604      	mov	r4, r0
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f7fc f88d 	bl	800d048 <ucdr_serialize_bool>
 8010f2e:	78ab      	ldrb	r3, [r5, #2]
 8010f30:	4004      	ands	r4, r0
 8010f32:	b2e4      	uxtb	r4, r4
 8010f34:	b90b      	cbnz	r3, 8010f3a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8010f36:	4620      	mov	r0, r4
 8010f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f3a:	f105 0108 	add.w	r1, r5, #8
 8010f3e:	4630      	mov	r0, r6
 8010f40:	f7ff ff5a 	bl	8010df8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010f44:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8010f48:	4607      	mov	r7, r0
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	f7fc f87c 	bl	800d048 <ucdr_serialize_bool>
 8010f50:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8010f54:	4038      	ands	r0, r7
 8010f56:	b2c7      	uxtb	r7, r0
 8010f58:	b913      	cbnz	r3, 8010f60 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8010f5a:	403c      	ands	r4, r7
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f60:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8010f64:	4630      	mov	r0, r6
 8010f66:	f7fc fd09 	bl	800d97c <ucdr_serialize_uint64_t>
 8010f6a:	4007      	ands	r7, r0
 8010f6c:	e7f5      	b.n	8010f5a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8010f6e:	bf00      	nop

08010f70 <uxr_deserialize_ObjectVariant>:
 8010f70:	b570      	push	{r4, r5, r6, lr}
 8010f72:	4605      	mov	r5, r0
 8010f74:	460e      	mov	r6, r1
 8010f76:	f7fc f8ab 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8010f7a:	b168      	cbz	r0, 8010f98 <uxr_deserialize_ObjectVariant+0x28>
 8010f7c:	7833      	ldrb	r3, [r6, #0]
 8010f7e:	3b01      	subs	r3, #1
 8010f80:	4604      	mov	r4, r0
 8010f82:	2b0d      	cmp	r3, #13
 8010f84:	d809      	bhi.n	8010f9a <uxr_deserialize_ObjectVariant+0x2a>
 8010f86:	e8df f003 	tbb	[pc, r3]
 8010f8a:	0a41      	.short	0x0a41
 8010f8c:	0a0a2323 	.word	0x0a0a2323
 8010f90:	10080a0a 	.word	0x10080a0a
 8010f94:	565c1010 	.word	0x565c1010
 8010f98:	2400      	movs	r4, #0
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	bd70      	pop	{r4, r5, r6, pc}
 8010f9e:	1d31      	adds	r1, r6, #4
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fa6:	f7ff bd55 	b.w	8010a54 <uxr_deserialize_DATAWRITER_Representation>
 8010faa:	1d31      	adds	r1, r6, #4
 8010fac:	4628      	mov	r0, r5
 8010fae:	f7fc f88f 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8010fb2:	2800      	cmp	r0, #0
 8010fb4:	d0f0      	beq.n	8010f98 <uxr_deserialize_ObjectVariant+0x28>
 8010fb6:	7933      	ldrb	r3, [r6, #4]
 8010fb8:	2b01      	cmp	r3, #1
 8010fba:	d001      	beq.n	8010fc0 <uxr_deserialize_ObjectVariant+0x50>
 8010fbc:	2b02      	cmp	r3, #2
 8010fbe:	d1ec      	bne.n	8010f9a <uxr_deserialize_ObjectVariant+0x2a>
 8010fc0:	68b1      	ldr	r1, [r6, #8]
 8010fc2:	4628      	mov	r0, r5
 8010fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fcc:	f005 b8d8 	b.w	8016180 <ucdr_deserialize_string>
 8010fd0:	1d31      	adds	r1, r6, #4
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	f7fc f87c 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8010fd8:	4604      	mov	r4, r0
 8010fda:	b170      	cbz	r0, 8010ffa <uxr_deserialize_ObjectVariant+0x8a>
 8010fdc:	7933      	ldrb	r3, [r6, #4]
 8010fde:	2b02      	cmp	r3, #2
 8010fe0:	d04c      	beq.n	801107c <uxr_deserialize_ObjectVariant+0x10c>
 8010fe2:	2b03      	cmp	r3, #3
 8010fe4:	d109      	bne.n	8010ffa <uxr_deserialize_ObjectVariant+0x8a>
 8010fe6:	f106 0308 	add.w	r3, r6, #8
 8010fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010fee:	f106 010c 	add.w	r1, r6, #12
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	f7fd fd16 	bl	800ea24 <ucdr_deserialize_sequence_uint8_t>
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	2202      	movs	r2, #2
 8010ffc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011000:	4628      	mov	r0, r5
 8011002:	f7fb fdbd 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 8011006:	4020      	ands	r0, r4
 8011008:	b2c4      	uxtb	r4, r0
 801100a:	e7c6      	b.n	8010f9a <uxr_deserialize_ObjectVariant+0x2a>
 801100c:	1d31      	adds	r1, r6, #4
 801100e:	4628      	mov	r0, r5
 8011010:	f7fc f85e 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8011014:	4604      	mov	r4, r0
 8011016:	b130      	cbz	r0, 8011026 <uxr_deserialize_ObjectVariant+0xb6>
 8011018:	7933      	ldrb	r3, [r6, #4]
 801101a:	2b02      	cmp	r3, #2
 801101c:	d036      	beq.n	801108c <uxr_deserialize_ObjectVariant+0x11c>
 801101e:	2b03      	cmp	r3, #3
 8011020:	d03c      	beq.n	801109c <uxr_deserialize_ObjectVariant+0x12c>
 8011022:	2b01      	cmp	r3, #1
 8011024:	d032      	beq.n	801108c <uxr_deserialize_ObjectVariant+0x11c>
 8011026:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801102a:	4628      	mov	r0, r5
 801102c:	f7fc fdf6 	bl	800dc1c <ucdr_deserialize_int16_t>
 8011030:	4020      	ands	r0, r4
 8011032:	b2c4      	uxtb	r4, r0
 8011034:	e7b1      	b.n	8010f9a <uxr_deserialize_ObjectVariant+0x2a>
 8011036:	1d31      	adds	r1, r6, #4
 8011038:	4628      	mov	r0, r5
 801103a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801103e:	f7ff bbbf 	b.w	80107c0 <uxr_deserialize_CLIENT_Representation>
 8011042:	2204      	movs	r2, #4
 8011044:	18b1      	adds	r1, r6, r2
 8011046:	4628      	mov	r0, r5
 8011048:	f7fb fd9a 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 801104c:	2202      	movs	r2, #2
 801104e:	f106 0108 	add.w	r1, r6, #8
 8011052:	4604      	mov	r4, r0
 8011054:	4628      	mov	r0, r5
 8011056:	f7fb fd93 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 801105a:	2202      	movs	r2, #2
 801105c:	4004      	ands	r4, r0
 801105e:	f106 010a 	add.w	r1, r6, #10
 8011062:	4628      	mov	r0, r5
 8011064:	f7fb fd8c 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 8011068:	b2e4      	uxtb	r4, r4
 801106a:	4603      	mov	r3, r0
 801106c:	f106 010c 	add.w	r1, r6, #12
 8011070:	4628      	mov	r0, r5
 8011072:	401c      	ands	r4, r3
 8011074:	f7fb fffe 	bl	800d074 <ucdr_deserialize_bool>
 8011078:	4004      	ands	r4, r0
 801107a:	e78e      	b.n	8010f9a <uxr_deserialize_ObjectVariant+0x2a>
 801107c:	68b1      	ldr	r1, [r6, #8]
 801107e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011082:	4628      	mov	r0, r5
 8011084:	f005 f87c 	bl	8016180 <ucdr_deserialize_string>
 8011088:	4604      	mov	r4, r0
 801108a:	e7b6      	b.n	8010ffa <uxr_deserialize_ObjectVariant+0x8a>
 801108c:	68b1      	ldr	r1, [r6, #8]
 801108e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011092:	4628      	mov	r0, r5
 8011094:	f005 f874 	bl	8016180 <ucdr_deserialize_string>
 8011098:	4604      	mov	r4, r0
 801109a:	e7c4      	b.n	8011026 <uxr_deserialize_ObjectVariant+0xb6>
 801109c:	f106 0308 	add.w	r3, r6, #8
 80110a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110a4:	f106 010c 	add.w	r1, r6, #12
 80110a8:	4628      	mov	r0, r5
 80110aa:	f7fd fcbb 	bl	800ea24 <ucdr_deserialize_sequence_uint8_t>
 80110ae:	4604      	mov	r4, r0
 80110b0:	e7b9      	b.n	8011026 <uxr_deserialize_ObjectVariant+0xb6>
 80110b2:	bf00      	nop

080110b4 <uxr_deserialize_BaseObjectRequest>:
 80110b4:	b570      	push	{r4, r5, r6, lr}
 80110b6:	2202      	movs	r2, #2
 80110b8:	4605      	mov	r5, r0
 80110ba:	460e      	mov	r6, r1
 80110bc:	f7fb fd60 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 80110c0:	2202      	movs	r2, #2
 80110c2:	4604      	mov	r4, r0
 80110c4:	18b1      	adds	r1, r6, r2
 80110c6:	4628      	mov	r0, r5
 80110c8:	f7fb fd5a 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 80110cc:	4020      	ands	r0, r4
 80110ce:	b2c0      	uxtb	r0, r0
 80110d0:	bd70      	pop	{r4, r5, r6, pc}
 80110d2:	bf00      	nop

080110d4 <uxr_serialize_ActivityInfoVariant>:
 80110d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110d8:	460d      	mov	r5, r1
 80110da:	7809      	ldrb	r1, [r1, #0]
 80110dc:	4607      	mov	r7, r0
 80110de:	f7fb ffe1 	bl	800d0a4 <ucdr_serialize_uint8_t>
 80110e2:	4681      	mov	r9, r0
 80110e4:	b138      	cbz	r0, 80110f6 <uxr_serialize_ActivityInfoVariant+0x22>
 80110e6:	782b      	ldrb	r3, [r5, #0]
 80110e8:	2b06      	cmp	r3, #6
 80110ea:	f000 8082 	beq.w	80111f2 <uxr_serialize_ActivityInfoVariant+0x11e>
 80110ee:	2b0d      	cmp	r3, #13
 80110f0:	d016      	beq.n	8011120 <uxr_serialize_ActivityInfoVariant+0x4c>
 80110f2:	2b05      	cmp	r3, #5
 80110f4:	d002      	beq.n	80110fc <uxr_serialize_ActivityInfoVariant+0x28>
 80110f6:	4648      	mov	r0, r9
 80110f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110fc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011100:	4638      	mov	r0, r7
 8011102:	f7fc fd0b 	bl	800db1c <ucdr_serialize_int16_t>
 8011106:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801110a:	4681      	mov	r9, r0
 801110c:	4638      	mov	r0, r7
 801110e:	f7fc fc35 	bl	800d97c <ucdr_serialize_uint64_t>
 8011112:	ea09 0000 	and.w	r0, r9, r0
 8011116:	fa5f f980 	uxtb.w	r9, r0
 801111a:	4648      	mov	r0, r9
 801111c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011120:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011124:	4638      	mov	r0, r7
 8011126:	f7fc fcf9 	bl	800db1c <ucdr_serialize_int16_t>
 801112a:	68e9      	ldr	r1, [r5, #12]
 801112c:	4681      	mov	r9, r0
 801112e:	4638      	mov	r0, r7
 8011130:	f7fc f9ce 	bl	800d4d0 <ucdr_serialize_uint32_t>
 8011134:	68eb      	ldr	r3, [r5, #12]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d0eb      	beq.n	8011112 <uxr_serialize_ActivityInfoVariant+0x3e>
 801113a:	b320      	cbz	r0, 8011186 <uxr_serialize_ActivityInfoVariant+0xb2>
 801113c:	f105 080c 	add.w	r8, r5, #12
 8011140:	2600      	movs	r6, #0
 8011142:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8011146:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801114a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801114e:	4638      	mov	r0, r7
 8011150:	f7fb ffa8 	bl	800d0a4 <ucdr_serialize_uint8_t>
 8011154:	2800      	cmp	r0, #0
 8011156:	d053      	beq.n	8011200 <uxr_serialize_ActivityInfoVariant+0x12c>
 8011158:	f89a 3010 	ldrb.w	r3, [sl, #16]
 801115c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011160:	0074      	lsls	r4, r6, #1
 8011162:	00c9      	lsls	r1, r1, #3
 8011164:	2b03      	cmp	r3, #3
 8011166:	d854      	bhi.n	8011212 <uxr_serialize_ActivityInfoVariant+0x13e>
 8011168:	e8df f003 	tbb	[pc, r3]
 801116c:	02102132 	.word	0x02102132
 8011170:	4441      	add	r1, r8
 8011172:	4638      	mov	r0, r7
 8011174:	6889      	ldr	r1, [r1, #8]
 8011176:	f004 fff3 	bl	8016160 <ucdr_serialize_string>
 801117a:	68ea      	ldr	r2, [r5, #12]
 801117c:	3601      	adds	r6, #1
 801117e:	4296      	cmp	r6, r2
 8011180:	d242      	bcs.n	8011208 <uxr_serialize_ActivityInfoVariant+0x134>
 8011182:	2800      	cmp	r0, #0
 8011184:	d1dd      	bne.n	8011142 <uxr_serialize_ActivityInfoVariant+0x6e>
 8011186:	f04f 0900 	mov.w	r9, #0
 801118a:	e7b4      	b.n	80110f6 <uxr_serialize_ActivityInfoVariant+0x22>
 801118c:	3108      	adds	r1, #8
 801118e:	4441      	add	r1, r8
 8011190:	2210      	movs	r2, #16
 8011192:	4638      	mov	r0, r7
 8011194:	f7fb fc90 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8011198:	4434      	add	r4, r6
 801119a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801119e:	4604      	mov	r4, r0
 80111a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80111a2:	4638      	mov	r0, r7
 80111a4:	f7fc f994 	bl	800d4d0 <ucdr_serialize_uint32_t>
 80111a8:	4020      	ands	r0, r4
 80111aa:	b2c0      	uxtb	r0, r0
 80111ac:	e7e5      	b.n	801117a <uxr_serialize_ActivityInfoVariant+0xa6>
 80111ae:	3108      	adds	r1, #8
 80111b0:	4441      	add	r1, r8
 80111b2:	2204      	movs	r2, #4
 80111b4:	4638      	mov	r0, r7
 80111b6:	f7fb fc7f 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80111ba:	4434      	add	r4, r6
 80111bc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80111c0:	4604      	mov	r4, r0
 80111c2:	8b19      	ldrh	r1, [r3, #24]
 80111c4:	4638      	mov	r0, r7
 80111c6:	f7fb ff99 	bl	800d0fc <ucdr_serialize_uint16_t>
 80111ca:	4020      	ands	r0, r4
 80111cc:	b2c0      	uxtb	r0, r0
 80111ce:	e7d4      	b.n	801117a <uxr_serialize_ActivityInfoVariant+0xa6>
 80111d0:	3108      	adds	r1, #8
 80111d2:	4441      	add	r1, r8
 80111d4:	2202      	movs	r2, #2
 80111d6:	4638      	mov	r0, r7
 80111d8:	f7fb fc6e 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80111dc:	4434      	add	r4, r6
 80111de:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80111e2:	4604      	mov	r4, r0
 80111e4:	7d99      	ldrb	r1, [r3, #22]
 80111e6:	4638      	mov	r0, r7
 80111e8:	f7fb ff5c 	bl	800d0a4 <ucdr_serialize_uint8_t>
 80111ec:	4020      	ands	r0, r4
 80111ee:	b2c0      	uxtb	r0, r0
 80111f0:	e7c3      	b.n	801117a <uxr_serialize_ActivityInfoVariant+0xa6>
 80111f2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80111f6:	4638      	mov	r0, r7
 80111f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111fc:	f7fc bc8e 	b.w	800db1c <ucdr_serialize_int16_t>
 8011200:	68ea      	ldr	r2, [r5, #12]
 8011202:	3601      	adds	r6, #1
 8011204:	42b2      	cmp	r2, r6
 8011206:	d8be      	bhi.n	8011186 <uxr_serialize_ActivityInfoVariant+0xb2>
 8011208:	ea09 0900 	and.w	r9, r9, r0
 801120c:	fa5f f989 	uxtb.w	r9, r9
 8011210:	e771      	b.n	80110f6 <uxr_serialize_ActivityInfoVariant+0x22>
 8011212:	68eb      	ldr	r3, [r5, #12]
 8011214:	3601      	adds	r6, #1
 8011216:	429e      	cmp	r6, r3
 8011218:	f10a 0a18 	add.w	sl, sl, #24
 801121c:	d395      	bcc.n	801114a <uxr_serialize_ActivityInfoVariant+0x76>
 801121e:	e76a      	b.n	80110f6 <uxr_serialize_ActivityInfoVariant+0x22>

08011220 <uxr_deserialize_BaseObjectReply>:
 8011220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011224:	2202      	movs	r2, #2
 8011226:	4606      	mov	r6, r0
 8011228:	460f      	mov	r7, r1
 801122a:	f7fb fca9 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 801122e:	2202      	movs	r2, #2
 8011230:	18b9      	adds	r1, r7, r2
 8011232:	4605      	mov	r5, r0
 8011234:	4630      	mov	r0, r6
 8011236:	f7fb fca3 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 801123a:	1d39      	adds	r1, r7, #4
 801123c:	4680      	mov	r8, r0
 801123e:	4630      	mov	r0, r6
 8011240:	f7fb ff46 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8011244:	1d79      	adds	r1, r7, #5
 8011246:	4604      	mov	r4, r0
 8011248:	4630      	mov	r0, r6
 801124a:	f7fb ff41 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 801124e:	ea05 0508 	and.w	r5, r5, r8
 8011252:	402c      	ands	r4, r5
 8011254:	4020      	ands	r0, r4
 8011256:	b2c0      	uxtb	r0, r0
 8011258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801125c <uxr_serialize_ReadSpecification>:
 801125c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011260:	460e      	mov	r6, r1
 8011262:	7809      	ldrb	r1, [r1, #0]
 8011264:	4607      	mov	r7, r0
 8011266:	f7fb ff1d 	bl	800d0a4 <ucdr_serialize_uint8_t>
 801126a:	7871      	ldrb	r1, [r6, #1]
 801126c:	4604      	mov	r4, r0
 801126e:	4638      	mov	r0, r7
 8011270:	f7fb ff18 	bl	800d0a4 <ucdr_serialize_uint8_t>
 8011274:	78b1      	ldrb	r1, [r6, #2]
 8011276:	4004      	ands	r4, r0
 8011278:	4638      	mov	r0, r7
 801127a:	f7fb fee5 	bl	800d048 <ucdr_serialize_bool>
 801127e:	78b3      	ldrb	r3, [r6, #2]
 8011280:	b2e4      	uxtb	r4, r4
 8011282:	4004      	ands	r4, r0
 8011284:	b94b      	cbnz	r3, 801129a <uxr_serialize_ReadSpecification+0x3e>
 8011286:	7a31      	ldrb	r1, [r6, #8]
 8011288:	4638      	mov	r0, r7
 801128a:	f7fb fedd 	bl	800d048 <ucdr_serialize_bool>
 801128e:	7a33      	ldrb	r3, [r6, #8]
 8011290:	4004      	ands	r4, r0
 8011292:	b943      	cbnz	r3, 80112a6 <uxr_serialize_ReadSpecification+0x4a>
 8011294:	4620      	mov	r0, r4
 8011296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801129a:	6871      	ldr	r1, [r6, #4]
 801129c:	4638      	mov	r0, r7
 801129e:	f004 ff5f 	bl	8016160 <ucdr_serialize_string>
 80112a2:	4004      	ands	r4, r0
 80112a4:	e7ef      	b.n	8011286 <uxr_serialize_ReadSpecification+0x2a>
 80112a6:	8971      	ldrh	r1, [r6, #10]
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7fb ff27 	bl	800d0fc <ucdr_serialize_uint16_t>
 80112ae:	89b1      	ldrh	r1, [r6, #12]
 80112b0:	4605      	mov	r5, r0
 80112b2:	4638      	mov	r0, r7
 80112b4:	f7fb ff22 	bl	800d0fc <ucdr_serialize_uint16_t>
 80112b8:	89f1      	ldrh	r1, [r6, #14]
 80112ba:	4005      	ands	r5, r0
 80112bc:	4638      	mov	r0, r7
 80112be:	f7fb ff1d 	bl	800d0fc <ucdr_serialize_uint16_t>
 80112c2:	8a31      	ldrh	r1, [r6, #16]
 80112c4:	4680      	mov	r8, r0
 80112c6:	4638      	mov	r0, r7
 80112c8:	f7fb ff18 	bl	800d0fc <ucdr_serialize_uint16_t>
 80112cc:	b2ed      	uxtb	r5, r5
 80112ce:	4025      	ands	r5, r4
 80112d0:	ea08 0505 	and.w	r5, r8, r5
 80112d4:	ea00 0405 	and.w	r4, r0, r5
 80112d8:	4620      	mov	r0, r4
 80112da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112de:	bf00      	nop

080112e0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80112e0:	f7ff ba16 	b.w	8010710 <uxr_serialize_CLIENT_Representation>

080112e4 <uxr_serialize_CREATE_Payload>:
 80112e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112e6:	2202      	movs	r2, #2
 80112e8:	4607      	mov	r7, r0
 80112ea:	460e      	mov	r6, r1
 80112ec:	f7fb fbe4 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80112f0:	2202      	movs	r2, #2
 80112f2:	18b1      	adds	r1, r6, r2
 80112f4:	4605      	mov	r5, r0
 80112f6:	4638      	mov	r0, r7
 80112f8:	f7fb fbde 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80112fc:	7931      	ldrb	r1, [r6, #4]
 80112fe:	4604      	mov	r4, r0
 8011300:	4638      	mov	r0, r7
 8011302:	f7fb fecf 	bl	800d0a4 <ucdr_serialize_uint8_t>
 8011306:	b170      	cbz	r0, 8011326 <uxr_serialize_CREATE_Payload+0x42>
 8011308:	7933      	ldrb	r3, [r6, #4]
 801130a:	402c      	ands	r4, r5
 801130c:	3b01      	subs	r3, #1
 801130e:	b2e4      	uxtb	r4, r4
 8011310:	2b0d      	cmp	r3, #13
 8011312:	d809      	bhi.n	8011328 <uxr_serialize_CREATE_Payload+0x44>
 8011314:	e8df f003 	tbb	[pc, r3]
 8011318:	23230a4c 	.word	0x23230a4c
 801131c:	0a0a0a0a 	.word	0x0a0a0a0a
 8011320:	12121208 	.word	0x12121208
 8011324:	3e45      	.short	0x3e45
 8011326:	2400      	movs	r4, #0
 8011328:	4620      	mov	r0, r4
 801132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801132c:	f106 0108 	add.w	r1, r6, #8
 8011330:	4638      	mov	r0, r7
 8011332:	f7ff faf3 	bl	801091c <uxr_serialize_DATAWRITER_Representation>
 8011336:	4004      	ands	r4, r0
 8011338:	4620      	mov	r0, r4
 801133a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801133c:	7a31      	ldrb	r1, [r6, #8]
 801133e:	4638      	mov	r0, r7
 8011340:	f7fb feb0 	bl	800d0a4 <ucdr_serialize_uint8_t>
 8011344:	2800      	cmp	r0, #0
 8011346:	d0ee      	beq.n	8011326 <uxr_serialize_CREATE_Payload+0x42>
 8011348:	7a33      	ldrb	r3, [r6, #8]
 801134a:	2b01      	cmp	r3, #1
 801134c:	d001      	beq.n	8011352 <uxr_serialize_CREATE_Payload+0x6e>
 801134e:	2b02      	cmp	r3, #2
 8011350:	d1ea      	bne.n	8011328 <uxr_serialize_CREATE_Payload+0x44>
 8011352:	68f1      	ldr	r1, [r6, #12]
 8011354:	4638      	mov	r0, r7
 8011356:	f004 ff03 	bl	8016160 <ucdr_serialize_string>
 801135a:	4004      	ands	r4, r0
 801135c:	e7e4      	b.n	8011328 <uxr_serialize_CREATE_Payload+0x44>
 801135e:	7a31      	ldrb	r1, [r6, #8]
 8011360:	4638      	mov	r0, r7
 8011362:	f7fb fe9f 	bl	800d0a4 <ucdr_serialize_uint8_t>
 8011366:	4605      	mov	r5, r0
 8011368:	b158      	cbz	r0, 8011382 <uxr_serialize_CREATE_Payload+0x9e>
 801136a:	7a33      	ldrb	r3, [r6, #8]
 801136c:	2b02      	cmp	r3, #2
 801136e:	d034      	beq.n	80113da <uxr_serialize_CREATE_Payload+0xf6>
 8011370:	2b03      	cmp	r3, #3
 8011372:	d106      	bne.n	8011382 <uxr_serialize_CREATE_Payload+0x9e>
 8011374:	68f2      	ldr	r2, [r6, #12]
 8011376:	f106 0110 	add.w	r1, r6, #16
 801137a:	4638      	mov	r0, r7
 801137c:	f7fd fb40 	bl	800ea00 <ucdr_serialize_sequence_uint8_t>
 8011380:	4605      	mov	r5, r0
 8011382:	2202      	movs	r2, #2
 8011384:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011388:	4638      	mov	r0, r7
 801138a:	f7fb fb95 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 801138e:	4028      	ands	r0, r5
 8011390:	4004      	ands	r4, r0
 8011392:	e7c9      	b.n	8011328 <uxr_serialize_CREATE_Payload+0x44>
 8011394:	f106 0108 	add.w	r1, r6, #8
 8011398:	4638      	mov	r0, r7
 801139a:	f7ff f9b9 	bl	8010710 <uxr_serialize_CLIENT_Representation>
 801139e:	4004      	ands	r4, r0
 80113a0:	e7c2      	b.n	8011328 <uxr_serialize_CREATE_Payload+0x44>
 80113a2:	f106 0108 	add.w	r1, r6, #8
 80113a6:	4638      	mov	r0, r7
 80113a8:	f7ff fa6e 	bl	8010888 <uxr_serialize_AGENT_Representation>
 80113ac:	4004      	ands	r4, r0
 80113ae:	e7bb      	b.n	8011328 <uxr_serialize_CREATE_Payload+0x44>
 80113b0:	7a31      	ldrb	r1, [r6, #8]
 80113b2:	4638      	mov	r0, r7
 80113b4:	f7fb fe76 	bl	800d0a4 <ucdr_serialize_uint8_t>
 80113b8:	4605      	mov	r5, r0
 80113ba:	b130      	cbz	r0, 80113ca <uxr_serialize_CREATE_Payload+0xe6>
 80113bc:	7a33      	ldrb	r3, [r6, #8]
 80113be:	2b02      	cmp	r3, #2
 80113c0:	d011      	beq.n	80113e6 <uxr_serialize_CREATE_Payload+0x102>
 80113c2:	2b03      	cmp	r3, #3
 80113c4:	d015      	beq.n	80113f2 <uxr_serialize_CREATE_Payload+0x10e>
 80113c6:	2b01      	cmp	r3, #1
 80113c8:	d00d      	beq.n	80113e6 <uxr_serialize_CREATE_Payload+0x102>
 80113ca:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80113ce:	4638      	mov	r0, r7
 80113d0:	f7fc fba4 	bl	800db1c <ucdr_serialize_int16_t>
 80113d4:	4028      	ands	r0, r5
 80113d6:	4004      	ands	r4, r0
 80113d8:	e7a6      	b.n	8011328 <uxr_serialize_CREATE_Payload+0x44>
 80113da:	68f1      	ldr	r1, [r6, #12]
 80113dc:	4638      	mov	r0, r7
 80113de:	f004 febf 	bl	8016160 <ucdr_serialize_string>
 80113e2:	4605      	mov	r5, r0
 80113e4:	e7cd      	b.n	8011382 <uxr_serialize_CREATE_Payload+0x9e>
 80113e6:	68f1      	ldr	r1, [r6, #12]
 80113e8:	4638      	mov	r0, r7
 80113ea:	f004 feb9 	bl	8016160 <ucdr_serialize_string>
 80113ee:	4605      	mov	r5, r0
 80113f0:	e7eb      	b.n	80113ca <uxr_serialize_CREATE_Payload+0xe6>
 80113f2:	68f2      	ldr	r2, [r6, #12]
 80113f4:	f106 0110 	add.w	r1, r6, #16
 80113f8:	4638      	mov	r0, r7
 80113fa:	f7fd fb01 	bl	800ea00 <ucdr_serialize_sequence_uint8_t>
 80113fe:	4605      	mov	r5, r0
 8011400:	e7e3      	b.n	80113ca <uxr_serialize_CREATE_Payload+0xe6>
 8011402:	bf00      	nop

08011404 <uxr_deserialize_GET_INFO_Payload>:
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	2202      	movs	r2, #2
 8011408:	4605      	mov	r5, r0
 801140a:	460e      	mov	r6, r1
 801140c:	f7fb fbb8 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 8011410:	2202      	movs	r2, #2
 8011412:	18b1      	adds	r1, r6, r2
 8011414:	4604      	mov	r4, r0
 8011416:	4628      	mov	r0, r5
 8011418:	f7fb fbb2 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 801141c:	1d31      	adds	r1, r6, #4
 801141e:	4004      	ands	r4, r0
 8011420:	4628      	mov	r0, r5
 8011422:	f7fc f985 	bl	800d730 <ucdr_deserialize_uint32_t>
 8011426:	b2e4      	uxtb	r4, r4
 8011428:	4020      	ands	r0, r4
 801142a:	bd70      	pop	{r4, r5, r6, pc}

0801142c <uxr_serialize_DELETE_Payload>:
 801142c:	b570      	push	{r4, r5, r6, lr}
 801142e:	2202      	movs	r2, #2
 8011430:	4605      	mov	r5, r0
 8011432:	460e      	mov	r6, r1
 8011434:	f7fb fb40 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8011438:	2202      	movs	r2, #2
 801143a:	4604      	mov	r4, r0
 801143c:	18b1      	adds	r1, r6, r2
 801143e:	4628      	mov	r0, r5
 8011440:	f7fb fb3a 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8011444:	4020      	ands	r0, r4
 8011446:	b2c0      	uxtb	r0, r0
 8011448:	bd70      	pop	{r4, r5, r6, pc}
 801144a:	bf00      	nop

0801144c <uxr_deserialize_STATUS_AGENT_Payload>:
 801144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011450:	4605      	mov	r5, r0
 8011452:	460e      	mov	r6, r1
 8011454:	f7fb fe3c 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8011458:	1c71      	adds	r1, r6, #1
 801145a:	4604      	mov	r4, r0
 801145c:	4628      	mov	r0, r5
 801145e:	f7fb fe37 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8011462:	2204      	movs	r2, #4
 8011464:	18b1      	adds	r1, r6, r2
 8011466:	4680      	mov	r8, r0
 8011468:	4628      	mov	r0, r5
 801146a:	f7fb fb89 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 801146e:	f106 0108 	add.w	r1, r6, #8
 8011472:	4607      	mov	r7, r0
 8011474:	2202      	movs	r2, #2
 8011476:	4628      	mov	r0, r5
 8011478:	f7fb fb82 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 801147c:	ea04 0308 	and.w	r3, r4, r8
 8011480:	b2db      	uxtb	r3, r3
 8011482:	ea03 0407 	and.w	r4, r3, r7
 8011486:	2202      	movs	r2, #2
 8011488:	4607      	mov	r7, r0
 801148a:	f106 010a 	add.w	r1, r6, #10
 801148e:	4628      	mov	r0, r5
 8011490:	f7fb fb76 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 8011494:	f106 010c 	add.w	r1, r6, #12
 8011498:	4603      	mov	r3, r0
 801149a:	4628      	mov	r0, r5
 801149c:	461d      	mov	r5, r3
 801149e:	f7fb fde9 	bl	800d074 <ucdr_deserialize_bool>
 80114a2:	403c      	ands	r4, r7
 80114a4:	4025      	ands	r5, r4
 80114a6:	4028      	ands	r0, r5
 80114a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080114ac <uxr_deserialize_STATUS_Payload>:
 80114ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b0:	2202      	movs	r2, #2
 80114b2:	4606      	mov	r6, r0
 80114b4:	460f      	mov	r7, r1
 80114b6:	f7fb fb63 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 80114ba:	2202      	movs	r2, #2
 80114bc:	18b9      	adds	r1, r7, r2
 80114be:	4605      	mov	r5, r0
 80114c0:	4630      	mov	r0, r6
 80114c2:	f7fb fb5d 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 80114c6:	1d39      	adds	r1, r7, #4
 80114c8:	4680      	mov	r8, r0
 80114ca:	4630      	mov	r0, r6
 80114cc:	f7fb fe00 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 80114d0:	1d79      	adds	r1, r7, #5
 80114d2:	4604      	mov	r4, r0
 80114d4:	4630      	mov	r0, r6
 80114d6:	f7fb fdfb 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 80114da:	ea05 0508 	and.w	r5, r5, r8
 80114de:	402c      	ands	r4, r5
 80114e0:	4020      	ands	r0, r4
 80114e2:	b2c0      	uxtb	r0, r0
 80114e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080114e8 <uxr_serialize_INFO_Payload>:
 80114e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114ec:	2202      	movs	r2, #2
 80114ee:	460c      	mov	r4, r1
 80114f0:	4605      	mov	r5, r0
 80114f2:	f7fb fae1 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80114f6:	2202      	movs	r2, #2
 80114f8:	18a1      	adds	r1, r4, r2
 80114fa:	4680      	mov	r8, r0
 80114fc:	4628      	mov	r0, r5
 80114fe:	f7fb fadb 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8011502:	7921      	ldrb	r1, [r4, #4]
 8011504:	4607      	mov	r7, r0
 8011506:	4628      	mov	r0, r5
 8011508:	f7fb fdcc 	bl	800d0a4 <ucdr_serialize_uint8_t>
 801150c:	7961      	ldrb	r1, [r4, #5]
 801150e:	4606      	mov	r6, r0
 8011510:	4628      	mov	r0, r5
 8011512:	f7fb fdc7 	bl	800d0a4 <ucdr_serialize_uint8_t>
 8011516:	ea08 0807 	and.w	r8, r8, r7
 801151a:	ea06 0608 	and.w	r6, r6, r8
 801151e:	4006      	ands	r6, r0
 8011520:	7a21      	ldrb	r1, [r4, #8]
 8011522:	4628      	mov	r0, r5
 8011524:	f7fb fd90 	bl	800d048 <ucdr_serialize_bool>
 8011528:	7a23      	ldrb	r3, [r4, #8]
 801152a:	b2f7      	uxtb	r7, r6
 801152c:	4606      	mov	r6, r0
 801152e:	b96b      	cbnz	r3, 801154c <uxr_serialize_INFO_Payload+0x64>
 8011530:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011534:	4628      	mov	r0, r5
 8011536:	f7fb fd87 	bl	800d048 <ucdr_serialize_bool>
 801153a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801153e:	4030      	ands	r0, r6
 8011540:	b2c6      	uxtb	r6, r0
 8011542:	b983      	cbnz	r3, 8011566 <uxr_serialize_INFO_Payload+0x7e>
 8011544:	ea06 0007 	and.w	r0, r6, r7
 8011548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801154c:	7b21      	ldrb	r1, [r4, #12]
 801154e:	4628      	mov	r0, r5
 8011550:	f7fb fda8 	bl	800d0a4 <ucdr_serialize_uint8_t>
 8011554:	b188      	cbz	r0, 801157a <uxr_serialize_INFO_Payload+0x92>
 8011556:	f104 010c 	add.w	r1, r4, #12
 801155a:	4628      	mov	r0, r5
 801155c:	f7ff fa06 	bl	801096c <uxr_serialize_ObjectVariant.part.0>
 8011560:	4030      	ands	r0, r6
 8011562:	b2c6      	uxtb	r6, r0
 8011564:	e7e4      	b.n	8011530 <uxr_serialize_INFO_Payload+0x48>
 8011566:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801156a:	4628      	mov	r0, r5
 801156c:	f7ff fdb2 	bl	80110d4 <uxr_serialize_ActivityInfoVariant>
 8011570:	4006      	ands	r6, r0
 8011572:	ea06 0007 	and.w	r0, r6, r7
 8011576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801157a:	4606      	mov	r6, r0
 801157c:	e7d8      	b.n	8011530 <uxr_serialize_INFO_Payload+0x48>
 801157e:	bf00      	nop

08011580 <uxr_serialize_READ_DATA_Payload>:
 8011580:	b570      	push	{r4, r5, r6, lr}
 8011582:	2202      	movs	r2, #2
 8011584:	4605      	mov	r5, r0
 8011586:	460e      	mov	r6, r1
 8011588:	f7fb fa96 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 801158c:	2202      	movs	r2, #2
 801158e:	18b1      	adds	r1, r6, r2
 8011590:	4604      	mov	r4, r0
 8011592:	4628      	mov	r0, r5
 8011594:	f7fb fa90 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 8011598:	1d31      	adds	r1, r6, #4
 801159a:	4004      	ands	r4, r0
 801159c:	4628      	mov	r0, r5
 801159e:	f7ff fe5d 	bl	801125c <uxr_serialize_ReadSpecification>
 80115a2:	b2e4      	uxtb	r4, r4
 80115a4:	4020      	ands	r0, r4
 80115a6:	bd70      	pop	{r4, r5, r6, pc}

080115a8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80115a8:	b570      	push	{r4, r5, r6, lr}
 80115aa:	2202      	movs	r2, #2
 80115ac:	4605      	mov	r5, r0
 80115ae:	460e      	mov	r6, r1
 80115b0:	f7fb fa82 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80115b4:	2202      	movs	r2, #2
 80115b6:	4604      	mov	r4, r0
 80115b8:	18b1      	adds	r1, r6, r2
 80115ba:	4628      	mov	r0, r5
 80115bc:	f7fb fa7c 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80115c0:	4020      	ands	r0, r4
 80115c2:	b2c0      	uxtb	r0, r0
 80115c4:	bd70      	pop	{r4, r5, r6, pc}
 80115c6:	bf00      	nop

080115c8 <uxr_serialize_ACKNACK_Payload>:
 80115c8:	b570      	push	{r4, r5, r6, lr}
 80115ca:	460c      	mov	r4, r1
 80115cc:	460e      	mov	r6, r1
 80115ce:	f834 1b02 	ldrh.w	r1, [r4], #2
 80115d2:	4605      	mov	r5, r0
 80115d4:	f7fb fd92 	bl	800d0fc <ucdr_serialize_uint16_t>
 80115d8:	2202      	movs	r2, #2
 80115da:	4621      	mov	r1, r4
 80115dc:	4604      	mov	r4, r0
 80115de:	4628      	mov	r0, r5
 80115e0:	f7fb fa6a 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80115e4:	7931      	ldrb	r1, [r6, #4]
 80115e6:	4004      	ands	r4, r0
 80115e8:	4628      	mov	r0, r5
 80115ea:	f7fb fd5b 	bl	800d0a4 <ucdr_serialize_uint8_t>
 80115ee:	b2e4      	uxtb	r4, r4
 80115f0:	4020      	ands	r0, r4
 80115f2:	bd70      	pop	{r4, r5, r6, pc}

080115f4 <uxr_deserialize_ACKNACK_Payload>:
 80115f4:	b570      	push	{r4, r5, r6, lr}
 80115f6:	4605      	mov	r5, r0
 80115f8:	460e      	mov	r6, r1
 80115fa:	f7fb fe7f 	bl	800d2fc <ucdr_deserialize_uint16_t>
 80115fe:	2202      	movs	r2, #2
 8011600:	18b1      	adds	r1, r6, r2
 8011602:	4604      	mov	r4, r0
 8011604:	4628      	mov	r0, r5
 8011606:	f7fb fabb 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 801160a:	1d31      	adds	r1, r6, #4
 801160c:	4004      	ands	r4, r0
 801160e:	4628      	mov	r0, r5
 8011610:	f7fb fd5e 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8011614:	b2e4      	uxtb	r4, r4
 8011616:	4020      	ands	r0, r4
 8011618:	bd70      	pop	{r4, r5, r6, pc}
 801161a:	bf00      	nop

0801161c <uxr_serialize_HEARTBEAT_Payload>:
 801161c:	b570      	push	{r4, r5, r6, lr}
 801161e:	460d      	mov	r5, r1
 8011620:	8809      	ldrh	r1, [r1, #0]
 8011622:	4606      	mov	r6, r0
 8011624:	f7fb fd6a 	bl	800d0fc <ucdr_serialize_uint16_t>
 8011628:	8869      	ldrh	r1, [r5, #2]
 801162a:	4604      	mov	r4, r0
 801162c:	4630      	mov	r0, r6
 801162e:	f7fb fd65 	bl	800d0fc <ucdr_serialize_uint16_t>
 8011632:	7929      	ldrb	r1, [r5, #4]
 8011634:	4004      	ands	r4, r0
 8011636:	4630      	mov	r0, r6
 8011638:	f7fb fd34 	bl	800d0a4 <ucdr_serialize_uint8_t>
 801163c:	b2e4      	uxtb	r4, r4
 801163e:	4020      	ands	r0, r4
 8011640:	bd70      	pop	{r4, r5, r6, pc}
 8011642:	bf00      	nop

08011644 <uxr_deserialize_HEARTBEAT_Payload>:
 8011644:	b570      	push	{r4, r5, r6, lr}
 8011646:	4605      	mov	r5, r0
 8011648:	460e      	mov	r6, r1
 801164a:	f7fb fe57 	bl	800d2fc <ucdr_deserialize_uint16_t>
 801164e:	1cb1      	adds	r1, r6, #2
 8011650:	4604      	mov	r4, r0
 8011652:	4628      	mov	r0, r5
 8011654:	f7fb fe52 	bl	800d2fc <ucdr_deserialize_uint16_t>
 8011658:	1d31      	adds	r1, r6, #4
 801165a:	4004      	ands	r4, r0
 801165c:	4628      	mov	r0, r5
 801165e:	f7fb fd37 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8011662:	b2e4      	uxtb	r4, r4
 8011664:	4020      	ands	r0, r4
 8011666:	bd70      	pop	{r4, r5, r6, pc}

08011668 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801166c:	4605      	mov	r5, r0
 801166e:	460e      	mov	r6, r1
 8011670:	f7fc fbe0 	bl	800de34 <ucdr_deserialize_int32_t>
 8011674:	1d31      	adds	r1, r6, #4
 8011676:	4607      	mov	r7, r0
 8011678:	4628      	mov	r0, r5
 801167a:	f7fc f859 	bl	800d730 <ucdr_deserialize_uint32_t>
 801167e:	f106 0108 	add.w	r1, r6, #8
 8011682:	4680      	mov	r8, r0
 8011684:	4628      	mov	r0, r5
 8011686:	f7fc fbd5 	bl	800de34 <ucdr_deserialize_int32_t>
 801168a:	f106 010c 	add.w	r1, r6, #12
 801168e:	4604      	mov	r4, r0
 8011690:	4628      	mov	r0, r5
 8011692:	f7fc f84d 	bl	800d730 <ucdr_deserialize_uint32_t>
 8011696:	ea07 0708 	and.w	r7, r7, r8
 801169a:	403c      	ands	r4, r7
 801169c:	f106 0110 	add.w	r1, r6, #16
 80116a0:	4004      	ands	r4, r0
 80116a2:	4628      	mov	r0, r5
 80116a4:	f7fc fbc6 	bl	800de34 <ucdr_deserialize_int32_t>
 80116a8:	f106 0114 	add.w	r1, r6, #20
 80116ac:	4607      	mov	r7, r0
 80116ae:	4628      	mov	r0, r5
 80116b0:	f7fc f83e 	bl	800d730 <ucdr_deserialize_uint32_t>
 80116b4:	b2e4      	uxtb	r4, r4
 80116b6:	403c      	ands	r4, r7
 80116b8:	4020      	ands	r0, r4
 80116ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116be:	bf00      	nop

080116c0 <uxr_serialize_SampleIdentity>:
 80116c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c4:	220c      	movs	r2, #12
 80116c6:	4604      	mov	r4, r0
 80116c8:	460d      	mov	r5, r1
 80116ca:	f7fb f9f5 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80116ce:	2203      	movs	r2, #3
 80116d0:	f105 010c 	add.w	r1, r5, #12
 80116d4:	4607      	mov	r7, r0
 80116d6:	4620      	mov	r0, r4
 80116d8:	f7fb f9ee 	bl	800cab8 <ucdr_serialize_array_uint8_t>
 80116dc:	7be9      	ldrb	r1, [r5, #15]
 80116de:	4680      	mov	r8, r0
 80116e0:	4620      	mov	r0, r4
 80116e2:	f7fb fcdf 	bl	800d0a4 <ucdr_serialize_uint8_t>
 80116e6:	6929      	ldr	r1, [r5, #16]
 80116e8:	4606      	mov	r6, r0
 80116ea:	4620      	mov	r0, r4
 80116ec:	f7fc fb0a 	bl	800dd04 <ucdr_serialize_int32_t>
 80116f0:	6969      	ldr	r1, [r5, #20]
 80116f2:	4603      	mov	r3, r0
 80116f4:	4620      	mov	r0, r4
 80116f6:	ea07 0708 	and.w	r7, r7, r8
 80116fa:	461c      	mov	r4, r3
 80116fc:	f7fb fee8 	bl	800d4d0 <ucdr_serialize_uint32_t>
 8011700:	403e      	ands	r6, r7
 8011702:	4034      	ands	r4, r6
 8011704:	4020      	ands	r0, r4
 8011706:	b2c0      	uxtb	r0, r0
 8011708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801170c <uxr_deserialize_SampleIdentity>:
 801170c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011710:	220c      	movs	r2, #12
 8011712:	4604      	mov	r4, r0
 8011714:	460d      	mov	r5, r1
 8011716:	f7fb fa33 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 801171a:	2203      	movs	r2, #3
 801171c:	f105 010c 	add.w	r1, r5, #12
 8011720:	4607      	mov	r7, r0
 8011722:	4620      	mov	r0, r4
 8011724:	f7fb fa2c 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 8011728:	f105 010f 	add.w	r1, r5, #15
 801172c:	4680      	mov	r8, r0
 801172e:	4620      	mov	r0, r4
 8011730:	f7fb fcce 	bl	800d0d0 <ucdr_deserialize_uint8_t>
 8011734:	f105 0110 	add.w	r1, r5, #16
 8011738:	4606      	mov	r6, r0
 801173a:	4620      	mov	r0, r4
 801173c:	f7fc fb7a 	bl	800de34 <ucdr_deserialize_int32_t>
 8011740:	f105 0114 	add.w	r1, r5, #20
 8011744:	4603      	mov	r3, r0
 8011746:	4620      	mov	r0, r4
 8011748:	ea07 0708 	and.w	r7, r7, r8
 801174c:	461c      	mov	r4, r3
 801174e:	f7fb ffef 	bl	800d730 <ucdr_deserialize_uint32_t>
 8011752:	403e      	ands	r6, r7
 8011754:	4034      	ands	r4, r6
 8011756:	4020      	ands	r0, r4
 8011758:	b2c0      	uxtb	r0, r0
 801175a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801175e:	bf00      	nop

08011760 <nereo_interfaces__msg__CommandVelocity__init>:
 8011760:	3800      	subs	r0, #0
 8011762:	bf18      	it	ne
 8011764:	2001      	movne	r0, #1
 8011766:	4770      	bx	lr

08011768 <nereo_interfaces__msg__CommandVelocity__fini>:
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop

0801176c <nereo_interfaces__msg__ThrusterStatuses__init>:
 801176c:	3800      	subs	r0, #0
 801176e:	bf18      	it	ne
 8011770:	2001      	movne	r0, #1
 8011772:	4770      	bx	lr

08011774 <nereo_interfaces__msg__ThrusterStatuses__fini>:
 8011774:	4770      	bx	lr
 8011776:	bf00      	nop

08011778 <rcl_client_get_rmw_handle>:
 8011778:	b118      	cbz	r0, 8011782 <rcl_client_get_rmw_handle+0xa>
 801177a:	6800      	ldr	r0, [r0, #0]
 801177c:	b108      	cbz	r0, 8011782 <rcl_client_get_rmw_handle+0xa>
 801177e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011782:	4770      	bx	lr

08011784 <rcl_send_request>:
 8011784:	b570      	push	{r4, r5, r6, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	b1e8      	cbz	r0, 80117c6 <rcl_send_request+0x42>
 801178a:	4604      	mov	r4, r0
 801178c:	6800      	ldr	r0, [r0, #0]
 801178e:	b1d0      	cbz	r0, 80117c6 <rcl_send_request+0x42>
 8011790:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011794:	b1bb      	cbz	r3, 80117c6 <rcl_send_request+0x42>
 8011796:	460e      	mov	r6, r1
 8011798:	b1d1      	cbz	r1, 80117d0 <rcl_send_request+0x4c>
 801179a:	4615      	mov	r5, r2
 801179c:	b1c2      	cbz	r2, 80117d0 <rcl_send_request+0x4c>
 801179e:	2105      	movs	r1, #5
 80117a0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80117a4:	f002 fd74 	bl	8014290 <__atomic_load_8>
 80117a8:	6823      	ldr	r3, [r4, #0]
 80117aa:	e9c5 0100 	strd	r0, r1, [r5]
 80117ae:	462a      	mov	r2, r5
 80117b0:	4631      	mov	r1, r6
 80117b2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80117b6:	f003 ff1f 	bl	80155f8 <rmw_send_request>
 80117ba:	4606      	mov	r6, r0
 80117bc:	b160      	cbz	r0, 80117d8 <rcl_send_request+0x54>
 80117be:	2601      	movs	r6, #1
 80117c0:	4630      	mov	r0, r6
 80117c2:	b002      	add	sp, #8
 80117c4:	bd70      	pop	{r4, r5, r6, pc}
 80117c6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80117ca:	4630      	mov	r0, r6
 80117cc:	b002      	add	sp, #8
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	260b      	movs	r6, #11
 80117d2:	4630      	mov	r0, r6
 80117d4:	b002      	add	sp, #8
 80117d6:	bd70      	pop	{r4, r5, r6, pc}
 80117d8:	6820      	ldr	r0, [r4, #0]
 80117da:	2105      	movs	r1, #5
 80117dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80117e0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80117e4:	9100      	str	r1, [sp, #0]
 80117e6:	f002 fdbf 	bl	8014368 <__atomic_exchange_8>
 80117ea:	4630      	mov	r0, r6
 80117ec:	b002      	add	sp, #8
 80117ee:	bd70      	pop	{r4, r5, r6, pc}

080117f0 <rcl_take_response>:
 80117f0:	b570      	push	{r4, r5, r6, lr}
 80117f2:	468e      	mov	lr, r1
 80117f4:	460c      	mov	r4, r1
 80117f6:	4616      	mov	r6, r2
 80117f8:	4605      	mov	r5, r0
 80117fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80117fe:	b08c      	sub	sp, #48	@ 0x30
 8011800:	f10d 0c18 	add.w	ip, sp, #24
 8011804:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011808:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801180c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011810:	b35d      	cbz	r5, 801186a <rcl_take_response+0x7a>
 8011812:	682b      	ldr	r3, [r5, #0]
 8011814:	b34b      	cbz	r3, 801186a <rcl_take_response+0x7a>
 8011816:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801181a:	b330      	cbz	r0, 801186a <rcl_take_response+0x7a>
 801181c:	b346      	cbz	r6, 8011870 <rcl_take_response+0x80>
 801181e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011878 <rcl_take_response+0x88>
 8011822:	2300      	movs	r3, #0
 8011824:	f88d 3007 	strb.w	r3, [sp, #7]
 8011828:	4632      	mov	r2, r6
 801182a:	f10d 0307 	add.w	r3, sp, #7
 801182e:	a902      	add	r1, sp, #8
 8011830:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011834:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011838:	f003 ffe6 	bl	8015808 <rmw_take_response>
 801183c:	4605      	mov	r5, r0
 801183e:	b9c8      	cbnz	r0, 8011874 <rcl_take_response+0x84>
 8011840:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011844:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011848:	2a00      	cmp	r2, #0
 801184a:	bf08      	it	eq
 801184c:	461d      	moveq	r5, r3
 801184e:	f10d 0e18 	add.w	lr, sp, #24
 8011852:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011856:	46a4      	mov	ip, r4
 8011858:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801185c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011860:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011864:	4628      	mov	r0, r5
 8011866:	b00c      	add	sp, #48	@ 0x30
 8011868:	bd70      	pop	{r4, r5, r6, pc}
 801186a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801186e:	e7ee      	b.n	801184e <rcl_take_response+0x5e>
 8011870:	250b      	movs	r5, #11
 8011872:	e7ec      	b.n	801184e <rcl_take_response+0x5e>
 8011874:	2501      	movs	r5, #1
 8011876:	e7ea      	b.n	801184e <rcl_take_response+0x5e>
	...

08011880 <rcl_client_is_valid>:
 8011880:	b130      	cbz	r0, 8011890 <rcl_client_is_valid+0x10>
 8011882:	6800      	ldr	r0, [r0, #0]
 8011884:	b120      	cbz	r0, 8011890 <rcl_client_is_valid+0x10>
 8011886:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801188a:	3800      	subs	r0, #0
 801188c:	bf18      	it	ne
 801188e:	2001      	movne	r0, #1
 8011890:	4770      	bx	lr
 8011892:	bf00      	nop

08011894 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011894:	280b      	cmp	r0, #11
 8011896:	dc0d      	bgt.n	80118b4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011898:	2800      	cmp	r0, #0
 801189a:	db09      	blt.n	80118b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801189c:	280b      	cmp	r0, #11
 801189e:	d807      	bhi.n	80118b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80118a0:	e8df f000 	tbb	[pc, r0]
 80118a4:	07060607 	.word	0x07060607
 80118a8:	06060606 	.word	0x06060606
 80118ac:	07070606 	.word	0x07070606
 80118b0:	2001      	movs	r0, #1
 80118b2:	4770      	bx	lr
 80118b4:	28cb      	cmp	r0, #203	@ 0xcb
 80118b6:	bf18      	it	ne
 80118b8:	2001      	movne	r0, #1
 80118ba:	4770      	bx	lr

080118bc <rcl_get_zero_initialized_context>:
 80118bc:	4a03      	ldr	r2, [pc, #12]	@ (80118cc <rcl_get_zero_initialized_context+0x10>)
 80118be:	4603      	mov	r3, r0
 80118c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80118c8:	4618      	mov	r0, r3
 80118ca:	4770      	bx	lr
 80118cc:	0801aa40 	.word	0x0801aa40

080118d0 <rcl_context_is_valid>:
 80118d0:	b118      	cbz	r0, 80118da <rcl_context_is_valid+0xa>
 80118d2:	6840      	ldr	r0, [r0, #4]
 80118d4:	3800      	subs	r0, #0
 80118d6:	bf18      	it	ne
 80118d8:	2001      	movne	r0, #1
 80118da:	4770      	bx	lr

080118dc <__cleanup_context>:
 80118dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118e0:	4606      	mov	r6, r0
 80118e2:	6800      	ldr	r0, [r0, #0]
 80118e4:	2300      	movs	r3, #0
 80118e6:	6073      	str	r3, [r6, #4]
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d049      	beq.n	8011980 <__cleanup_context+0xa4>
 80118ec:	6947      	ldr	r7, [r0, #20]
 80118ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80118f2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80118f6:	b137      	cbz	r7, 8011906 <__cleanup_context+0x2a>
 80118f8:	3014      	adds	r0, #20
 80118fa:	f000 f9bb 	bl	8011c74 <rcl_init_options_fini>
 80118fe:	4607      	mov	r7, r0
 8011900:	2800      	cmp	r0, #0
 8011902:	d144      	bne.n	801198e <__cleanup_context+0xb2>
 8011904:	6830      	ldr	r0, [r6, #0]
 8011906:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011908:	b143      	cbz	r3, 801191c <__cleanup_context+0x40>
 801190a:	3028      	adds	r0, #40	@ 0x28
 801190c:	f003 fcbc 	bl	8015288 <rmw_context_fini>
 8011910:	b118      	cbz	r0, 801191a <__cleanup_context+0x3e>
 8011912:	2f00      	cmp	r7, #0
 8011914:	d03e      	beq.n	8011994 <__cleanup_context+0xb8>
 8011916:	f7f9 fe27 	bl	800b568 <rcutils_reset_error>
 801191a:	6830      	ldr	r0, [r6, #0]
 801191c:	6a03      	ldr	r3, [r0, #32]
 801191e:	b1db      	cbz	r3, 8011958 <__cleanup_context+0x7c>
 8011920:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011924:	2a01      	cmp	r2, #1
 8011926:	f17c 0100 	sbcs.w	r1, ip, #0
 801192a:	db11      	blt.n	8011950 <__cleanup_context+0x74>
 801192c:	2400      	movs	r4, #0
 801192e:	4625      	mov	r5, r4
 8011930:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011934:	4649      	mov	r1, r9
 8011936:	b1b8      	cbz	r0, 8011968 <__cleanup_context+0x8c>
 8011938:	47c0      	blx	r8
 801193a:	6833      	ldr	r3, [r6, #0]
 801193c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011940:	3401      	adds	r4, #1
 8011942:	f145 0500 	adc.w	r5, r5, #0
 8011946:	4294      	cmp	r4, r2
 8011948:	eb75 010c 	sbcs.w	r1, r5, ip
 801194c:	6a1b      	ldr	r3, [r3, #32]
 801194e:	dbef      	blt.n	8011930 <__cleanup_context+0x54>
 8011950:	4618      	mov	r0, r3
 8011952:	4649      	mov	r1, r9
 8011954:	47c0      	blx	r8
 8011956:	6830      	ldr	r0, [r6, #0]
 8011958:	4649      	mov	r1, r9
 801195a:	47c0      	blx	r8
 801195c:	2300      	movs	r3, #0
 801195e:	e9c6 3300 	strd	r3, r3, [r6]
 8011962:	4638      	mov	r0, r7
 8011964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011968:	3401      	adds	r4, #1
 801196a:	f145 0500 	adc.w	r5, r5, #0
 801196e:	4294      	cmp	r4, r2
 8011970:	eb75 010c 	sbcs.w	r1, r5, ip
 8011974:	dbdc      	blt.n	8011930 <__cleanup_context+0x54>
 8011976:	4618      	mov	r0, r3
 8011978:	4649      	mov	r1, r9
 801197a:	47c0      	blx	r8
 801197c:	6830      	ldr	r0, [r6, #0]
 801197e:	e7eb      	b.n	8011958 <__cleanup_context+0x7c>
 8011980:	4607      	mov	r7, r0
 8011982:	2300      	movs	r3, #0
 8011984:	e9c6 3300 	strd	r3, r3, [r6]
 8011988:	4638      	mov	r0, r7
 801198a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801198e:	f7f9 fdeb 	bl	800b568 <rcutils_reset_error>
 8011992:	e7b7      	b.n	8011904 <__cleanup_context+0x28>
 8011994:	f7ff ff7e 	bl	8011894 <rcl_convert_rmw_ret_to_rcl_ret>
 8011998:	4607      	mov	r7, r0
 801199a:	e7bc      	b.n	8011916 <__cleanup_context+0x3a>

0801199c <rcl_init>:
 801199c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a0:	1e05      	subs	r5, r0, #0
 80119a2:	b09e      	sub	sp, #120	@ 0x78
 80119a4:	460e      	mov	r6, r1
 80119a6:	4690      	mov	r8, r2
 80119a8:	461f      	mov	r7, r3
 80119aa:	f340 809c 	ble.w	8011ae6 <rcl_init+0x14a>
 80119ae:	2900      	cmp	r1, #0
 80119b0:	f000 809c 	beq.w	8011aec <rcl_init+0x150>
 80119b4:	f1a1 0e04 	sub.w	lr, r1, #4
 80119b8:	f04f 0c00 	mov.w	ip, #0
 80119bc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80119c0:	f10c 0c01 	add.w	ip, ip, #1
 80119c4:	2c00      	cmp	r4, #0
 80119c6:	f000 8091 	beq.w	8011aec <rcl_init+0x150>
 80119ca:	4565      	cmp	r5, ip
 80119cc:	d1f6      	bne.n	80119bc <rcl_init+0x20>
 80119ce:	f1b8 0f00 	cmp.w	r8, #0
 80119d2:	f000 808b 	beq.w	8011aec <rcl_init+0x150>
 80119d6:	f8d8 4000 	ldr.w	r4, [r8]
 80119da:	2c00      	cmp	r4, #0
 80119dc:	f000 8086 	beq.w	8011aec <rcl_init+0x150>
 80119e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119e2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80119e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80119ea:	6823      	ldr	r3, [r4, #0]
 80119ec:	f8cc 3000 	str.w	r3, [ip]
 80119f0:	a819      	add	r0, sp, #100	@ 0x64
 80119f2:	f7f9 fd95 	bl	800b520 <rcutils_allocator_is_valid>
 80119f6:	2800      	cmp	r0, #0
 80119f8:	d078      	beq.n	8011aec <rcl_init+0x150>
 80119fa:	2f00      	cmp	r7, #0
 80119fc:	d076      	beq.n	8011aec <rcl_init+0x150>
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d178      	bne.n	8011af6 <rcl_init+0x15a>
 8011a04:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011a08:	2178      	movs	r1, #120	@ 0x78
 8011a0a:	2001      	movs	r0, #1
 8011a0c:	4798      	blx	r3
 8011a0e:	4604      	mov	r4, r0
 8011a10:	6038      	str	r0, [r7, #0]
 8011a12:	2800      	cmp	r0, #0
 8011a14:	f000 80b6 	beq.w	8011b84 <rcl_init+0x1e8>
 8011a18:	a802      	add	r0, sp, #8
 8011a1a:	f002 ff89 	bl	8014930 <rmw_get_zero_initialized_context>
 8011a1e:	a902      	add	r1, sp, #8
 8011a20:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011a24:	2250      	movs	r2, #80	@ 0x50
 8011a26:	ac19      	add	r4, sp, #100	@ 0x64
 8011a28:	f007 fa55 	bl	8018ed6 <memcpy>
 8011a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a2e:	f8d7 e000 	ldr.w	lr, [r7]
 8011a32:	46f4      	mov	ip, lr
 8011a34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a38:	6823      	ldr	r3, [r4, #0]
 8011a3a:	f8cc 3000 	str.w	r3, [ip]
 8011a3e:	f10e 0114 	add.w	r1, lr, #20
 8011a42:	4640      	mov	r0, r8
 8011a44:	f000 f940 	bl	8011cc8 <rcl_init_options_copy>
 8011a48:	4604      	mov	r4, r0
 8011a4a:	2800      	cmp	r0, #0
 8011a4c:	d144      	bne.n	8011ad8 <rcl_init+0x13c>
 8011a4e:	f8d7 9000 	ldr.w	r9, [r7]
 8011a52:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011a56:	f8c9 0020 	str.w	r0, [r9, #32]
 8011a5a:	f8c9 5018 	str.w	r5, [r9, #24]
 8011a5e:	f8c9 801c 	str.w	r8, [r9, #28]
 8011a62:	2d00      	cmp	r5, #0
 8011a64:	d04e      	beq.n	8011b04 <rcl_init+0x168>
 8011a66:	2e00      	cmp	r6, #0
 8011a68:	d04c      	beq.n	8011b04 <rcl_init+0x168>
 8011a6a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011a6e:	2104      	movs	r1, #4
 8011a70:	4628      	mov	r0, r5
 8011a72:	4798      	blx	r3
 8011a74:	f8c9 0020 	str.w	r0, [r9, #32]
 8011a78:	f8d7 9000 	ldr.w	r9, [r7]
 8011a7c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011a80:	46ca      	mov	sl, r9
 8011a82:	b343      	cbz	r3, 8011ad6 <rcl_init+0x13a>
 8011a84:	2d01      	cmp	r5, #1
 8011a86:	f178 0300 	sbcs.w	r3, r8, #0
 8011a8a:	db3b      	blt.n	8011b04 <rcl_init+0x168>
 8011a8c:	2400      	movs	r4, #0
 8011a8e:	3e04      	subs	r6, #4
 8011a90:	46a1      	mov	r9, r4
 8011a92:	e00b      	b.n	8011aac <rcl_init+0x110>
 8011a94:	6831      	ldr	r1, [r6, #0]
 8011a96:	f007 fa1e 	bl	8018ed6 <memcpy>
 8011a9a:	3401      	adds	r4, #1
 8011a9c:	f149 0900 	adc.w	r9, r9, #0
 8011aa0:	45c8      	cmp	r8, r9
 8011aa2:	bf08      	it	eq
 8011aa4:	42a5      	cmpeq	r5, r4
 8011aa6:	d02b      	beq.n	8011b00 <rcl_init+0x164>
 8011aa8:	f8d7 a000 	ldr.w	sl, [r7]
 8011aac:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011ab0:	f7ee fba6 	bl	8000200 <strlen>
 8011ab4:	1c42      	adds	r2, r0, #1
 8011ab6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ab8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011aba:	f8da a020 	ldr.w	sl, [sl, #32]
 8011abe:	9201      	str	r2, [sp, #4]
 8011ac0:	4610      	mov	r0, r2
 8011ac2:	4798      	blx	r3
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011aca:	6a1b      	ldr	r3, [r3, #32]
 8011acc:	9a01      	ldr	r2, [sp, #4]
 8011ace:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011ad2:	2800      	cmp	r0, #0
 8011ad4:	d1de      	bne.n	8011a94 <rcl_init+0xf8>
 8011ad6:	240a      	movs	r4, #10
 8011ad8:	4638      	mov	r0, r7
 8011ada:	f7ff feff 	bl	80118dc <__cleanup_context>
 8011ade:	4620      	mov	r0, r4
 8011ae0:	b01e      	add	sp, #120	@ 0x78
 8011ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ae6:	2900      	cmp	r1, #0
 8011ae8:	f43f af71 	beq.w	80119ce <rcl_init+0x32>
 8011aec:	240b      	movs	r4, #11
 8011aee:	4620      	mov	r0, r4
 8011af0:	b01e      	add	sp, #120	@ 0x78
 8011af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011af6:	2464      	movs	r4, #100	@ 0x64
 8011af8:	4620      	mov	r0, r4
 8011afa:	b01e      	add	sp, #120	@ 0x78
 8011afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b00:	f8d7 9000 	ldr.w	r9, [r7]
 8011b04:	4926      	ldr	r1, [pc, #152]	@ (8011ba0 <rcl_init+0x204>)
 8011b06:	680b      	ldr	r3, [r1, #0]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	d036      	beq.n	8011b7a <rcl_init+0x1de>
 8011b0c:	600b      	str	r3, [r1, #0]
 8011b0e:	461a      	mov	r2, r3
 8011b10:	2400      	movs	r4, #0
 8011b12:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011b16:	607b      	str	r3, [r7, #4]
 8011b18:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011b1a:	3301      	adds	r3, #1
 8011b1c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8011b20:	d034      	beq.n	8011b8c <rcl_init+0x1f0>
 8011b22:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8011b26:	b93b      	cbnz	r3, 8011b38 <rcl_init+0x19c>
 8011b28:	3030      	adds	r0, #48	@ 0x30
 8011b2a:	f000 f939 	bl	8011da0 <rcl_get_localhost_only>
 8011b2e:	4604      	mov	r4, r0
 8011b30:	2800      	cmp	r0, #0
 8011b32:	d1d1      	bne.n	8011ad8 <rcl_init+0x13c>
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	6958      	ldr	r0, [r3, #20]
 8011b38:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011b3a:	aa18      	add	r2, sp, #96	@ 0x60
 8011b3c:	a917      	add	r1, sp, #92	@ 0x5c
 8011b3e:	f001 f841 	bl	8012bc4 <rcl_validate_enclave_name>
 8011b42:	4604      	mov	r4, r0
 8011b44:	2800      	cmp	r0, #0
 8011b46:	d1c7      	bne.n	8011ad8 <rcl_init+0x13c>
 8011b48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011b4a:	b9eb      	cbnz	r3, 8011b88 <rcl_init+0x1ec>
 8011b4c:	6839      	ldr	r1, [r7, #0]
 8011b4e:	694b      	ldr	r3, [r1, #20]
 8011b50:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8011b52:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011b56:	f000 fc3d 	bl	80123d4 <rcl_get_security_options_from_environment>
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	2800      	cmp	r0, #0
 8011b5e:	d1bb      	bne.n	8011ad8 <rcl_init+0x13c>
 8011b60:	6839      	ldr	r1, [r7, #0]
 8011b62:	6948      	ldr	r0, [r1, #20]
 8011b64:	3128      	adds	r1, #40	@ 0x28
 8011b66:	3018      	adds	r0, #24
 8011b68:	f003 fa58 	bl	801501c <rmw_init>
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d0bd      	beq.n	8011aee <rcl_init+0x152>
 8011b72:	f7ff fe8f 	bl	8011894 <rcl_convert_rmw_ret_to_rcl_ret>
 8011b76:	4604      	mov	r4, r0
 8011b78:	e7ae      	b.n	8011ad8 <rcl_init+0x13c>
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	461c      	mov	r4, r3
 8011b7e:	600a      	str	r2, [r1, #0]
 8011b80:	4613      	mov	r3, r2
 8011b82:	e7c6      	b.n	8011b12 <rcl_init+0x176>
 8011b84:	240a      	movs	r4, #10
 8011b86:	e7b2      	b.n	8011aee <rcl_init+0x152>
 8011b88:	2401      	movs	r4, #1
 8011b8a:	e7a5      	b.n	8011ad8 <rcl_init+0x13c>
 8011b8c:	3024      	adds	r0, #36	@ 0x24
 8011b8e:	f005 feeb 	bl	8017968 <rcl_get_default_domain_id>
 8011b92:	4604      	mov	r4, r0
 8011b94:	2800      	cmp	r0, #0
 8011b96:	d19f      	bne.n	8011ad8 <rcl_init+0x13c>
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	6958      	ldr	r0, [r3, #20]
 8011b9c:	e7c1      	b.n	8011b22 <rcl_init+0x186>
 8011b9e:	bf00      	nop
 8011ba0:	200153ac 	.word	0x200153ac

08011ba4 <rcl_get_zero_initialized_init_options>:
 8011ba4:	2000      	movs	r0, #0
 8011ba6:	4770      	bx	lr

08011ba8 <rcl_init_options_init>:
 8011ba8:	b084      	sub	sp, #16
 8011baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bac:	b097      	sub	sp, #92	@ 0x5c
 8011bae:	ae1d      	add	r6, sp, #116	@ 0x74
 8011bb0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	d058      	beq.n	8011c6a <rcl_init_options_init+0xc2>
 8011bb8:	6803      	ldr	r3, [r0, #0]
 8011bba:	4605      	mov	r5, r0
 8011bbc:	b133      	cbz	r3, 8011bcc <rcl_init_options_init+0x24>
 8011bbe:	2464      	movs	r4, #100	@ 0x64
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	b017      	add	sp, #92	@ 0x5c
 8011bc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011bc8:	b004      	add	sp, #16
 8011bca:	4770      	bx	lr
 8011bcc:	4630      	mov	r0, r6
 8011bce:	f7f9 fca7 	bl	800b520 <rcutils_allocator_is_valid>
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	d049      	beq.n	8011c6a <rcl_init_options_init+0xc2>
 8011bd6:	46b4      	mov	ip, r6
 8011bd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011bdc:	ac11      	add	r4, sp, #68	@ 0x44
 8011bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011be0:	f8dc 3000 	ldr.w	r3, [ip]
 8011be4:	6023      	str	r3, [r4, #0]
 8011be6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8011be8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011bea:	2050      	movs	r0, #80	@ 0x50
 8011bec:	4798      	blx	r3
 8011bee:	4604      	mov	r4, r0
 8011bf0:	6028      	str	r0, [r5, #0]
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	d03b      	beq.n	8011c6e <rcl_init_options_init+0xc6>
 8011bf6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8011bfa:	4686      	mov	lr, r0
 8011bfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011c00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011c04:	f8dc 3000 	ldr.w	r3, [ip]
 8011c08:	f8ce 3000 	str.w	r3, [lr]
 8011c0c:	a802      	add	r0, sp, #8
 8011c0e:	f002 fe9f 	bl	8014950 <rmw_get_zero_initialized_init_options>
 8011c12:	f10d 0e08 	add.w	lr, sp, #8
 8011c16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c1a:	f104 0c18 	add.w	ip, r4, #24
 8011c1e:	682f      	ldr	r7, [r5, #0]
 8011c20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c34:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011c38:	ac20      	add	r4, sp, #128	@ 0x80
 8011c3a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011c3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011c42:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011c46:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8011c4a:	f107 0018 	add.w	r0, r7, #24
 8011c4e:	f003 f8ed 	bl	8014e2c <rmw_init_options_init>
 8011c52:	4604      	mov	r4, r0
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d0b3      	beq.n	8011bc0 <rcl_init_options_init+0x18>
 8011c58:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8011c5a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011c5c:	6828      	ldr	r0, [r5, #0]
 8011c5e:	4798      	blx	r3
 8011c60:	4620      	mov	r0, r4
 8011c62:	f7ff fe17 	bl	8011894 <rcl_convert_rmw_ret_to_rcl_ret>
 8011c66:	4604      	mov	r4, r0
 8011c68:	e7aa      	b.n	8011bc0 <rcl_init_options_init+0x18>
 8011c6a:	240b      	movs	r4, #11
 8011c6c:	e7a8      	b.n	8011bc0 <rcl_init_options_init+0x18>
 8011c6e:	240a      	movs	r4, #10
 8011c70:	e7a6      	b.n	8011bc0 <rcl_init_options_init+0x18>
 8011c72:	bf00      	nop

08011c74 <rcl_init_options_fini>:
 8011c74:	b530      	push	{r4, r5, lr}
 8011c76:	b087      	sub	sp, #28
 8011c78:	b1f0      	cbz	r0, 8011cb8 <rcl_init_options_fini+0x44>
 8011c7a:	6803      	ldr	r3, [r0, #0]
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	b1db      	cbz	r3, 8011cb8 <rcl_init_options_fini+0x44>
 8011c80:	469c      	mov	ip, r3
 8011c82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011c86:	f10d 0e04 	add.w	lr, sp, #4
 8011c8a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011c8e:	f8dc 3000 	ldr.w	r3, [ip]
 8011c92:	f8ce 3000 	str.w	r3, [lr]
 8011c96:	a801      	add	r0, sp, #4
 8011c98:	f7f9 fc42 	bl	800b520 <rcutils_allocator_is_valid>
 8011c9c:	b160      	cbz	r0, 8011cb8 <rcl_init_options_fini+0x44>
 8011c9e:	6820      	ldr	r0, [r4, #0]
 8011ca0:	3018      	adds	r0, #24
 8011ca2:	f003 f973 	bl	8014f8c <rmw_init_options_fini>
 8011ca6:	4605      	mov	r5, r0
 8011ca8:	b950      	cbnz	r0, 8011cc0 <rcl_init_options_fini+0x4c>
 8011caa:	6820      	ldr	r0, [r4, #0]
 8011cac:	9b02      	ldr	r3, [sp, #8]
 8011cae:	9905      	ldr	r1, [sp, #20]
 8011cb0:	4798      	blx	r3
 8011cb2:	4628      	mov	r0, r5
 8011cb4:	b007      	add	sp, #28
 8011cb6:	bd30      	pop	{r4, r5, pc}
 8011cb8:	250b      	movs	r5, #11
 8011cba:	4628      	mov	r0, r5
 8011cbc:	b007      	add	sp, #28
 8011cbe:	bd30      	pop	{r4, r5, pc}
 8011cc0:	f7ff fde8 	bl	8011894 <rcl_convert_rmw_ret_to_rcl_ret>
 8011cc4:	4605      	mov	r5, r0
 8011cc6:	e7f8      	b.n	8011cba <rcl_init_options_fini+0x46>

08011cc8 <rcl_init_options_copy>:
 8011cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ccc:	b094      	sub	sp, #80	@ 0x50
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	d058      	beq.n	8011d84 <rcl_init_options_copy+0xbc>
 8011cd2:	4604      	mov	r4, r0
 8011cd4:	6800      	ldr	r0, [r0, #0]
 8011cd6:	2800      	cmp	r0, #0
 8011cd8:	d054      	beq.n	8011d84 <rcl_init_options_copy+0xbc>
 8011cda:	460e      	mov	r6, r1
 8011cdc:	f7f9 fc20 	bl	800b520 <rcutils_allocator_is_valid>
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	d04f      	beq.n	8011d84 <rcl_init_options_copy+0xbc>
 8011ce4:	2e00      	cmp	r6, #0
 8011ce6:	d04d      	beq.n	8011d84 <rcl_init_options_copy+0xbc>
 8011ce8:	6833      	ldr	r3, [r6, #0]
 8011cea:	b123      	cbz	r3, 8011cf6 <rcl_init_options_copy+0x2e>
 8011cec:	2464      	movs	r4, #100	@ 0x64
 8011cee:	4620      	mov	r0, r4
 8011cf0:	b014      	add	sp, #80	@ 0x50
 8011cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cf6:	6827      	ldr	r7, [r4, #0]
 8011cf8:	46bc      	mov	ip, r7
 8011cfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011cfe:	ad0f      	add	r5, sp, #60	@ 0x3c
 8011d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011d02:	f8dc 3000 	ldr.w	r3, [ip]
 8011d06:	f8d7 8000 	ldr.w	r8, [r7]
 8011d0a:	602b      	str	r3, [r5, #0]
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	2050      	movs	r0, #80	@ 0x50
 8011d10:	47c0      	blx	r8
 8011d12:	4605      	mov	r5, r0
 8011d14:	6030      	str	r0, [r6, #0]
 8011d16:	b3d0      	cbz	r0, 8011d8e <rcl_init_options_copy+0xc6>
 8011d18:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8011d1c:	4686      	mov	lr, r0
 8011d1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011d26:	f8dc 3000 	ldr.w	r3, [ip]
 8011d2a:	f8ce 3000 	str.w	r3, [lr]
 8011d2e:	4668      	mov	r0, sp
 8011d30:	f002 fe0e 	bl	8014950 <rmw_get_zero_initialized_init_options>
 8011d34:	46ee      	mov	lr, sp
 8011d36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d3a:	f105 0c18 	add.w	ip, r5, #24
 8011d3e:	6824      	ldr	r4, [r4, #0]
 8011d40:	6835      	ldr	r5, [r6, #0]
 8011d42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d56:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011d5a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011d5e:	f104 0018 	add.w	r0, r4, #24
 8011d62:	f105 0118 	add.w	r1, r5, #24
 8011d66:	f003 f8c9 	bl	8014efc <rmw_init_options_copy>
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	d0be      	beq.n	8011cee <rcl_init_options_copy+0x26>
 8011d70:	f7f9 fbe4 	bl	800b53c <rcutils_get_error_string>
 8011d74:	f7f9 fbf8 	bl	800b568 <rcutils_reset_error>
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f7ff ff7b 	bl	8011c74 <rcl_init_options_fini>
 8011d7e:	b140      	cbz	r0, 8011d92 <rcl_init_options_copy+0xca>
 8011d80:	4604      	mov	r4, r0
 8011d82:	e7b4      	b.n	8011cee <rcl_init_options_copy+0x26>
 8011d84:	240b      	movs	r4, #11
 8011d86:	4620      	mov	r0, r4
 8011d88:	b014      	add	sp, #80	@ 0x50
 8011d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d8e:	240a      	movs	r4, #10
 8011d90:	e7ad      	b.n	8011cee <rcl_init_options_copy+0x26>
 8011d92:	4620      	mov	r0, r4
 8011d94:	b014      	add	sp, #80	@ 0x50
 8011d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d9a:	f7ff bd7b 	b.w	8011894 <rcl_convert_rmw_ret_to_rcl_ret>
 8011d9e:	bf00      	nop

08011da0 <rcl_get_localhost_only>:
 8011da0:	b510      	push	{r4, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	2300      	movs	r3, #0
 8011da6:	9301      	str	r3, [sp, #4]
 8011da8:	b1b8      	cbz	r0, 8011dda <rcl_get_localhost_only+0x3a>
 8011daa:	4604      	mov	r4, r0
 8011dac:	a901      	add	r1, sp, #4
 8011dae:	480c      	ldr	r0, [pc, #48]	@ (8011de0 <rcl_get_localhost_only+0x40>)
 8011db0:	f002 fb12 	bl	80143d8 <rcutils_get_env>
 8011db4:	b110      	cbz	r0, 8011dbc <rcl_get_localhost_only+0x1c>
 8011db6:	2001      	movs	r0, #1
 8011db8:	b002      	add	sp, #8
 8011dba:	bd10      	pop	{r4, pc}
 8011dbc:	9b01      	ldr	r3, [sp, #4]
 8011dbe:	b113      	cbz	r3, 8011dc6 <rcl_get_localhost_only+0x26>
 8011dc0:	781a      	ldrb	r2, [r3, #0]
 8011dc2:	2a31      	cmp	r2, #49	@ 0x31
 8011dc4:	d004      	beq.n	8011dd0 <rcl_get_localhost_only+0x30>
 8011dc6:	2302      	movs	r3, #2
 8011dc8:	2000      	movs	r0, #0
 8011dca:	7023      	strb	r3, [r4, #0]
 8011dcc:	b002      	add	sp, #8
 8011dce:	bd10      	pop	{r4, pc}
 8011dd0:	785b      	ldrb	r3, [r3, #1]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d1f7      	bne.n	8011dc6 <rcl_get_localhost_only+0x26>
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	e7f6      	b.n	8011dc8 <rcl_get_localhost_only+0x28>
 8011dda:	200b      	movs	r0, #11
 8011ddc:	b002      	add	sp, #8
 8011dde:	bd10      	pop	{r4, pc}
 8011de0:	0801aa48 	.word	0x0801aa48

08011de4 <rcl_get_zero_initialized_node>:
 8011de4:	4a03      	ldr	r2, [pc, #12]	@ (8011df4 <rcl_get_zero_initialized_node+0x10>)
 8011de6:	4603      	mov	r3, r0
 8011de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011dec:	e883 0003 	stmia.w	r3, {r0, r1}
 8011df0:	4618      	mov	r0, r3
 8011df2:	4770      	bx	lr
 8011df4:	0801aa6c 	.word	0x0801aa6c

08011df8 <rcl_node_init>:
 8011df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dfc:	b0a9      	sub	sp, #164	@ 0xa4
 8011dfe:	4604      	mov	r4, r0
 8011e00:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8011e04:	a823      	add	r0, sp, #140	@ 0x8c
 8011e06:	460e      	mov	r6, r1
 8011e08:	4615      	mov	r5, r2
 8011e0a:	461f      	mov	r7, r3
 8011e0c:	f005 ffd4 	bl	8017db8 <rcl_guard_condition_get_default_options>
 8011e10:	f1b8 0f00 	cmp.w	r8, #0
 8011e14:	f000 80e6 	beq.w	8011fe4 <rcl_node_init+0x1ec>
 8011e18:	4640      	mov	r0, r8
 8011e1a:	f7f9 fb81 	bl	800b520 <rcutils_allocator_is_valid>
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	f000 80e0 	beq.w	8011fe4 <rcl_node_init+0x1ec>
 8011e24:	2e00      	cmp	r6, #0
 8011e26:	f000 80dd 	beq.w	8011fe4 <rcl_node_init+0x1ec>
 8011e2a:	2d00      	cmp	r5, #0
 8011e2c:	f000 80da 	beq.w	8011fe4 <rcl_node_init+0x1ec>
 8011e30:	2c00      	cmp	r4, #0
 8011e32:	f000 80d7 	beq.w	8011fe4 <rcl_node_init+0x1ec>
 8011e36:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011e3a:	f1b9 0f00 	cmp.w	r9, #0
 8011e3e:	f040 80fd 	bne.w	801203c <rcl_node_init+0x244>
 8011e42:	2f00      	cmp	r7, #0
 8011e44:	f000 80ce 	beq.w	8011fe4 <rcl_node_init+0x1ec>
 8011e48:	4638      	mov	r0, r7
 8011e4a:	f7ff fd41 	bl	80118d0 <rcl_context_is_valid>
 8011e4e:	4682      	mov	sl, r0
 8011e50:	2800      	cmp	r0, #0
 8011e52:	f000 80cd 	beq.w	8011ff0 <rcl_node_init+0x1f8>
 8011e56:	464a      	mov	r2, r9
 8011e58:	a922      	add	r1, sp, #136	@ 0x88
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8011e60:	f002 ff18 	bl	8014c94 <rmw_validate_node_name>
 8011e64:	4681      	mov	r9, r0
 8011e66:	2800      	cmp	r0, #0
 8011e68:	f040 80be 	bne.w	8011fe8 <rcl_node_init+0x1f0>
 8011e6c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	f040 80f0 	bne.w	8012054 <rcl_node_init+0x25c>
 8011e74:	4628      	mov	r0, r5
 8011e76:	f7ee f9c3 	bl	8000200 <strlen>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	f040 80bb 	bne.w	8011ff6 <rcl_node_init+0x1fe>
 8011e80:	4d7c      	ldr	r5, [pc, #496]	@ (8012074 <rcl_node_init+0x27c>)
 8011e82:	a922      	add	r1, sp, #136	@ 0x88
 8011e84:	2200      	movs	r2, #0
 8011e86:	4628      	mov	r0, r5
 8011e88:	f002 fee6 	bl	8014c58 <rmw_validate_namespace>
 8011e8c:	4681      	mov	r9, r0
 8011e8e:	2800      	cmp	r0, #0
 8011e90:	f040 80aa 	bne.w	8011fe8 <rcl_node_init+0x1f0>
 8011e94:	4682      	mov	sl, r0
 8011e96:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	f040 80e0 	bne.w	801205e <rcl_node_init+0x266>
 8011e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8011ea2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011ea6:	2078      	movs	r0, #120	@ 0x78
 8011ea8:	4798      	blx	r3
 8011eaa:	4681      	mov	r9, r0
 8011eac:	6060      	str	r0, [r4, #4]
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	f000 80ca 	beq.w	8012048 <rcl_node_init+0x250>
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8011ebc:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8011ec0:	a808      	add	r0, sp, #32
 8011ec2:	f000 f907 	bl	80120d4 <rcl_node_get_default_options>
 8011ec6:	a908      	add	r1, sp, #32
 8011ec8:	4648      	mov	r0, r9
 8011eca:	2268      	movs	r2, #104	@ 0x68
 8011ecc:	f007 f803 	bl	8018ed6 <memcpy>
 8011ed0:	6861      	ldr	r1, [r4, #4]
 8011ed2:	6027      	str	r7, [r4, #0]
 8011ed4:	4640      	mov	r0, r8
 8011ed6:	f000 f90b 	bl	80120f0 <rcl_node_options_copy>
 8011eda:	2800      	cmp	r0, #0
 8011edc:	d158      	bne.n	8011f90 <rcl_node_init+0x198>
 8011ede:	4628      	mov	r0, r5
 8011ee0:	f7ee f98e 	bl	8000200 <strlen>
 8011ee4:	4428      	add	r0, r5
 8011ee6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8011eea:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8011eee:	2b2f      	cmp	r3, #47	@ 0x2f
 8011ef0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011ef4:	9300      	str	r3, [sp, #0]
 8011ef6:	bf0c      	ite	eq
 8011ef8:	4b5f      	ldreq	r3, [pc, #380]	@ (8012078 <rcl_node_init+0x280>)
 8011efa:	4b60      	ldrne	r3, [pc, #384]	@ (801207c <rcl_node_init+0x284>)
 8011efc:	9302      	str	r3, [sp, #8]
 8011efe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011f02:	9301      	str	r3, [sp, #4]
 8011f04:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011f08:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011f0c:	f002 fa8c 	bl	8014428 <rcutils_format_string_limit>
 8011f10:	6823      	ldr	r3, [r4, #0]
 8011f12:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8011f16:	6818      	ldr	r0, [r3, #0]
 8011f18:	4631      	mov	r1, r6
 8011f1a:	3028      	adds	r0, #40	@ 0x28
 8011f1c:	462a      	mov	r2, r5
 8011f1e:	6866      	ldr	r6, [r4, #4]
 8011f20:	f003 fad0 	bl	80154c4 <rmw_create_node>
 8011f24:	6863      	ldr	r3, [r4, #4]
 8011f26:	66b0      	str	r0, [r6, #104]	@ 0x68
 8011f28:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	d032      	beq.n	8011f94 <rcl_node_init+0x19c>
 8011f2e:	f003 fb5d 	bl	80155ec <rmw_node_get_graph_guard_condition>
 8011f32:	4681      	mov	r9, r0
 8011f34:	b360      	cbz	r0, 8011f90 <rcl_node_init+0x198>
 8011f36:	f8d8 3000 	ldr.w	r3, [r8]
 8011f3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011f3e:	6866      	ldr	r6, [r4, #4]
 8011f40:	2008      	movs	r0, #8
 8011f42:	4798      	blx	r3
 8011f44:	6863      	ldr	r3, [r4, #4]
 8011f46:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8011f48:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8011f4c:	f1bb 0f00 	cmp.w	fp, #0
 8011f50:	d020      	beq.n	8011f94 <rcl_node_init+0x19c>
 8011f52:	a806      	add	r0, sp, #24
 8011f54:	f005 fea0 	bl	8017c98 <rcl_get_zero_initialized_guard_condition>
 8011f58:	a806      	add	r0, sp, #24
 8011f5a:	c803      	ldmia	r0, {r0, r1}
 8011f5c:	6863      	ldr	r3, [r4, #4]
 8011f5e:	46c4      	mov	ip, r8
 8011f60:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8011f64:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011f68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011f6c:	ae23      	add	r6, sp, #140	@ 0x8c
 8011f6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011f70:	f8dc 3000 	ldr.w	r3, [ip]
 8011f74:	6033      	str	r3, [r6, #0]
 8011f76:	ab28      	add	r3, sp, #160	@ 0xa0
 8011f78:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8011f7c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011f80:	4649      	mov	r1, r9
 8011f82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011f84:	463a      	mov	r2, r7
 8011f86:	4670      	mov	r0, lr
 8011f88:	f005 fe90 	bl	8017cac <rcl_guard_condition_init_from_rmw>
 8011f8c:	4681      	mov	r9, r0
 8011f8e:	b328      	cbz	r0, 8011fdc <rcl_node_init+0x1e4>
 8011f90:	6863      	ldr	r3, [r4, #4]
 8011f92:	b1f3      	cbz	r3, 8011fd2 <rcl_node_init+0x1da>
 8011f94:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8011f96:	b128      	cbz	r0, 8011fa4 <rcl_node_init+0x1ac>
 8011f98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f9c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011fa0:	4798      	blx	r3
 8011fa2:	6863      	ldr	r3, [r4, #4]
 8011fa4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011fa6:	b110      	cbz	r0, 8011fae <rcl_node_init+0x1b6>
 8011fa8:	f003 faa4 	bl	80154f4 <rmw_destroy_node>
 8011fac:	6863      	ldr	r3, [r4, #4]
 8011fae:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011fb0:	b148      	cbz	r0, 8011fc6 <rcl_node_init+0x1ce>
 8011fb2:	f005 fedb 	bl	8017d6c <rcl_guard_condition_fini>
 8011fb6:	6863      	ldr	r3, [r4, #4]
 8011fb8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011fbc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011fbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011fc2:	4798      	blx	r3
 8011fc4:	6863      	ldr	r3, [r4, #4]
 8011fc6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011fd0:	4798      	blx	r3
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	e9c4 3300 	strd	r3, r3, [r4]
 8011fd8:	f04f 0901 	mov.w	r9, #1
 8011fdc:	f1ba 0f00 	cmp.w	sl, #0
 8011fe0:	d125      	bne.n	801202e <rcl_node_init+0x236>
 8011fe2:	e001      	b.n	8011fe8 <rcl_node_init+0x1f0>
 8011fe4:	f04f 090b 	mov.w	r9, #11
 8011fe8:	4648      	mov	r0, r9
 8011fea:	b029      	add	sp, #164	@ 0xa4
 8011fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff0:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8011ff4:	e7f8      	b.n	8011fe8 <rcl_node_init+0x1f0>
 8011ff6:	782b      	ldrb	r3, [r5, #0]
 8011ff8:	2b2f      	cmp	r3, #47	@ 0x2f
 8011ffa:	f43f af42 	beq.w	8011e82 <rcl_node_init+0x8a>
 8011ffe:	9503      	str	r5, [sp, #12]
 8012000:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012004:	9300      	str	r3, [sp, #0]
 8012006:	4b1e      	ldr	r3, [pc, #120]	@ (8012080 <rcl_node_init+0x288>)
 8012008:	9302      	str	r3, [sp, #8]
 801200a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801200e:	9301      	str	r3, [sp, #4]
 8012010:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012014:	f002 fa08 	bl	8014428 <rcutils_format_string_limit>
 8012018:	4605      	mov	r5, r0
 801201a:	b340      	cbz	r0, 801206e <rcl_node_init+0x276>
 801201c:	2200      	movs	r2, #0
 801201e:	a922      	add	r1, sp, #136	@ 0x88
 8012020:	9222      	str	r2, [sp, #136]	@ 0x88
 8012022:	f002 fe19 	bl	8014c58 <rmw_validate_namespace>
 8012026:	4681      	mov	r9, r0
 8012028:	2800      	cmp	r0, #0
 801202a:	f43f af34 	beq.w	8011e96 <rcl_node_init+0x9e>
 801202e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012032:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012036:	4628      	mov	r0, r5
 8012038:	4798      	blx	r3
 801203a:	e7d5      	b.n	8011fe8 <rcl_node_init+0x1f0>
 801203c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8012040:	4648      	mov	r0, r9
 8012042:	b029      	add	sp, #164	@ 0xa4
 8012044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012048:	f04f 090a 	mov.w	r9, #10
 801204c:	f1ba 0f00 	cmp.w	sl, #0
 8012050:	d1ed      	bne.n	801202e <rcl_node_init+0x236>
 8012052:	e7c9      	b.n	8011fe8 <rcl_node_init+0x1f0>
 8012054:	f002 fe70 	bl	8014d38 <rmw_node_name_validation_result_string>
 8012058:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 801205c:	e7c4      	b.n	8011fe8 <rcl_node_init+0x1f0>
 801205e:	f002 fe0d 	bl	8014c7c <rmw_namespace_validation_result_string>
 8012062:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8012066:	f1ba 0f00 	cmp.w	sl, #0
 801206a:	d1e0      	bne.n	801202e <rcl_node_init+0x236>
 801206c:	e7bc      	b.n	8011fe8 <rcl_node_init+0x1f0>
 801206e:	f04f 090a 	mov.w	r9, #10
 8012072:	e7b9      	b.n	8011fe8 <rcl_node_init+0x1f0>
 8012074:	0801aa5c 	.word	0x0801aa5c
 8012078:	0801a724 	.word	0x0801a724
 801207c:	0801aa64 	.word	0x0801aa64
 8012080:	0801aa60 	.word	0x0801aa60

08012084 <rcl_node_is_valid>:
 8012084:	b130      	cbz	r0, 8012094 <rcl_node_is_valid+0x10>
 8012086:	6843      	ldr	r3, [r0, #4]
 8012088:	b123      	cbz	r3, 8012094 <rcl_node_is_valid+0x10>
 801208a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801208c:	b113      	cbz	r3, 8012094 <rcl_node_is_valid+0x10>
 801208e:	6800      	ldr	r0, [r0, #0]
 8012090:	f7ff bc1e 	b.w	80118d0 <rcl_context_is_valid>
 8012094:	2000      	movs	r0, #0
 8012096:	4770      	bx	lr

08012098 <rcl_node_get_name>:
 8012098:	b120      	cbz	r0, 80120a4 <rcl_node_get_name+0xc>
 801209a:	6840      	ldr	r0, [r0, #4]
 801209c:	b110      	cbz	r0, 80120a4 <rcl_node_get_name+0xc>
 801209e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80120a0:	b100      	cbz	r0, 80120a4 <rcl_node_get_name+0xc>
 80120a2:	6880      	ldr	r0, [r0, #8]
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop

080120a8 <rcl_node_get_namespace>:
 80120a8:	b120      	cbz	r0, 80120b4 <rcl_node_get_namespace+0xc>
 80120aa:	6840      	ldr	r0, [r0, #4]
 80120ac:	b110      	cbz	r0, 80120b4 <rcl_node_get_namespace+0xc>
 80120ae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80120b0:	b100      	cbz	r0, 80120b4 <rcl_node_get_namespace+0xc>
 80120b2:	68c0      	ldr	r0, [r0, #12]
 80120b4:	4770      	bx	lr
 80120b6:	bf00      	nop

080120b8 <rcl_node_get_options>:
 80120b8:	b128      	cbz	r0, 80120c6 <rcl_node_get_options+0xe>
 80120ba:	6840      	ldr	r0, [r0, #4]
 80120bc:	b118      	cbz	r0, 80120c6 <rcl_node_get_options+0xe>
 80120be:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	bf08      	it	eq
 80120c4:	2000      	moveq	r0, #0
 80120c6:	4770      	bx	lr

080120c8 <rcl_node_get_rmw_handle>:
 80120c8:	b110      	cbz	r0, 80120d0 <rcl_node_get_rmw_handle+0x8>
 80120ca:	6840      	ldr	r0, [r0, #4]
 80120cc:	b100      	cbz	r0, 80120d0 <rcl_node_get_rmw_handle+0x8>
 80120ce:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80120d0:	4770      	bx	lr
 80120d2:	bf00      	nop

080120d4 <rcl_node_get_default_options>:
 80120d4:	b510      	push	{r4, lr}
 80120d6:	2268      	movs	r2, #104	@ 0x68
 80120d8:	4604      	mov	r4, r0
 80120da:	2100      	movs	r1, #0
 80120dc:	f006 fe93 	bl	8018e06 <memset>
 80120e0:	4620      	mov	r0, r4
 80120e2:	f7f9 fa0f 	bl	800b504 <rcutils_get_default_allocator>
 80120e6:	2301      	movs	r3, #1
 80120e8:	7523      	strb	r3, [r4, #20]
 80120ea:	4620      	mov	r0, r4
 80120ec:	bd10      	pop	{r4, pc}
 80120ee:	bf00      	nop

080120f0 <rcl_node_options_copy>:
 80120f0:	b1d0      	cbz	r0, 8012128 <rcl_node_options_copy+0x38>
 80120f2:	b570      	push	{r4, r5, r6, lr}
 80120f4:	460c      	mov	r4, r1
 80120f6:	b1a9      	cbz	r1, 8012124 <rcl_node_options_copy+0x34>
 80120f8:	4288      	cmp	r0, r1
 80120fa:	4684      	mov	ip, r0
 80120fc:	d012      	beq.n	8012124 <rcl_node_options_copy+0x34>
 80120fe:	4605      	mov	r5, r0
 8012100:	8a86      	ldrh	r6, [r0, #20]
 8012102:	468e      	mov	lr, r1
 8012104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012106:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801210a:	682b      	ldr	r3, [r5, #0]
 801210c:	f8ce 3000 	str.w	r3, [lr]
 8012110:	f10c 0118 	add.w	r1, ip, #24
 8012114:	2250      	movs	r2, #80	@ 0x50
 8012116:	82a6      	strh	r6, [r4, #20]
 8012118:	f104 0018 	add.w	r0, r4, #24
 801211c:	f006 fedb 	bl	8018ed6 <memcpy>
 8012120:	2000      	movs	r0, #0
 8012122:	bd70      	pop	{r4, r5, r6, pc}
 8012124:	200b      	movs	r0, #11
 8012126:	bd70      	pop	{r4, r5, r6, pc}
 8012128:	200b      	movs	r0, #11
 801212a:	4770      	bx	lr

0801212c <rcl_node_resolve_name>:
 801212c:	b082      	sub	sp, #8
 801212e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012132:	b091      	sub	sp, #68	@ 0x44
 8012134:	ac1a      	add	r4, sp, #104	@ 0x68
 8012136:	e884 000c 	stmia.w	r4, {r2, r3}
 801213a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801213e:	2800      	cmp	r0, #0
 8012140:	d03b      	beq.n	80121ba <rcl_node_resolve_name+0x8e>
 8012142:	460c      	mov	r4, r1
 8012144:	4605      	mov	r5, r0
 8012146:	f7ff ffb7 	bl	80120b8 <rcl_node_get_options>
 801214a:	2800      	cmp	r0, #0
 801214c:	d037      	beq.n	80121be <rcl_node_resolve_name+0x92>
 801214e:	4628      	mov	r0, r5
 8012150:	f7ff ffa2 	bl	8012098 <rcl_node_get_name>
 8012154:	4606      	mov	r6, r0
 8012156:	4628      	mov	r0, r5
 8012158:	f7ff ffa6 	bl	80120a8 <rcl_node_get_namespace>
 801215c:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012160:	4681      	mov	r9, r0
 8012162:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012166:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012168:	46ac      	mov	ip, r5
 801216a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801216e:	f8de 3000 	ldr.w	r3, [lr]
 8012172:	f8cc 3000 	str.w	r3, [ip]
 8012176:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012178:	b1fb      	cbz	r3, 80121ba <rcl_node_resolve_name+0x8e>
 801217a:	468a      	mov	sl, r1
 801217c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012180:	f002 faaa 	bl	80146d8 <rcutils_get_zero_initialized_string_map>
 8012184:	ab10      	add	r3, sp, #64	@ 0x40
 8012186:	9008      	str	r0, [sp, #32]
 8012188:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801218c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012190:	2100      	movs	r1, #0
 8012192:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012196:	a808      	add	r0, sp, #32
 8012198:	f002 fb16 	bl	80147c8 <rcutils_string_map_init>
 801219c:	4607      	mov	r7, r0
 801219e:	b180      	cbz	r0, 80121c2 <rcl_node_resolve_name+0x96>
 80121a0:	f7f9 f9cc 	bl	800b53c <rcutils_get_error_string>
 80121a4:	f7f9 f9e0 	bl	800b568 <rcutils_reset_error>
 80121a8:	2f0a      	cmp	r7, #10
 80121aa:	bf18      	it	ne
 80121ac:	2701      	movne	r7, #1
 80121ae:	4638      	mov	r0, r7
 80121b0:	b011      	add	sp, #68	@ 0x44
 80121b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b6:	b002      	add	sp, #8
 80121b8:	4770      	bx	lr
 80121ba:	270b      	movs	r7, #11
 80121bc:	e7f7      	b.n	80121ae <rcl_node_resolve_name+0x82>
 80121be:	2701      	movs	r7, #1
 80121c0:	e7f5      	b.n	80121ae <rcl_node_resolve_name+0x82>
 80121c2:	9009      	str	r0, [sp, #36]	@ 0x24
 80121c4:	9007      	str	r0, [sp, #28]
 80121c6:	a808      	add	r0, sp, #32
 80121c8:	f005 fd60 	bl	8017c8c <rcl_get_default_topic_name_substitutions>
 80121cc:	4607      	mov	r7, r0
 80121ce:	b1a8      	cbz	r0, 80121fc <rcl_node_resolve_name+0xd0>
 80121d0:	280a      	cmp	r0, #10
 80121d2:	9c07      	ldr	r4, [sp, #28]
 80121d4:	d000      	beq.n	80121d8 <rcl_node_resolve_name+0xac>
 80121d6:	2701      	movs	r7, #1
 80121d8:	a808      	add	r0, sp, #32
 80121da:	f002 fb35 	bl	8014848 <rcutils_string_map_fini>
 80121de:	2800      	cmp	r0, #0
 80121e0:	d13d      	bne.n	801225e <rcl_node_resolve_name+0x132>
 80121e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121e4:	4659      	mov	r1, fp
 80121e6:	47d0      	blx	sl
 80121e8:	4659      	mov	r1, fp
 80121ea:	4620      	mov	r0, r4
 80121ec:	47d0      	blx	sl
 80121ee:	f1b8 0f00 	cmp.w	r8, #0
 80121f2:	d0dc      	beq.n	80121ae <rcl_node_resolve_name+0x82>
 80121f4:	2f67      	cmp	r7, #103	@ 0x67
 80121f6:	bf08      	it	eq
 80121f8:	2768      	moveq	r7, #104	@ 0x68
 80121fa:	e7d8      	b.n	80121ae <rcl_node_resolve_name+0x82>
 80121fc:	ab09      	add	r3, sp, #36	@ 0x24
 80121fe:	9305      	str	r3, [sp, #20]
 8012200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012202:	46ec      	mov	ip, sp
 8012204:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012208:	682b      	ldr	r3, [r5, #0]
 801220a:	f8cc 3000 	str.w	r3, [ip]
 801220e:	464a      	mov	r2, r9
 8012210:	4631      	mov	r1, r6
 8012212:	4620      	mov	r0, r4
 8012214:	ab08      	add	r3, sp, #32
 8012216:	f005 fbdb 	bl	80179d0 <rcl_expand_topic_name>
 801221a:	4607      	mov	r7, r0
 801221c:	b9b8      	cbnz	r0, 801224e <rcl_node_resolve_name+0x122>
 801221e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012220:	9009      	str	r0, [sp, #36]	@ 0x24
 8012222:	4602      	mov	r2, r0
 8012224:	a90a      	add	r1, sp, #40	@ 0x28
 8012226:	4620      	mov	r0, r4
 8012228:	f002 fc52 	bl	8014ad0 <rmw_validate_full_topic_name>
 801222c:	b988      	cbnz	r0, 8012252 <rcl_node_resolve_name+0x126>
 801222e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012230:	b9d5      	cbnz	r5, 8012268 <rcl_node_resolve_name+0x13c>
 8012232:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012234:	a808      	add	r0, sp, #32
 8012236:	601c      	str	r4, [r3, #0]
 8012238:	f002 fb06 	bl	8014848 <rcutils_string_map_fini>
 801223c:	4607      	mov	r7, r0
 801223e:	b1a8      	cbz	r0, 801226c <rcl_node_resolve_name+0x140>
 8012240:	f7f9 f97c 	bl	800b53c <rcutils_get_error_string>
 8012244:	462c      	mov	r4, r5
 8012246:	f7f9 f98f 	bl	800b568 <rcutils_reset_error>
 801224a:	2701      	movs	r7, #1
 801224c:	e7c9      	b.n	80121e2 <rcl_node_resolve_name+0xb6>
 801224e:	9c07      	ldr	r4, [sp, #28]
 8012250:	e7c2      	b.n	80121d8 <rcl_node_resolve_name+0xac>
 8012252:	f7f9 f973 	bl	800b53c <rcutils_get_error_string>
 8012256:	2701      	movs	r7, #1
 8012258:	f7f9 f986 	bl	800b568 <rcutils_reset_error>
 801225c:	e7bc      	b.n	80121d8 <rcl_node_resolve_name+0xac>
 801225e:	f7f9 f96d 	bl	800b53c <rcutils_get_error_string>
 8012262:	f7f9 f981 	bl	800b568 <rcutils_reset_error>
 8012266:	e7bc      	b.n	80121e2 <rcl_node_resolve_name+0xb6>
 8012268:	2767      	movs	r7, #103	@ 0x67
 801226a:	e7b5      	b.n	80121d8 <rcl_node_resolve_name+0xac>
 801226c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801226e:	4659      	mov	r1, fp
 8012270:	47d0      	blx	sl
 8012272:	4659      	mov	r1, fp
 8012274:	4638      	mov	r0, r7
 8012276:	47d0      	blx	sl
 8012278:	e799      	b.n	80121ae <rcl_node_resolve_name+0x82>
 801227a:	bf00      	nop

0801227c <exact_match_lookup>:
 801227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801227e:	f102 0708 	add.w	r7, r2, #8
 8012282:	460b      	mov	r3, r1
 8012284:	4614      	mov	r4, r2
 8012286:	4606      	mov	r6, r0
 8012288:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801228c:	b085      	sub	sp, #20
 801228e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012292:	4618      	mov	r0, r3
 8012294:	4919      	ldr	r1, [pc, #100]	@ (80122fc <exact_match_lookup+0x80>)
 8012296:	e894 000c 	ldmia.w	r4, {r2, r3}
 801229a:	f002 f8b7 	bl	801440c <rcutils_join_path>
 801229e:	7833      	ldrb	r3, [r6, #0]
 80122a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80122a2:	4605      	mov	r5, r0
 80122a4:	d023      	beq.n	80122ee <exact_match_lookup+0x72>
 80122a6:	f104 030c 	add.w	r3, r4, #12
 80122aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80122ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 80122b2:	1c70      	adds	r0, r6, #1
 80122b4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80122b8:	f002 f8ae 	bl	8014418 <rcutils_to_native_path>
 80122bc:	4606      	mov	r6, r0
 80122be:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80122c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80122c6:	4631      	mov	r1, r6
 80122c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80122cc:	4628      	mov	r0, r5
 80122ce:	f002 f89d 	bl	801440c <rcutils_join_path>
 80122d2:	6862      	ldr	r2, [r4, #4]
 80122d4:	6921      	ldr	r1, [r4, #16]
 80122d6:	4603      	mov	r3, r0
 80122d8:	4630      	mov	r0, r6
 80122da:	461e      	mov	r6, r3
 80122dc:	4790      	blx	r2
 80122de:	4628      	mov	r0, r5
 80122e0:	6863      	ldr	r3, [r4, #4]
 80122e2:	6921      	ldr	r1, [r4, #16]
 80122e4:	4798      	blx	r3
 80122e6:	4635      	mov	r5, r6
 80122e8:	4628      	mov	r0, r5
 80122ea:	b005      	add	sp, #20
 80122ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122ee:	7873      	ldrb	r3, [r6, #1]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d1d8      	bne.n	80122a6 <exact_match_lookup+0x2a>
 80122f4:	4628      	mov	r0, r5
 80122f6:	b005      	add	sp, #20
 80122f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122fa:	bf00      	nop
 80122fc:	0801aab0 	.word	0x0801aab0

08012300 <rcl_get_secure_root>:
 8012300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012304:	b085      	sub	sp, #20
 8012306:	b168      	cbz	r0, 8012324 <rcl_get_secure_root+0x24>
 8012308:	4607      	mov	r7, r0
 801230a:	4608      	mov	r0, r1
 801230c:	460c      	mov	r4, r1
 801230e:	f7f9 f907 	bl	800b520 <rcutils_allocator_is_valid>
 8012312:	b138      	cbz	r0, 8012324 <rcl_get_secure_root+0x24>
 8012314:	2300      	movs	r3, #0
 8012316:	482d      	ldr	r0, [pc, #180]	@ (80123cc <rcl_get_secure_root+0xcc>)
 8012318:	9303      	str	r3, [sp, #12]
 801231a:	a903      	add	r1, sp, #12
 801231c:	f002 f85c 	bl	80143d8 <rcutils_get_env>
 8012320:	4605      	mov	r5, r0
 8012322:	b120      	cbz	r0, 801232e <rcl_get_secure_root+0x2e>
 8012324:	2500      	movs	r5, #0
 8012326:	4628      	mov	r0, r5
 8012328:	b005      	add	sp, #20
 801232a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801232e:	9b03      	ldr	r3, [sp, #12]
 8012330:	781a      	ldrb	r2, [r3, #0]
 8012332:	2a00      	cmp	r2, #0
 8012334:	d0f6      	beq.n	8012324 <rcl_get_secure_root+0x24>
 8012336:	f104 090c 	add.w	r9, r4, #12
 801233a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801233e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012342:	4618      	mov	r0, r3
 8012344:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012348:	f002 f988 	bl	801465c <rcutils_strdup>
 801234c:	4680      	mov	r8, r0
 801234e:	2800      	cmp	r0, #0
 8012350:	d0e8      	beq.n	8012324 <rcl_get_secure_root+0x24>
 8012352:	481f      	ldr	r0, [pc, #124]	@ (80123d0 <rcl_get_secure_root+0xd0>)
 8012354:	9503      	str	r5, [sp, #12]
 8012356:	a903      	add	r1, sp, #12
 8012358:	f002 f83e 	bl	80143d8 <rcutils_get_env>
 801235c:	b160      	cbz	r0, 8012378 <rcl_get_secure_root+0x78>
 801235e:	2600      	movs	r6, #0
 8012360:	6863      	ldr	r3, [r4, #4]
 8012362:	6921      	ldr	r1, [r4, #16]
 8012364:	4630      	mov	r0, r6
 8012366:	4798      	blx	r3
 8012368:	4640      	mov	r0, r8
 801236a:	6863      	ldr	r3, [r4, #4]
 801236c:	6921      	ldr	r1, [r4, #16]
 801236e:	4798      	blx	r3
 8012370:	4628      	mov	r0, r5
 8012372:	b005      	add	sp, #20
 8012374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012378:	9b03      	ldr	r3, [sp, #12]
 801237a:	781e      	ldrb	r6, [r3, #0]
 801237c:	b1f6      	cbz	r6, 80123bc <rcl_get_secure_root+0xbc>
 801237e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012382:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012386:	4618      	mov	r0, r3
 8012388:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801238c:	f002 f966 	bl	801465c <rcutils_strdup>
 8012390:	4606      	mov	r6, r0
 8012392:	2800      	cmp	r0, #0
 8012394:	d0e3      	beq.n	801235e <rcl_get_secure_root+0x5e>
 8012396:	4622      	mov	r2, r4
 8012398:	4641      	mov	r1, r8
 801239a:	f7ff ff6f 	bl	801227c <exact_match_lookup>
 801239e:	4605      	mov	r5, r0
 80123a0:	2d00      	cmp	r5, #0
 80123a2:	d0dd      	beq.n	8012360 <rcl_get_secure_root+0x60>
 80123a4:	4628      	mov	r0, r5
 80123a6:	f002 f82f 	bl	8014408 <rcutils_is_directory>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2800      	cmp	r0, #0
 80123ae:	d1d7      	bne.n	8012360 <rcl_get_secure_root+0x60>
 80123b0:	4628      	mov	r0, r5
 80123b2:	6921      	ldr	r1, [r4, #16]
 80123b4:	461d      	mov	r5, r3
 80123b6:	6863      	ldr	r3, [r4, #4]
 80123b8:	4798      	blx	r3
 80123ba:	e7d1      	b.n	8012360 <rcl_get_secure_root+0x60>
 80123bc:	4622      	mov	r2, r4
 80123be:	4638      	mov	r0, r7
 80123c0:	4641      	mov	r1, r8
 80123c2:	f7ff ff5b 	bl	801227c <exact_match_lookup>
 80123c6:	4605      	mov	r5, r0
 80123c8:	e7ea      	b.n	80123a0 <rcl_get_secure_root+0xa0>
 80123ca:	bf00      	nop
 80123cc:	0801aabc 	.word	0x0801aabc
 80123d0:	0801aad4 	.word	0x0801aad4

080123d4 <rcl_get_security_options_from_environment>:
 80123d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d8:	b082      	sub	sp, #8
 80123da:	2300      	movs	r3, #0
 80123dc:	4606      	mov	r6, r0
 80123de:	460f      	mov	r7, r1
 80123e0:	4820      	ldr	r0, [pc, #128]	@ (8012464 <rcl_get_security_options_from_environment+0x90>)
 80123e2:	9301      	str	r3, [sp, #4]
 80123e4:	a901      	add	r1, sp, #4
 80123e6:	4690      	mov	r8, r2
 80123e8:	f001 fff6 	bl	80143d8 <rcutils_get_env>
 80123ec:	b120      	cbz	r0, 80123f8 <rcl_get_security_options_from_environment+0x24>
 80123ee:	2501      	movs	r5, #1
 80123f0:	4628      	mov	r0, r5
 80123f2:	b002      	add	sp, #8
 80123f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f8:	491b      	ldr	r1, [pc, #108]	@ (8012468 <rcl_get_security_options_from_environment+0x94>)
 80123fa:	4604      	mov	r4, r0
 80123fc:	9801      	ldr	r0, [sp, #4]
 80123fe:	f7ed ff07 	bl	8000210 <strcmp>
 8012402:	4605      	mov	r5, r0
 8012404:	b9e8      	cbnz	r0, 8012442 <rcl_get_security_options_from_environment+0x6e>
 8012406:	9001      	str	r0, [sp, #4]
 8012408:	f1b8 0f00 	cmp.w	r8, #0
 801240c:	d020      	beq.n	8012450 <rcl_get_security_options_from_environment+0x7c>
 801240e:	4817      	ldr	r0, [pc, #92]	@ (801246c <rcl_get_security_options_from_environment+0x98>)
 8012410:	a901      	add	r1, sp, #4
 8012412:	f001 ffe1 	bl	80143d8 <rcutils_get_env>
 8012416:	2800      	cmp	r0, #0
 8012418:	d1e9      	bne.n	80123ee <rcl_get_security_options_from_environment+0x1a>
 801241a:	4915      	ldr	r1, [pc, #84]	@ (8012470 <rcl_get_security_options_from_environment+0x9c>)
 801241c:	9801      	ldr	r0, [sp, #4]
 801241e:	f7ed fef7 	bl	8000210 <strcmp>
 8012422:	fab0 f080 	clz	r0, r0
 8012426:	0940      	lsrs	r0, r0, #5
 8012428:	f888 0000 	strb.w	r0, [r8]
 801242c:	4639      	mov	r1, r7
 801242e:	4630      	mov	r0, r6
 8012430:	f7ff ff66 	bl	8012300 <rcl_get_secure_root>
 8012434:	b170      	cbz	r0, 8012454 <rcl_get_security_options_from_environment+0x80>
 8012436:	f8c8 0004 	str.w	r0, [r8, #4]
 801243a:	4628      	mov	r0, r5
 801243c:	b002      	add	sp, #8
 801243e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012442:	4625      	mov	r5, r4
 8012444:	4628      	mov	r0, r5
 8012446:	f888 4000 	strb.w	r4, [r8]
 801244a:	b002      	add	sp, #8
 801244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012450:	250b      	movs	r5, #11
 8012452:	e7cd      	b.n	80123f0 <rcl_get_security_options_from_environment+0x1c>
 8012454:	f898 5000 	ldrb.w	r5, [r8]
 8012458:	f1a5 0501 	sub.w	r5, r5, #1
 801245c:	fab5 f585 	clz	r5, r5
 8012460:	096d      	lsrs	r5, r5, #5
 8012462:	e7c5      	b.n	80123f0 <rcl_get_security_options_from_environment+0x1c>
 8012464:	0801aa74 	.word	0x0801aa74
 8012468:	0801aa88 	.word	0x0801aa88
 801246c:	0801aa90 	.word	0x0801aa90
 8012470:	0801aaa8 	.word	0x0801aaa8

08012474 <rcl_service_get_rmw_handle>:
 8012474:	b118      	cbz	r0, 801247e <rcl_service_get_rmw_handle+0xa>
 8012476:	6800      	ldr	r0, [r0, #0]
 8012478:	b108      	cbz	r0, 801247e <rcl_service_get_rmw_handle+0xa>
 801247a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801247e:	4770      	bx	lr

08012480 <rcl_take_request>:
 8012480:	b570      	push	{r4, r5, r6, lr}
 8012482:	468e      	mov	lr, r1
 8012484:	460c      	mov	r4, r1
 8012486:	4616      	mov	r6, r2
 8012488:	4605      	mov	r5, r0
 801248a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801248e:	b08c      	sub	sp, #48	@ 0x30
 8012490:	f10d 0c18 	add.w	ip, sp, #24
 8012494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012498:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801249c:	e88c 0003 	stmia.w	ip, {r0, r1}
 80124a0:	b30d      	cbz	r5, 80124e6 <rcl_take_request+0x66>
 80124a2:	682b      	ldr	r3, [r5, #0]
 80124a4:	b1fb      	cbz	r3, 80124e6 <rcl_take_request+0x66>
 80124a6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80124aa:	b1e0      	cbz	r0, 80124e6 <rcl_take_request+0x66>
 80124ac:	b336      	cbz	r6, 80124fc <rcl_take_request+0x7c>
 80124ae:	2300      	movs	r3, #0
 80124b0:	f88d 3007 	strb.w	r3, [sp, #7]
 80124b4:	4632      	mov	r2, r6
 80124b6:	f10d 0307 	add.w	r3, sp, #7
 80124ba:	a902      	add	r1, sp, #8
 80124bc:	f003 f8ea 	bl	8015694 <rmw_take_request>
 80124c0:	4605      	mov	r5, r0
 80124c2:	b198      	cbz	r0, 80124ec <rcl_take_request+0x6c>
 80124c4:	280a      	cmp	r0, #10
 80124c6:	bf18      	it	ne
 80124c8:	2501      	movne	r5, #1
 80124ca:	f10d 0e18 	add.w	lr, sp, #24
 80124ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124d2:	46a4      	mov	ip, r4
 80124d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80124dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80124e0:	4628      	mov	r0, r5
 80124e2:	b00c      	add	sp, #48	@ 0x30
 80124e4:	bd70      	pop	{r4, r5, r6, pc}
 80124e6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80124ea:	e7ee      	b.n	80124ca <rcl_take_request+0x4a>
 80124ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80124f0:	f240 2359 	movw	r3, #601	@ 0x259
 80124f4:	2a00      	cmp	r2, #0
 80124f6:	bf08      	it	eq
 80124f8:	461d      	moveq	r5, r3
 80124fa:	e7e6      	b.n	80124ca <rcl_take_request+0x4a>
 80124fc:	250b      	movs	r5, #11
 80124fe:	e7e4      	b.n	80124ca <rcl_take_request+0x4a>

08012500 <rcl_send_response>:
 8012500:	b170      	cbz	r0, 8012520 <rcl_send_response+0x20>
 8012502:	6800      	ldr	r0, [r0, #0]
 8012504:	b160      	cbz	r0, 8012520 <rcl_send_response+0x20>
 8012506:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801250a:	b148      	cbz	r0, 8012520 <rcl_send_response+0x20>
 801250c:	b159      	cbz	r1, 8012526 <rcl_send_response+0x26>
 801250e:	b510      	push	{r4, lr}
 8012510:	b15a      	cbz	r2, 801252a <rcl_send_response+0x2a>
 8012512:	f003 f91d 	bl	8015750 <rmw_send_response>
 8012516:	b110      	cbz	r0, 801251e <rcl_send_response+0x1e>
 8012518:	2802      	cmp	r0, #2
 801251a:	bf18      	it	ne
 801251c:	2001      	movne	r0, #1
 801251e:	bd10      	pop	{r4, pc}
 8012520:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012524:	4770      	bx	lr
 8012526:	200b      	movs	r0, #11
 8012528:	4770      	bx	lr
 801252a:	200b      	movs	r0, #11
 801252c:	bd10      	pop	{r4, pc}
 801252e:	bf00      	nop

08012530 <rcl_service_is_valid>:
 8012530:	b130      	cbz	r0, 8012540 <rcl_service_is_valid+0x10>
 8012532:	6800      	ldr	r0, [r0, #0]
 8012534:	b120      	cbz	r0, 8012540 <rcl_service_is_valid+0x10>
 8012536:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801253a:	3800      	subs	r0, #0
 801253c:	bf18      	it	ne
 801253e:	2001      	movne	r0, #1
 8012540:	4770      	bx	lr
 8012542:	bf00      	nop

08012544 <rcl_get_zero_initialized_subscription>:
 8012544:	4b01      	ldr	r3, [pc, #4]	@ (801254c <rcl_get_zero_initialized_subscription+0x8>)
 8012546:	6818      	ldr	r0, [r3, #0]
 8012548:	4770      	bx	lr
 801254a:	bf00      	nop
 801254c:	0801aaf4 	.word	0x0801aaf4

08012550 <rcl_subscription_init>:
 8012550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012554:	b089      	sub	sp, #36	@ 0x24
 8012556:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8012558:	b1d6      	cbz	r6, 8012590 <rcl_subscription_init+0x40>
 801255a:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801255e:	4604      	mov	r4, r0
 8012560:	4648      	mov	r0, r9
 8012562:	460d      	mov	r5, r1
 8012564:	4690      	mov	r8, r2
 8012566:	461f      	mov	r7, r3
 8012568:	f7f8 ffda 	bl	800b520 <rcutils_allocator_is_valid>
 801256c:	b180      	cbz	r0, 8012590 <rcl_subscription_init+0x40>
 801256e:	b17c      	cbz	r4, 8012590 <rcl_subscription_init+0x40>
 8012570:	4628      	mov	r0, r5
 8012572:	f7ff fd87 	bl	8012084 <rcl_node_is_valid>
 8012576:	2800      	cmp	r0, #0
 8012578:	d054      	beq.n	8012624 <rcl_subscription_init+0xd4>
 801257a:	f1b8 0f00 	cmp.w	r8, #0
 801257e:	d007      	beq.n	8012590 <rcl_subscription_init+0x40>
 8012580:	b137      	cbz	r7, 8012590 <rcl_subscription_init+0x40>
 8012582:	6823      	ldr	r3, [r4, #0]
 8012584:	b14b      	cbz	r3, 801259a <rcl_subscription_init+0x4a>
 8012586:	2764      	movs	r7, #100	@ 0x64
 8012588:	4638      	mov	r0, r7
 801258a:	b009      	add	sp, #36	@ 0x24
 801258c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012590:	270b      	movs	r7, #11
 8012592:	4638      	mov	r0, r7
 8012594:	b009      	add	sp, #36	@ 0x24
 8012596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801259a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801259e:	aa07      	add	r2, sp, #28
 80125a0:	9205      	str	r2, [sp, #20]
 80125a2:	9307      	str	r3, [sp, #28]
 80125a4:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80125a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80125ac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80125b0:	4639      	mov	r1, r7
 80125b2:	e899 000c 	ldmia.w	r9, {r2, r3}
 80125b6:	4628      	mov	r0, r5
 80125b8:	f7ff fdb8 	bl	801212c <rcl_node_resolve_name>
 80125bc:	4607      	mov	r7, r0
 80125be:	2800      	cmp	r0, #0
 80125c0:	d15f      	bne.n	8012682 <rcl_subscription_init+0x132>
 80125c2:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 80125c6:	21c8      	movs	r1, #200	@ 0xc8
 80125c8:	2001      	movs	r0, #1
 80125ca:	4798      	blx	r3
 80125cc:	6020      	str	r0, [r4, #0]
 80125ce:	2800      	cmp	r0, #0
 80125d0:	d05d      	beq.n	801268e <rcl_subscription_init+0x13e>
 80125d2:	4628      	mov	r0, r5
 80125d4:	f7ff fd78 	bl	80120c8 <rcl_node_get_rmw_handle>
 80125d8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80125dc:	9300      	str	r3, [sp, #0]
 80125de:	9a07      	ldr	r2, [sp, #28]
 80125e0:	6827      	ldr	r7, [r4, #0]
 80125e2:	4641      	mov	r1, r8
 80125e4:	4633      	mov	r3, r6
 80125e6:	f003 f99d 	bl	8015924 <rmw_create_subscription>
 80125ea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80125ee:	6827      	ldr	r7, [r4, #0]
 80125f0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80125f4:	b348      	cbz	r0, 801264a <rcl_subscription_init+0xfa>
 80125f6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80125fa:	f003 fa75 	bl	8015ae8 <rmw_subscription_get_actual_qos>
 80125fe:	4607      	mov	r7, r0
 8012600:	b9a8      	cbnz	r0, 801262e <rcl_subscription_init+0xde>
 8012602:	6820      	ldr	r0, [r4, #0]
 8012604:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8012608:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801260c:	2270      	movs	r2, #112	@ 0x70
 801260e:	4631      	mov	r1, r6
 8012610:	f006 fc61 	bl	8018ed6 <memcpy>
 8012614:	9807      	ldr	r0, [sp, #28]
 8012616:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8012618:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801261a:	4798      	blx	r3
 801261c:	4638      	mov	r0, r7
 801261e:	b009      	add	sp, #36	@ 0x24
 8012620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012624:	27c8      	movs	r7, #200	@ 0xc8
 8012626:	4638      	mov	r0, r7
 8012628:	b009      	add	sp, #36	@ 0x24
 801262a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801262e:	6827      	ldr	r7, [r4, #0]
 8012630:	b32f      	cbz	r7, 801267e <rcl_subscription_init+0x12e>
 8012632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012636:	b14b      	cbz	r3, 801264c <rcl_subscription_init+0xfc>
 8012638:	4628      	mov	r0, r5
 801263a:	f7ff fd45 	bl	80120c8 <rcl_node_get_rmw_handle>
 801263e:	6823      	ldr	r3, [r4, #0]
 8012640:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8012644:	f003 fa60 	bl	8015b08 <rmw_destroy_subscription>
 8012648:	6827      	ldr	r7, [r4, #0]
 801264a:	b197      	cbz	r7, 8012672 <rcl_subscription_init+0x122>
 801264c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8012650:	4628      	mov	r0, r5
 8012652:	f7f8 ff65 	bl	800b520 <rcutils_allocator_is_valid>
 8012656:	b158      	cbz	r0, 8012670 <rcl_subscription_init+0x120>
 8012658:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801265a:	b148      	cbz	r0, 8012670 <rcl_subscription_init+0x120>
 801265c:	4629      	mov	r1, r5
 801265e:	f002 f98b 	bl	8014978 <rmw_subscription_content_filter_options_fini>
 8012662:	4605      	mov	r5, r0
 8012664:	b9b8      	cbnz	r0, 8012696 <rcl_subscription_init+0x146>
 8012666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012668:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801266a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801266c:	4798      	blx	r3
 801266e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8012670:	6827      	ldr	r7, [r4, #0]
 8012672:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8012674:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8012676:	4638      	mov	r0, r7
 8012678:	4798      	blx	r3
 801267a:	2300      	movs	r3, #0
 801267c:	6023      	str	r3, [r4, #0]
 801267e:	2701      	movs	r7, #1
 8012680:	e7c8      	b.n	8012614 <rcl_subscription_init+0xc4>
 8012682:	2867      	cmp	r0, #103	@ 0x67
 8012684:	d0c6      	beq.n	8012614 <rcl_subscription_init+0xc4>
 8012686:	2869      	cmp	r0, #105	@ 0x69
 8012688:	d003      	beq.n	8012692 <rcl_subscription_init+0x142>
 801268a:	280a      	cmp	r0, #10
 801268c:	d1f7      	bne.n	801267e <rcl_subscription_init+0x12e>
 801268e:	270a      	movs	r7, #10
 8012690:	e7c0      	b.n	8012614 <rcl_subscription_init+0xc4>
 8012692:	2767      	movs	r7, #103	@ 0x67
 8012694:	e7be      	b.n	8012614 <rcl_subscription_init+0xc4>
 8012696:	f7ff f8fd 	bl	8011894 <rcl_convert_rmw_ret_to_rcl_ret>
 801269a:	6827      	ldr	r7, [r4, #0]
 801269c:	e7e9      	b.n	8012672 <rcl_subscription_init+0x122>
 801269e:	bf00      	nop

080126a0 <rcl_subscription_get_default_options>:
 80126a0:	b570      	push	{r4, r5, r6, lr}
 80126a2:	4d14      	ldr	r5, [pc, #80]	@ (80126f4 <rcl_subscription_get_default_options+0x54>)
 80126a4:	4914      	ldr	r1, [pc, #80]	@ (80126f8 <rcl_subscription_get_default_options+0x58>)
 80126a6:	b08a      	sub	sp, #40	@ 0x28
 80126a8:	4604      	mov	r4, r0
 80126aa:	2250      	movs	r2, #80	@ 0x50
 80126ac:	4628      	mov	r0, r5
 80126ae:	f006 fc12 	bl	8018ed6 <memcpy>
 80126b2:	a804      	add	r0, sp, #16
 80126b4:	f7f8 ff26 	bl	800b504 <rcutils_get_default_allocator>
 80126b8:	f10d 0c10 	add.w	ip, sp, #16
 80126bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126c0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80126c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80126c8:	466e      	mov	r6, sp
 80126ca:	f8dc 3000 	ldr.w	r3, [ip]
 80126ce:	f8ce 3000 	str.w	r3, [lr]
 80126d2:	4630      	mov	r0, r6
 80126d4:	f002 f96a 	bl	80149ac <rmw_get_default_subscription_options>
 80126d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80126dc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80126e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80126e4:	2270      	movs	r2, #112	@ 0x70
 80126e6:	4629      	mov	r1, r5
 80126e8:	4620      	mov	r0, r4
 80126ea:	f006 fbf4 	bl	8018ed6 <memcpy>
 80126ee:	4620      	mov	r0, r4
 80126f0:	b00a      	add	sp, #40	@ 0x28
 80126f2:	bd70      	pop	{r4, r5, r6, pc}
 80126f4:	200153b0 	.word	0x200153b0
 80126f8:	0801aaf8 	.word	0x0801aaf8

080126fc <rcl_take>:
 80126fc:	2800      	cmp	r0, #0
 80126fe:	d04a      	beq.n	8012796 <rcl_take+0x9a>
 8012700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012704:	4604      	mov	r4, r0
 8012706:	6800      	ldr	r0, [r0, #0]
 8012708:	b0a4      	sub	sp, #144	@ 0x90
 801270a:	2800      	cmp	r0, #0
 801270c:	d03b      	beq.n	8012786 <rcl_take+0x8a>
 801270e:	461f      	mov	r7, r3
 8012710:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8012714:	2b00      	cmp	r3, #0
 8012716:	d036      	beq.n	8012786 <rcl_take+0x8a>
 8012718:	460e      	mov	r6, r1
 801271a:	2900      	cmp	r1, #0
 801271c:	d039      	beq.n	8012792 <rcl_take+0x96>
 801271e:	4615      	mov	r5, r2
 8012720:	2a00      	cmp	r2, #0
 8012722:	d03c      	beq.n	801279e <rcl_take+0xa2>
 8012724:	a802      	add	r0, sp, #8
 8012726:	f002 f9cb 	bl	8014ac0 <rmw_get_zero_initialized_message_info>
 801272a:	f10d 0c08 	add.w	ip, sp, #8
 801272e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012732:	46ae      	mov	lr, r5
 8012734:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012738:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801273c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012740:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012744:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012748:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801274c:	f04f 0800 	mov.w	r8, #0
 8012750:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012754:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012758:	6822      	ldr	r2, [r4, #0]
 801275a:	462b      	mov	r3, r5
 801275c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8012760:	9700      	str	r7, [sp, #0]
 8012762:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012766:	4631      	mov	r1, r6
 8012768:	f003 fa2e 	bl	8015bc8 <rmw_take_with_info>
 801276c:	4603      	mov	r3, r0
 801276e:	b9c0      	cbnz	r0, 80127a2 <rcl_take+0xa6>
 8012770:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012774:	f240 1291 	movw	r2, #401	@ 0x191
 8012778:	2900      	cmp	r1, #0
 801277a:	bf08      	it	eq
 801277c:	4613      	moveq	r3, r2
 801277e:	4618      	mov	r0, r3
 8012780:	b024      	add	sp, #144	@ 0x90
 8012782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012786:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801278a:	4618      	mov	r0, r3
 801278c:	b024      	add	sp, #144	@ 0x90
 801278e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012792:	230b      	movs	r3, #11
 8012794:	e7f3      	b.n	801277e <rcl_take+0x82>
 8012796:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801279a:	4618      	mov	r0, r3
 801279c:	4770      	bx	lr
 801279e:	ad14      	add	r5, sp, #80	@ 0x50
 80127a0:	e7c0      	b.n	8012724 <rcl_take+0x28>
 80127a2:	f7ff f877 	bl	8011894 <rcl_convert_rmw_ret_to_rcl_ret>
 80127a6:	4603      	mov	r3, r0
 80127a8:	e7e9      	b.n	801277e <rcl_take+0x82>
 80127aa:	bf00      	nop

080127ac <rcl_subscription_get_rmw_handle>:
 80127ac:	b118      	cbz	r0, 80127b6 <rcl_subscription_get_rmw_handle+0xa>
 80127ae:	6800      	ldr	r0, [r0, #0]
 80127b0:	b108      	cbz	r0, 80127b6 <rcl_subscription_get_rmw_handle+0xa>
 80127b2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80127b6:	4770      	bx	lr

080127b8 <rcl_subscription_is_valid>:
 80127b8:	b130      	cbz	r0, 80127c8 <rcl_subscription_is_valid+0x10>
 80127ba:	6800      	ldr	r0, [r0, #0]
 80127bc:	b120      	cbz	r0, 80127c8 <rcl_subscription_is_valid+0x10>
 80127be:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80127c2:	3800      	subs	r0, #0
 80127c4:	bf18      	it	ne
 80127c6:	2001      	movne	r0, #1
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop

080127cc <rcl_get_system_time>:
 80127cc:	4608      	mov	r0, r1
 80127ce:	f7f8 bee7 	b.w	800b5a0 <rcutils_system_time_now>
 80127d2:	bf00      	nop

080127d4 <rcl_get_steady_time>:
 80127d4:	4608      	mov	r0, r1
 80127d6:	f7f8 bf0b 	b.w	800b5f0 <rcutils_steady_time_now>
 80127da:	bf00      	nop

080127dc <rcl_get_ros_time>:
 80127dc:	7a03      	ldrb	r3, [r0, #8]
 80127de:	b510      	push	{r4, lr}
 80127e0:	460c      	mov	r4, r1
 80127e2:	b133      	cbz	r3, 80127f2 <rcl_get_ros_time+0x16>
 80127e4:	2105      	movs	r1, #5
 80127e6:	f001 fd53 	bl	8014290 <__atomic_load_8>
 80127ea:	e9c4 0100 	strd	r0, r1, [r4]
 80127ee:	2000      	movs	r0, #0
 80127f0:	bd10      	pop	{r4, pc}
 80127f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127f6:	4608      	mov	r0, r1
 80127f8:	f7f8 bed2 	b.w	800b5a0 <rcutils_system_time_now>

080127fc <rcl_clock_init>:
 80127fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127fe:	4605      	mov	r5, r0
 8012800:	4610      	mov	r0, r2
 8012802:	4614      	mov	r4, r2
 8012804:	460e      	mov	r6, r1
 8012806:	f7f8 fe8b 	bl	800b520 <rcutils_allocator_is_valid>
 801280a:	b128      	cbz	r0, 8012818 <rcl_clock_init+0x1c>
 801280c:	2d03      	cmp	r5, #3
 801280e:	d803      	bhi.n	8012818 <rcl_clock_init+0x1c>
 8012810:	e8df f005 	tbb	[pc, r5]
 8012814:	06532e1d 	.word	0x06532e1d
 8012818:	f04f 0c0b 	mov.w	ip, #11
 801281c:	4660      	mov	r0, ip
 801281e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012820:	2e00      	cmp	r6, #0
 8012822:	d0f9      	beq.n	8012818 <rcl_clock_init+0x1c>
 8012824:	2c00      	cmp	r4, #0
 8012826:	d0f7      	beq.n	8012818 <rcl_clock_init+0x1c>
 8012828:	2300      	movs	r3, #0
 801282a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801282e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80128e4 <rcl_clock_init+0xe8>
 8012832:	6133      	str	r3, [r6, #16]
 8012834:	f106 0514 	add.w	r5, r6, #20
 8012838:	469c      	mov	ip, r3
 801283a:	2703      	movs	r7, #3
 801283c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801283e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012840:	6823      	ldr	r3, [r4, #0]
 8012842:	602b      	str	r3, [r5, #0]
 8012844:	7037      	strb	r7, [r6, #0]
 8012846:	f8c6 e00c 	str.w	lr, [r6, #12]
 801284a:	4660      	mov	r0, ip
 801284c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801284e:	2e00      	cmp	r6, #0
 8012850:	d0e2      	beq.n	8012818 <rcl_clock_init+0x1c>
 8012852:	2300      	movs	r3, #0
 8012854:	7033      	strb	r3, [r6, #0]
 8012856:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801285a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801285e:	469c      	mov	ip, r3
 8012860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012862:	f106 0514 	add.w	r5, r6, #20
 8012866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012868:	6823      	ldr	r3, [r4, #0]
 801286a:	602b      	str	r3, [r5, #0]
 801286c:	4660      	mov	r0, ip
 801286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012870:	2e00      	cmp	r6, #0
 8012872:	d0d1      	beq.n	8012818 <rcl_clock_init+0x1c>
 8012874:	2c00      	cmp	r4, #0
 8012876:	d0cf      	beq.n	8012818 <rcl_clock_init+0x1c>
 8012878:	2700      	movs	r7, #0
 801287a:	7037      	strb	r7, [r6, #0]
 801287c:	46a4      	mov	ip, r4
 801287e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012882:	f106 0514 	add.w	r5, r6, #20
 8012886:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801288a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801288e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012890:	f8dc 3000 	ldr.w	r3, [ip]
 8012894:	602b      	str	r3, [r5, #0]
 8012896:	6921      	ldr	r1, [r4, #16]
 8012898:	6823      	ldr	r3, [r4, #0]
 801289a:	2010      	movs	r0, #16
 801289c:	4798      	blx	r3
 801289e:	6130      	str	r0, [r6, #16]
 80128a0:	b1d0      	cbz	r0, 80128d8 <rcl_clock_init+0xdc>
 80128a2:	2200      	movs	r2, #0
 80128a4:	2300      	movs	r3, #0
 80128a6:	e9c0 2300 	strd	r2, r3, [r0]
 80128aa:	2301      	movs	r3, #1
 80128ac:	7207      	strb	r7, [r0, #8]
 80128ae:	4a0c      	ldr	r2, [pc, #48]	@ (80128e0 <rcl_clock_init+0xe4>)
 80128b0:	7033      	strb	r3, [r6, #0]
 80128b2:	46bc      	mov	ip, r7
 80128b4:	60f2      	str	r2, [r6, #12]
 80128b6:	4660      	mov	r0, ip
 80128b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128ba:	2e00      	cmp	r6, #0
 80128bc:	d0ac      	beq.n	8012818 <rcl_clock_init+0x1c>
 80128be:	2c00      	cmp	r4, #0
 80128c0:	d0aa      	beq.n	8012818 <rcl_clock_init+0x1c>
 80128c2:	2300      	movs	r3, #0
 80128c4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80128c8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80128e8 <rcl_clock_init+0xec>
 80128cc:	6133      	str	r3, [r6, #16]
 80128ce:	f106 0514 	add.w	r5, r6, #20
 80128d2:	469c      	mov	ip, r3
 80128d4:	2702      	movs	r7, #2
 80128d6:	e7b1      	b.n	801283c <rcl_clock_init+0x40>
 80128d8:	f04f 0c0a 	mov.w	ip, #10
 80128dc:	e79e      	b.n	801281c <rcl_clock_init+0x20>
 80128de:	bf00      	nop
 80128e0:	080127dd 	.word	0x080127dd
 80128e4:	080127d5 	.word	0x080127d5
 80128e8:	080127cd 	.word	0x080127cd

080128ec <rcl_clock_get_now>:
 80128ec:	b140      	cbz	r0, 8012900 <rcl_clock_get_now+0x14>
 80128ee:	b139      	cbz	r1, 8012900 <rcl_clock_get_now+0x14>
 80128f0:	7803      	ldrb	r3, [r0, #0]
 80128f2:	b11b      	cbz	r3, 80128fc <rcl_clock_get_now+0x10>
 80128f4:	68c3      	ldr	r3, [r0, #12]
 80128f6:	b10b      	cbz	r3, 80128fc <rcl_clock_get_now+0x10>
 80128f8:	6900      	ldr	r0, [r0, #16]
 80128fa:	4718      	bx	r3
 80128fc:	2001      	movs	r0, #1
 80128fe:	4770      	bx	lr
 8012900:	200b      	movs	r0, #11
 8012902:	4770      	bx	lr

08012904 <rcl_timer_call>:
 8012904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012908:	b087      	sub	sp, #28
 801290a:	2800      	cmp	r0, #0
 801290c:	d06d      	beq.n	80129ea <rcl_timer_call+0xe6>
 801290e:	6803      	ldr	r3, [r0, #0]
 8012910:	4604      	mov	r4, r0
 8012912:	2b00      	cmp	r3, #0
 8012914:	d063      	beq.n	80129de <rcl_timer_call+0xda>
 8012916:	f3bf 8f5b 	dmb	ish
 801291a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801291e:	f3bf 8f5b 	dmb	ish
 8012922:	2b00      	cmp	r3, #0
 8012924:	d150      	bne.n	80129c8 <rcl_timer_call+0xc4>
 8012926:	6803      	ldr	r3, [r0, #0]
 8012928:	a904      	add	r1, sp, #16
 801292a:	6818      	ldr	r0, [r3, #0]
 801292c:	f7ff ffde 	bl	80128ec <rcl_clock_get_now>
 8012930:	4605      	mov	r5, r0
 8012932:	2800      	cmp	r0, #0
 8012934:	d14a      	bne.n	80129cc <rcl_timer_call+0xc8>
 8012936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801293a:	2b00      	cmp	r3, #0
 801293c:	db4a      	blt.n	80129d4 <rcl_timer_call+0xd0>
 801293e:	6820      	ldr	r0, [r4, #0]
 8012940:	f04f 0a05 	mov.w	sl, #5
 8012944:	f8cd a000 	str.w	sl, [sp]
 8012948:	3020      	adds	r0, #32
 801294a:	f001 fd0d 	bl	8014368 <__atomic_exchange_8>
 801294e:	6823      	ldr	r3, [r4, #0]
 8012950:	f3bf 8f5b 	dmb	ish
 8012954:	4680      	mov	r8, r0
 8012956:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801295a:	f3bf 8f5b 	dmb	ish
 801295e:	6820      	ldr	r0, [r4, #0]
 8012960:	4689      	mov	r9, r1
 8012962:	3028      	adds	r0, #40	@ 0x28
 8012964:	4651      	mov	r1, sl
 8012966:	f001 fc93 	bl	8014290 <__atomic_load_8>
 801296a:	4606      	mov	r6, r0
 801296c:	6820      	ldr	r0, [r4, #0]
 801296e:	460f      	mov	r7, r1
 8012970:	3018      	adds	r0, #24
 8012972:	4651      	mov	r1, sl
 8012974:	f001 fc8c 	bl	8014290 <__atomic_load_8>
 8012978:	1836      	adds	r6, r6, r0
 801297a:	4602      	mov	r2, r0
 801297c:	4682      	mov	sl, r0
 801297e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012982:	eb47 0701 	adc.w	r7, r7, r1
 8012986:	4286      	cmp	r6, r0
 8012988:	460b      	mov	r3, r1
 801298a:	eb77 010c 	sbcs.w	r1, r7, ip
 801298e:	da04      	bge.n	801299a <rcl_timer_call+0x96>
 8012990:	ea53 0102 	orrs.w	r1, r3, r2
 8012994:	d12e      	bne.n	80129f4 <rcl_timer_call+0xf0>
 8012996:	4606      	mov	r6, r0
 8012998:	4667      	mov	r7, ip
 801299a:	6820      	ldr	r0, [r4, #0]
 801299c:	2105      	movs	r1, #5
 801299e:	4632      	mov	r2, r6
 80129a0:	463b      	mov	r3, r7
 80129a2:	3028      	adds	r0, #40	@ 0x28
 80129a4:	9100      	str	r1, [sp, #0]
 80129a6:	f001 fca9 	bl	80142fc <__atomic_store_8>
 80129aa:	f1bb 0f00 	cmp.w	fp, #0
 80129ae:	d00d      	beq.n	80129cc <rcl_timer_call+0xc8>
 80129b0:	9a04      	ldr	r2, [sp, #16]
 80129b2:	9b05      	ldr	r3, [sp, #20]
 80129b4:	ebb2 0208 	subs.w	r2, r2, r8
 80129b8:	4620      	mov	r0, r4
 80129ba:	eb63 0309 	sbc.w	r3, r3, r9
 80129be:	47d8      	blx	fp
 80129c0:	4628      	mov	r0, r5
 80129c2:	b007      	add	sp, #28
 80129c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129c8:	f240 3521 	movw	r5, #801	@ 0x321
 80129cc:	4628      	mov	r0, r5
 80129ce:	b007      	add	sp, #28
 80129d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129d4:	2501      	movs	r5, #1
 80129d6:	4628      	mov	r0, r5
 80129d8:	b007      	add	sp, #28
 80129da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129de:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80129e2:	4628      	mov	r0, r5
 80129e4:	b007      	add	sp, #28
 80129e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ea:	250b      	movs	r5, #11
 80129ec:	4628      	mov	r0, r5
 80129ee:	b007      	add	sp, #28
 80129f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f4:	1b80      	subs	r0, r0, r6
 80129f6:	eb6c 0107 	sbc.w	r1, ip, r7
 80129fa:	3801      	subs	r0, #1
 80129fc:	f161 0100 	sbc.w	r1, r1, #0
 8012a00:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012a04:	f7ee f90a 	bl	8000c1c <__aeabi_ldivmod>
 8012a08:	9b02      	ldr	r3, [sp, #8]
 8012a0a:	3001      	adds	r0, #1
 8012a0c:	f141 0100 	adc.w	r1, r1, #0
 8012a10:	fb00 f303 	mul.w	r3, r0, r3
 8012a14:	fb01 330a 	mla	r3, r1, sl, r3
 8012a18:	fba0 0a0a 	umull	r0, sl, r0, sl
 8012a1c:	1986      	adds	r6, r0, r6
 8012a1e:	4453      	add	r3, sl
 8012a20:	eb43 0707 	adc.w	r7, r3, r7
 8012a24:	e7b9      	b.n	801299a <rcl_timer_call+0x96>
 8012a26:	bf00      	nop

08012a28 <rcl_timer_is_ready>:
 8012a28:	b570      	push	{r4, r5, r6, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	b378      	cbz	r0, 8012a8e <rcl_timer_is_ready+0x66>
 8012a2e:	6803      	ldr	r3, [r0, #0]
 8012a30:	4604      	mov	r4, r0
 8012a32:	b383      	cbz	r3, 8012a96 <rcl_timer_is_ready+0x6e>
 8012a34:	460d      	mov	r5, r1
 8012a36:	b351      	cbz	r1, 8012a8e <rcl_timer_is_ready+0x66>
 8012a38:	f3bf 8f5b 	dmb	ish
 8012a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012a40:	f3bf 8f5b 	dmb	ish
 8012a44:	b953      	cbnz	r3, 8012a5c <rcl_timer_is_ready+0x34>
 8012a46:	6803      	ldr	r3, [r0, #0]
 8012a48:	4669      	mov	r1, sp
 8012a4a:	6818      	ldr	r0, [r3, #0]
 8012a4c:	f7ff ff4e 	bl	80128ec <rcl_clock_get_now>
 8012a50:	4606      	mov	r6, r0
 8012a52:	b140      	cbz	r0, 8012a66 <rcl_timer_is_ready+0x3e>
 8012a54:	f240 3321 	movw	r3, #801	@ 0x321
 8012a58:	4298      	cmp	r0, r3
 8012a5a:	d101      	bne.n	8012a60 <rcl_timer_is_ready+0x38>
 8012a5c:	2600      	movs	r6, #0
 8012a5e:	702e      	strb	r6, [r5, #0]
 8012a60:	4630      	mov	r0, r6
 8012a62:	b002      	add	sp, #8
 8012a64:	bd70      	pop	{r4, r5, r6, pc}
 8012a66:	6820      	ldr	r0, [r4, #0]
 8012a68:	2105      	movs	r1, #5
 8012a6a:	3028      	adds	r0, #40	@ 0x28
 8012a6c:	f001 fc10 	bl	8014290 <__atomic_load_8>
 8012a70:	9b00      	ldr	r3, [sp, #0]
 8012a72:	1ac0      	subs	r0, r0, r3
 8012a74:	9b01      	ldr	r3, [sp, #4]
 8012a76:	eb61 0103 	sbc.w	r1, r1, r3
 8012a7a:	2801      	cmp	r0, #1
 8012a7c:	f171 0300 	sbcs.w	r3, r1, #0
 8012a80:	bfb4      	ite	lt
 8012a82:	2301      	movlt	r3, #1
 8012a84:	2300      	movge	r3, #0
 8012a86:	4630      	mov	r0, r6
 8012a88:	702b      	strb	r3, [r5, #0]
 8012a8a:	b002      	add	sp, #8
 8012a8c:	bd70      	pop	{r4, r5, r6, pc}
 8012a8e:	260b      	movs	r6, #11
 8012a90:	4630      	mov	r0, r6
 8012a92:	b002      	add	sp, #8
 8012a94:	bd70      	pop	{r4, r5, r6, pc}
 8012a96:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012a9a:	e7e1      	b.n	8012a60 <rcl_timer_is_ready+0x38>

08012a9c <rcl_timer_get_time_until_next_call>:
 8012a9c:	b570      	push	{r4, r5, r6, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	b330      	cbz	r0, 8012af0 <rcl_timer_get_time_until_next_call+0x54>
 8012aa2:	6803      	ldr	r3, [r0, #0]
 8012aa4:	4604      	mov	r4, r0
 8012aa6:	b33b      	cbz	r3, 8012af8 <rcl_timer_get_time_until_next_call+0x5c>
 8012aa8:	460d      	mov	r5, r1
 8012aaa:	b309      	cbz	r1, 8012af0 <rcl_timer_get_time_until_next_call+0x54>
 8012aac:	f3bf 8f5b 	dmb	ish
 8012ab0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012ab4:	f3bf 8f5b 	dmb	ish
 8012ab8:	b9ab      	cbnz	r3, 8012ae6 <rcl_timer_get_time_until_next_call+0x4a>
 8012aba:	6803      	ldr	r3, [r0, #0]
 8012abc:	4669      	mov	r1, sp
 8012abe:	6818      	ldr	r0, [r3, #0]
 8012ac0:	f7ff ff14 	bl	80128ec <rcl_clock_get_now>
 8012ac4:	4606      	mov	r6, r0
 8012ac6:	b958      	cbnz	r0, 8012ae0 <rcl_timer_get_time_until_next_call+0x44>
 8012ac8:	6820      	ldr	r0, [r4, #0]
 8012aca:	2105      	movs	r1, #5
 8012acc:	3028      	adds	r0, #40	@ 0x28
 8012ace:	f001 fbdf 	bl	8014290 <__atomic_load_8>
 8012ad2:	9b00      	ldr	r3, [sp, #0]
 8012ad4:	1ac0      	subs	r0, r0, r3
 8012ad6:	9b01      	ldr	r3, [sp, #4]
 8012ad8:	6028      	str	r0, [r5, #0]
 8012ada:	eb61 0103 	sbc.w	r1, r1, r3
 8012ade:	6069      	str	r1, [r5, #4]
 8012ae0:	4630      	mov	r0, r6
 8012ae2:	b002      	add	sp, #8
 8012ae4:	bd70      	pop	{r4, r5, r6, pc}
 8012ae6:	f240 3621 	movw	r6, #801	@ 0x321
 8012aea:	4630      	mov	r0, r6
 8012aec:	b002      	add	sp, #8
 8012aee:	bd70      	pop	{r4, r5, r6, pc}
 8012af0:	260b      	movs	r6, #11
 8012af2:	4630      	mov	r0, r6
 8012af4:	b002      	add	sp, #8
 8012af6:	bd70      	pop	{r4, r5, r6, pc}
 8012af8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012afc:	e7f0      	b.n	8012ae0 <rcl_timer_get_time_until_next_call+0x44>
 8012afe:	bf00      	nop

08012b00 <rcl_timer_get_guard_condition>:
 8012b00:	b130      	cbz	r0, 8012b10 <rcl_timer_get_guard_condition+0x10>
 8012b02:	6800      	ldr	r0, [r0, #0]
 8012b04:	b120      	cbz	r0, 8012b10 <rcl_timer_get_guard_condition+0x10>
 8012b06:	68c3      	ldr	r3, [r0, #12]
 8012b08:	b10b      	cbz	r3, 8012b0e <rcl_timer_get_guard_condition+0xe>
 8012b0a:	3008      	adds	r0, #8
 8012b0c:	4770      	bx	lr
 8012b0e:	4618      	mov	r0, r3
 8012b10:	4770      	bx	lr
 8012b12:	bf00      	nop

08012b14 <rcl_validate_enclave_name_with_size>:
 8012b14:	b378      	cbz	r0, 8012b76 <rcl_validate_enclave_name_with_size+0x62>
 8012b16:	b570      	push	{r4, r5, r6, lr}
 8012b18:	4615      	mov	r5, r2
 8012b1a:	b0c2      	sub	sp, #264	@ 0x108
 8012b1c:	b302      	cbz	r2, 8012b60 <rcl_validate_enclave_name_with_size+0x4c>
 8012b1e:	461e      	mov	r6, r3
 8012b20:	466a      	mov	r2, sp
 8012b22:	ab01      	add	r3, sp, #4
 8012b24:	460c      	mov	r4, r1
 8012b26:	f002 f849 	bl	8014bbc <rmw_validate_namespace_with_size>
 8012b2a:	4684      	mov	ip, r0
 8012b2c:	b9e8      	cbnz	r0, 8012b6a <rcl_validate_enclave_name_with_size+0x56>
 8012b2e:	9b00      	ldr	r3, [sp, #0]
 8012b30:	b923      	cbnz	r3, 8012b3c <rcl_validate_enclave_name_with_size+0x28>
 8012b32:	2300      	movs	r3, #0
 8012b34:	602b      	str	r3, [r5, #0]
 8012b36:	4660      	mov	r0, ip
 8012b38:	b042      	add	sp, #264	@ 0x108
 8012b3a:	bd70      	pop	{r4, r5, r6, pc}
 8012b3c:	2b07      	cmp	r3, #7
 8012b3e:	d007      	beq.n	8012b50 <rcl_validate_enclave_name_with_size+0x3c>
 8012b40:	1e5a      	subs	r2, r3, #1
 8012b42:	2a05      	cmp	r2, #5
 8012b44:	d833      	bhi.n	8012bae <rcl_validate_enclave_name_with_size+0x9a>
 8012b46:	e8df f002 	tbb	[pc, r2]
 8012b4a:	2c2f      	.short	0x2c2f
 8012b4c:	1a232629 	.word	0x1a232629
 8012b50:	2cff      	cmp	r4, #255	@ 0xff
 8012b52:	d9ee      	bls.n	8012b32 <rcl_validate_enclave_name_with_size+0x1e>
 8012b54:	602b      	str	r3, [r5, #0]
 8012b56:	2e00      	cmp	r6, #0
 8012b58:	d0ed      	beq.n	8012b36 <rcl_validate_enclave_name_with_size+0x22>
 8012b5a:	23fe      	movs	r3, #254	@ 0xfe
 8012b5c:	6033      	str	r3, [r6, #0]
 8012b5e:	e7ea      	b.n	8012b36 <rcl_validate_enclave_name_with_size+0x22>
 8012b60:	f04f 0c0b 	mov.w	ip, #11
 8012b64:	4660      	mov	r0, ip
 8012b66:	b042      	add	sp, #264	@ 0x108
 8012b68:	bd70      	pop	{r4, r5, r6, pc}
 8012b6a:	f7fe fe93 	bl	8011894 <rcl_convert_rmw_ret_to_rcl_ret>
 8012b6e:	4684      	mov	ip, r0
 8012b70:	4660      	mov	r0, ip
 8012b72:	b042      	add	sp, #264	@ 0x108
 8012b74:	bd70      	pop	{r4, r5, r6, pc}
 8012b76:	f04f 0c0b 	mov.w	ip, #11
 8012b7a:	4660      	mov	r0, ip
 8012b7c:	4770      	bx	lr
 8012b7e:	2306      	movs	r3, #6
 8012b80:	602b      	str	r3, [r5, #0]
 8012b82:	2e00      	cmp	r6, #0
 8012b84:	d0d7      	beq.n	8012b36 <rcl_validate_enclave_name_with_size+0x22>
 8012b86:	9b01      	ldr	r3, [sp, #4]
 8012b88:	6033      	str	r3, [r6, #0]
 8012b8a:	4660      	mov	r0, ip
 8012b8c:	b042      	add	sp, #264	@ 0x108
 8012b8e:	bd70      	pop	{r4, r5, r6, pc}
 8012b90:	2305      	movs	r3, #5
 8012b92:	602b      	str	r3, [r5, #0]
 8012b94:	e7f5      	b.n	8012b82 <rcl_validate_enclave_name_with_size+0x6e>
 8012b96:	2304      	movs	r3, #4
 8012b98:	602b      	str	r3, [r5, #0]
 8012b9a:	e7f2      	b.n	8012b82 <rcl_validate_enclave_name_with_size+0x6e>
 8012b9c:	2303      	movs	r3, #3
 8012b9e:	602b      	str	r3, [r5, #0]
 8012ba0:	e7ef      	b.n	8012b82 <rcl_validate_enclave_name_with_size+0x6e>
 8012ba2:	2302      	movs	r3, #2
 8012ba4:	602b      	str	r3, [r5, #0]
 8012ba6:	e7ec      	b.n	8012b82 <rcl_validate_enclave_name_with_size+0x6e>
 8012ba8:	2301      	movs	r3, #1
 8012baa:	602b      	str	r3, [r5, #0]
 8012bac:	e7e9      	b.n	8012b82 <rcl_validate_enclave_name_with_size+0x6e>
 8012bae:	4a04      	ldr	r2, [pc, #16]	@ (8012bc0 <rcl_validate_enclave_name_with_size+0xac>)
 8012bb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012bb4:	a802      	add	r0, sp, #8
 8012bb6:	f001 fd25 	bl	8014604 <rcutils_snprintf>
 8012bba:	f04f 0c01 	mov.w	ip, #1
 8012bbe:	e7ba      	b.n	8012b36 <rcl_validate_enclave_name_with_size+0x22>
 8012bc0:	0801ab48 	.word	0x0801ab48

08012bc4 <rcl_validate_enclave_name>:
 8012bc4:	b168      	cbz	r0, 8012be2 <rcl_validate_enclave_name+0x1e>
 8012bc6:	b570      	push	{r4, r5, r6, lr}
 8012bc8:	460d      	mov	r5, r1
 8012bca:	4616      	mov	r6, r2
 8012bcc:	4604      	mov	r4, r0
 8012bce:	f7ed fb17 	bl	8000200 <strlen>
 8012bd2:	4633      	mov	r3, r6
 8012bd4:	4601      	mov	r1, r0
 8012bd6:	462a      	mov	r2, r5
 8012bd8:	4620      	mov	r0, r4
 8012bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bde:	f7ff bf99 	b.w	8012b14 <rcl_validate_enclave_name_with_size>
 8012be2:	200b      	movs	r0, #11
 8012be4:	4770      	bx	lr
 8012be6:	bf00      	nop

08012be8 <rcl_get_zero_initialized_wait_set>:
 8012be8:	b510      	push	{r4, lr}
 8012bea:	4c08      	ldr	r4, [pc, #32]	@ (8012c0c <rcl_get_zero_initialized_wait_set+0x24>)
 8012bec:	4686      	mov	lr, r0
 8012bee:	4684      	mov	ip, r0
 8012bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012bf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012bf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012bfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c02:	6823      	ldr	r3, [r4, #0]
 8012c04:	f8cc 3000 	str.w	r3, [ip]
 8012c08:	4670      	mov	r0, lr
 8012c0a:	bd10      	pop	{r4, pc}
 8012c0c:	0801aba8 	.word	0x0801aba8

08012c10 <rcl_wait_set_is_valid>:
 8012c10:	b118      	cbz	r0, 8012c1a <rcl_wait_set_is_valid+0xa>
 8012c12:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012c14:	3800      	subs	r0, #0
 8012c16:	bf18      	it	ne
 8012c18:	2001      	movne	r0, #1
 8012c1a:	4770      	bx	lr

08012c1c <rcl_wait_set_fini>:
 8012c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c20:	b082      	sub	sp, #8
 8012c22:	2800      	cmp	r0, #0
 8012c24:	f000 8095 	beq.w	8012d52 <rcl_wait_set_fini+0x136>
 8012c28:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	2e00      	cmp	r6, #0
 8012c2e:	f000 808c 	beq.w	8012d4a <rcl_wait_set_fini+0x12e>
 8012c32:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8012c34:	f003 f9b6 	bl	8015fa4 <rmw_destroy_wait_set>
 8012c38:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012c3a:	1e06      	subs	r6, r0, #0
 8012c3c:	bf18      	it	ne
 8012c3e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8012c42:	2d00      	cmp	r5, #0
 8012c44:	f000 8081 	beq.w	8012d4a <rcl_wait_set_fini+0x12e>
 8012c48:	6820      	ldr	r0, [r4, #0]
 8012c4a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012c4e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012c50:	2700      	movs	r7, #0
 8012c52:	6067      	str	r7, [r4, #4]
 8012c54:	602f      	str	r7, [r5, #0]
 8012c56:	b120      	cbz	r0, 8012c62 <rcl_wait_set_fini+0x46>
 8012c58:	9101      	str	r1, [sp, #4]
 8012c5a:	47c0      	blx	r8
 8012c5c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012c5e:	9901      	ldr	r1, [sp, #4]
 8012c60:	6027      	str	r7, [r4, #0]
 8012c62:	68a8      	ldr	r0, [r5, #8]
 8012c64:	b120      	cbz	r0, 8012c70 <rcl_wait_set_fini+0x54>
 8012c66:	47c0      	blx	r8
 8012c68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8012c70:	68a0      	ldr	r0, [r4, #8]
 8012c72:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012c74:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012c76:	f04f 0800 	mov.w	r8, #0
 8012c7a:	f8c4 800c 	str.w	r8, [r4, #12]
 8012c7e:	f8c5 800c 	str.w	r8, [r5, #12]
 8012c82:	b128      	cbz	r0, 8012c90 <rcl_wait_set_fini+0x74>
 8012c84:	47b8      	blx	r7
 8012c86:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012c88:	f8c4 8008 	str.w	r8, [r4, #8]
 8012c8c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012c8e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012c90:	6968      	ldr	r0, [r5, #20]
 8012c92:	f04f 0800 	mov.w	r8, #0
 8012c96:	f8c5 8010 	str.w	r8, [r5, #16]
 8012c9a:	b128      	cbz	r0, 8012ca8 <rcl_wait_set_fini+0x8c>
 8012c9c:	47b8      	blx	r7
 8012c9e:	f8c5 8014 	str.w	r8, [r5, #20]
 8012ca2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012ca4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012ca6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012ca8:	6920      	ldr	r0, [r4, #16]
 8012caa:	f04f 0800 	mov.w	r8, #0
 8012cae:	f8c4 8014 	str.w	r8, [r4, #20]
 8012cb2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8012cb6:	b128      	cbz	r0, 8012cc4 <rcl_wait_set_fini+0xa8>
 8012cb8:	47b8      	blx	r7
 8012cba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012cbc:	f8c4 8010 	str.w	r8, [r4, #16]
 8012cc0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012cc2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012cc4:	69a0      	ldr	r0, [r4, #24]
 8012cc6:	f04f 0800 	mov.w	r8, #0
 8012cca:	f8c4 801c 	str.w	r8, [r4, #28]
 8012cce:	f8c5 8018 	str.w	r8, [r5, #24]
 8012cd2:	b128      	cbz	r0, 8012ce0 <rcl_wait_set_fini+0xc4>
 8012cd4:	9101      	str	r1, [sp, #4]
 8012cd6:	47b8      	blx	r7
 8012cd8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012cda:	9901      	ldr	r1, [sp, #4]
 8012cdc:	f8c4 8018 	str.w	r8, [r4, #24]
 8012ce0:	6a28      	ldr	r0, [r5, #32]
 8012ce2:	b120      	cbz	r0, 8012cee <rcl_wait_set_fini+0xd2>
 8012ce4:	47b8      	blx	r7
 8012ce6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012ce8:	2300      	movs	r3, #0
 8012cea:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8012cee:	6a20      	ldr	r0, [r4, #32]
 8012cf0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012cf4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012cf6:	2700      	movs	r7, #0
 8012cf8:	6267      	str	r7, [r4, #36]	@ 0x24
 8012cfa:	626f      	str	r7, [r5, #36]	@ 0x24
 8012cfc:	b120      	cbz	r0, 8012d08 <rcl_wait_set_fini+0xec>
 8012cfe:	9101      	str	r1, [sp, #4]
 8012d00:	47c0      	blx	r8
 8012d02:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012d04:	9901      	ldr	r1, [sp, #4]
 8012d06:	6227      	str	r7, [r4, #32]
 8012d08:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8012d0a:	b120      	cbz	r0, 8012d16 <rcl_wait_set_fini+0xfa>
 8012d0c:	47c0      	blx	r8
 8012d0e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012d10:	2300      	movs	r3, #0
 8012d12:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012d16:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012d18:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012d1c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012d1e:	2700      	movs	r7, #0
 8012d20:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8012d22:	632f      	str	r7, [r5, #48]	@ 0x30
 8012d24:	b120      	cbz	r0, 8012d30 <rcl_wait_set_fini+0x114>
 8012d26:	9101      	str	r1, [sp, #4]
 8012d28:	47c0      	blx	r8
 8012d2a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012d2c:	9901      	ldr	r1, [sp, #4]
 8012d2e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8012d30:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8012d32:	b120      	cbz	r0, 8012d3e <rcl_wait_set_fini+0x122>
 8012d34:	47c0      	blx	r8
 8012d36:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012d38:	2300      	movs	r3, #0
 8012d3a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8012d3e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8012d40:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012d42:	4628      	mov	r0, r5
 8012d44:	4798      	blx	r3
 8012d46:	2300      	movs	r3, #0
 8012d48:	6323      	str	r3, [r4, #48]	@ 0x30
 8012d4a:	4630      	mov	r0, r6
 8012d4c:	b002      	add	sp, #8
 8012d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d52:	260b      	movs	r6, #11
 8012d54:	4630      	mov	r0, r6
 8012d56:	b002      	add	sp, #8
 8012d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d5c <rcl_wait_set_add_subscription>:
 8012d5c:	b318      	cbz	r0, 8012da6 <rcl_wait_set_add_subscription+0x4a>
 8012d5e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012d60:	b570      	push	{r4, r5, r6, lr}
 8012d62:	4604      	mov	r4, r0
 8012d64:	b30b      	cbz	r3, 8012daa <rcl_wait_set_add_subscription+0x4e>
 8012d66:	b319      	cbz	r1, 8012db0 <rcl_wait_set_add_subscription+0x54>
 8012d68:	681d      	ldr	r5, [r3, #0]
 8012d6a:	6840      	ldr	r0, [r0, #4]
 8012d6c:	4285      	cmp	r5, r0
 8012d6e:	d217      	bcs.n	8012da0 <rcl_wait_set_add_subscription+0x44>
 8012d70:	6820      	ldr	r0, [r4, #0]
 8012d72:	1c6e      	adds	r6, r5, #1
 8012d74:	601e      	str	r6, [r3, #0]
 8012d76:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012d7a:	b102      	cbz	r2, 8012d7e <rcl_wait_set_add_subscription+0x22>
 8012d7c:	6015      	str	r5, [r2, #0]
 8012d7e:	4608      	mov	r0, r1
 8012d80:	f7ff fd14 	bl	80127ac <rcl_subscription_get_rmw_handle>
 8012d84:	b150      	cbz	r0, 8012d9c <rcl_wait_set_add_subscription+0x40>
 8012d86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d88:	6842      	ldr	r2, [r0, #4]
 8012d8a:	689b      	ldr	r3, [r3, #8]
 8012d8c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d90:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012d92:	6853      	ldr	r3, [r2, #4]
 8012d94:	3301      	adds	r3, #1
 8012d96:	2000      	movs	r0, #0
 8012d98:	6053      	str	r3, [r2, #4]
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}
 8012d9c:	2001      	movs	r0, #1
 8012d9e:	bd70      	pop	{r4, r5, r6, pc}
 8012da0:	f240 3086 	movw	r0, #902	@ 0x386
 8012da4:	bd70      	pop	{r4, r5, r6, pc}
 8012da6:	200b      	movs	r0, #11
 8012da8:	4770      	bx	lr
 8012daa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012dae:	bd70      	pop	{r4, r5, r6, pc}
 8012db0:	200b      	movs	r0, #11
 8012db2:	bd70      	pop	{r4, r5, r6, pc}

08012db4 <rcl_wait_set_clear>:
 8012db4:	2800      	cmp	r0, #0
 8012db6:	d073      	beq.n	8012ea0 <rcl_wait_set_clear+0xec>
 8012db8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012dba:	b510      	push	{r4, lr}
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d070      	beq.n	8012ea4 <rcl_wait_set_clear+0xf0>
 8012dc2:	6800      	ldr	r0, [r0, #0]
 8012dc4:	b138      	cbz	r0, 8012dd6 <rcl_wait_set_clear+0x22>
 8012dc6:	6862      	ldr	r2, [r4, #4]
 8012dc8:	2100      	movs	r1, #0
 8012dca:	0092      	lsls	r2, r2, #2
 8012dcc:	f006 f81b 	bl	8018e06 <memset>
 8012dd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	601a      	str	r2, [r3, #0]
 8012dd6:	68a0      	ldr	r0, [r4, #8]
 8012dd8:	b138      	cbz	r0, 8012dea <rcl_wait_set_clear+0x36>
 8012dda:	68e2      	ldr	r2, [r4, #12]
 8012ddc:	2100      	movs	r1, #0
 8012dde:	0092      	lsls	r2, r2, #2
 8012de0:	f006 f811 	bl	8018e06 <memset>
 8012de4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012de6:	2200      	movs	r2, #0
 8012de8:	60da      	str	r2, [r3, #12]
 8012dea:	69a0      	ldr	r0, [r4, #24]
 8012dec:	b138      	cbz	r0, 8012dfe <rcl_wait_set_clear+0x4a>
 8012dee:	69e2      	ldr	r2, [r4, #28]
 8012df0:	2100      	movs	r1, #0
 8012df2:	0092      	lsls	r2, r2, #2
 8012df4:	f006 f807 	bl	8018e06 <memset>
 8012df8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	619a      	str	r2, [r3, #24]
 8012dfe:	6a20      	ldr	r0, [r4, #32]
 8012e00:	b138      	cbz	r0, 8012e12 <rcl_wait_set_clear+0x5e>
 8012e02:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012e04:	2100      	movs	r1, #0
 8012e06:	0092      	lsls	r2, r2, #2
 8012e08:	f005 fffd 	bl	8018e06 <memset>
 8012e0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e0e:	2200      	movs	r2, #0
 8012e10:	625a      	str	r2, [r3, #36]	@ 0x24
 8012e12:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012e14:	b138      	cbz	r0, 8012e26 <rcl_wait_set_clear+0x72>
 8012e16:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012e18:	2100      	movs	r1, #0
 8012e1a:	0092      	lsls	r2, r2, #2
 8012e1c:	f005 fff3 	bl	8018e06 <memset>
 8012e20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e22:	2200      	movs	r2, #0
 8012e24:	631a      	str	r2, [r3, #48]	@ 0x30
 8012e26:	6920      	ldr	r0, [r4, #16]
 8012e28:	b138      	cbz	r0, 8012e3a <rcl_wait_set_clear+0x86>
 8012e2a:	6962      	ldr	r2, [r4, #20]
 8012e2c:	2100      	movs	r1, #0
 8012e2e:	0092      	lsls	r2, r2, #2
 8012e30:	f005 ffe9 	bl	8018e06 <memset>
 8012e34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e36:	2200      	movs	r2, #0
 8012e38:	641a      	str	r2, [r3, #64]	@ 0x40
 8012e3a:	6898      	ldr	r0, [r3, #8]
 8012e3c:	b138      	cbz	r0, 8012e4e <rcl_wait_set_clear+0x9a>
 8012e3e:	685a      	ldr	r2, [r3, #4]
 8012e40:	2100      	movs	r1, #0
 8012e42:	0092      	lsls	r2, r2, #2
 8012e44:	f005 ffdf 	bl	8018e06 <memset>
 8012e48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	605a      	str	r2, [r3, #4]
 8012e4e:	6958      	ldr	r0, [r3, #20]
 8012e50:	b138      	cbz	r0, 8012e62 <rcl_wait_set_clear+0xae>
 8012e52:	691a      	ldr	r2, [r3, #16]
 8012e54:	2100      	movs	r1, #0
 8012e56:	0092      	lsls	r2, r2, #2
 8012e58:	f005 ffd5 	bl	8018e06 <memset>
 8012e5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e5e:	2200      	movs	r2, #0
 8012e60:	611a      	str	r2, [r3, #16]
 8012e62:	6a18      	ldr	r0, [r3, #32]
 8012e64:	b138      	cbz	r0, 8012e76 <rcl_wait_set_clear+0xc2>
 8012e66:	69da      	ldr	r2, [r3, #28]
 8012e68:	2100      	movs	r1, #0
 8012e6a:	0092      	lsls	r2, r2, #2
 8012e6c:	f005 ffcb 	bl	8018e06 <memset>
 8012e70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e72:	2200      	movs	r2, #0
 8012e74:	61da      	str	r2, [r3, #28]
 8012e76:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012e78:	b138      	cbz	r0, 8012e8a <rcl_wait_set_clear+0xd6>
 8012e7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012e7c:	2100      	movs	r1, #0
 8012e7e:	0092      	lsls	r2, r2, #2
 8012e80:	f005 ffc1 	bl	8018e06 <memset>
 8012e84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e86:	2200      	movs	r2, #0
 8012e88:	629a      	str	r2, [r3, #40]	@ 0x28
 8012e8a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012e8c:	b138      	cbz	r0, 8012e9e <rcl_wait_set_clear+0xea>
 8012e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012e90:	2100      	movs	r1, #0
 8012e92:	0092      	lsls	r2, r2, #2
 8012e94:	f005 ffb7 	bl	8018e06 <memset>
 8012e98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e9a:	2000      	movs	r0, #0
 8012e9c:	6358      	str	r0, [r3, #52]	@ 0x34
 8012e9e:	bd10      	pop	{r4, pc}
 8012ea0:	200b      	movs	r0, #11
 8012ea2:	4770      	bx	lr
 8012ea4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012ea8:	bd10      	pop	{r4, pc}
 8012eaa:	bf00      	nop

08012eac <rcl_wait_set_resize>:
 8012eac:	2800      	cmp	r0, #0
 8012eae:	f000 8185 	beq.w	80131bc <rcl_wait_set_resize+0x310>
 8012eb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eb6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8012eb8:	b083      	sub	sp, #12
 8012eba:	4605      	mov	r5, r0
 8012ebc:	2c00      	cmp	r4, #0
 8012ebe:	f000 817f 	beq.w	80131c0 <rcl_wait_set_resize+0x314>
 8012ec2:	f04f 0900 	mov.w	r9, #0
 8012ec6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8012eca:	461f      	mov	r7, r3
 8012ecc:	4688      	mov	r8, r1
 8012ece:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8012ed2:	4616      	mov	r6, r2
 8012ed4:	f8c0 9004 	str.w	r9, [r0, #4]
 8012ed8:	f8c4 9000 	str.w	r9, [r4]
 8012edc:	2900      	cmp	r1, #0
 8012ede:	f000 80bd 	beq.w	801305c <rcl_wait_set_resize+0x1b0>
 8012ee2:	008c      	lsls	r4, r1, #2
 8012ee4:	6800      	ldr	r0, [r0, #0]
 8012ee6:	9301      	str	r3, [sp, #4]
 8012ee8:	4652      	mov	r2, sl
 8012eea:	4621      	mov	r1, r4
 8012eec:	4798      	blx	r3
 8012eee:	9b01      	ldr	r3, [sp, #4]
 8012ef0:	6028      	str	r0, [r5, #0]
 8012ef2:	2800      	cmp	r0, #0
 8012ef4:	f000 80cb 	beq.w	801308e <rcl_wait_set_resize+0x1e2>
 8012ef8:	4622      	mov	r2, r4
 8012efa:	4649      	mov	r1, r9
 8012efc:	9301      	str	r3, [sp, #4]
 8012efe:	f005 ff82 	bl	8018e06 <memset>
 8012f02:	f8c5 8004 	str.w	r8, [r5, #4]
 8012f06:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8012f0a:	9b01      	ldr	r3, [sp, #4]
 8012f0c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8012f10:	f8c8 9004 	str.w	r9, [r8, #4]
 8012f14:	4652      	mov	r2, sl
 8012f16:	4621      	mov	r1, r4
 8012f18:	4798      	blx	r3
 8012f1a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012f1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8012f20:	689b      	ldr	r3, [r3, #8]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	f000 80ac 	beq.w	8013080 <rcl_wait_set_resize+0x1d4>
 8012f28:	4622      	mov	r2, r4
 8012f2a:	4649      	mov	r1, r9
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f005 ff6a 	bl	8018e06 <memset>
 8012f32:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012f34:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012f38:	f04f 0800 	mov.w	r8, #0
 8012f3c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8012f40:	f8c5 800c 	str.w	r8, [r5, #12]
 8012f44:	f8c4 800c 	str.w	r8, [r4, #12]
 8012f48:	2e00      	cmp	r6, #0
 8012f4a:	f040 80a4 	bne.w	8013096 <rcl_wait_set_resize+0x1ea>
 8012f4e:	68a8      	ldr	r0, [r5, #8]
 8012f50:	b128      	cbz	r0, 8012f5e <rcl_wait_set_resize+0xb2>
 8012f52:	4649      	mov	r1, r9
 8012f54:	4790      	blx	r2
 8012f56:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012f58:	60ae      	str	r6, [r5, #8]
 8012f5a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012f5e:	f04f 0800 	mov.w	r8, #0
 8012f62:	19f6      	adds	r6, r6, r7
 8012f64:	f8c4 8010 	str.w	r8, [r4, #16]
 8012f68:	f040 80ac 	bne.w	80130c4 <rcl_wait_set_resize+0x218>
 8012f6c:	6960      	ldr	r0, [r4, #20]
 8012f6e:	b130      	cbz	r0, 8012f7e <rcl_wait_set_resize+0xd2>
 8012f70:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8012f72:	4649      	mov	r1, r9
 8012f74:	4798      	blx	r3
 8012f76:	6166      	str	r6, [r4, #20]
 8012f78:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012f7a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012f7e:	2600      	movs	r6, #0
 8012f80:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012f84:	616e      	str	r6, [r5, #20]
 8012f86:	6426      	str	r6, [r4, #64]	@ 0x40
 8012f88:	2f00      	cmp	r7, #0
 8012f8a:	f040 80ad 	bne.w	80130e8 <rcl_wait_set_resize+0x23c>
 8012f8e:	6928      	ldr	r0, [r5, #16]
 8012f90:	b138      	cbz	r0, 8012fa2 <rcl_wait_set_resize+0xf6>
 8012f92:	4649      	mov	r1, r9
 8012f94:	47d0      	blx	sl
 8012f96:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012f98:	612f      	str	r7, [r5, #16]
 8012f9a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012f9e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012fa2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012fa4:	2600      	movs	r6, #0
 8012fa6:	61ee      	str	r6, [r5, #28]
 8012fa8:	61a6      	str	r6, [r4, #24]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	f040 80af 	bne.w	801310e <rcl_wait_set_resize+0x262>
 8012fb0:	69a8      	ldr	r0, [r5, #24]
 8012fb2:	b120      	cbz	r0, 8012fbe <rcl_wait_set_resize+0x112>
 8012fb4:	4649      	mov	r1, r9
 8012fb6:	47d0      	blx	sl
 8012fb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012fba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012fbc:	61ab      	str	r3, [r5, #24]
 8012fbe:	6a20      	ldr	r0, [r4, #32]
 8012fc0:	b128      	cbz	r0, 8012fce <rcl_wait_set_resize+0x122>
 8012fc2:	4649      	mov	r1, r9
 8012fc4:	47d0      	blx	sl
 8012fc6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012fc8:	2300      	movs	r3, #0
 8012fca:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8012fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012fd0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012fd2:	2600      	movs	r6, #0
 8012fd4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012fd8:	626e      	str	r6, [r5, #36]	@ 0x24
 8012fda:	6266      	str	r6, [r4, #36]	@ 0x24
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	f000 80b6 	beq.w	801314e <rcl_wait_set_resize+0x2a2>
 8012fe2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8012fe6:	6a28      	ldr	r0, [r5, #32]
 8012fe8:	463a      	mov	r2, r7
 8012fea:	4651      	mov	r1, sl
 8012fec:	47c8      	blx	r9
 8012fee:	6228      	str	r0, [r5, #32]
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	d04c      	beq.n	801308e <rcl_wait_set_resize+0x1e2>
 8012ff4:	4652      	mov	r2, sl
 8012ff6:	4631      	mov	r1, r6
 8012ff8:	f005 ff05 	bl	8018e06 <memset>
 8012ffc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013000:	626b      	str	r3, [r5, #36]	@ 0x24
 8013002:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013004:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013006:	463a      	mov	r2, r7
 8013008:	4651      	mov	r1, sl
 801300a:	47c8      	blx	r9
 801300c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801300e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013010:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8013012:	2c00      	cmp	r4, #0
 8013014:	f000 80f0 	beq.w	80131f8 <rcl_wait_set_resize+0x34c>
 8013018:	4620      	mov	r0, r4
 801301a:	4652      	mov	r2, sl
 801301c:	4631      	mov	r1, r6
 801301e:	f005 fef2 	bl	8018e06 <memset>
 8013022:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013026:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013028:	2600      	movs	r6, #0
 801302a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801302e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013030:	6326      	str	r6, [r4, #48]	@ 0x30
 8013032:	2b00      	cmp	r3, #0
 8013034:	f040 809d 	bne.w	8013172 <rcl_wait_set_resize+0x2c6>
 8013038:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801303a:	b120      	cbz	r0, 8013046 <rcl_wait_set_resize+0x19a>
 801303c:	4639      	mov	r1, r7
 801303e:	47c0      	blx	r8
 8013040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013042:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013044:	62ab      	str	r3, [r5, #40]	@ 0x28
 8013046:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013048:	b310      	cbz	r0, 8013090 <rcl_wait_set_resize+0x1e4>
 801304a:	4639      	mov	r1, r7
 801304c:	47c0      	blx	r8
 801304e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013050:	2000      	movs	r0, #0
 8013052:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8013056:	b003      	add	sp, #12
 8013058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801305c:	6800      	ldr	r0, [r0, #0]
 801305e:	b120      	cbz	r0, 801306a <rcl_wait_set_resize+0x1be>
 8013060:	4651      	mov	r1, sl
 8013062:	47d8      	blx	fp
 8013064:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013066:	f8c5 8000 	str.w	r8, [r5]
 801306a:	68a0      	ldr	r0, [r4, #8]
 801306c:	2800      	cmp	r0, #0
 801306e:	f43f af61 	beq.w	8012f34 <rcl_wait_set_resize+0x88>
 8013072:	4651      	mov	r1, sl
 8013074:	47d8      	blx	fp
 8013076:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013078:	2300      	movs	r3, #0
 801307a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801307e:	e759      	b.n	8012f34 <rcl_wait_set_resize+0x88>
 8013080:	6828      	ldr	r0, [r5, #0]
 8013082:	9301      	str	r3, [sp, #4]
 8013084:	4651      	mov	r1, sl
 8013086:	47d8      	blx	fp
 8013088:	9b01      	ldr	r3, [sp, #4]
 801308a:	e9c5 3300 	strd	r3, r3, [r5]
 801308e:	200a      	movs	r0, #10
 8013090:	b003      	add	sp, #12
 8013092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013096:	00b4      	lsls	r4, r6, #2
 8013098:	68a8      	ldr	r0, [r5, #8]
 801309a:	464a      	mov	r2, r9
 801309c:	4621      	mov	r1, r4
 801309e:	4798      	blx	r3
 80130a0:	60a8      	str	r0, [r5, #8]
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d0f3      	beq.n	801308e <rcl_wait_set_resize+0x1e2>
 80130a6:	4622      	mov	r2, r4
 80130a8:	4641      	mov	r1, r8
 80130aa:	f005 feac 	bl	8018e06 <memset>
 80130ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80130b0:	60ee      	str	r6, [r5, #12]
 80130b2:	f04f 0800 	mov.w	r8, #0
 80130b6:	19f6      	adds	r6, r6, r7
 80130b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80130bc:	f8c4 8010 	str.w	r8, [r4, #16]
 80130c0:	f43f af54 	beq.w	8012f6c <rcl_wait_set_resize+0xc0>
 80130c4:	00b6      	lsls	r6, r6, #2
 80130c6:	464a      	mov	r2, r9
 80130c8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80130ca:	6960      	ldr	r0, [r4, #20]
 80130cc:	4631      	mov	r1, r6
 80130ce:	4798      	blx	r3
 80130d0:	4681      	mov	r9, r0
 80130d2:	6160      	str	r0, [r4, #20]
 80130d4:	2800      	cmp	r0, #0
 80130d6:	d076      	beq.n	80131c6 <rcl_wait_set_resize+0x31a>
 80130d8:	4632      	mov	r2, r6
 80130da:	4641      	mov	r1, r8
 80130dc:	f005 fe93 	bl	8018e06 <memset>
 80130e0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80130e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80130e6:	e74a      	b.n	8012f7e <rcl_wait_set_resize+0xd2>
 80130e8:	00bc      	lsls	r4, r7, #2
 80130ea:	6928      	ldr	r0, [r5, #16]
 80130ec:	464a      	mov	r2, r9
 80130ee:	4621      	mov	r1, r4
 80130f0:	47c0      	blx	r8
 80130f2:	6128      	str	r0, [r5, #16]
 80130f4:	2800      	cmp	r0, #0
 80130f6:	d0ca      	beq.n	801308e <rcl_wait_set_resize+0x1e2>
 80130f8:	4622      	mov	r2, r4
 80130fa:	4631      	mov	r1, r6
 80130fc:	f005 fe83 	bl	8018e06 <memset>
 8013100:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013102:	616f      	str	r7, [r5, #20]
 8013104:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013108:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801310c:	e749      	b.n	8012fa2 <rcl_wait_set_resize+0xf6>
 801310e:	009c      	lsls	r4, r3, #2
 8013110:	69a8      	ldr	r0, [r5, #24]
 8013112:	464a      	mov	r2, r9
 8013114:	4621      	mov	r1, r4
 8013116:	47c0      	blx	r8
 8013118:	61a8      	str	r0, [r5, #24]
 801311a:	2800      	cmp	r0, #0
 801311c:	d0b7      	beq.n	801308e <rcl_wait_set_resize+0x1e2>
 801311e:	4622      	mov	r2, r4
 8013120:	4631      	mov	r1, r6
 8013122:	f005 fe70 	bl	8018e06 <memset>
 8013126:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013128:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801312a:	61eb      	str	r3, [r5, #28]
 801312c:	6a38      	ldr	r0, [r7, #32]
 801312e:	61fe      	str	r6, [r7, #28]
 8013130:	464a      	mov	r2, r9
 8013132:	4621      	mov	r1, r4
 8013134:	47c0      	blx	r8
 8013136:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013138:	6238      	str	r0, [r7, #32]
 801313a:	6a1f      	ldr	r7, [r3, #32]
 801313c:	2f00      	cmp	r7, #0
 801313e:	d054      	beq.n	80131ea <rcl_wait_set_resize+0x33e>
 8013140:	4622      	mov	r2, r4
 8013142:	4631      	mov	r1, r6
 8013144:	4638      	mov	r0, r7
 8013146:	f005 fe5e 	bl	8018e06 <memset>
 801314a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801314c:	e73f      	b.n	8012fce <rcl_wait_set_resize+0x122>
 801314e:	6a28      	ldr	r0, [r5, #32]
 8013150:	b120      	cbz	r0, 801315c <rcl_wait_set_resize+0x2b0>
 8013152:	4639      	mov	r1, r7
 8013154:	47c0      	blx	r8
 8013156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013158:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801315a:	622b      	str	r3, [r5, #32]
 801315c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801315e:	2800      	cmp	r0, #0
 8013160:	f43f af60 	beq.w	8013024 <rcl_wait_set_resize+0x178>
 8013164:	4639      	mov	r1, r7
 8013166:	47c0      	blx	r8
 8013168:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801316a:	2300      	movs	r3, #0
 801316c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013170:	e758      	b.n	8013024 <rcl_wait_set_resize+0x178>
 8013172:	009c      	lsls	r4, r3, #2
 8013174:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013176:	463a      	mov	r2, r7
 8013178:	4621      	mov	r1, r4
 801317a:	47c8      	blx	r9
 801317c:	62a8      	str	r0, [r5, #40]	@ 0x28
 801317e:	2800      	cmp	r0, #0
 8013180:	d085      	beq.n	801308e <rcl_wait_set_resize+0x1e2>
 8013182:	4622      	mov	r2, r4
 8013184:	4631      	mov	r1, r6
 8013186:	f005 fe3e 	bl	8018e06 <memset>
 801318a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801318e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013190:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013192:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013196:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801319a:	463a      	mov	r2, r7
 801319c:	4621      	mov	r1, r4
 801319e:	47c8      	blx	r9
 80131a0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80131a2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80131a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131a8:	b36b      	cbz	r3, 8013206 <rcl_wait_set_resize+0x35a>
 80131aa:	4622      	mov	r2, r4
 80131ac:	4631      	mov	r1, r6
 80131ae:	4618      	mov	r0, r3
 80131b0:	f005 fe29 	bl	8018e06 <memset>
 80131b4:	4630      	mov	r0, r6
 80131b6:	b003      	add	sp, #12
 80131b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131bc:	200b      	movs	r0, #11
 80131be:	4770      	bx	lr
 80131c0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80131c4:	e764      	b.n	8013090 <rcl_wait_set_resize+0x1e4>
 80131c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80131c8:	68a8      	ldr	r0, [r5, #8]
 80131ca:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80131cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80131ce:	4798      	blx	r3
 80131d0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80131d2:	6928      	ldr	r0, [r5, #16]
 80131d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80131d6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80131d8:	f8c5 900c 	str.w	r9, [r5, #12]
 80131dc:	f8c5 9008 	str.w	r9, [r5, #8]
 80131e0:	4790      	blx	r2
 80131e2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80131e6:	200a      	movs	r0, #10
 80131e8:	e752      	b.n	8013090 <rcl_wait_set_resize+0x1e4>
 80131ea:	69a8      	ldr	r0, [r5, #24]
 80131ec:	4649      	mov	r1, r9
 80131ee:	47d0      	blx	sl
 80131f0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80131f4:	200a      	movs	r0, #10
 80131f6:	e74b      	b.n	8013090 <rcl_wait_set_resize+0x1e4>
 80131f8:	6a28      	ldr	r0, [r5, #32]
 80131fa:	4639      	mov	r1, r7
 80131fc:	47c0      	blx	r8
 80131fe:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013202:	200a      	movs	r0, #10
 8013204:	e744      	b.n	8013090 <rcl_wait_set_resize+0x1e4>
 8013206:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013208:	9301      	str	r3, [sp, #4]
 801320a:	4639      	mov	r1, r7
 801320c:	47c0      	blx	r8
 801320e:	9b01      	ldr	r3, [sp, #4]
 8013210:	200a      	movs	r0, #10
 8013212:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013216:	e73b      	b.n	8013090 <rcl_wait_set_resize+0x1e4>

08013218 <rcl_wait_set_init>:
 8013218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801321c:	b084      	sub	sp, #16
 801321e:	4604      	mov	r4, r0
 8013220:	a810      	add	r0, sp, #64	@ 0x40
 8013222:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8013226:	460f      	mov	r7, r1
 8013228:	4690      	mov	r8, r2
 801322a:	4699      	mov	r9, r3
 801322c:	f7f8 f978 	bl	800b520 <rcutils_allocator_is_valid>
 8013230:	2800      	cmp	r0, #0
 8013232:	d06b      	beq.n	801330c <rcl_wait_set_init+0xf4>
 8013234:	2c00      	cmp	r4, #0
 8013236:	d069      	beq.n	801330c <rcl_wait_set_init+0xf4>
 8013238:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801323a:	b125      	cbz	r5, 8013246 <rcl_wait_set_init+0x2e>
 801323c:	2564      	movs	r5, #100	@ 0x64
 801323e:	4628      	mov	r0, r5
 8013240:	b004      	add	sp, #16
 8013242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013246:	f1ba 0f00 	cmp.w	sl, #0
 801324a:	d05f      	beq.n	801330c <rcl_wait_set_init+0xf4>
 801324c:	4650      	mov	r0, sl
 801324e:	f7fe fb3f 	bl	80118d0 <rcl_context_is_valid>
 8013252:	2800      	cmp	r0, #0
 8013254:	d067      	beq.n	8013326 <rcl_wait_set_init+0x10e>
 8013256:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013258:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801325a:	205c      	movs	r0, #92	@ 0x5c
 801325c:	4798      	blx	r3
 801325e:	6320      	str	r0, [r4, #48]	@ 0x30
 8013260:	2800      	cmp	r0, #0
 8013262:	d062      	beq.n	801332a <rcl_wait_set_init+0x112>
 8013264:	4629      	mov	r1, r5
 8013266:	225c      	movs	r2, #92	@ 0x5c
 8013268:	f005 fdcd 	bl	8018e06 <memset>
 801326c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013270:	eb03 0e02 	add.w	lr, r3, r2
 8013274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013276:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013278:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801327c:	449e      	add	lr, r3
 801327e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013282:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013286:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801328a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801328e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8013292:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8013296:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801329a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801329e:	f8da a000 	ldr.w	sl, [sl]
 80132a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80132a4:	44c6      	add	lr, r8
 80132a6:	f8dc 3000 	ldr.w	r3, [ip]
 80132aa:	602b      	str	r3, [r5, #0]
 80132ac:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80132b0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80132b4:	f002 fe6c 	bl	8015f90 <rmw_create_wait_set>
 80132b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80132ba:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80132bc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80132be:	b350      	cbz	r0, 8013316 <rcl_wait_set_init+0xfe>
 80132c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80132c2:	9302      	str	r3, [sp, #8]
 80132c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80132c6:	9301      	str	r3, [sp, #4]
 80132c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80132ca:	9300      	str	r3, [sp, #0]
 80132cc:	4642      	mov	r2, r8
 80132ce:	464b      	mov	r3, r9
 80132d0:	4639      	mov	r1, r7
 80132d2:	4620      	mov	r0, r4
 80132d4:	f7ff fdea 	bl	8012eac <rcl_wait_set_resize>
 80132d8:	4605      	mov	r5, r0
 80132da:	2800      	cmp	r0, #0
 80132dc:	d0af      	beq.n	801323e <rcl_wait_set_init+0x26>
 80132de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80132e0:	bb2b      	cbnz	r3, 801332e <rcl_wait_set_init+0x116>
 80132e2:	2600      	movs	r6, #0
 80132e4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80132e8:	9600      	str	r6, [sp, #0]
 80132ea:	4633      	mov	r3, r6
 80132ec:	4632      	mov	r2, r6
 80132ee:	4631      	mov	r1, r6
 80132f0:	4620      	mov	r0, r4
 80132f2:	f7ff fddb 	bl	8012eac <rcl_wait_set_resize>
 80132f6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80132f8:	2800      	cmp	r0, #0
 80132fa:	d0a0      	beq.n	801323e <rcl_wait_set_init+0x26>
 80132fc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80132fe:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013300:	4798      	blx	r3
 8013302:	4628      	mov	r0, r5
 8013304:	6326      	str	r6, [r4, #48]	@ 0x30
 8013306:	b004      	add	sp, #16
 8013308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801330c:	250b      	movs	r5, #11
 801330e:	4628      	mov	r0, r5
 8013310:	b004      	add	sp, #16
 8013312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013316:	2501      	movs	r5, #1
 8013318:	f002 fe44 	bl	8015fa4 <rmw_destroy_wait_set>
 801331c:	2800      	cmp	r0, #0
 801331e:	bf18      	it	ne
 8013320:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8013324:	e7dd      	b.n	80132e2 <rcl_wait_set_init+0xca>
 8013326:	2565      	movs	r5, #101	@ 0x65
 8013328:	e789      	b.n	801323e <rcl_wait_set_init+0x26>
 801332a:	250a      	movs	r5, #10
 801332c:	e787      	b.n	801323e <rcl_wait_set_init+0x26>
 801332e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013330:	e7f2      	b.n	8013318 <rcl_wait_set_init+0x100>
 8013332:	bf00      	nop

08013334 <rcl_wait_set_add_guard_condition>:
 8013334:	b318      	cbz	r0, 801337e <rcl_wait_set_add_guard_condition+0x4a>
 8013336:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013338:	b570      	push	{r4, r5, r6, lr}
 801333a:	4604      	mov	r4, r0
 801333c:	b30b      	cbz	r3, 8013382 <rcl_wait_set_add_guard_condition+0x4e>
 801333e:	b319      	cbz	r1, 8013388 <rcl_wait_set_add_guard_condition+0x54>
 8013340:	68dd      	ldr	r5, [r3, #12]
 8013342:	68c0      	ldr	r0, [r0, #12]
 8013344:	4285      	cmp	r5, r0
 8013346:	d217      	bcs.n	8013378 <rcl_wait_set_add_guard_condition+0x44>
 8013348:	68a0      	ldr	r0, [r4, #8]
 801334a:	1c6e      	adds	r6, r5, #1
 801334c:	60de      	str	r6, [r3, #12]
 801334e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013352:	b102      	cbz	r2, 8013356 <rcl_wait_set_add_guard_condition+0x22>
 8013354:	6015      	str	r5, [r2, #0]
 8013356:	4608      	mov	r0, r1
 8013358:	f004 fd4a 	bl	8017df0 <rcl_guard_condition_get_rmw_handle>
 801335c:	b150      	cbz	r0, 8013374 <rcl_wait_set_add_guard_condition+0x40>
 801335e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013360:	6842      	ldr	r2, [r0, #4]
 8013362:	695b      	ldr	r3, [r3, #20]
 8013364:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013368:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801336a:	6913      	ldr	r3, [r2, #16]
 801336c:	3301      	adds	r3, #1
 801336e:	2000      	movs	r0, #0
 8013370:	6113      	str	r3, [r2, #16]
 8013372:	bd70      	pop	{r4, r5, r6, pc}
 8013374:	2001      	movs	r0, #1
 8013376:	bd70      	pop	{r4, r5, r6, pc}
 8013378:	f240 3086 	movw	r0, #902	@ 0x386
 801337c:	bd70      	pop	{r4, r5, r6, pc}
 801337e:	200b      	movs	r0, #11
 8013380:	4770      	bx	lr
 8013382:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013386:	bd70      	pop	{r4, r5, r6, pc}
 8013388:	200b      	movs	r0, #11
 801338a:	bd70      	pop	{r4, r5, r6, pc}

0801338c <rcl_wait_set_add_timer>:
 801338c:	b328      	cbz	r0, 80133da <rcl_wait_set_add_timer+0x4e>
 801338e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013390:	b570      	push	{r4, r5, r6, lr}
 8013392:	4604      	mov	r4, r0
 8013394:	b31b      	cbz	r3, 80133de <rcl_wait_set_add_timer+0x52>
 8013396:	b329      	cbz	r1, 80133e4 <rcl_wait_set_add_timer+0x58>
 8013398:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801339a:	6965      	ldr	r5, [r4, #20]
 801339c:	42a8      	cmp	r0, r5
 801339e:	d219      	bcs.n	80133d4 <rcl_wait_set_add_timer+0x48>
 80133a0:	6925      	ldr	r5, [r4, #16]
 80133a2:	1c46      	adds	r6, r0, #1
 80133a4:	641e      	str	r6, [r3, #64]	@ 0x40
 80133a6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80133aa:	b102      	cbz	r2, 80133ae <rcl_wait_set_add_timer+0x22>
 80133ac:	6010      	str	r0, [r2, #0]
 80133ae:	4608      	mov	r0, r1
 80133b0:	f7ff fba6 	bl	8012b00 <rcl_timer_get_guard_condition>
 80133b4:	b168      	cbz	r0, 80133d2 <rcl_wait_set_add_timer+0x46>
 80133b6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80133b8:	68e3      	ldr	r3, [r4, #12]
 80133ba:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80133bc:	3b01      	subs	r3, #1
 80133be:	441d      	add	r5, r3
 80133c0:	f004 fd16 	bl	8017df0 <rcl_guard_condition_get_rmw_handle>
 80133c4:	b180      	cbz	r0, 80133e8 <rcl_wait_set_add_timer+0x5c>
 80133c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80133c8:	6842      	ldr	r2, [r0, #4]
 80133ca:	695b      	ldr	r3, [r3, #20]
 80133cc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80133d0:	2000      	movs	r0, #0
 80133d2:	bd70      	pop	{r4, r5, r6, pc}
 80133d4:	f240 3086 	movw	r0, #902	@ 0x386
 80133d8:	bd70      	pop	{r4, r5, r6, pc}
 80133da:	200b      	movs	r0, #11
 80133dc:	4770      	bx	lr
 80133de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80133e2:	bd70      	pop	{r4, r5, r6, pc}
 80133e4:	200b      	movs	r0, #11
 80133e6:	bd70      	pop	{r4, r5, r6, pc}
 80133e8:	2001      	movs	r0, #1
 80133ea:	bd70      	pop	{r4, r5, r6, pc}

080133ec <rcl_wait_set_add_client>:
 80133ec:	b318      	cbz	r0, 8013436 <rcl_wait_set_add_client+0x4a>
 80133ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80133f0:	b570      	push	{r4, r5, r6, lr}
 80133f2:	4604      	mov	r4, r0
 80133f4:	b30b      	cbz	r3, 801343a <rcl_wait_set_add_client+0x4e>
 80133f6:	b319      	cbz	r1, 8013440 <rcl_wait_set_add_client+0x54>
 80133f8:	699d      	ldr	r5, [r3, #24]
 80133fa:	69c0      	ldr	r0, [r0, #28]
 80133fc:	4285      	cmp	r5, r0
 80133fe:	d217      	bcs.n	8013430 <rcl_wait_set_add_client+0x44>
 8013400:	69a0      	ldr	r0, [r4, #24]
 8013402:	1c6e      	adds	r6, r5, #1
 8013404:	619e      	str	r6, [r3, #24]
 8013406:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801340a:	b102      	cbz	r2, 801340e <rcl_wait_set_add_client+0x22>
 801340c:	6015      	str	r5, [r2, #0]
 801340e:	4608      	mov	r0, r1
 8013410:	f7fe f9b2 	bl	8011778 <rcl_client_get_rmw_handle>
 8013414:	b150      	cbz	r0, 801342c <rcl_wait_set_add_client+0x40>
 8013416:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013418:	6842      	ldr	r2, [r0, #4]
 801341a:	6a1b      	ldr	r3, [r3, #32]
 801341c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013420:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013422:	69d3      	ldr	r3, [r2, #28]
 8013424:	3301      	adds	r3, #1
 8013426:	2000      	movs	r0, #0
 8013428:	61d3      	str	r3, [r2, #28]
 801342a:	bd70      	pop	{r4, r5, r6, pc}
 801342c:	2001      	movs	r0, #1
 801342e:	bd70      	pop	{r4, r5, r6, pc}
 8013430:	f240 3086 	movw	r0, #902	@ 0x386
 8013434:	bd70      	pop	{r4, r5, r6, pc}
 8013436:	200b      	movs	r0, #11
 8013438:	4770      	bx	lr
 801343a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801343e:	bd70      	pop	{r4, r5, r6, pc}
 8013440:	200b      	movs	r0, #11
 8013442:	bd70      	pop	{r4, r5, r6, pc}

08013444 <rcl_wait_set_add_service>:
 8013444:	b318      	cbz	r0, 801348e <rcl_wait_set_add_service+0x4a>
 8013446:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013448:	b570      	push	{r4, r5, r6, lr}
 801344a:	4604      	mov	r4, r0
 801344c:	b30b      	cbz	r3, 8013492 <rcl_wait_set_add_service+0x4e>
 801344e:	b319      	cbz	r1, 8013498 <rcl_wait_set_add_service+0x54>
 8013450:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013452:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013454:	4285      	cmp	r5, r0
 8013456:	d217      	bcs.n	8013488 <rcl_wait_set_add_service+0x44>
 8013458:	6a20      	ldr	r0, [r4, #32]
 801345a:	1c6e      	adds	r6, r5, #1
 801345c:	625e      	str	r6, [r3, #36]	@ 0x24
 801345e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013462:	b102      	cbz	r2, 8013466 <rcl_wait_set_add_service+0x22>
 8013464:	6015      	str	r5, [r2, #0]
 8013466:	4608      	mov	r0, r1
 8013468:	f7ff f804 	bl	8012474 <rcl_service_get_rmw_handle>
 801346c:	b150      	cbz	r0, 8013484 <rcl_wait_set_add_service+0x40>
 801346e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013470:	6842      	ldr	r2, [r0, #4]
 8013472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013474:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013478:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801347a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801347c:	3301      	adds	r3, #1
 801347e:	2000      	movs	r0, #0
 8013480:	6293      	str	r3, [r2, #40]	@ 0x28
 8013482:	bd70      	pop	{r4, r5, r6, pc}
 8013484:	2001      	movs	r0, #1
 8013486:	bd70      	pop	{r4, r5, r6, pc}
 8013488:	f240 3086 	movw	r0, #902	@ 0x386
 801348c:	bd70      	pop	{r4, r5, r6, pc}
 801348e:	200b      	movs	r0, #11
 8013490:	4770      	bx	lr
 8013492:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013496:	bd70      	pop	{r4, r5, r6, pc}
 8013498:	200b      	movs	r0, #11
 801349a:	bd70      	pop	{r4, r5, r6, pc}
 801349c:	0000      	movs	r0, r0
	...

080134a0 <rcl_wait>:
 80134a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a4:	ed2d 8b02 	vpush	{d8}
 80134a8:	b08d      	sub	sp, #52	@ 0x34
 80134aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80134ae:	2800      	cmp	r0, #0
 80134b0:	f000 8143 	beq.w	801373a <rcl_wait+0x29a>
 80134b4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80134b6:	4605      	mov	r5, r0
 80134b8:	2e00      	cmp	r6, #0
 80134ba:	f000 8112 	beq.w	80136e2 <rcl_wait+0x242>
 80134be:	6843      	ldr	r3, [r0, #4]
 80134c0:	b983      	cbnz	r3, 80134e4 <rcl_wait+0x44>
 80134c2:	68eb      	ldr	r3, [r5, #12]
 80134c4:	b973      	cbnz	r3, 80134e4 <rcl_wait+0x44>
 80134c6:	696b      	ldr	r3, [r5, #20]
 80134c8:	b963      	cbnz	r3, 80134e4 <rcl_wait+0x44>
 80134ca:	69eb      	ldr	r3, [r5, #28]
 80134cc:	b953      	cbnz	r3, 80134e4 <rcl_wait+0x44>
 80134ce:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80134d0:	b943      	cbnz	r3, 80134e4 <rcl_wait+0x44>
 80134d2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80134d4:	b933      	cbnz	r3, 80134e4 <rcl_wait+0x44>
 80134d6:	f240 3085 	movw	r0, #901	@ 0x385
 80134da:	b00d      	add	sp, #52	@ 0x34
 80134dc:	ecbd 8b02 	vpop	{d8}
 80134e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e4:	9b04      	ldr	r3, [sp, #16]
 80134e6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80134e8:	2b01      	cmp	r3, #1
 80134ea:	9b05      	ldr	r3, [sp, #20]
 80134ec:	f173 0300 	sbcs.w	r3, r3, #0
 80134f0:	f2c0 80f0 	blt.w	80136d4 <rcl_wait+0x234>
 80134f4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80134f8:	4643      	mov	r3, r8
 80134fa:	2a00      	cmp	r2, #0
 80134fc:	f000 8133 	beq.w	8013766 <rcl_wait+0x2c6>
 8013500:	2400      	movs	r4, #0
 8013502:	4613      	mov	r3, r2
 8013504:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013778 <rcl_wait+0x2d8>
 8013508:	46a2      	mov	sl, r4
 801350a:	46a3      	mov	fp, r4
 801350c:	f240 3921 	movw	r9, #801	@ 0x321
 8013510:	4632      	mov	r2, r6
 8013512:	e014      	b.n	801353e <rcl_wait+0x9e>
 8013514:	2800      	cmp	r0, #0
 8013516:	d1e0      	bne.n	80134da <rcl_wait+0x3a>
 8013518:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801351c:	4542      	cmp	r2, r8
 801351e:	eb73 0107 	sbcs.w	r1, r3, r7
 8013522:	da03      	bge.n	801352c <rcl_wait+0x8c>
 8013524:	4690      	mov	r8, r2
 8013526:	461f      	mov	r7, r3
 8013528:	f04f 0b01 	mov.w	fp, #1
 801352c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801352e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013530:	3401      	adds	r4, #1
 8013532:	f14a 0a00 	adc.w	sl, sl, #0
 8013536:	429c      	cmp	r4, r3
 8013538:	f17a 0100 	sbcs.w	r1, sl, #0
 801353c:	d228      	bcs.n	8013590 <rcl_wait+0xf0>
 801353e:	6928      	ldr	r0, [r5, #16]
 8013540:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013544:	a908      	add	r1, sp, #32
 8013546:	00a6      	lsls	r6, r4, #2
 8013548:	2800      	cmp	r0, #0
 801354a:	d0f1      	beq.n	8013530 <rcl_wait+0x90>
 801354c:	68eb      	ldr	r3, [r5, #12]
 801354e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013552:	4423      	add	r3, r4
 8013554:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013558:	f1be 0f00 	cmp.w	lr, #0
 801355c:	d006      	beq.n	801356c <rcl_wait+0xcc>
 801355e:	6913      	ldr	r3, [r2, #16]
 8013560:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013564:	3301      	adds	r3, #1
 8013566:	6113      	str	r3, [r2, #16]
 8013568:	692b      	ldr	r3, [r5, #16]
 801356a:	5998      	ldr	r0, [r3, r6]
 801356c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013570:	f7ff fa94 	bl	8012a9c <rcl_timer_get_time_until_next_call>
 8013574:	4548      	cmp	r0, r9
 8013576:	d1cd      	bne.n	8013514 <rcl_wait+0x74>
 8013578:	692b      	ldr	r3, [r5, #16]
 801357a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801357c:	2100      	movs	r1, #0
 801357e:	5199      	str	r1, [r3, r6]
 8013580:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013582:	3401      	adds	r4, #1
 8013584:	f14a 0a00 	adc.w	sl, sl, #0
 8013588:	429c      	cmp	r4, r3
 801358a:	f17a 0100 	sbcs.w	r1, sl, #0
 801358e:	d3d6      	bcc.n	801353e <rcl_wait+0x9e>
 8013590:	4616      	mov	r6, r2
 8013592:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013596:	4313      	orrs	r3, r2
 8013598:	46d9      	mov	r9, fp
 801359a:	f040 80a9 	bne.w	80136f0 <rcl_wait+0x250>
 801359e:	2300      	movs	r3, #0
 80135a0:	2200      	movs	r2, #0
 80135a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80135a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80135aa:	ab08      	add	r3, sp, #32
 80135ac:	9302      	str	r3, [sp, #8]
 80135ae:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80135b0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80135b4:	e9cd 3200 	strd	r3, r2, [sp]
 80135b8:	f106 0110 	add.w	r1, r6, #16
 80135bc:	f106 031c 	add.w	r3, r6, #28
 80135c0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80135c4:	1d30      	adds	r0, r6, #4
 80135c6:	f002 fb6b 	bl	8015ca0 <rmw_wait>
 80135ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80135cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80135ce:	4680      	mov	r8, r0
 80135d0:	b1ca      	cbz	r2, 8013606 <rcl_wait+0x166>
 80135d2:	2400      	movs	r4, #0
 80135d4:	4627      	mov	r7, r4
 80135d6:	692a      	ldr	r2, [r5, #16]
 80135d8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80135dc:	f10d 011f 	add.w	r1, sp, #31
 80135e0:	00a6      	lsls	r6, r4, #2
 80135e2:	b160      	cbz	r0, 80135fe <rcl_wait+0x15e>
 80135e4:	f88d 701f 	strb.w	r7, [sp, #31]
 80135e8:	f7ff fa1e 	bl	8012a28 <rcl_timer_is_ready>
 80135ec:	2800      	cmp	r0, #0
 80135ee:	f47f af74 	bne.w	80134da <rcl_wait+0x3a>
 80135f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80135f6:	b90b      	cbnz	r3, 80135fc <rcl_wait+0x15c>
 80135f8:	692a      	ldr	r2, [r5, #16]
 80135fa:	5193      	str	r3, [r2, r6]
 80135fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80135fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013600:	3401      	adds	r4, #1
 8013602:	42a2      	cmp	r2, r4
 8013604:	d8e7      	bhi.n	80135d6 <rcl_wait+0x136>
 8013606:	f038 0002 	bics.w	r0, r8, #2
 801360a:	f040 8090 	bne.w	801372e <rcl_wait+0x28e>
 801360e:	686e      	ldr	r6, [r5, #4]
 8013610:	4602      	mov	r2, r0
 8013612:	b91e      	cbnz	r6, 801361c <rcl_wait+0x17c>
 8013614:	e00d      	b.n	8013632 <rcl_wait+0x192>
 8013616:	3201      	adds	r2, #1
 8013618:	42b2      	cmp	r2, r6
 801361a:	d00a      	beq.n	8013632 <rcl_wait+0x192>
 801361c:	6899      	ldr	r1, [r3, #8]
 801361e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013622:	2900      	cmp	r1, #0
 8013624:	d1f7      	bne.n	8013616 <rcl_wait+0x176>
 8013626:	682c      	ldr	r4, [r5, #0]
 8013628:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801362c:	3201      	adds	r2, #1
 801362e:	42b2      	cmp	r2, r6
 8013630:	d1f4      	bne.n	801361c <rcl_wait+0x17c>
 8013632:	68ee      	ldr	r6, [r5, #12]
 8013634:	2200      	movs	r2, #0
 8013636:	b91e      	cbnz	r6, 8013640 <rcl_wait+0x1a0>
 8013638:	e00d      	b.n	8013656 <rcl_wait+0x1b6>
 801363a:	3201      	adds	r2, #1
 801363c:	42b2      	cmp	r2, r6
 801363e:	d00a      	beq.n	8013656 <rcl_wait+0x1b6>
 8013640:	6959      	ldr	r1, [r3, #20]
 8013642:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013646:	2900      	cmp	r1, #0
 8013648:	d1f7      	bne.n	801363a <rcl_wait+0x19a>
 801364a:	68ac      	ldr	r4, [r5, #8]
 801364c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013650:	3201      	adds	r2, #1
 8013652:	42b2      	cmp	r2, r6
 8013654:	d1f4      	bne.n	8013640 <rcl_wait+0x1a0>
 8013656:	69ee      	ldr	r6, [r5, #28]
 8013658:	2200      	movs	r2, #0
 801365a:	b91e      	cbnz	r6, 8013664 <rcl_wait+0x1c4>
 801365c:	e00d      	b.n	801367a <rcl_wait+0x1da>
 801365e:	3201      	adds	r2, #1
 8013660:	42b2      	cmp	r2, r6
 8013662:	d00a      	beq.n	801367a <rcl_wait+0x1da>
 8013664:	6a19      	ldr	r1, [r3, #32]
 8013666:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801366a:	2900      	cmp	r1, #0
 801366c:	d1f7      	bne.n	801365e <rcl_wait+0x1be>
 801366e:	69ac      	ldr	r4, [r5, #24]
 8013670:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013674:	3201      	adds	r2, #1
 8013676:	42b2      	cmp	r2, r6
 8013678:	d1f4      	bne.n	8013664 <rcl_wait+0x1c4>
 801367a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801367c:	2200      	movs	r2, #0
 801367e:	b91e      	cbnz	r6, 8013688 <rcl_wait+0x1e8>
 8013680:	e00d      	b.n	801369e <rcl_wait+0x1fe>
 8013682:	3201      	adds	r2, #1
 8013684:	4296      	cmp	r6, r2
 8013686:	d00a      	beq.n	801369e <rcl_wait+0x1fe>
 8013688:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801368a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801368e:	2900      	cmp	r1, #0
 8013690:	d1f7      	bne.n	8013682 <rcl_wait+0x1e2>
 8013692:	6a2c      	ldr	r4, [r5, #32]
 8013694:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013698:	3201      	adds	r2, #1
 801369a:	4296      	cmp	r6, r2
 801369c:	d1f4      	bne.n	8013688 <rcl_wait+0x1e8>
 801369e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80136a0:	2200      	movs	r2, #0
 80136a2:	b91e      	cbnz	r6, 80136ac <rcl_wait+0x20c>
 80136a4:	e00d      	b.n	80136c2 <rcl_wait+0x222>
 80136a6:	3201      	adds	r2, #1
 80136a8:	42b2      	cmp	r2, r6
 80136aa:	d00a      	beq.n	80136c2 <rcl_wait+0x222>
 80136ac:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80136ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80136b2:	2900      	cmp	r1, #0
 80136b4:	d1f7      	bne.n	80136a6 <rcl_wait+0x206>
 80136b6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80136b8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80136bc:	3201      	adds	r2, #1
 80136be:	42b2      	cmp	r2, r6
 80136c0:	d1f4      	bne.n	80136ac <rcl_wait+0x20c>
 80136c2:	f1b8 0f02 	cmp.w	r8, #2
 80136c6:	f47f af08 	bne.w	80134da <rcl_wait+0x3a>
 80136ca:	464b      	mov	r3, r9
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	bf08      	it	eq
 80136d0:	2002      	moveq	r0, #2
 80136d2:	e702      	b.n	80134da <rcl_wait+0x3a>
 80136d4:	2a00      	cmp	r2, #0
 80136d6:	d03a      	beq.n	801374e <rcl_wait+0x2ae>
 80136d8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80136dc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80136e0:	e70e      	b.n	8013500 <rcl_wait+0x60>
 80136e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80136e6:	b00d      	add	sp, #52	@ 0x34
 80136e8:	ecbd 8b02 	vpop	{d8}
 80136ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f0:	9b04      	ldr	r3, [sp, #16]
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	9b05      	ldr	r3, [sp, #20]
 80136f6:	f173 0300 	sbcs.w	r3, r3, #0
 80136fa:	db24      	blt.n	8013746 <rcl_wait+0x2a6>
 80136fc:	2f00      	cmp	r7, #0
 80136fe:	bfbc      	itt	lt
 8013700:	f04f 0800 	movlt.w	r8, #0
 8013704:	4647      	movlt	r7, r8
 8013706:	a31e      	add	r3, pc, #120	@ (adr r3, 8013780 <rcl_wait+0x2e0>)
 8013708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370c:	4640      	mov	r0, r8
 801370e:	4639      	mov	r1, r7
 8013710:	f7ed fa84 	bl	8000c1c <__aeabi_ldivmod>
 8013714:	a31a      	add	r3, pc, #104	@ (adr r3, 8013780 <rcl_wait+0x2e0>)
 8013716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801371e:	4640      	mov	r0, r8
 8013720:	4639      	mov	r1, r7
 8013722:	f7ed fa7b 	bl	8000c1c <__aeabi_ldivmod>
 8013726:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801372a:	ab08      	add	r3, sp, #32
 801372c:	e73e      	b.n	80135ac <rcl_wait+0x10c>
 801372e:	2001      	movs	r0, #1
 8013730:	b00d      	add	sp, #52	@ 0x34
 8013732:	ecbd 8b02 	vpop	{d8}
 8013736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801373a:	200b      	movs	r0, #11
 801373c:	b00d      	add	sp, #52	@ 0x34
 801373e:	ecbd 8b02 	vpop	{d8}
 8013742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013746:	465b      	mov	r3, fp
 8013748:	2b00      	cmp	r3, #0
 801374a:	d1d7      	bne.n	80136fc <rcl_wait+0x25c>
 801374c:	e72e      	b.n	80135ac <rcl_wait+0x10c>
 801374e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013752:	430b      	orrs	r3, r1
 8013754:	bf08      	it	eq
 8013756:	4691      	moveq	r9, r2
 8013758:	f43f af21 	beq.w	801359e <rcl_wait+0xfe>
 801375c:	9b04      	ldr	r3, [sp, #16]
 801375e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013762:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013766:	2b01      	cmp	r3, #1
 8013768:	9b05      	ldr	r3, [sp, #20]
 801376a:	f173 0300 	sbcs.w	r3, r3, #0
 801376e:	f04f 0300 	mov.w	r3, #0
 8013772:	4699      	mov	r9, r3
 8013774:	dac2      	bge.n	80136fc <rcl_wait+0x25c>
 8013776:	e719      	b.n	80135ac <rcl_wait+0x10c>
 8013778:	ffffffff 	.word	0xffffffff
 801377c:	7fffffff 	.word	0x7fffffff
 8013780:	3b9aca00 	.word	0x3b9aca00
 8013784:	00000000 	.word	0x00000000

08013788 <rcl_action_take_goal_response>:
 8013788:	2800      	cmp	r0, #0
 801378a:	d039      	beq.n	8013800 <rcl_action_take_goal_response+0x78>
 801378c:	b570      	push	{r4, r5, r6, lr}
 801378e:	4604      	mov	r4, r0
 8013790:	6800      	ldr	r0, [r0, #0]
 8013792:	b380      	cbz	r0, 80137f6 <rcl_action_take_goal_response+0x6e>
 8013794:	460d      	mov	r5, r1
 8013796:	4616      	mov	r6, r2
 8013798:	f7fe f872 	bl	8011880 <rcl_client_is_valid>
 801379c:	b330      	cbz	r0, 80137ec <rcl_action_take_goal_response+0x64>
 801379e:	6820      	ldr	r0, [r4, #0]
 80137a0:	3004      	adds	r0, #4
 80137a2:	f7fe f86d 	bl	8011880 <rcl_client_is_valid>
 80137a6:	b308      	cbz	r0, 80137ec <rcl_action_take_goal_response+0x64>
 80137a8:	6820      	ldr	r0, [r4, #0]
 80137aa:	3008      	adds	r0, #8
 80137ac:	f7fe f868 	bl	8011880 <rcl_client_is_valid>
 80137b0:	b1e0      	cbz	r0, 80137ec <rcl_action_take_goal_response+0x64>
 80137b2:	6820      	ldr	r0, [r4, #0]
 80137b4:	300c      	adds	r0, #12
 80137b6:	f7fe ffff 	bl	80127b8 <rcl_subscription_is_valid>
 80137ba:	b1b8      	cbz	r0, 80137ec <rcl_action_take_goal_response+0x64>
 80137bc:	6820      	ldr	r0, [r4, #0]
 80137be:	3010      	adds	r0, #16
 80137c0:	f7fe fffa 	bl	80127b8 <rcl_subscription_is_valid>
 80137c4:	b190      	cbz	r0, 80137ec <rcl_action_take_goal_response+0x64>
 80137c6:	b1cd      	cbz	r5, 80137fc <rcl_action_take_goal_response+0x74>
 80137c8:	b1c6      	cbz	r6, 80137fc <rcl_action_take_goal_response+0x74>
 80137ca:	6820      	ldr	r0, [r4, #0]
 80137cc:	4632      	mov	r2, r6
 80137ce:	4629      	mov	r1, r5
 80137d0:	f7fe f80e 	bl	80117f0 <rcl_take_response>
 80137d4:	b148      	cbz	r0, 80137ea <rcl_action_take_goal_response+0x62>
 80137d6:	280a      	cmp	r0, #10
 80137d8:	d007      	beq.n	80137ea <rcl_action_take_goal_response+0x62>
 80137da:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80137de:	f640 0337 	movw	r3, #2103	@ 0x837
 80137e2:	4290      	cmp	r0, r2
 80137e4:	bf0c      	ite	eq
 80137e6:	4618      	moveq	r0, r3
 80137e8:	2001      	movne	r0, #1
 80137ea:	bd70      	pop	{r4, r5, r6, pc}
 80137ec:	f7f7 febc 	bl	800b568 <rcutils_reset_error>
 80137f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80137f4:	bd70      	pop	{r4, r5, r6, pc}
 80137f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80137fa:	bd70      	pop	{r4, r5, r6, pc}
 80137fc:	200b      	movs	r0, #11
 80137fe:	bd70      	pop	{r4, r5, r6, pc}
 8013800:	f640 0036 	movw	r0, #2102	@ 0x836
 8013804:	4770      	bx	lr
 8013806:	bf00      	nop

08013808 <rcl_action_send_result_request>:
 8013808:	b390      	cbz	r0, 8013870 <rcl_action_send_result_request+0x68>
 801380a:	b570      	push	{r4, r5, r6, lr}
 801380c:	4604      	mov	r4, r0
 801380e:	6800      	ldr	r0, [r0, #0]
 8013810:	b348      	cbz	r0, 8013866 <rcl_action_send_result_request+0x5e>
 8013812:	460d      	mov	r5, r1
 8013814:	4616      	mov	r6, r2
 8013816:	f7fe f833 	bl	8011880 <rcl_client_is_valid>
 801381a:	b1f8      	cbz	r0, 801385c <rcl_action_send_result_request+0x54>
 801381c:	6820      	ldr	r0, [r4, #0]
 801381e:	3004      	adds	r0, #4
 8013820:	f7fe f82e 	bl	8011880 <rcl_client_is_valid>
 8013824:	b1d0      	cbz	r0, 801385c <rcl_action_send_result_request+0x54>
 8013826:	6820      	ldr	r0, [r4, #0]
 8013828:	3008      	adds	r0, #8
 801382a:	f7fe f829 	bl	8011880 <rcl_client_is_valid>
 801382e:	b1a8      	cbz	r0, 801385c <rcl_action_send_result_request+0x54>
 8013830:	6820      	ldr	r0, [r4, #0]
 8013832:	300c      	adds	r0, #12
 8013834:	f7fe ffc0 	bl	80127b8 <rcl_subscription_is_valid>
 8013838:	b180      	cbz	r0, 801385c <rcl_action_send_result_request+0x54>
 801383a:	6820      	ldr	r0, [r4, #0]
 801383c:	3010      	adds	r0, #16
 801383e:	f7fe ffbb 	bl	80127b8 <rcl_subscription_is_valid>
 8013842:	b158      	cbz	r0, 801385c <rcl_action_send_result_request+0x54>
 8013844:	b195      	cbz	r5, 801386c <rcl_action_send_result_request+0x64>
 8013846:	b18e      	cbz	r6, 801386c <rcl_action_send_result_request+0x64>
 8013848:	6820      	ldr	r0, [r4, #0]
 801384a:	4632      	mov	r2, r6
 801384c:	4629      	mov	r1, r5
 801384e:	3008      	adds	r0, #8
 8013850:	f7fd ff98 	bl	8011784 <rcl_send_request>
 8013854:	3800      	subs	r0, #0
 8013856:	bf18      	it	ne
 8013858:	2001      	movne	r0, #1
 801385a:	bd70      	pop	{r4, r5, r6, pc}
 801385c:	f7f7 fe84 	bl	800b568 <rcutils_reset_error>
 8013860:	f640 0036 	movw	r0, #2102	@ 0x836
 8013864:	bd70      	pop	{r4, r5, r6, pc}
 8013866:	f640 0036 	movw	r0, #2102	@ 0x836
 801386a:	bd70      	pop	{r4, r5, r6, pc}
 801386c:	200b      	movs	r0, #11
 801386e:	bd70      	pop	{r4, r5, r6, pc}
 8013870:	f640 0036 	movw	r0, #2102	@ 0x836
 8013874:	4770      	bx	lr
 8013876:	bf00      	nop

08013878 <rcl_action_take_result_response>:
 8013878:	2800      	cmp	r0, #0
 801387a:	d03a      	beq.n	80138f2 <rcl_action_take_result_response+0x7a>
 801387c:	b570      	push	{r4, r5, r6, lr}
 801387e:	4604      	mov	r4, r0
 8013880:	6800      	ldr	r0, [r0, #0]
 8013882:	b388      	cbz	r0, 80138e8 <rcl_action_take_result_response+0x70>
 8013884:	460d      	mov	r5, r1
 8013886:	4616      	mov	r6, r2
 8013888:	f7fd fffa 	bl	8011880 <rcl_client_is_valid>
 801388c:	b338      	cbz	r0, 80138de <rcl_action_take_result_response+0x66>
 801388e:	6820      	ldr	r0, [r4, #0]
 8013890:	3004      	adds	r0, #4
 8013892:	f7fd fff5 	bl	8011880 <rcl_client_is_valid>
 8013896:	b310      	cbz	r0, 80138de <rcl_action_take_result_response+0x66>
 8013898:	6820      	ldr	r0, [r4, #0]
 801389a:	3008      	adds	r0, #8
 801389c:	f7fd fff0 	bl	8011880 <rcl_client_is_valid>
 80138a0:	b1e8      	cbz	r0, 80138de <rcl_action_take_result_response+0x66>
 80138a2:	6820      	ldr	r0, [r4, #0]
 80138a4:	300c      	adds	r0, #12
 80138a6:	f7fe ff87 	bl	80127b8 <rcl_subscription_is_valid>
 80138aa:	b1c0      	cbz	r0, 80138de <rcl_action_take_result_response+0x66>
 80138ac:	6820      	ldr	r0, [r4, #0]
 80138ae:	3010      	adds	r0, #16
 80138b0:	f7fe ff82 	bl	80127b8 <rcl_subscription_is_valid>
 80138b4:	b198      	cbz	r0, 80138de <rcl_action_take_result_response+0x66>
 80138b6:	b1d5      	cbz	r5, 80138ee <rcl_action_take_result_response+0x76>
 80138b8:	b1ce      	cbz	r6, 80138ee <rcl_action_take_result_response+0x76>
 80138ba:	6820      	ldr	r0, [r4, #0]
 80138bc:	4632      	mov	r2, r6
 80138be:	4629      	mov	r1, r5
 80138c0:	3008      	adds	r0, #8
 80138c2:	f7fd ff95 	bl	80117f0 <rcl_take_response>
 80138c6:	b148      	cbz	r0, 80138dc <rcl_action_take_result_response+0x64>
 80138c8:	280a      	cmp	r0, #10
 80138ca:	d007      	beq.n	80138dc <rcl_action_take_result_response+0x64>
 80138cc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80138d0:	f640 0337 	movw	r3, #2103	@ 0x837
 80138d4:	4290      	cmp	r0, r2
 80138d6:	bf0c      	ite	eq
 80138d8:	4618      	moveq	r0, r3
 80138da:	2001      	movne	r0, #1
 80138dc:	bd70      	pop	{r4, r5, r6, pc}
 80138de:	f7f7 fe43 	bl	800b568 <rcutils_reset_error>
 80138e2:	f640 0036 	movw	r0, #2102	@ 0x836
 80138e6:	bd70      	pop	{r4, r5, r6, pc}
 80138e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80138ec:	bd70      	pop	{r4, r5, r6, pc}
 80138ee:	200b      	movs	r0, #11
 80138f0:	bd70      	pop	{r4, r5, r6, pc}
 80138f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80138f6:	4770      	bx	lr

080138f8 <rcl_action_take_cancel_response>:
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d03a      	beq.n	8013972 <rcl_action_take_cancel_response+0x7a>
 80138fc:	b570      	push	{r4, r5, r6, lr}
 80138fe:	4604      	mov	r4, r0
 8013900:	6800      	ldr	r0, [r0, #0]
 8013902:	b388      	cbz	r0, 8013968 <rcl_action_take_cancel_response+0x70>
 8013904:	460d      	mov	r5, r1
 8013906:	4616      	mov	r6, r2
 8013908:	f7fd ffba 	bl	8011880 <rcl_client_is_valid>
 801390c:	b338      	cbz	r0, 801395e <rcl_action_take_cancel_response+0x66>
 801390e:	6820      	ldr	r0, [r4, #0]
 8013910:	3004      	adds	r0, #4
 8013912:	f7fd ffb5 	bl	8011880 <rcl_client_is_valid>
 8013916:	b310      	cbz	r0, 801395e <rcl_action_take_cancel_response+0x66>
 8013918:	6820      	ldr	r0, [r4, #0]
 801391a:	3008      	adds	r0, #8
 801391c:	f7fd ffb0 	bl	8011880 <rcl_client_is_valid>
 8013920:	b1e8      	cbz	r0, 801395e <rcl_action_take_cancel_response+0x66>
 8013922:	6820      	ldr	r0, [r4, #0]
 8013924:	300c      	adds	r0, #12
 8013926:	f7fe ff47 	bl	80127b8 <rcl_subscription_is_valid>
 801392a:	b1c0      	cbz	r0, 801395e <rcl_action_take_cancel_response+0x66>
 801392c:	6820      	ldr	r0, [r4, #0]
 801392e:	3010      	adds	r0, #16
 8013930:	f7fe ff42 	bl	80127b8 <rcl_subscription_is_valid>
 8013934:	b198      	cbz	r0, 801395e <rcl_action_take_cancel_response+0x66>
 8013936:	b1d5      	cbz	r5, 801396e <rcl_action_take_cancel_response+0x76>
 8013938:	b1ce      	cbz	r6, 801396e <rcl_action_take_cancel_response+0x76>
 801393a:	6820      	ldr	r0, [r4, #0]
 801393c:	4632      	mov	r2, r6
 801393e:	4629      	mov	r1, r5
 8013940:	3004      	adds	r0, #4
 8013942:	f7fd ff55 	bl	80117f0 <rcl_take_response>
 8013946:	b148      	cbz	r0, 801395c <rcl_action_take_cancel_response+0x64>
 8013948:	280a      	cmp	r0, #10
 801394a:	d007      	beq.n	801395c <rcl_action_take_cancel_response+0x64>
 801394c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013950:	f640 0337 	movw	r3, #2103	@ 0x837
 8013954:	4290      	cmp	r0, r2
 8013956:	bf0c      	ite	eq
 8013958:	4618      	moveq	r0, r3
 801395a:	2001      	movne	r0, #1
 801395c:	bd70      	pop	{r4, r5, r6, pc}
 801395e:	f7f7 fe03 	bl	800b568 <rcutils_reset_error>
 8013962:	f640 0036 	movw	r0, #2102	@ 0x836
 8013966:	bd70      	pop	{r4, r5, r6, pc}
 8013968:	f640 0036 	movw	r0, #2102	@ 0x836
 801396c:	bd70      	pop	{r4, r5, r6, pc}
 801396e:	200b      	movs	r0, #11
 8013970:	bd70      	pop	{r4, r5, r6, pc}
 8013972:	f640 0036 	movw	r0, #2102	@ 0x836
 8013976:	4770      	bx	lr

08013978 <rcl_action_take_feedback>:
 8013978:	2800      	cmp	r0, #0
 801397a:	d038      	beq.n	80139ee <rcl_action_take_feedback+0x76>
 801397c:	b530      	push	{r4, r5, lr}
 801397e:	4604      	mov	r4, r0
 8013980:	6800      	ldr	r0, [r0, #0]
 8013982:	b091      	sub	sp, #68	@ 0x44
 8013984:	b378      	cbz	r0, 80139e6 <rcl_action_take_feedback+0x6e>
 8013986:	460d      	mov	r5, r1
 8013988:	f7fd ff7a 	bl	8011880 <rcl_client_is_valid>
 801398c:	b328      	cbz	r0, 80139da <rcl_action_take_feedback+0x62>
 801398e:	6820      	ldr	r0, [r4, #0]
 8013990:	3004      	adds	r0, #4
 8013992:	f7fd ff75 	bl	8011880 <rcl_client_is_valid>
 8013996:	b300      	cbz	r0, 80139da <rcl_action_take_feedback+0x62>
 8013998:	6820      	ldr	r0, [r4, #0]
 801399a:	3008      	adds	r0, #8
 801399c:	f7fd ff70 	bl	8011880 <rcl_client_is_valid>
 80139a0:	b1d8      	cbz	r0, 80139da <rcl_action_take_feedback+0x62>
 80139a2:	6820      	ldr	r0, [r4, #0]
 80139a4:	300c      	adds	r0, #12
 80139a6:	f7fe ff07 	bl	80127b8 <rcl_subscription_is_valid>
 80139aa:	b1b0      	cbz	r0, 80139da <rcl_action_take_feedback+0x62>
 80139ac:	6820      	ldr	r0, [r4, #0]
 80139ae:	3010      	adds	r0, #16
 80139b0:	f7fe ff02 	bl	80127b8 <rcl_subscription_is_valid>
 80139b4:	b188      	cbz	r0, 80139da <rcl_action_take_feedback+0x62>
 80139b6:	b1ed      	cbz	r5, 80139f4 <rcl_action_take_feedback+0x7c>
 80139b8:	6820      	ldr	r0, [r4, #0]
 80139ba:	2300      	movs	r3, #0
 80139bc:	466a      	mov	r2, sp
 80139be:	4629      	mov	r1, r5
 80139c0:	300c      	adds	r0, #12
 80139c2:	f7fe fe9b 	bl	80126fc <rcl_take>
 80139c6:	b160      	cbz	r0, 80139e2 <rcl_action_take_feedback+0x6a>
 80139c8:	f240 1391 	movw	r3, #401	@ 0x191
 80139cc:	4298      	cmp	r0, r3
 80139ce:	d014      	beq.n	80139fa <rcl_action_take_feedback+0x82>
 80139d0:	280a      	cmp	r0, #10
 80139d2:	bf18      	it	ne
 80139d4:	2001      	movne	r0, #1
 80139d6:	b011      	add	sp, #68	@ 0x44
 80139d8:	bd30      	pop	{r4, r5, pc}
 80139da:	f7f7 fdc5 	bl	800b568 <rcutils_reset_error>
 80139de:	f640 0036 	movw	r0, #2102	@ 0x836
 80139e2:	b011      	add	sp, #68	@ 0x44
 80139e4:	bd30      	pop	{r4, r5, pc}
 80139e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80139ea:	b011      	add	sp, #68	@ 0x44
 80139ec:	bd30      	pop	{r4, r5, pc}
 80139ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80139f2:	4770      	bx	lr
 80139f4:	200b      	movs	r0, #11
 80139f6:	b011      	add	sp, #68	@ 0x44
 80139f8:	bd30      	pop	{r4, r5, pc}
 80139fa:	f640 0037 	movw	r0, #2103	@ 0x837
 80139fe:	e7f0      	b.n	80139e2 <rcl_action_take_feedback+0x6a>

08013a00 <rcl_action_wait_set_add_action_client>:
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d048      	beq.n	8013a96 <rcl_action_wait_set_add_action_client+0x96>
 8013a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a06:	460c      	mov	r4, r1
 8013a08:	2900      	cmp	r1, #0
 8013a0a:	d03c      	beq.n	8013a86 <rcl_action_wait_set_add_action_client+0x86>
 8013a0c:	4605      	mov	r5, r0
 8013a0e:	6808      	ldr	r0, [r1, #0]
 8013a10:	2800      	cmp	r0, #0
 8013a12:	d038      	beq.n	8013a86 <rcl_action_wait_set_add_action_client+0x86>
 8013a14:	4617      	mov	r7, r2
 8013a16:	461e      	mov	r6, r3
 8013a18:	f7fd ff32 	bl	8011880 <rcl_client_is_valid>
 8013a1c:	b3b0      	cbz	r0, 8013a8c <rcl_action_wait_set_add_action_client+0x8c>
 8013a1e:	6820      	ldr	r0, [r4, #0]
 8013a20:	3004      	adds	r0, #4
 8013a22:	f7fd ff2d 	bl	8011880 <rcl_client_is_valid>
 8013a26:	b388      	cbz	r0, 8013a8c <rcl_action_wait_set_add_action_client+0x8c>
 8013a28:	6820      	ldr	r0, [r4, #0]
 8013a2a:	3008      	adds	r0, #8
 8013a2c:	f7fd ff28 	bl	8011880 <rcl_client_is_valid>
 8013a30:	b360      	cbz	r0, 8013a8c <rcl_action_wait_set_add_action_client+0x8c>
 8013a32:	6820      	ldr	r0, [r4, #0]
 8013a34:	300c      	adds	r0, #12
 8013a36:	f7fe febf 	bl	80127b8 <rcl_subscription_is_valid>
 8013a3a:	b338      	cbz	r0, 8013a8c <rcl_action_wait_set_add_action_client+0x8c>
 8013a3c:	6820      	ldr	r0, [r4, #0]
 8013a3e:	3010      	adds	r0, #16
 8013a40:	f7fe feba 	bl	80127b8 <rcl_subscription_is_valid>
 8013a44:	b310      	cbz	r0, 8013a8c <rcl_action_wait_set_add_action_client+0x8c>
 8013a46:	6821      	ldr	r1, [r4, #0]
 8013a48:	4628      	mov	r0, r5
 8013a4a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8013a4e:	f7ff fccd 	bl	80133ec <rcl_wait_set_add_client>
 8013a52:	b9b8      	cbnz	r0, 8013a84 <rcl_action_wait_set_add_action_client+0x84>
 8013a54:	6821      	ldr	r1, [r4, #0]
 8013a56:	4628      	mov	r0, r5
 8013a58:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8013a5c:	3104      	adds	r1, #4
 8013a5e:	f7ff fcc5 	bl	80133ec <rcl_wait_set_add_client>
 8013a62:	b978      	cbnz	r0, 8013a84 <rcl_action_wait_set_add_action_client+0x84>
 8013a64:	6821      	ldr	r1, [r4, #0]
 8013a66:	4628      	mov	r0, r5
 8013a68:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8013a6c:	3108      	adds	r1, #8
 8013a6e:	f7ff fcbd 	bl	80133ec <rcl_wait_set_add_client>
 8013a72:	b938      	cbnz	r0, 8013a84 <rcl_action_wait_set_add_action_client+0x84>
 8013a74:	6821      	ldr	r1, [r4, #0]
 8013a76:	4628      	mov	r0, r5
 8013a78:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8013a7c:	310c      	adds	r1, #12
 8013a7e:	f7ff f96d 	bl	8012d5c <rcl_wait_set_add_subscription>
 8013a82:	b158      	cbz	r0, 8013a9c <rcl_action_wait_set_add_action_client+0x9c>
 8013a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a86:	f640 0036 	movw	r0, #2102	@ 0x836
 8013a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a8c:	f7f7 fd6c 	bl	800b568 <rcutils_reset_error>
 8013a90:	f640 0036 	movw	r0, #2102	@ 0x836
 8013a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a9a:	4770      	bx	lr
 8013a9c:	6821      	ldr	r1, [r4, #0]
 8013a9e:	4628      	mov	r0, r5
 8013aa0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8013aa4:	3110      	adds	r1, #16
 8013aa6:	f7ff f959 	bl	8012d5c <rcl_wait_set_add_subscription>
 8013aaa:	2800      	cmp	r0, #0
 8013aac:	d1ea      	bne.n	8013a84 <rcl_action_wait_set_add_action_client+0x84>
 8013aae:	b11f      	cbz	r7, 8013ab8 <rcl_action_wait_set_add_action_client+0xb8>
 8013ab0:	6823      	ldr	r3, [r4, #0]
 8013ab2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8013ab6:	603b      	str	r3, [r7, #0]
 8013ab8:	2e00      	cmp	r6, #0
 8013aba:	d0e3      	beq.n	8013a84 <rcl_action_wait_set_add_action_client+0x84>
 8013abc:	6823      	ldr	r3, [r4, #0]
 8013abe:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8013ac2:	6033      	str	r3, [r6, #0]
 8013ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ac6:	bf00      	nop

08013ac8 <rcl_action_client_wait_set_get_entities_ready>:
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	f000 808d 	beq.w	8013be8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8013ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ad2:	460c      	mov	r4, r1
 8013ad4:	2900      	cmp	r1, #0
 8013ad6:	d077      	beq.n	8013bc8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013ad8:	4605      	mov	r5, r0
 8013ada:	6808      	ldr	r0, [r1, #0]
 8013adc:	2800      	cmp	r0, #0
 8013ade:	d073      	beq.n	8013bc8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013ae0:	4616      	mov	r6, r2
 8013ae2:	461f      	mov	r7, r3
 8013ae4:	f7fd fecc 	bl	8011880 <rcl_client_is_valid>
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	d071      	beq.n	8013bd0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013aec:	6820      	ldr	r0, [r4, #0]
 8013aee:	3004      	adds	r0, #4
 8013af0:	f7fd fec6 	bl	8011880 <rcl_client_is_valid>
 8013af4:	2800      	cmp	r0, #0
 8013af6:	d06b      	beq.n	8013bd0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013af8:	6820      	ldr	r0, [r4, #0]
 8013afa:	3008      	adds	r0, #8
 8013afc:	f7fd fec0 	bl	8011880 <rcl_client_is_valid>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	d065      	beq.n	8013bd0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013b04:	6820      	ldr	r0, [r4, #0]
 8013b06:	300c      	adds	r0, #12
 8013b08:	f7fe fe56 	bl	80127b8 <rcl_subscription_is_valid>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	d05f      	beq.n	8013bd0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013b10:	6820      	ldr	r0, [r4, #0]
 8013b12:	3010      	adds	r0, #16
 8013b14:	f7fe fe50 	bl	80127b8 <rcl_subscription_is_valid>
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	d059      	beq.n	8013bd0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013b1c:	2e00      	cmp	r6, #0
 8013b1e:	d060      	beq.n	8013be2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013b20:	2f00      	cmp	r7, #0
 8013b22:	d05e      	beq.n	8013be2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013b24:	9b06      	ldr	r3, [sp, #24]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d05b      	beq.n	8013be2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013b2a:	9b07      	ldr	r3, [sp, #28]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d058      	beq.n	8013be2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013b30:	9b08      	ldr	r3, [sp, #32]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d055      	beq.n	8013be2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013b36:	6823      	ldr	r3, [r4, #0]
 8013b38:	686a      	ldr	r2, [r5, #4]
 8013b3a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8013b3e:	428a      	cmp	r2, r1
 8013b40:	d94c      	bls.n	8013bdc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013b42:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8013b46:	4282      	cmp	r2, r0
 8013b48:	d948      	bls.n	8013bdc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013b4a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8013b4e:	69ea      	ldr	r2, [r5, #28]
 8013b50:	42a2      	cmp	r2, r4
 8013b52:	d943      	bls.n	8013bdc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013b54:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8013b58:	4562      	cmp	r2, ip
 8013b5a:	d93f      	bls.n	8013bdc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013b5c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8013b60:	4572      	cmp	r2, lr
 8013b62:	d93b      	bls.n	8013bdc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013b64:	69aa      	ldr	r2, [r5, #24]
 8013b66:	682d      	ldr	r5, [r5, #0]
 8013b68:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8013b6c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8013b70:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8013b74:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8013b78:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8013b7c:	f103 0c0c 	add.w	ip, r3, #12
 8013b80:	eba5 050c 	sub.w	r5, r5, ip
 8013b84:	fab5 f585 	clz	r5, r5
 8013b88:	096d      	lsrs	r5, r5, #5
 8013b8a:	7035      	strb	r5, [r6, #0]
 8013b8c:	f103 0510 	add.w	r5, r3, #16
 8013b90:	1b64      	subs	r4, r4, r5
 8013b92:	fab4 f484 	clz	r4, r4
 8013b96:	0964      	lsrs	r4, r4, #5
 8013b98:	703c      	strb	r4, [r7, #0]
 8013b9a:	eba3 0008 	sub.w	r0, r3, r8
 8013b9e:	1d1c      	adds	r4, r3, #4
 8013ba0:	3308      	adds	r3, #8
 8013ba2:	1ad3      	subs	r3, r2, r3
 8013ba4:	fab0 f080 	clz	r0, r0
 8013ba8:	9a06      	ldr	r2, [sp, #24]
 8013baa:	0940      	lsrs	r0, r0, #5
 8013bac:	1b09      	subs	r1, r1, r4
 8013bae:	7010      	strb	r0, [r2, #0]
 8013bb0:	fab1 f181 	clz	r1, r1
 8013bb4:	9a07      	ldr	r2, [sp, #28]
 8013bb6:	0949      	lsrs	r1, r1, #5
 8013bb8:	7011      	strb	r1, [r2, #0]
 8013bba:	fab3 f383 	clz	r3, r3
 8013bbe:	9a08      	ldr	r2, [sp, #32]
 8013bc0:	095b      	lsrs	r3, r3, #5
 8013bc2:	2000      	movs	r0, #0
 8013bc4:	7013      	strb	r3, [r2, #0]
 8013bc6:	e001      	b.n	8013bcc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013bc8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd0:	f7f7 fcca 	bl	800b568 <rcutils_reset_error>
 8013bd4:	f640 0036 	movw	r0, #2102	@ 0x836
 8013bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bdc:	2001      	movs	r0, #1
 8013bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013be2:	200b      	movs	r0, #11
 8013be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013be8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013bec:	4770      	bx	lr
 8013bee:	bf00      	nop

08013bf0 <rcl_action_take_goal_request>:
 8013bf0:	2800      	cmp	r0, #0
 8013bf2:	d039      	beq.n	8013c68 <rcl_action_take_goal_request+0x78>
 8013bf4:	b570      	push	{r4, r5, r6, lr}
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	6800      	ldr	r0, [r0, #0]
 8013bfa:	b380      	cbz	r0, 8013c5e <rcl_action_take_goal_request+0x6e>
 8013bfc:	460d      	mov	r5, r1
 8013bfe:	4616      	mov	r6, r2
 8013c00:	f7fe fc96 	bl	8012530 <rcl_service_is_valid>
 8013c04:	b330      	cbz	r0, 8013c54 <rcl_action_take_goal_request+0x64>
 8013c06:	6820      	ldr	r0, [r4, #0]
 8013c08:	3004      	adds	r0, #4
 8013c0a:	f7fe fc91 	bl	8012530 <rcl_service_is_valid>
 8013c0e:	b308      	cbz	r0, 8013c54 <rcl_action_take_goal_request+0x64>
 8013c10:	6820      	ldr	r0, [r4, #0]
 8013c12:	3008      	adds	r0, #8
 8013c14:	f7fe fc8c 	bl	8012530 <rcl_service_is_valid>
 8013c18:	b1e0      	cbz	r0, 8013c54 <rcl_action_take_goal_request+0x64>
 8013c1a:	6820      	ldr	r0, [r4, #0]
 8013c1c:	300c      	adds	r0, #12
 8013c1e:	f7f6 fd13 	bl	800a648 <rcl_publisher_is_valid>
 8013c22:	b1b8      	cbz	r0, 8013c54 <rcl_action_take_goal_request+0x64>
 8013c24:	6820      	ldr	r0, [r4, #0]
 8013c26:	3010      	adds	r0, #16
 8013c28:	f7f6 fd0e 	bl	800a648 <rcl_publisher_is_valid>
 8013c2c:	b190      	cbz	r0, 8013c54 <rcl_action_take_goal_request+0x64>
 8013c2e:	b1cd      	cbz	r5, 8013c64 <rcl_action_take_goal_request+0x74>
 8013c30:	b1c6      	cbz	r6, 8013c64 <rcl_action_take_goal_request+0x74>
 8013c32:	6820      	ldr	r0, [r4, #0]
 8013c34:	4632      	mov	r2, r6
 8013c36:	4629      	mov	r1, r5
 8013c38:	f7fe fc22 	bl	8012480 <rcl_take_request>
 8013c3c:	b148      	cbz	r0, 8013c52 <rcl_action_take_goal_request+0x62>
 8013c3e:	280a      	cmp	r0, #10
 8013c40:	d007      	beq.n	8013c52 <rcl_action_take_goal_request+0x62>
 8013c42:	f240 2259 	movw	r2, #601	@ 0x259
 8013c46:	f640 0399 	movw	r3, #2201	@ 0x899
 8013c4a:	4290      	cmp	r0, r2
 8013c4c:	bf0c      	ite	eq
 8013c4e:	4618      	moveq	r0, r3
 8013c50:	2001      	movne	r0, #1
 8013c52:	bd70      	pop	{r4, r5, r6, pc}
 8013c54:	f7f7 fc88 	bl	800b568 <rcutils_reset_error>
 8013c58:	f640 0098 	movw	r0, #2200	@ 0x898
 8013c5c:	bd70      	pop	{r4, r5, r6, pc}
 8013c5e:	f640 0098 	movw	r0, #2200	@ 0x898
 8013c62:	bd70      	pop	{r4, r5, r6, pc}
 8013c64:	200b      	movs	r0, #11
 8013c66:	bd70      	pop	{r4, r5, r6, pc}
 8013c68:	f640 0098 	movw	r0, #2200	@ 0x898
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop

08013c70 <rcl_action_send_goal_response>:
 8013c70:	b390      	cbz	r0, 8013cd8 <rcl_action_send_goal_response+0x68>
 8013c72:	b570      	push	{r4, r5, r6, lr}
 8013c74:	4604      	mov	r4, r0
 8013c76:	6800      	ldr	r0, [r0, #0]
 8013c78:	b348      	cbz	r0, 8013cce <rcl_action_send_goal_response+0x5e>
 8013c7a:	460d      	mov	r5, r1
 8013c7c:	4616      	mov	r6, r2
 8013c7e:	f7fe fc57 	bl	8012530 <rcl_service_is_valid>
 8013c82:	b1f8      	cbz	r0, 8013cc4 <rcl_action_send_goal_response+0x54>
 8013c84:	6820      	ldr	r0, [r4, #0]
 8013c86:	3004      	adds	r0, #4
 8013c88:	f7fe fc52 	bl	8012530 <rcl_service_is_valid>
 8013c8c:	b1d0      	cbz	r0, 8013cc4 <rcl_action_send_goal_response+0x54>
 8013c8e:	6820      	ldr	r0, [r4, #0]
 8013c90:	3008      	adds	r0, #8
 8013c92:	f7fe fc4d 	bl	8012530 <rcl_service_is_valid>
 8013c96:	b1a8      	cbz	r0, 8013cc4 <rcl_action_send_goal_response+0x54>
 8013c98:	6820      	ldr	r0, [r4, #0]
 8013c9a:	300c      	adds	r0, #12
 8013c9c:	f7f6 fcd4 	bl	800a648 <rcl_publisher_is_valid>
 8013ca0:	b180      	cbz	r0, 8013cc4 <rcl_action_send_goal_response+0x54>
 8013ca2:	6820      	ldr	r0, [r4, #0]
 8013ca4:	3010      	adds	r0, #16
 8013ca6:	f7f6 fccf 	bl	800a648 <rcl_publisher_is_valid>
 8013caa:	b158      	cbz	r0, 8013cc4 <rcl_action_send_goal_response+0x54>
 8013cac:	b195      	cbz	r5, 8013cd4 <rcl_action_send_goal_response+0x64>
 8013cae:	b18e      	cbz	r6, 8013cd4 <rcl_action_send_goal_response+0x64>
 8013cb0:	6820      	ldr	r0, [r4, #0]
 8013cb2:	4632      	mov	r2, r6
 8013cb4:	4629      	mov	r1, r5
 8013cb6:	f7fe fc23 	bl	8012500 <rcl_send_response>
 8013cba:	b110      	cbz	r0, 8013cc2 <rcl_action_send_goal_response+0x52>
 8013cbc:	2802      	cmp	r0, #2
 8013cbe:	bf18      	it	ne
 8013cc0:	2001      	movne	r0, #1
 8013cc2:	bd70      	pop	{r4, r5, r6, pc}
 8013cc4:	f7f7 fc50 	bl	800b568 <rcutils_reset_error>
 8013cc8:	f640 0098 	movw	r0, #2200	@ 0x898
 8013ccc:	bd70      	pop	{r4, r5, r6, pc}
 8013cce:	f640 0098 	movw	r0, #2200	@ 0x898
 8013cd2:	bd70      	pop	{r4, r5, r6, pc}
 8013cd4:	200b      	movs	r0, #11
 8013cd6:	bd70      	pop	{r4, r5, r6, pc}
 8013cd8:	f640 0098 	movw	r0, #2200	@ 0x898
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop

08013ce0 <rcl_action_take_result_request>:
 8013ce0:	2800      	cmp	r0, #0
 8013ce2:	d03a      	beq.n	8013d5a <rcl_action_take_result_request+0x7a>
 8013ce4:	b570      	push	{r4, r5, r6, lr}
 8013ce6:	4604      	mov	r4, r0
 8013ce8:	6800      	ldr	r0, [r0, #0]
 8013cea:	b388      	cbz	r0, 8013d50 <rcl_action_take_result_request+0x70>
 8013cec:	460d      	mov	r5, r1
 8013cee:	4616      	mov	r6, r2
 8013cf0:	f7fe fc1e 	bl	8012530 <rcl_service_is_valid>
 8013cf4:	b338      	cbz	r0, 8013d46 <rcl_action_take_result_request+0x66>
 8013cf6:	6820      	ldr	r0, [r4, #0]
 8013cf8:	3004      	adds	r0, #4
 8013cfa:	f7fe fc19 	bl	8012530 <rcl_service_is_valid>
 8013cfe:	b310      	cbz	r0, 8013d46 <rcl_action_take_result_request+0x66>
 8013d00:	6820      	ldr	r0, [r4, #0]
 8013d02:	3008      	adds	r0, #8
 8013d04:	f7fe fc14 	bl	8012530 <rcl_service_is_valid>
 8013d08:	b1e8      	cbz	r0, 8013d46 <rcl_action_take_result_request+0x66>
 8013d0a:	6820      	ldr	r0, [r4, #0]
 8013d0c:	300c      	adds	r0, #12
 8013d0e:	f7f6 fc9b 	bl	800a648 <rcl_publisher_is_valid>
 8013d12:	b1c0      	cbz	r0, 8013d46 <rcl_action_take_result_request+0x66>
 8013d14:	6820      	ldr	r0, [r4, #0]
 8013d16:	3010      	adds	r0, #16
 8013d18:	f7f6 fc96 	bl	800a648 <rcl_publisher_is_valid>
 8013d1c:	b198      	cbz	r0, 8013d46 <rcl_action_take_result_request+0x66>
 8013d1e:	b1d5      	cbz	r5, 8013d56 <rcl_action_take_result_request+0x76>
 8013d20:	b1ce      	cbz	r6, 8013d56 <rcl_action_take_result_request+0x76>
 8013d22:	6820      	ldr	r0, [r4, #0]
 8013d24:	4632      	mov	r2, r6
 8013d26:	4629      	mov	r1, r5
 8013d28:	3008      	adds	r0, #8
 8013d2a:	f7fe fba9 	bl	8012480 <rcl_take_request>
 8013d2e:	b148      	cbz	r0, 8013d44 <rcl_action_take_result_request+0x64>
 8013d30:	280a      	cmp	r0, #10
 8013d32:	d007      	beq.n	8013d44 <rcl_action_take_result_request+0x64>
 8013d34:	f240 2259 	movw	r2, #601	@ 0x259
 8013d38:	f640 0399 	movw	r3, #2201	@ 0x899
 8013d3c:	4290      	cmp	r0, r2
 8013d3e:	bf0c      	ite	eq
 8013d40:	4618      	moveq	r0, r3
 8013d42:	2001      	movne	r0, #1
 8013d44:	bd70      	pop	{r4, r5, r6, pc}
 8013d46:	f7f7 fc0f 	bl	800b568 <rcutils_reset_error>
 8013d4a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013d4e:	bd70      	pop	{r4, r5, r6, pc}
 8013d50:	f640 0098 	movw	r0, #2200	@ 0x898
 8013d54:	bd70      	pop	{r4, r5, r6, pc}
 8013d56:	200b      	movs	r0, #11
 8013d58:	bd70      	pop	{r4, r5, r6, pc}
 8013d5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013d5e:	4770      	bx	lr

08013d60 <rcl_action_take_cancel_request>:
 8013d60:	2800      	cmp	r0, #0
 8013d62:	d03a      	beq.n	8013dda <rcl_action_take_cancel_request+0x7a>
 8013d64:	b570      	push	{r4, r5, r6, lr}
 8013d66:	4604      	mov	r4, r0
 8013d68:	6800      	ldr	r0, [r0, #0]
 8013d6a:	b388      	cbz	r0, 8013dd0 <rcl_action_take_cancel_request+0x70>
 8013d6c:	460d      	mov	r5, r1
 8013d6e:	4616      	mov	r6, r2
 8013d70:	f7fe fbde 	bl	8012530 <rcl_service_is_valid>
 8013d74:	b338      	cbz	r0, 8013dc6 <rcl_action_take_cancel_request+0x66>
 8013d76:	6820      	ldr	r0, [r4, #0]
 8013d78:	3004      	adds	r0, #4
 8013d7a:	f7fe fbd9 	bl	8012530 <rcl_service_is_valid>
 8013d7e:	b310      	cbz	r0, 8013dc6 <rcl_action_take_cancel_request+0x66>
 8013d80:	6820      	ldr	r0, [r4, #0]
 8013d82:	3008      	adds	r0, #8
 8013d84:	f7fe fbd4 	bl	8012530 <rcl_service_is_valid>
 8013d88:	b1e8      	cbz	r0, 8013dc6 <rcl_action_take_cancel_request+0x66>
 8013d8a:	6820      	ldr	r0, [r4, #0]
 8013d8c:	300c      	adds	r0, #12
 8013d8e:	f7f6 fc5b 	bl	800a648 <rcl_publisher_is_valid>
 8013d92:	b1c0      	cbz	r0, 8013dc6 <rcl_action_take_cancel_request+0x66>
 8013d94:	6820      	ldr	r0, [r4, #0]
 8013d96:	3010      	adds	r0, #16
 8013d98:	f7f6 fc56 	bl	800a648 <rcl_publisher_is_valid>
 8013d9c:	b198      	cbz	r0, 8013dc6 <rcl_action_take_cancel_request+0x66>
 8013d9e:	b1d5      	cbz	r5, 8013dd6 <rcl_action_take_cancel_request+0x76>
 8013da0:	b1ce      	cbz	r6, 8013dd6 <rcl_action_take_cancel_request+0x76>
 8013da2:	6820      	ldr	r0, [r4, #0]
 8013da4:	4632      	mov	r2, r6
 8013da6:	4629      	mov	r1, r5
 8013da8:	3004      	adds	r0, #4
 8013daa:	f7fe fb69 	bl	8012480 <rcl_take_request>
 8013dae:	b148      	cbz	r0, 8013dc4 <rcl_action_take_cancel_request+0x64>
 8013db0:	280a      	cmp	r0, #10
 8013db2:	d007      	beq.n	8013dc4 <rcl_action_take_cancel_request+0x64>
 8013db4:	f240 2259 	movw	r2, #601	@ 0x259
 8013db8:	f640 0399 	movw	r3, #2201	@ 0x899
 8013dbc:	4290      	cmp	r0, r2
 8013dbe:	bf0c      	ite	eq
 8013dc0:	4618      	moveq	r0, r3
 8013dc2:	2001      	movne	r0, #1
 8013dc4:	bd70      	pop	{r4, r5, r6, pc}
 8013dc6:	f7f7 fbcf 	bl	800b568 <rcutils_reset_error>
 8013dca:	f640 0098 	movw	r0, #2200	@ 0x898
 8013dce:	bd70      	pop	{r4, r5, r6, pc}
 8013dd0:	f640 0098 	movw	r0, #2200	@ 0x898
 8013dd4:	bd70      	pop	{r4, r5, r6, pc}
 8013dd6:	200b      	movs	r0, #11
 8013dd8:	bd70      	pop	{r4, r5, r6, pc}
 8013dda:	f640 0098 	movw	r0, #2200	@ 0x898
 8013dde:	4770      	bx	lr

08013de0 <rcl_action_send_cancel_response>:
 8013de0:	b398      	cbz	r0, 8013e4a <rcl_action_send_cancel_response+0x6a>
 8013de2:	b570      	push	{r4, r5, r6, lr}
 8013de4:	4604      	mov	r4, r0
 8013de6:	6800      	ldr	r0, [r0, #0]
 8013de8:	b350      	cbz	r0, 8013e40 <rcl_action_send_cancel_response+0x60>
 8013dea:	460d      	mov	r5, r1
 8013dec:	4616      	mov	r6, r2
 8013dee:	f7fe fb9f 	bl	8012530 <rcl_service_is_valid>
 8013df2:	b300      	cbz	r0, 8013e36 <rcl_action_send_cancel_response+0x56>
 8013df4:	6820      	ldr	r0, [r4, #0]
 8013df6:	3004      	adds	r0, #4
 8013df8:	f7fe fb9a 	bl	8012530 <rcl_service_is_valid>
 8013dfc:	b1d8      	cbz	r0, 8013e36 <rcl_action_send_cancel_response+0x56>
 8013dfe:	6820      	ldr	r0, [r4, #0]
 8013e00:	3008      	adds	r0, #8
 8013e02:	f7fe fb95 	bl	8012530 <rcl_service_is_valid>
 8013e06:	b1b0      	cbz	r0, 8013e36 <rcl_action_send_cancel_response+0x56>
 8013e08:	6820      	ldr	r0, [r4, #0]
 8013e0a:	300c      	adds	r0, #12
 8013e0c:	f7f6 fc1c 	bl	800a648 <rcl_publisher_is_valid>
 8013e10:	b188      	cbz	r0, 8013e36 <rcl_action_send_cancel_response+0x56>
 8013e12:	6820      	ldr	r0, [r4, #0]
 8013e14:	3010      	adds	r0, #16
 8013e16:	f7f6 fc17 	bl	800a648 <rcl_publisher_is_valid>
 8013e1a:	b160      	cbz	r0, 8013e36 <rcl_action_send_cancel_response+0x56>
 8013e1c:	b19d      	cbz	r5, 8013e46 <rcl_action_send_cancel_response+0x66>
 8013e1e:	b196      	cbz	r6, 8013e46 <rcl_action_send_cancel_response+0x66>
 8013e20:	6820      	ldr	r0, [r4, #0]
 8013e22:	4632      	mov	r2, r6
 8013e24:	4629      	mov	r1, r5
 8013e26:	3004      	adds	r0, #4
 8013e28:	f7fe fb6a 	bl	8012500 <rcl_send_response>
 8013e2c:	b110      	cbz	r0, 8013e34 <rcl_action_send_cancel_response+0x54>
 8013e2e:	2802      	cmp	r0, #2
 8013e30:	bf18      	it	ne
 8013e32:	2001      	movne	r0, #1
 8013e34:	bd70      	pop	{r4, r5, r6, pc}
 8013e36:	f7f7 fb97 	bl	800b568 <rcutils_reset_error>
 8013e3a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013e3e:	bd70      	pop	{r4, r5, r6, pc}
 8013e40:	f640 0098 	movw	r0, #2200	@ 0x898
 8013e44:	bd70      	pop	{r4, r5, r6, pc}
 8013e46:	200b      	movs	r0, #11
 8013e48:	bd70      	pop	{r4, r5, r6, pc}
 8013e4a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013e4e:	4770      	bx	lr

08013e50 <rcl_action_wait_set_add_action_server>:
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d04d      	beq.n	8013ef0 <rcl_action_wait_set_add_action_server+0xa0>
 8013e54:	b570      	push	{r4, r5, r6, lr}
 8013e56:	460c      	mov	r4, r1
 8013e58:	b159      	cbz	r1, 8013e72 <rcl_action_wait_set_add_action_server+0x22>
 8013e5a:	4605      	mov	r5, r0
 8013e5c:	6808      	ldr	r0, [r1, #0]
 8013e5e:	b140      	cbz	r0, 8013e72 <rcl_action_wait_set_add_action_server+0x22>
 8013e60:	4616      	mov	r6, r2
 8013e62:	f7fe fb65 	bl	8012530 <rcl_service_is_valid>
 8013e66:	b120      	cbz	r0, 8013e72 <rcl_action_wait_set_add_action_server+0x22>
 8013e68:	6820      	ldr	r0, [r4, #0]
 8013e6a:	3004      	adds	r0, #4
 8013e6c:	f7fe fb60 	bl	8012530 <rcl_service_is_valid>
 8013e70:	b910      	cbnz	r0, 8013e78 <rcl_action_wait_set_add_action_server+0x28>
 8013e72:	f640 0098 	movw	r0, #2200	@ 0x898
 8013e76:	bd70      	pop	{r4, r5, r6, pc}
 8013e78:	6820      	ldr	r0, [r4, #0]
 8013e7a:	3008      	adds	r0, #8
 8013e7c:	f7fe fb58 	bl	8012530 <rcl_service_is_valid>
 8013e80:	2800      	cmp	r0, #0
 8013e82:	d0f6      	beq.n	8013e72 <rcl_action_wait_set_add_action_server+0x22>
 8013e84:	6820      	ldr	r0, [r4, #0]
 8013e86:	300c      	adds	r0, #12
 8013e88:	f7f6 fbf6 	bl	800a678 <rcl_publisher_is_valid_except_context>
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	d0f0      	beq.n	8013e72 <rcl_action_wait_set_add_action_server+0x22>
 8013e90:	6820      	ldr	r0, [r4, #0]
 8013e92:	3010      	adds	r0, #16
 8013e94:	f7f6 fbf0 	bl	800a678 <rcl_publisher_is_valid_except_context>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	d0ea      	beq.n	8013e72 <rcl_action_wait_set_add_action_server+0x22>
 8013e9c:	6821      	ldr	r1, [r4, #0]
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8013ea4:	f7ff face 	bl	8013444 <rcl_wait_set_add_service>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	d1e4      	bne.n	8013e76 <rcl_action_wait_set_add_action_server+0x26>
 8013eac:	6821      	ldr	r1, [r4, #0]
 8013eae:	4628      	mov	r0, r5
 8013eb0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8013eb4:	3104      	adds	r1, #4
 8013eb6:	f7ff fac5 	bl	8013444 <rcl_wait_set_add_service>
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	d1db      	bne.n	8013e76 <rcl_action_wait_set_add_action_server+0x26>
 8013ebe:	6821      	ldr	r1, [r4, #0]
 8013ec0:	4628      	mov	r0, r5
 8013ec2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8013ec6:	3108      	adds	r1, #8
 8013ec8:	f7ff fabc 	bl	8013444 <rcl_wait_set_add_service>
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	d1d2      	bne.n	8013e76 <rcl_action_wait_set_add_action_server+0x26>
 8013ed0:	6821      	ldr	r1, [r4, #0]
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8013ed8:	3114      	adds	r1, #20
 8013eda:	f7ff fa57 	bl	801338c <rcl_wait_set_add_timer>
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d1c9      	bne.n	8013e76 <rcl_action_wait_set_add_action_server+0x26>
 8013ee2:	2e00      	cmp	r6, #0
 8013ee4:	d0c7      	beq.n	8013e76 <rcl_action_wait_set_add_action_server+0x26>
 8013ee6:	6823      	ldr	r3, [r4, #0]
 8013ee8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8013eec:	6033      	str	r3, [r6, #0]
 8013eee:	bd70      	pop	{r4, r5, r6, pc}
 8013ef0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013ef4:	4770      	bx	lr
 8013ef6:	bf00      	nop

08013ef8 <rcl_action_server_wait_set_get_entities_ready>:
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	d05a      	beq.n	8013fb2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8013efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013efe:	460c      	mov	r4, r1
 8013f00:	b161      	cbz	r1, 8013f1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013f02:	4605      	mov	r5, r0
 8013f04:	6808      	ldr	r0, [r1, #0]
 8013f06:	b148      	cbz	r0, 8013f1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013f08:	4616      	mov	r6, r2
 8013f0a:	461f      	mov	r7, r3
 8013f0c:	f7fe fb10 	bl	8012530 <rcl_service_is_valid>
 8013f10:	b120      	cbz	r0, 8013f1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013f12:	6820      	ldr	r0, [r4, #0]
 8013f14:	3004      	adds	r0, #4
 8013f16:	f7fe fb0b 	bl	8012530 <rcl_service_is_valid>
 8013f1a:	b910      	cbnz	r0, 8013f22 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8013f1c:	f640 0098 	movw	r0, #2200	@ 0x898
 8013f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f22:	6820      	ldr	r0, [r4, #0]
 8013f24:	3008      	adds	r0, #8
 8013f26:	f7fe fb03 	bl	8012530 <rcl_service_is_valid>
 8013f2a:	2800      	cmp	r0, #0
 8013f2c:	d0f6      	beq.n	8013f1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013f2e:	6820      	ldr	r0, [r4, #0]
 8013f30:	300c      	adds	r0, #12
 8013f32:	f7f6 fba1 	bl	800a678 <rcl_publisher_is_valid_except_context>
 8013f36:	2800      	cmp	r0, #0
 8013f38:	d0f0      	beq.n	8013f1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013f3a:	6820      	ldr	r0, [r4, #0]
 8013f3c:	3010      	adds	r0, #16
 8013f3e:	f7f6 fb9b 	bl	800a678 <rcl_publisher_is_valid_except_context>
 8013f42:	2800      	cmp	r0, #0
 8013f44:	d0ea      	beq.n	8013f1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013f46:	b3be      	cbz	r6, 8013fb8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013f48:	b3b7      	cbz	r7, 8013fb8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013f4a:	9b06      	ldr	r3, [sp, #24]
 8013f4c:	b3a3      	cbz	r3, 8013fb8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013f4e:	9b07      	ldr	r3, [sp, #28]
 8013f50:	b393      	cbz	r3, 8013fb8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013f52:	6821      	ldr	r1, [r4, #0]
 8013f54:	692a      	ldr	r2, [r5, #16]
 8013f56:	6a2c      	ldr	r4, [r5, #32]
 8013f58:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8013f5c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8013f60:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8013f64:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8013f68:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8013f6c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8013f70:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013f74:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8013f78:	1a64      	subs	r4, r4, r1
 8013f7a:	fab4 f484 	clz	r4, r4
 8013f7e:	0964      	lsrs	r4, r4, #5
 8013f80:	7034      	strb	r4, [r6, #0]
 8013f82:	1d0c      	adds	r4, r1, #4
 8013f84:	1b1b      	subs	r3, r3, r4
 8013f86:	fab3 f383 	clz	r3, r3
 8013f8a:	095b      	lsrs	r3, r3, #5
 8013f8c:	f101 0408 	add.w	r4, r1, #8
 8013f90:	703b      	strb	r3, [r7, #0]
 8013f92:	f101 0314 	add.w	r3, r1, #20
 8013f96:	1b01      	subs	r1, r0, r4
 8013f98:	1ad3      	subs	r3, r2, r3
 8013f9a:	fab1 f181 	clz	r1, r1
 8013f9e:	9a06      	ldr	r2, [sp, #24]
 8013fa0:	0949      	lsrs	r1, r1, #5
 8013fa2:	7011      	strb	r1, [r2, #0]
 8013fa4:	fab3 f383 	clz	r3, r3
 8013fa8:	9a07      	ldr	r2, [sp, #28]
 8013faa:	095b      	lsrs	r3, r3, #5
 8013fac:	2000      	movs	r0, #0
 8013fae:	7013      	strb	r3, [r2, #0]
 8013fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fb2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013fb6:	4770      	bx	lr
 8013fb8:	200b      	movs	r0, #11
 8013fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013fbc <_execute_event_handler>:
 8013fbc:	2002      	movs	r0, #2
 8013fbe:	4770      	bx	lr

08013fc0 <_cancel_goal_event_handler>:
 8013fc0:	2003      	movs	r0, #3
 8013fc2:	4770      	bx	lr

08013fc4 <_succeed_event_handler>:
 8013fc4:	2004      	movs	r0, #4
 8013fc6:	4770      	bx	lr

08013fc8 <_abort_event_handler>:
 8013fc8:	2006      	movs	r0, #6
 8013fca:	4770      	bx	lr

08013fcc <_canceled_event_handler>:
 8013fcc:	2005      	movs	r0, #5
 8013fce:	4770      	bx	lr

08013fd0 <rcl_action_transition_goal_state>:
 8013fd0:	b2c2      	uxtb	r2, r0
 8013fd2:	2a06      	cmp	r2, #6
 8013fd4:	d80c      	bhi.n	8013ff0 <rcl_action_transition_goal_state+0x20>
 8013fd6:	2904      	cmp	r1, #4
 8013fd8:	d80a      	bhi.n	8013ff0 <rcl_action_transition_goal_state+0x20>
 8013fda:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8013fde:	b410      	push	{r4}
 8013fe0:	1853      	adds	r3, r2, r1
 8013fe2:	4c06      	ldr	r4, [pc, #24]	@ (8013ffc <rcl_action_transition_goal_state+0x2c>)
 8013fe4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013fe8:	b123      	cbz	r3, 8013ff4 <rcl_action_transition_goal_state+0x24>
 8013fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fee:	4718      	bx	r3
 8013ff0:	2000      	movs	r0, #0
 8013ff2:	4770      	bx	lr
 8013ff4:	2000      	movs	r0, #0
 8013ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ffa:	4770      	bx	lr
 8013ffc:	0801abdc 	.word	0x0801abdc

08014000 <rcl_action_get_zero_initialized_cancel_response>:
 8014000:	b510      	push	{r4, lr}
 8014002:	4c07      	ldr	r4, [pc, #28]	@ (8014020 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014004:	4686      	mov	lr, r0
 8014006:	4684      	mov	ip, r0
 8014008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801400a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801400e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014010:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014014:	6823      	ldr	r3, [r4, #0]
 8014016:	f8cc 3000 	str.w	r3, [ip]
 801401a:	4670      	mov	r0, lr
 801401c:	bd10      	pop	{r4, pc}
 801401e:	bf00      	nop
 8014020:	0801ac68 	.word	0x0801ac68

08014024 <rclc_action_send_result_request>:
 8014024:	b1d0      	cbz	r0, 801405c <rclc_action_send_result_request+0x38>
 8014026:	b500      	push	{lr}
 8014028:	4684      	mov	ip, r0
 801402a:	b087      	sub	sp, #28
 801402c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014030:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8014034:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014038:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801403c:	f10d 0e08 	add.w	lr, sp, #8
 8014040:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014044:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014048:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801404c:	a902      	add	r1, sp, #8
 801404e:	3010      	adds	r0, #16
 8014050:	f7ff fbda 	bl	8013808 <rcl_action_send_result_request>
 8014054:	b920      	cbnz	r0, 8014060 <rclc_action_send_result_request+0x3c>
 8014056:	b007      	add	sp, #28
 8014058:	f85d fb04 	ldr.w	pc, [sp], #4
 801405c:	200b      	movs	r0, #11
 801405e:	4770      	bx	lr
 8014060:	9001      	str	r0, [sp, #4]
 8014062:	f7f7 fa81 	bl	800b568 <rcutils_reset_error>
 8014066:	9801      	ldr	r0, [sp, #4]
 8014068:	b007      	add	sp, #28
 801406a:	f85d fb04 	ldr.w	pc, [sp], #4
 801406e:	bf00      	nop

08014070 <rclc_action_take_goal_handle>:
 8014070:	b160      	cbz	r0, 801408c <rclc_action_take_goal_handle+0x1c>
 8014072:	6883      	ldr	r3, [r0, #8]
 8014074:	b143      	cbz	r3, 8014088 <rclc_action_take_goal_handle+0x18>
 8014076:	6819      	ldr	r1, [r3, #0]
 8014078:	6081      	str	r1, [r0, #8]
 801407a:	2200      	movs	r2, #0
 801407c:	721a      	strb	r2, [r3, #8]
 801407e:	68c1      	ldr	r1, [r0, #12]
 8014080:	6019      	str	r1, [r3, #0]
 8014082:	621a      	str	r2, [r3, #32]
 8014084:	849a      	strh	r2, [r3, #36]	@ 0x24
 8014086:	60c3      	str	r3, [r0, #12]
 8014088:	4618      	mov	r0, r3
 801408a:	4770      	bx	lr
 801408c:	4603      	mov	r3, r0
 801408e:	e7fb      	b.n	8014088 <rclc_action_take_goal_handle+0x18>

08014090 <rclc_action_remove_used_goal_handle>:
 8014090:	b180      	cbz	r0, 80140b4 <rclc_action_remove_used_goal_handle+0x24>
 8014092:	b179      	cbz	r1, 80140b4 <rclc_action_remove_used_goal_handle+0x24>
 8014094:	68c3      	ldr	r3, [r0, #12]
 8014096:	4299      	cmp	r1, r3
 8014098:	d00d      	beq.n	80140b6 <rclc_action_remove_used_goal_handle+0x26>
 801409a:	b12b      	cbz	r3, 80140a8 <rclc_action_remove_used_goal_handle+0x18>
 801409c:	681a      	ldr	r2, [r3, #0]
 801409e:	4291      	cmp	r1, r2
 80140a0:	d003      	beq.n	80140aa <rclc_action_remove_used_goal_handle+0x1a>
 80140a2:	4613      	mov	r3, r2
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d1f9      	bne.n	801409c <rclc_action_remove_used_goal_handle+0xc>
 80140a8:	4770      	bx	lr
 80140aa:	680a      	ldr	r2, [r1, #0]
 80140ac:	601a      	str	r2, [r3, #0]
 80140ae:	6883      	ldr	r3, [r0, #8]
 80140b0:	600b      	str	r3, [r1, #0]
 80140b2:	6081      	str	r1, [r0, #8]
 80140b4:	4770      	bx	lr
 80140b6:	680b      	ldr	r3, [r1, #0]
 80140b8:	60c3      	str	r3, [r0, #12]
 80140ba:	e7f8      	b.n	80140ae <rclc_action_remove_used_goal_handle+0x1e>

080140bc <rclc_action_find_goal_handle_by_uuid>:
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	b180      	cbz	r0, 80140e2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80140c0:	460d      	mov	r5, r1
 80140c2:	b181      	cbz	r1, 80140e6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80140c4:	68c4      	ldr	r4, [r0, #12]
 80140c6:	b914      	cbnz	r4, 80140ce <rclc_action_find_goal_handle_by_uuid+0x12>
 80140c8:	e009      	b.n	80140de <rclc_action_find_goal_handle_by_uuid+0x22>
 80140ca:	6824      	ldr	r4, [r4, #0]
 80140cc:	b13c      	cbz	r4, 80140de <rclc_action_find_goal_handle_by_uuid+0x22>
 80140ce:	f104 0009 	add.w	r0, r4, #9
 80140d2:	2210      	movs	r2, #16
 80140d4:	4629      	mov	r1, r5
 80140d6:	f004 fe6c 	bl	8018db2 <memcmp>
 80140da:	2800      	cmp	r0, #0
 80140dc:	d1f5      	bne.n	80140ca <rclc_action_find_goal_handle_by_uuid+0xe>
 80140de:	4620      	mov	r0, r4
 80140e0:	bd38      	pop	{r3, r4, r5, pc}
 80140e2:	4604      	mov	r4, r0
 80140e4:	e7fb      	b.n	80140de <rclc_action_find_goal_handle_by_uuid+0x22>
 80140e6:	460c      	mov	r4, r1
 80140e8:	e7f9      	b.n	80140de <rclc_action_find_goal_handle_by_uuid+0x22>
 80140ea:	bf00      	nop

080140ec <rclc_action_find_first_handle_by_status>:
 80140ec:	b140      	cbz	r0, 8014100 <rclc_action_find_first_handle_by_status+0x14>
 80140ee:	68c0      	ldr	r0, [r0, #12]
 80140f0:	b910      	cbnz	r0, 80140f8 <rclc_action_find_first_handle_by_status+0xc>
 80140f2:	e005      	b.n	8014100 <rclc_action_find_first_handle_by_status+0x14>
 80140f4:	6800      	ldr	r0, [r0, #0]
 80140f6:	b118      	cbz	r0, 8014100 <rclc_action_find_first_handle_by_status+0x14>
 80140f8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80140fc:	428b      	cmp	r3, r1
 80140fe:	d1f9      	bne.n	80140f4 <rclc_action_find_first_handle_by_status+0x8>
 8014100:	4770      	bx	lr
 8014102:	bf00      	nop

08014104 <rclc_action_find_first_terminated_handle>:
 8014104:	b140      	cbz	r0, 8014118 <rclc_action_find_first_terminated_handle+0x14>
 8014106:	68c0      	ldr	r0, [r0, #12]
 8014108:	b910      	cbnz	r0, 8014110 <rclc_action_find_first_terminated_handle+0xc>
 801410a:	e005      	b.n	8014118 <rclc_action_find_first_terminated_handle+0x14>
 801410c:	6800      	ldr	r0, [r0, #0]
 801410e:	b118      	cbz	r0, 8014118 <rclc_action_find_first_terminated_handle+0x14>
 8014110:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014114:	2b03      	cmp	r3, #3
 8014116:	ddf9      	ble.n	801410c <rclc_action_find_first_terminated_handle+0x8>
 8014118:	4770      	bx	lr
 801411a:	bf00      	nop

0801411c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801411c:	b170      	cbz	r0, 801413c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801411e:	68c0      	ldr	r0, [r0, #12]
 8014120:	b160      	cbz	r0, 801413c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014122:	b410      	push	{r4}
 8014124:	e001      	b.n	801412a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014126:	6800      	ldr	r0, [r0, #0]
 8014128:	b128      	cbz	r0, 8014136 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801412a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801412e:	4299      	cmp	r1, r3
 8014130:	bf08      	it	eq
 8014132:	4294      	cmpeq	r4, r2
 8014134:	d1f7      	bne.n	8014126 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014136:	f85d 4b04 	ldr.w	r4, [sp], #4
 801413a:	4770      	bx	lr
 801413c:	4770      	bx	lr
 801413e:	bf00      	nop

08014140 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014140:	b170      	cbz	r0, 8014160 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014142:	68c0      	ldr	r0, [r0, #12]
 8014144:	b160      	cbz	r0, 8014160 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014146:	b410      	push	{r4}
 8014148:	e001      	b.n	801414e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801414a:	6800      	ldr	r0, [r0, #0]
 801414c:	b128      	cbz	r0, 801415a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801414e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014152:	4299      	cmp	r1, r3
 8014154:	bf08      	it	eq
 8014156:	4294      	cmpeq	r4, r2
 8014158:	d1f7      	bne.n	801414a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801415a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801415e:	4770      	bx	lr
 8014160:	4770      	bx	lr
 8014162:	bf00      	nop

08014164 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014164:	b170      	cbz	r0, 8014184 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014166:	68c0      	ldr	r0, [r0, #12]
 8014168:	b160      	cbz	r0, 8014184 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801416a:	b410      	push	{r4}
 801416c:	e001      	b.n	8014172 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801416e:	6800      	ldr	r0, [r0, #0]
 8014170:	b128      	cbz	r0, 801417e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8014172:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8014176:	4299      	cmp	r1, r3
 8014178:	bf08      	it	eq
 801417a:	4294      	cmpeq	r4, r2
 801417c:	d1f7      	bne.n	801416e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801417e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014182:	4770      	bx	lr
 8014184:	4770      	bx	lr
 8014186:	bf00      	nop

08014188 <rclc_action_find_first_handle_with_goal_response>:
 8014188:	b140      	cbz	r0, 801419c <rclc_action_find_first_handle_with_goal_response+0x14>
 801418a:	68c0      	ldr	r0, [r0, #12]
 801418c:	b910      	cbnz	r0, 8014194 <rclc_action_find_first_handle_with_goal_response+0xc>
 801418e:	e005      	b.n	801419c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014190:	6800      	ldr	r0, [r0, #0]
 8014192:	b118      	cbz	r0, 801419c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014194:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d0f9      	beq.n	8014190 <rclc_action_find_first_handle_with_goal_response+0x8>
 801419c:	4770      	bx	lr
 801419e:	bf00      	nop

080141a0 <rclc_action_find_first_handle_with_result_response>:
 80141a0:	b140      	cbz	r0, 80141b4 <rclc_action_find_first_handle_with_result_response+0x14>
 80141a2:	68c0      	ldr	r0, [r0, #12]
 80141a4:	b910      	cbnz	r0, 80141ac <rclc_action_find_first_handle_with_result_response+0xc>
 80141a6:	e005      	b.n	80141b4 <rclc_action_find_first_handle_with_result_response+0x14>
 80141a8:	6800      	ldr	r0, [r0, #0]
 80141aa:	b118      	cbz	r0, 80141b4 <rclc_action_find_first_handle_with_result_response+0x14>
 80141ac:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d0f9      	beq.n	80141a8 <rclc_action_find_first_handle_with_result_response+0x8>
 80141b4:	4770      	bx	lr
 80141b6:	bf00      	nop

080141b8 <rclc_action_server_response_goal_request>:
 80141b8:	b198      	cbz	r0, 80141e2 <rclc_action_server_response_goal_request+0x2a>
 80141ba:	b510      	push	{r4, lr}
 80141bc:	6844      	ldr	r4, [r0, #4]
 80141be:	b086      	sub	sp, #24
 80141c0:	2200      	movs	r2, #0
 80141c2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80141c6:	460b      	mov	r3, r1
 80141c8:	9205      	str	r2, [sp, #20]
 80141ca:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80141ce:	aa03      	add	r2, sp, #12
 80141d0:	f104 0010 	add.w	r0, r4, #16
 80141d4:	f88d 300c 	strb.w	r3, [sp, #12]
 80141d8:	f7ff fd4a 	bl	8013c70 <rcl_action_send_goal_response>
 80141dc:	b918      	cbnz	r0, 80141e6 <rclc_action_server_response_goal_request+0x2e>
 80141de:	b006      	add	sp, #24
 80141e0:	bd10      	pop	{r4, pc}
 80141e2:	200b      	movs	r0, #11
 80141e4:	4770      	bx	lr
 80141e6:	9001      	str	r0, [sp, #4]
 80141e8:	f7f7 f9be 	bl	800b568 <rcutils_reset_error>
 80141ec:	9801      	ldr	r0, [sp, #4]
 80141ee:	b006      	add	sp, #24
 80141f0:	bd10      	pop	{r4, pc}
 80141f2:	bf00      	nop
 80141f4:	0000      	movs	r0, r0
	...

080141f8 <rclc_action_server_goal_cancel_accept>:
 80141f8:	b310      	cbz	r0, 8014240 <rclc_action_server_goal_cancel_accept+0x48>
 80141fa:	b510      	push	{r4, lr}
 80141fc:	b090      	sub	sp, #64	@ 0x40
 80141fe:	4604      	mov	r4, r0
 8014200:	a806      	add	r0, sp, #24
 8014202:	f7ff fefd 	bl	8014000 <rcl_action_get_zero_initialized_cancel_response>
 8014206:	2300      	movs	r3, #0
 8014208:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801420c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014210:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014214:	f88d 3018 	strb.w	r3, [sp, #24]
 8014218:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801421c:	f8cd d01c 	str.w	sp, [sp, #28]
 8014220:	46ec      	mov	ip, sp
 8014222:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014226:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014248 <rclc_action_server_goal_cancel_accept+0x50>
 801422a:	6860      	ldr	r0, [r4, #4]
 801422c:	aa06      	add	r2, sp, #24
 801422e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014232:	3010      	adds	r0, #16
 8014234:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014238:	f7ff fdd2 	bl	8013de0 <rcl_action_send_cancel_response>
 801423c:	b010      	add	sp, #64	@ 0x40
 801423e:	bd10      	pop	{r4, pc}
 8014240:	200b      	movs	r0, #11
 8014242:	4770      	bx	lr
 8014244:	f3af 8000 	nop.w
 8014248:	00000001 	.word	0x00000001
 801424c:	00000001 	.word	0x00000001

08014250 <rclc_action_server_goal_cancel_reject>:
 8014250:	b082      	sub	sp, #8
 8014252:	b530      	push	{r4, r5, lr}
 8014254:	b08b      	sub	sp, #44	@ 0x2c
 8014256:	ac0e      	add	r4, sp, #56	@ 0x38
 8014258:	e884 000c 	stmia.w	r4, {r2, r3}
 801425c:	b188      	cbz	r0, 8014282 <rclc_action_server_goal_cancel_reject+0x32>
 801425e:	4604      	mov	r4, r0
 8014260:	a801      	add	r0, sp, #4
 8014262:	460d      	mov	r5, r1
 8014264:	f7ff fecc 	bl	8014000 <rcl_action_get_zero_initialized_cancel_response>
 8014268:	aa01      	add	r2, sp, #4
 801426a:	a90e      	add	r1, sp, #56	@ 0x38
 801426c:	f104 0010 	add.w	r0, r4, #16
 8014270:	f88d 5004 	strb.w	r5, [sp, #4]
 8014274:	f7ff fdb4 	bl	8013de0 <rcl_action_send_cancel_response>
 8014278:	b00b      	add	sp, #44	@ 0x2c
 801427a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801427e:	b002      	add	sp, #8
 8014280:	4770      	bx	lr
 8014282:	200b      	movs	r0, #11
 8014284:	b00b      	add	sp, #44	@ 0x2c
 8014286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801428a:	b002      	add	sp, #8
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop

08014290 <__atomic_load_8>:
 8014290:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014294:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014298:	4a15      	ldr	r2, [pc, #84]	@ (80142f0 <__atomic_load_8+0x60>)
 801429a:	4b16      	ldr	r3, [pc, #88]	@ (80142f4 <__atomic_load_8+0x64>)
 801429c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80142a0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80142a4:	fb02 f101 	mul.w	r1, r2, r1
 80142a8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80142ac:	fba3 2301 	umull	r2, r3, r3, r1
 80142b0:	091b      	lsrs	r3, r3, #4
 80142b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80142b6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80142ba:	b4d0      	push	{r4, r6, r7}
 80142bc:	4c0e      	ldr	r4, [pc, #56]	@ (80142f8 <__atomic_load_8+0x68>)
 80142be:	1ac9      	subs	r1, r1, r3
 80142c0:	1862      	adds	r2, r4, r1
 80142c2:	f04f 0c01 	mov.w	ip, #1
 80142c6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80142ca:	e8c2 cf46 	strexb	r6, ip, [r2]
 80142ce:	2e00      	cmp	r6, #0
 80142d0:	d1f9      	bne.n	80142c6 <__atomic_load_8+0x36>
 80142d2:	f3bf 8f5b 	dmb	ish
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d1f4      	bne.n	80142c6 <__atomic_load_8+0x36>
 80142dc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80142e0:	f3bf 8f5b 	dmb	ish
 80142e4:	5463      	strb	r3, [r4, r1]
 80142e6:	4630      	mov	r0, r6
 80142e8:	4639      	mov	r1, r7
 80142ea:	bcd0      	pop	{r4, r6, r7}
 80142ec:	4770      	bx	lr
 80142ee:	bf00      	nop
 80142f0:	27d4eb2d 	.word	0x27d4eb2d
 80142f4:	b21642c9 	.word	0xb21642c9
 80142f8:	20015420 	.word	0x20015420

080142fc <__atomic_store_8>:
 80142fc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014300:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014304:	b570      	push	{r4, r5, r6, lr}
 8014306:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801430a:	4c14      	ldr	r4, [pc, #80]	@ (801435c <__atomic_store_8+0x60>)
 801430c:	4d14      	ldr	r5, [pc, #80]	@ (8014360 <__atomic_store_8+0x64>)
 801430e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014312:	fb04 f101 	mul.w	r1, r4, r1
 8014316:	4c13      	ldr	r4, [pc, #76]	@ (8014364 <__atomic_store_8+0x68>)
 8014318:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801431c:	fba4 4e01 	umull	r4, lr, r4, r1
 8014320:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8014324:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014328:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801432c:	eba1 0e0e 	sub.w	lr, r1, lr
 8014330:	eb05 0c0e 	add.w	ip, r5, lr
 8014334:	f04f 0401 	mov.w	r4, #1
 8014338:	e8dc 1f4f 	ldrexb	r1, [ip]
 801433c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014340:	2e00      	cmp	r6, #0
 8014342:	d1f9      	bne.n	8014338 <__atomic_store_8+0x3c>
 8014344:	f3bf 8f5b 	dmb	ish
 8014348:	b2c9      	uxtb	r1, r1
 801434a:	2900      	cmp	r1, #0
 801434c:	d1f4      	bne.n	8014338 <__atomic_store_8+0x3c>
 801434e:	e9c0 2300 	strd	r2, r3, [r0]
 8014352:	f3bf 8f5b 	dmb	ish
 8014356:	f805 100e 	strb.w	r1, [r5, lr]
 801435a:	bd70      	pop	{r4, r5, r6, pc}
 801435c:	27d4eb2d 	.word	0x27d4eb2d
 8014360:	20015420 	.word	0x20015420
 8014364:	b21642c9 	.word	0xb21642c9

08014368 <__atomic_exchange_8>:
 8014368:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801436c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014370:	4916      	ldr	r1, [pc, #88]	@ (80143cc <__atomic_exchange_8+0x64>)
 8014372:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014376:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801437a:	fb01 fc0c 	mul.w	ip, r1, ip
 801437e:	4914      	ldr	r1, [pc, #80]	@ (80143d0 <__atomic_exchange_8+0x68>)
 8014380:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014384:	b570      	push	{r4, r5, r6, lr}
 8014386:	4605      	mov	r5, r0
 8014388:	fba1 010c 	umull	r0, r1, r1, ip
 801438c:	0909      	lsrs	r1, r1, #4
 801438e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014392:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014396:	4e0f      	ldr	r6, [pc, #60]	@ (80143d4 <__atomic_exchange_8+0x6c>)
 8014398:	ebac 0c01 	sub.w	ip, ip, r1
 801439c:	eb06 010c 	add.w	r1, r6, ip
 80143a0:	f04f 0e01 	mov.w	lr, #1
 80143a4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80143a8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80143ac:	2800      	cmp	r0, #0
 80143ae:	d1f9      	bne.n	80143a4 <__atomic_exchange_8+0x3c>
 80143b0:	f3bf 8f5b 	dmb	ish
 80143b4:	b2e4      	uxtb	r4, r4
 80143b6:	2c00      	cmp	r4, #0
 80143b8:	d1f4      	bne.n	80143a4 <__atomic_exchange_8+0x3c>
 80143ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 80143be:	e9c5 2300 	strd	r2, r3, [r5]
 80143c2:	f3bf 8f5b 	dmb	ish
 80143c6:	f806 400c 	strb.w	r4, [r6, ip]
 80143ca:	bd70      	pop	{r4, r5, r6, pc}
 80143cc:	27d4eb2d 	.word	0x27d4eb2d
 80143d0:	b21642c9 	.word	0xb21642c9
 80143d4:	20015420 	.word	0x20015420

080143d8 <rcutils_get_env>:
 80143d8:	b168      	cbz	r0, 80143f6 <rcutils_get_env+0x1e>
 80143da:	b510      	push	{r4, lr}
 80143dc:	460c      	mov	r4, r1
 80143de:	b129      	cbz	r1, 80143ec <rcutils_get_env+0x14>
 80143e0:	f003 ffa2 	bl	8018328 <getenv>
 80143e4:	b120      	cbz	r0, 80143f0 <rcutils_get_env+0x18>
 80143e6:	6020      	str	r0, [r4, #0]
 80143e8:	2000      	movs	r0, #0
 80143ea:	bd10      	pop	{r4, pc}
 80143ec:	4803      	ldr	r0, [pc, #12]	@ (80143fc <rcutils_get_env+0x24>)
 80143ee:	bd10      	pop	{r4, pc}
 80143f0:	4b03      	ldr	r3, [pc, #12]	@ (8014400 <rcutils_get_env+0x28>)
 80143f2:	6023      	str	r3, [r4, #0]
 80143f4:	bd10      	pop	{r4, pc}
 80143f6:	4803      	ldr	r0, [pc, #12]	@ (8014404 <rcutils_get_env+0x2c>)
 80143f8:	4770      	bx	lr
 80143fa:	bf00      	nop
 80143fc:	0801aca8 	.word	0x0801aca8
 8014400:	0801b280 	.word	0x0801b280
 8014404:	0801ac8c 	.word	0x0801ac8c

08014408 <rcutils_is_directory>:
 8014408:	2000      	movs	r0, #0
 801440a:	4770      	bx	lr

0801440c <rcutils_join_path>:
 801440c:	b082      	sub	sp, #8
 801440e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014412:	2000      	movs	r0, #0
 8014414:	b002      	add	sp, #8
 8014416:	4770      	bx	lr

08014418 <rcutils_to_native_path>:
 8014418:	b084      	sub	sp, #16
 801441a:	a801      	add	r0, sp, #4
 801441c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014420:	b004      	add	sp, #16
 8014422:	2000      	movs	r0, #0
 8014424:	4770      	bx	lr
 8014426:	bf00      	nop

08014428 <rcutils_format_string_limit>:
 8014428:	b40f      	push	{r0, r1, r2, r3}
 801442a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801442c:	b083      	sub	sp, #12
 801442e:	ac08      	add	r4, sp, #32
 8014430:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014436:	b34e      	cbz	r6, 801448c <rcutils_format_string_limit+0x64>
 8014438:	a808      	add	r0, sp, #32
 801443a:	f7f7 f871 	bl	800b520 <rcutils_allocator_is_valid>
 801443e:	b328      	cbz	r0, 801448c <rcutils_format_string_limit+0x64>
 8014440:	2100      	movs	r1, #0
 8014442:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014444:	4632      	mov	r2, r6
 8014446:	4608      	mov	r0, r1
 8014448:	e9cd 3300 	strd	r3, r3, [sp]
 801444c:	f000 f8f4 	bl	8014638 <rcutils_vsnprintf>
 8014450:	1c43      	adds	r3, r0, #1
 8014452:	4605      	mov	r5, r0
 8014454:	d01a      	beq.n	801448c <rcutils_format_string_limit+0x64>
 8014456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014458:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801445a:	1c47      	adds	r7, r0, #1
 801445c:	429f      	cmp	r7, r3
 801445e:	bf84      	itt	hi
 8014460:	461f      	movhi	r7, r3
 8014462:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014466:	4638      	mov	r0, r7
 8014468:	9b08      	ldr	r3, [sp, #32]
 801446a:	4798      	blx	r3
 801446c:	4604      	mov	r4, r0
 801446e:	b168      	cbz	r0, 801448c <rcutils_format_string_limit+0x64>
 8014470:	9b01      	ldr	r3, [sp, #4]
 8014472:	4632      	mov	r2, r6
 8014474:	4639      	mov	r1, r7
 8014476:	f000 f8df 	bl	8014638 <rcutils_vsnprintf>
 801447a:	2800      	cmp	r0, #0
 801447c:	db02      	blt.n	8014484 <rcutils_format_string_limit+0x5c>
 801447e:	2300      	movs	r3, #0
 8014480:	5563      	strb	r3, [r4, r5]
 8014482:	e004      	b.n	801448e <rcutils_format_string_limit+0x66>
 8014484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014486:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014488:	4620      	mov	r0, r4
 801448a:	4798      	blx	r3
 801448c:	2400      	movs	r4, #0
 801448e:	4620      	mov	r0, r4
 8014490:	b003      	add	sp, #12
 8014492:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014496:	b004      	add	sp, #16
 8014498:	4770      	bx	lr
 801449a:	bf00      	nop

0801449c <rcutils_repl_str>:
 801449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144a0:	ed2d 8b02 	vpush	{d8}
 80144a4:	b087      	sub	sp, #28
 80144a6:	4680      	mov	r8, r0
 80144a8:	4608      	mov	r0, r1
 80144aa:	f8cd 8004 	str.w	r8, [sp, #4]
 80144ae:	ee08 2a10 	vmov	s16, r2
 80144b2:	468a      	mov	sl, r1
 80144b4:	4699      	mov	r9, r3
 80144b6:	f7eb fea3 	bl	8000200 <strlen>
 80144ba:	2600      	movs	r6, #0
 80144bc:	4647      	mov	r7, r8
 80144be:	9002      	str	r0, [sp, #8]
 80144c0:	46b3      	mov	fp, r6
 80144c2:	2510      	movs	r5, #16
 80144c4:	46b0      	mov	r8, r6
 80144c6:	e01d      	b.n	8014504 <rcutils_repl_str+0x68>
 80144c8:	f10b 0b01 	add.w	fp, fp, #1
 80144cc:	455e      	cmp	r6, fp
 80144ce:	d211      	bcs.n	80144f4 <rcutils_repl_str+0x58>
 80144d0:	442e      	add	r6, r5
 80144d2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80144d6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80144da:	00b1      	lsls	r1, r6, #2
 80144dc:	4798      	blx	r3
 80144de:	2800      	cmp	r0, #0
 80144e0:	f000 8088 	beq.w	80145f4 <rcutils_repl_str+0x158>
 80144e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144e8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80144ec:	4680      	mov	r8, r0
 80144ee:	bf28      	it	cs
 80144f0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80144f4:	9a01      	ldr	r2, [sp, #4]
 80144f6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80144fa:	1aa2      	subs	r2, r4, r2
 80144fc:	f843 2c04 	str.w	r2, [r3, #-4]
 8014500:	9b02      	ldr	r3, [sp, #8]
 8014502:	18e7      	adds	r7, r4, r3
 8014504:	4651      	mov	r1, sl
 8014506:	4638      	mov	r0, r7
 8014508:	f004 fc3d 	bl	8018d86 <strstr>
 801450c:	4604      	mov	r4, r0
 801450e:	4640      	mov	r0, r8
 8014510:	2c00      	cmp	r4, #0
 8014512:	d1d9      	bne.n	80144c8 <rcutils_repl_str+0x2c>
 8014514:	46b8      	mov	r8, r7
 8014516:	4607      	mov	r7, r0
 8014518:	4640      	mov	r0, r8
 801451a:	f7eb fe71 	bl	8000200 <strlen>
 801451e:	9b01      	ldr	r3, [sp, #4]
 8014520:	eba8 0303 	sub.w	r3, r8, r3
 8014524:	181c      	adds	r4, r3, r0
 8014526:	9404      	str	r4, [sp, #16]
 8014528:	f1bb 0f00 	cmp.w	fp, #0
 801452c:	d04a      	beq.n	80145c4 <rcutils_repl_str+0x128>
 801452e:	ee18 0a10 	vmov	r0, s16
 8014532:	f7eb fe65 	bl	8000200 <strlen>
 8014536:	9b02      	ldr	r3, [sp, #8]
 8014538:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801453c:	1ac3      	subs	r3, r0, r3
 801453e:	fb0b 4303 	mla	r3, fp, r3, r4
 8014542:	461a      	mov	r2, r3
 8014544:	9305      	str	r3, [sp, #20]
 8014546:	4606      	mov	r6, r0
 8014548:	f8d9 3000 	ldr.w	r3, [r9]
 801454c:	1c50      	adds	r0, r2, #1
 801454e:	4798      	blx	r3
 8014550:	9003      	str	r0, [sp, #12]
 8014552:	2800      	cmp	r0, #0
 8014554:	d04f      	beq.n	80145f6 <rcutils_repl_str+0x15a>
 8014556:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801455a:	683a      	ldr	r2, [r7, #0]
 801455c:	4641      	mov	r1, r8
 801455e:	f004 fcba 	bl	8018ed6 <memcpy>
 8014562:	683d      	ldr	r5, [r7, #0]
 8014564:	9b03      	ldr	r3, [sp, #12]
 8014566:	9701      	str	r7, [sp, #4]
 8014568:	46ba      	mov	sl, r7
 801456a:	441d      	add	r5, r3
 801456c:	9f02      	ldr	r7, [sp, #8]
 801456e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014572:	2401      	movs	r4, #1
 8014574:	46d1      	mov	r9, sl
 8014576:	ee18 aa10 	vmov	sl, s16
 801457a:	e00a      	b.n	8014592 <rcutils_repl_str+0xf6>
 801457c:	f8d9 5000 	ldr.w	r5, [r9]
 8014580:	1aaa      	subs	r2, r5, r2
 8014582:	1885      	adds	r5, r0, r2
 8014584:	f004 fca7 	bl	8018ed6 <memcpy>
 8014588:	45a3      	cmp	fp, r4
 801458a:	f104 0201 	add.w	r2, r4, #1
 801458e:	d935      	bls.n	80145fc <rcutils_repl_str+0x160>
 8014590:	4614      	mov	r4, r2
 8014592:	4632      	mov	r2, r6
 8014594:	4651      	mov	r1, sl
 8014596:	4628      	mov	r0, r5
 8014598:	f004 fc9d 	bl	8018ed6 <memcpy>
 801459c:	f859 2b04 	ldr.w	r2, [r9], #4
 80145a0:	45a3      	cmp	fp, r4
 80145a2:	443a      	add	r2, r7
 80145a4:	eb05 0006 	add.w	r0, r5, r6
 80145a8:	eb08 0102 	add.w	r1, r8, r2
 80145ac:	d1e6      	bne.n	801457c <rcutils_repl_str+0xe0>
 80145ae:	9b04      	ldr	r3, [sp, #16]
 80145b0:	1a9a      	subs	r2, r3, r2
 80145b2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80145b6:	f004 fc8e 	bl	8018ed6 <memcpy>
 80145ba:	9a03      	ldr	r2, [sp, #12]
 80145bc:	9905      	ldr	r1, [sp, #20]
 80145be:	2300      	movs	r3, #0
 80145c0:	5453      	strb	r3, [r2, r1]
 80145c2:	e00b      	b.n	80145dc <rcutils_repl_str+0x140>
 80145c4:	4620      	mov	r0, r4
 80145c6:	f8d9 3000 	ldr.w	r3, [r9]
 80145ca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80145ce:	3001      	adds	r0, #1
 80145d0:	4798      	blx	r3
 80145d2:	9003      	str	r0, [sp, #12]
 80145d4:	b110      	cbz	r0, 80145dc <rcutils_repl_str+0x140>
 80145d6:	9901      	ldr	r1, [sp, #4]
 80145d8:	f004 fc8b 	bl	8018ef2 <strcpy>
 80145dc:	4638      	mov	r0, r7
 80145de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80145e2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80145e6:	4798      	blx	r3
 80145e8:	9803      	ldr	r0, [sp, #12]
 80145ea:	b007      	add	sp, #28
 80145ec:	ecbd 8b02 	vpop	{d8}
 80145f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145f4:	4647      	mov	r7, r8
 80145f6:	2300      	movs	r3, #0
 80145f8:	9303      	str	r3, [sp, #12]
 80145fa:	e7ef      	b.n	80145dc <rcutils_repl_str+0x140>
 80145fc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014600:	e7db      	b.n	80145ba <rcutils_repl_str+0x11e>
 8014602:	bf00      	nop

08014604 <rcutils_snprintf>:
 8014604:	b40c      	push	{r2, r3}
 8014606:	b530      	push	{r4, r5, lr}
 8014608:	b083      	sub	sp, #12
 801460a:	ab06      	add	r3, sp, #24
 801460c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014610:	9301      	str	r3, [sp, #4]
 8014612:	b152      	cbz	r2, 801462a <rcutils_snprintf+0x26>
 8014614:	b138      	cbz	r0, 8014626 <rcutils_snprintf+0x22>
 8014616:	b141      	cbz	r1, 801462a <rcutils_snprintf+0x26>
 8014618:	f004 f9c8 	bl	80189ac <vsniprintf>
 801461c:	b003      	add	sp, #12
 801461e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014622:	b002      	add	sp, #8
 8014624:	4770      	bx	lr
 8014626:	2900      	cmp	r1, #0
 8014628:	d0f6      	beq.n	8014618 <rcutils_snprintf+0x14>
 801462a:	f004 fc27 	bl	8018e7c <__errno>
 801462e:	2316      	movs	r3, #22
 8014630:	6003      	str	r3, [r0, #0]
 8014632:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014636:	e7f1      	b.n	801461c <rcutils_snprintf+0x18>

08014638 <rcutils_vsnprintf>:
 8014638:	b570      	push	{r4, r5, r6, lr}
 801463a:	b13a      	cbz	r2, 801464c <rcutils_vsnprintf+0x14>
 801463c:	b120      	cbz	r0, 8014648 <rcutils_vsnprintf+0x10>
 801463e:	b129      	cbz	r1, 801464c <rcutils_vsnprintf+0x14>
 8014640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014644:	f004 b9b2 	b.w	80189ac <vsniprintf>
 8014648:	2900      	cmp	r1, #0
 801464a:	d0f9      	beq.n	8014640 <rcutils_vsnprintf+0x8>
 801464c:	f004 fc16 	bl	8018e7c <__errno>
 8014650:	2316      	movs	r3, #22
 8014652:	6003      	str	r3, [r0, #0]
 8014654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014658:	bd70      	pop	{r4, r5, r6, pc}
 801465a:	bf00      	nop

0801465c <rcutils_strdup>:
 801465c:	b084      	sub	sp, #16
 801465e:	b570      	push	{r4, r5, r6, lr}
 8014660:	b082      	sub	sp, #8
 8014662:	ac07      	add	r4, sp, #28
 8014664:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014668:	4605      	mov	r5, r0
 801466a:	b1b0      	cbz	r0, 801469a <rcutils_strdup+0x3e>
 801466c:	f7eb fdc8 	bl	8000200 <strlen>
 8014670:	1c42      	adds	r2, r0, #1
 8014672:	9b07      	ldr	r3, [sp, #28]
 8014674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014676:	9201      	str	r2, [sp, #4]
 8014678:	4606      	mov	r6, r0
 801467a:	4610      	mov	r0, r2
 801467c:	4798      	blx	r3
 801467e:	4604      	mov	r4, r0
 8014680:	b128      	cbz	r0, 801468e <rcutils_strdup+0x32>
 8014682:	9a01      	ldr	r2, [sp, #4]
 8014684:	4629      	mov	r1, r5
 8014686:	f004 fc26 	bl	8018ed6 <memcpy>
 801468a:	2300      	movs	r3, #0
 801468c:	55a3      	strb	r3, [r4, r6]
 801468e:	4620      	mov	r0, r4
 8014690:	b002      	add	sp, #8
 8014692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014696:	b004      	add	sp, #16
 8014698:	4770      	bx	lr
 801469a:	4604      	mov	r4, r0
 801469c:	e7f7      	b.n	801468e <rcutils_strdup+0x32>
 801469e:	bf00      	nop

080146a0 <rcutils_strndup>:
 80146a0:	b082      	sub	sp, #8
 80146a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146a4:	ac06      	add	r4, sp, #24
 80146a6:	e884 000c 	stmia.w	r4, {r2, r3}
 80146aa:	4605      	mov	r5, r0
 80146ac:	b188      	cbz	r0, 80146d2 <rcutils_strndup+0x32>
 80146ae:	1c4f      	adds	r7, r1, #1
 80146b0:	460e      	mov	r6, r1
 80146b2:	4638      	mov	r0, r7
 80146b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80146b6:	4790      	blx	r2
 80146b8:	4604      	mov	r4, r0
 80146ba:	b128      	cbz	r0, 80146c8 <rcutils_strndup+0x28>
 80146bc:	463a      	mov	r2, r7
 80146be:	4629      	mov	r1, r5
 80146c0:	f004 fc09 	bl	8018ed6 <memcpy>
 80146c4:	2300      	movs	r3, #0
 80146c6:	55a3      	strb	r3, [r4, r6]
 80146c8:	4620      	mov	r0, r4
 80146ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80146ce:	b002      	add	sp, #8
 80146d0:	4770      	bx	lr
 80146d2:	4604      	mov	r4, r0
 80146d4:	e7f8      	b.n	80146c8 <rcutils_strndup+0x28>
 80146d6:	bf00      	nop

080146d8 <rcutils_get_zero_initialized_string_map>:
 80146d8:	4b01      	ldr	r3, [pc, #4]	@ (80146e0 <rcutils_get_zero_initialized_string_map+0x8>)
 80146da:	2000      	movs	r0, #0
 80146dc:	6018      	str	r0, [r3, #0]
 80146de:	4770      	bx	lr
 80146e0:	20015438 	.word	0x20015438

080146e4 <rcutils_string_map_reserve>:
 80146e4:	2800      	cmp	r0, #0
 80146e6:	d05f      	beq.n	80147a8 <rcutils_string_map_reserve+0xc4>
 80146e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146ec:	460c      	mov	r4, r1
 80146ee:	6801      	ldr	r1, [r0, #0]
 80146f0:	b082      	sub	sp, #8
 80146f2:	4605      	mov	r5, r0
 80146f4:	b129      	cbz	r1, 8014702 <rcutils_string_map_reserve+0x1e>
 80146f6:	68cb      	ldr	r3, [r1, #12]
 80146f8:	42a3      	cmp	r3, r4
 80146fa:	d906      	bls.n	801470a <rcutils_string_map_reserve+0x26>
 80146fc:	461c      	mov	r4, r3
 80146fe:	2900      	cmp	r1, #0
 8014700:	d1f9      	bne.n	80146f6 <rcutils_string_map_reserve+0x12>
 8014702:	201f      	movs	r0, #31
 8014704:	b002      	add	sp, #8
 8014706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801470a:	688b      	ldr	r3, [r1, #8]
 801470c:	42a3      	cmp	r3, r4
 801470e:	d047      	beq.n	80147a0 <rcutils_string_map_reserve+0xbc>
 8014710:	6a0e      	ldr	r6, [r1, #32]
 8014712:	2c00      	cmp	r4, #0
 8014714:	d034      	beq.n	8014780 <rcutils_string_map_reserve+0x9c>
 8014716:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801471a:	d243      	bcs.n	80147a4 <rcutils_string_map_reserve+0xc0>
 801471c:	00a7      	lsls	r7, r4, #2
 801471e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014722:	6808      	ldr	r0, [r1, #0]
 8014724:	4632      	mov	r2, r6
 8014726:	4639      	mov	r1, r7
 8014728:	47c0      	blx	r8
 801472a:	2800      	cmp	r0, #0
 801472c:	d03a      	beq.n	80147a4 <rcutils_string_map_reserve+0xc0>
 801472e:	682b      	ldr	r3, [r5, #0]
 8014730:	4632      	mov	r2, r6
 8014732:	6018      	str	r0, [r3, #0]
 8014734:	4639      	mov	r1, r7
 8014736:	6858      	ldr	r0, [r3, #4]
 8014738:	47c0      	blx	r8
 801473a:	2800      	cmp	r0, #0
 801473c:	d032      	beq.n	80147a4 <rcutils_string_map_reserve+0xc0>
 801473e:	682d      	ldr	r5, [r5, #0]
 8014740:	68ab      	ldr	r3, [r5, #8]
 8014742:	6068      	str	r0, [r5, #4]
 8014744:	42a3      	cmp	r3, r4
 8014746:	d226      	bcs.n	8014796 <rcutils_string_map_reserve+0xb2>
 8014748:	682a      	ldr	r2, [r5, #0]
 801474a:	eb00 0c07 	add.w	ip, r0, r7
 801474e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014752:	45e6      	cmp	lr, ip
 8014754:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014758:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801475c:	d203      	bcs.n	8014766 <rcutils_string_map_reserve+0x82>
 801475e:	eb02 0c07 	add.w	ip, r2, r7
 8014762:	4566      	cmp	r6, ip
 8014764:	d322      	bcc.n	80147ac <rcutils_string_map_reserve+0xc8>
 8014766:	1ae3      	subs	r3, r4, r3
 8014768:	009a      	lsls	r2, r3, #2
 801476a:	4670      	mov	r0, lr
 801476c:	2100      	movs	r1, #0
 801476e:	9201      	str	r2, [sp, #4]
 8014770:	f004 fb49 	bl	8018e06 <memset>
 8014774:	9a01      	ldr	r2, [sp, #4]
 8014776:	2100      	movs	r1, #0
 8014778:	4630      	mov	r0, r6
 801477a:	f004 fb44 	bl	8018e06 <memset>
 801477e:	e00a      	b.n	8014796 <rcutils_string_map_reserve+0xb2>
 8014780:	694f      	ldr	r7, [r1, #20]
 8014782:	6808      	ldr	r0, [r1, #0]
 8014784:	4631      	mov	r1, r6
 8014786:	47b8      	blx	r7
 8014788:	682b      	ldr	r3, [r5, #0]
 801478a:	4631      	mov	r1, r6
 801478c:	6858      	ldr	r0, [r3, #4]
 801478e:	601c      	str	r4, [r3, #0]
 8014790:	47b8      	blx	r7
 8014792:	682d      	ldr	r5, [r5, #0]
 8014794:	606c      	str	r4, [r5, #4]
 8014796:	2000      	movs	r0, #0
 8014798:	60ac      	str	r4, [r5, #8]
 801479a:	b002      	add	sp, #8
 801479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147a0:	2000      	movs	r0, #0
 80147a2:	e7af      	b.n	8014704 <rcutils_string_map_reserve+0x20>
 80147a4:	200a      	movs	r0, #10
 80147a6:	e7ad      	b.n	8014704 <rcutils_string_map_reserve+0x20>
 80147a8:	200b      	movs	r0, #11
 80147aa:	4770      	bx	lr
 80147ac:	1f0b      	subs	r3, r1, #4
 80147ae:	4418      	add	r0, r3
 80147b0:	4413      	add	r3, r2
 80147b2:	3a04      	subs	r2, #4
 80147b4:	4417      	add	r7, r2
 80147b6:	2200      	movs	r2, #0
 80147b8:	f843 2f04 	str.w	r2, [r3, #4]!
 80147bc:	42bb      	cmp	r3, r7
 80147be:	f840 2f04 	str.w	r2, [r0, #4]!
 80147c2:	d1f9      	bne.n	80147b8 <rcutils_string_map_reserve+0xd4>
 80147c4:	e7e7      	b.n	8014796 <rcutils_string_map_reserve+0xb2>
 80147c6:	bf00      	nop

080147c8 <rcutils_string_map_init>:
 80147c8:	b082      	sub	sp, #8
 80147ca:	b570      	push	{r4, r5, r6, lr}
 80147cc:	ac04      	add	r4, sp, #16
 80147ce:	e884 000c 	stmia.w	r4, {r2, r3}
 80147d2:	b380      	cbz	r0, 8014836 <rcutils_string_map_init+0x6e>
 80147d4:	6806      	ldr	r6, [r0, #0]
 80147d6:	4604      	mov	r4, r0
 80147d8:	b12e      	cbz	r6, 80147e6 <rcutils_string_map_init+0x1e>
 80147da:	251e      	movs	r5, #30
 80147dc:	4628      	mov	r0, r5
 80147de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147e2:	b002      	add	sp, #8
 80147e4:	4770      	bx	lr
 80147e6:	a804      	add	r0, sp, #16
 80147e8:	460d      	mov	r5, r1
 80147ea:	f7f6 fe99 	bl	800b520 <rcutils_allocator_is_valid>
 80147ee:	b310      	cbz	r0, 8014836 <rcutils_string_map_init+0x6e>
 80147f0:	9b04      	ldr	r3, [sp, #16]
 80147f2:	9908      	ldr	r1, [sp, #32]
 80147f4:	2024      	movs	r0, #36	@ 0x24
 80147f6:	4798      	blx	r3
 80147f8:	6020      	str	r0, [r4, #0]
 80147fa:	b310      	cbz	r0, 8014842 <rcutils_string_map_init+0x7a>
 80147fc:	f10d 0e10 	add.w	lr, sp, #16
 8014800:	e9c0 6600 	strd	r6, r6, [r0]
 8014804:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014808:	f100 0c10 	add.w	ip, r0, #16
 801480c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014810:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014814:	f8de 3000 	ldr.w	r3, [lr]
 8014818:	f8cc 3000 	str.w	r3, [ip]
 801481c:	4629      	mov	r1, r5
 801481e:	4620      	mov	r0, r4
 8014820:	f7ff ff60 	bl	80146e4 <rcutils_string_map_reserve>
 8014824:	4605      	mov	r5, r0
 8014826:	2800      	cmp	r0, #0
 8014828:	d0d8      	beq.n	80147dc <rcutils_string_map_init+0x14>
 801482a:	9b05      	ldr	r3, [sp, #20]
 801482c:	9908      	ldr	r1, [sp, #32]
 801482e:	6820      	ldr	r0, [r4, #0]
 8014830:	4798      	blx	r3
 8014832:	6026      	str	r6, [r4, #0]
 8014834:	e7d2      	b.n	80147dc <rcutils_string_map_init+0x14>
 8014836:	250b      	movs	r5, #11
 8014838:	4628      	mov	r0, r5
 801483a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801483e:	b002      	add	sp, #8
 8014840:	4770      	bx	lr
 8014842:	250a      	movs	r5, #10
 8014844:	e7ca      	b.n	80147dc <rcutils_string_map_init+0x14>
 8014846:	bf00      	nop

08014848 <rcutils_string_map_fini>:
 8014848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801484c:	b082      	sub	sp, #8
 801484e:	2800      	cmp	r0, #0
 8014850:	d03a      	beq.n	80148c8 <rcutils_string_map_fini+0x80>
 8014852:	6804      	ldr	r4, [r0, #0]
 8014854:	4606      	mov	r6, r0
 8014856:	2c00      	cmp	r4, #0
 8014858:	d032      	beq.n	80148c0 <rcutils_string_map_fini+0x78>
 801485a:	68a3      	ldr	r3, [r4, #8]
 801485c:	b32b      	cbz	r3, 80148aa <rcutils_string_map_fini+0x62>
 801485e:	2500      	movs	r5, #0
 8014860:	6822      	ldr	r2, [r4, #0]
 8014862:	462f      	mov	r7, r5
 8014864:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014868:	b1e0      	cbz	r0, 80148a4 <rcutils_string_map_fini+0x5c>
 801486a:	6a21      	ldr	r1, [r4, #32]
 801486c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014870:	9101      	str	r1, [sp, #4]
 8014872:	47c0      	blx	r8
 8014874:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014878:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801487c:	9901      	ldr	r1, [sp, #4]
 801487e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014882:	47c0      	blx	r8
 8014884:	68e3      	ldr	r3, [r4, #12]
 8014886:	6862      	ldr	r2, [r4, #4]
 8014888:	3b01      	subs	r3, #1
 801488a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801488e:	60e3      	str	r3, [r4, #12]
 8014890:	6834      	ldr	r4, [r6, #0]
 8014892:	68a3      	ldr	r3, [r4, #8]
 8014894:	3501      	adds	r5, #1
 8014896:	429d      	cmp	r5, r3
 8014898:	d207      	bcs.n	80148aa <rcutils_string_map_fini+0x62>
 801489a:	6822      	ldr	r2, [r4, #0]
 801489c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80148a0:	2800      	cmp	r0, #0
 80148a2:	d1e2      	bne.n	801486a <rcutils_string_map_fini+0x22>
 80148a4:	3501      	adds	r5, #1
 80148a6:	429d      	cmp	r5, r3
 80148a8:	d3dc      	bcc.n	8014864 <rcutils_string_map_fini+0x1c>
 80148aa:	2100      	movs	r1, #0
 80148ac:	4630      	mov	r0, r6
 80148ae:	f7ff ff19 	bl	80146e4 <rcutils_string_map_reserve>
 80148b2:	4604      	mov	r4, r0
 80148b4:	b920      	cbnz	r0, 80148c0 <rcutils_string_map_fini+0x78>
 80148b6:	6830      	ldr	r0, [r6, #0]
 80148b8:	6943      	ldr	r3, [r0, #20]
 80148ba:	6a01      	ldr	r1, [r0, #32]
 80148bc:	4798      	blx	r3
 80148be:	6034      	str	r4, [r6, #0]
 80148c0:	4620      	mov	r0, r4
 80148c2:	b002      	add	sp, #8
 80148c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148c8:	240b      	movs	r4, #11
 80148ca:	4620      	mov	r0, r4
 80148cc:	b002      	add	sp, #8
 80148ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148d2:	bf00      	nop

080148d4 <rcutils_string_map_getn>:
 80148d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148d8:	b300      	cbz	r0, 801491c <rcutils_string_map_getn+0x48>
 80148da:	6807      	ldr	r7, [r0, #0]
 80148dc:	b1ff      	cbz	r7, 801491e <rcutils_string_map_getn+0x4a>
 80148de:	4688      	mov	r8, r1
 80148e0:	b1e1      	cbz	r1, 801491c <rcutils_string_map_getn+0x48>
 80148e2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80148e6:	683e      	ldr	r6, [r7, #0]
 80148e8:	f1ba 0f00 	cmp.w	sl, #0
 80148ec:	d016      	beq.n	801491c <rcutils_string_map_getn+0x48>
 80148ee:	4691      	mov	r9, r2
 80148f0:	3e04      	subs	r6, #4
 80148f2:	2400      	movs	r4, #0
 80148f4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80148f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80148fc:	4628      	mov	r0, r5
 80148fe:	3401      	adds	r4, #1
 8014900:	b155      	cbz	r5, 8014918 <rcutils_string_map_getn+0x44>
 8014902:	f7eb fc7d 	bl	8000200 <strlen>
 8014906:	4548      	cmp	r0, r9
 8014908:	4602      	mov	r2, r0
 801490a:	4629      	mov	r1, r5
 801490c:	bf38      	it	cc
 801490e:	464a      	movcc	r2, r9
 8014910:	4640      	mov	r0, r8
 8014912:	f004 fa26 	bl	8018d62 <strncmp>
 8014916:	b128      	cbz	r0, 8014924 <rcutils_string_map_getn+0x50>
 8014918:	45a2      	cmp	sl, r4
 801491a:	d1eb      	bne.n	80148f4 <rcutils_string_map_getn+0x20>
 801491c:	2700      	movs	r7, #0
 801491e:	4638      	mov	r0, r7
 8014920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	f853 700b 	ldr.w	r7, [r3, fp]
 801492a:	4638      	mov	r0, r7
 801492c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014930 <rmw_get_zero_initialized_context>:
 8014930:	b510      	push	{r4, lr}
 8014932:	4604      	mov	r4, r0
 8014934:	3010      	adds	r0, #16
 8014936:	f000 f80b 	bl	8014950 <rmw_get_zero_initialized_init_options>
 801493a:	2300      	movs	r3, #0
 801493c:	2000      	movs	r0, #0
 801493e:	2100      	movs	r1, #0
 8014940:	e9c4 0100 	strd	r0, r1, [r4]
 8014944:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014948:	60a3      	str	r3, [r4, #8]
 801494a:	4620      	mov	r0, r4
 801494c:	bd10      	pop	{r4, pc}
 801494e:	bf00      	nop

08014950 <rmw_get_zero_initialized_init_options>:
 8014950:	b510      	push	{r4, lr}
 8014952:	2238      	movs	r2, #56	@ 0x38
 8014954:	4604      	mov	r4, r0
 8014956:	2100      	movs	r1, #0
 8014958:	f004 fa55 	bl	8018e06 <memset>
 801495c:	f104 0010 	add.w	r0, r4, #16
 8014960:	f000 f806 	bl	8014970 <rmw_get_default_security_options>
 8014964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014968:	60e3      	str	r3, [r4, #12]
 801496a:	4620      	mov	r0, r4
 801496c:	bd10      	pop	{r4, pc}
 801496e:	bf00      	nop

08014970 <rmw_get_default_security_options>:
 8014970:	2200      	movs	r2, #0
 8014972:	7002      	strb	r2, [r0, #0]
 8014974:	6042      	str	r2, [r0, #4]
 8014976:	4770      	bx	lr

08014978 <rmw_subscription_content_filter_options_fini>:
 8014978:	b1b0      	cbz	r0, 80149a8 <rmw_subscription_content_filter_options_fini+0x30>
 801497a:	b538      	push	{r3, r4, r5, lr}
 801497c:	4604      	mov	r4, r0
 801497e:	4608      	mov	r0, r1
 8014980:	460d      	mov	r5, r1
 8014982:	f7f6 fdcd 	bl	800b520 <rcutils_allocator_is_valid>
 8014986:	b168      	cbz	r0, 80149a4 <rmw_subscription_content_filter_options_fini+0x2c>
 8014988:	6820      	ldr	r0, [r4, #0]
 801498a:	b120      	cbz	r0, 8014996 <rmw_subscription_content_filter_options_fini+0x1e>
 801498c:	686b      	ldr	r3, [r5, #4]
 801498e:	6929      	ldr	r1, [r5, #16]
 8014990:	4798      	blx	r3
 8014992:	2300      	movs	r3, #0
 8014994:	6023      	str	r3, [r4, #0]
 8014996:	1d20      	adds	r0, r4, #4
 8014998:	f003 fb02 	bl	8017fa0 <rcutils_string_array_fini>
 801499c:	3800      	subs	r0, #0
 801499e:	bf18      	it	ne
 80149a0:	2001      	movne	r0, #1
 80149a2:	bd38      	pop	{r3, r4, r5, pc}
 80149a4:	200b      	movs	r0, #11
 80149a6:	bd38      	pop	{r3, r4, r5, pc}
 80149a8:	200b      	movs	r0, #11
 80149aa:	4770      	bx	lr

080149ac <rmw_get_default_subscription_options>:
 80149ac:	2200      	movs	r2, #0
 80149ae:	e9c0 2200 	strd	r2, r2, [r0]
 80149b2:	6082      	str	r2, [r0, #8]
 80149b4:	4770      	bx	lr
 80149b6:	bf00      	nop

080149b8 <rmw_time_equal>:
 80149b8:	b4f0      	push	{r4, r5, r6, r7}
 80149ba:	b084      	sub	sp, #16
 80149bc:	ac04      	add	r4, sp, #16
 80149be:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80149c2:	4603      	mov	r3, r0
 80149c4:	4924      	ldr	r1, [pc, #144]	@ (8014a58 <rmw_time_equal+0xa0>)
 80149c6:	9e03      	ldr	r6, [sp, #12]
 80149c8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80149cc:	2202      	movs	r2, #2
 80149ce:	4299      	cmp	r1, r3
 80149d0:	41aa      	sbcs	r2, r5
 80149d2:	d330      	bcc.n	8014a36 <rmw_time_equal+0x7e>
 80149d4:	4c21      	ldr	r4, [pc, #132]	@ (8014a5c <rmw_time_equal+0xa4>)
 80149d6:	fba3 3204 	umull	r3, r2, r3, r4
 80149da:	fb04 2205 	mla	r2, r4, r5, r2
 80149de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80149e2:	43dd      	mvns	r5, r3
 80149e4:	1a8c      	subs	r4, r1, r2
 80149e6:	4285      	cmp	r5, r0
 80149e8:	41b4      	sbcs	r4, r6
 80149ea:	d332      	bcc.n	8014a52 <rmw_time_equal+0x9a>
 80149ec:	eb10 0c03 	adds.w	ip, r0, r3
 80149f0:	eb42 0106 	adc.w	r1, r2, r6
 80149f4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80149f8:	4817      	ldr	r0, [pc, #92]	@ (8014a58 <rmw_time_equal+0xa0>)
 80149fa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80149fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80149fe:	2202      	movs	r2, #2
 8014a00:	4298      	cmp	r0, r3
 8014a02:	41b2      	sbcs	r2, r6
 8014a04:	d31c      	bcc.n	8014a40 <rmw_time_equal+0x88>
 8014a06:	4c15      	ldr	r4, [pc, #84]	@ (8014a5c <rmw_time_equal+0xa4>)
 8014a08:	fba3 3204 	umull	r3, r2, r3, r4
 8014a0c:	fb04 2206 	mla	r2, r4, r6, r2
 8014a10:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014a14:	43de      	mvns	r6, r3
 8014a16:	1a84      	subs	r4, r0, r2
 8014a18:	42ae      	cmp	r6, r5
 8014a1a:	41bc      	sbcs	r4, r7
 8014a1c:	d315      	bcc.n	8014a4a <rmw_time_equal+0x92>
 8014a1e:	195b      	adds	r3, r3, r5
 8014a20:	eb42 0207 	adc.w	r2, r2, r7
 8014a24:	428a      	cmp	r2, r1
 8014a26:	bf08      	it	eq
 8014a28:	4563      	cmpeq	r3, ip
 8014a2a:	bf0c      	ite	eq
 8014a2c:	2001      	moveq	r0, #1
 8014a2e:	2000      	movne	r0, #0
 8014a30:	b004      	add	sp, #16
 8014a32:	bcf0      	pop	{r4, r5, r6, r7}
 8014a34:	4770      	bx	lr
 8014a36:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014a3a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014a3e:	e7d9      	b.n	80149f4 <rmw_time_equal+0x3c>
 8014a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014a44:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8014a48:	e7ec      	b.n	8014a24 <rmw_time_equal+0x6c>
 8014a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014a4e:	4602      	mov	r2, r0
 8014a50:	e7e8      	b.n	8014a24 <rmw_time_equal+0x6c>
 8014a52:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014a56:	e7cd      	b.n	80149f4 <rmw_time_equal+0x3c>
 8014a58:	25c17d04 	.word	0x25c17d04
 8014a5c:	3b9aca00 	.word	0x3b9aca00

08014a60 <rmw_time_total_nsec>:
 8014a60:	b470      	push	{r4, r5, r6}
 8014a62:	b085      	sub	sp, #20
 8014a64:	ac04      	add	r4, sp, #16
 8014a66:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	4912      	ldr	r1, [pc, #72]	@ (8014ab8 <rmw_time_total_nsec+0x58>)
 8014a6e:	9e03      	ldr	r6, [sp, #12]
 8014a70:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014a74:	2202      	movs	r2, #2
 8014a76:	4299      	cmp	r1, r3
 8014a78:	41aa      	sbcs	r2, r5
 8014a7a:	d311      	bcc.n	8014aa0 <rmw_time_total_nsec+0x40>
 8014a7c:	4c0f      	ldr	r4, [pc, #60]	@ (8014abc <rmw_time_total_nsec+0x5c>)
 8014a7e:	fba3 3204 	umull	r3, r2, r3, r4
 8014a82:	fb04 2205 	mla	r2, r4, r5, r2
 8014a86:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014a8a:	43dd      	mvns	r5, r3
 8014a8c:	1a8c      	subs	r4, r1, r2
 8014a8e:	4285      	cmp	r5, r0
 8014a90:	41b4      	sbcs	r4, r6
 8014a92:	d30c      	bcc.n	8014aae <rmw_time_total_nsec+0x4e>
 8014a94:	1818      	adds	r0, r3, r0
 8014a96:	eb42 0106 	adc.w	r1, r2, r6
 8014a9a:	b005      	add	sp, #20
 8014a9c:	bc70      	pop	{r4, r5, r6}
 8014a9e:	4770      	bx	lr
 8014aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014aa4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014aa8:	b005      	add	sp, #20
 8014aaa:	bc70      	pop	{r4, r5, r6}
 8014aac:	4770      	bx	lr
 8014aae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014ab2:	b005      	add	sp, #20
 8014ab4:	bc70      	pop	{r4, r5, r6}
 8014ab6:	4770      	bx	lr
 8014ab8:	25c17d04 	.word	0x25c17d04
 8014abc:	3b9aca00 	.word	0x3b9aca00

08014ac0 <rmw_get_zero_initialized_message_info>:
 8014ac0:	b510      	push	{r4, lr}
 8014ac2:	2240      	movs	r2, #64	@ 0x40
 8014ac4:	4604      	mov	r4, r0
 8014ac6:	2100      	movs	r1, #0
 8014ac8:	f004 f99d 	bl	8018e06 <memset>
 8014acc:	4620      	mov	r0, r4
 8014ace:	bd10      	pop	{r4, pc}

08014ad0 <rmw_validate_full_topic_name>:
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	d057      	beq.n	8014b84 <rmw_validate_full_topic_name+0xb4>
 8014ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ad8:	460d      	mov	r5, r1
 8014ada:	2900      	cmp	r1, #0
 8014adc:	d054      	beq.n	8014b88 <rmw_validate_full_topic_name+0xb8>
 8014ade:	4616      	mov	r6, r2
 8014ae0:	4604      	mov	r4, r0
 8014ae2:	f7eb fb8d 	bl	8000200 <strlen>
 8014ae6:	b148      	cbz	r0, 8014afc <rmw_validate_full_topic_name+0x2c>
 8014ae8:	7823      	ldrb	r3, [r4, #0]
 8014aea:	2b2f      	cmp	r3, #47	@ 0x2f
 8014aec:	d00d      	beq.n	8014b0a <rmw_validate_full_topic_name+0x3a>
 8014aee:	2302      	movs	r3, #2
 8014af0:	602b      	str	r3, [r5, #0]
 8014af2:	b13e      	cbz	r6, 8014b04 <rmw_validate_full_topic_name+0x34>
 8014af4:	2000      	movs	r0, #0
 8014af6:	6030      	str	r0, [r6, #0]
 8014af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014afc:	2301      	movs	r3, #1
 8014afe:	602b      	str	r3, [r5, #0]
 8014b00:	2e00      	cmp	r6, #0
 8014b02:	d1f7      	bne.n	8014af4 <rmw_validate_full_topic_name+0x24>
 8014b04:	2000      	movs	r0, #0
 8014b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b0a:	1e43      	subs	r3, r0, #1
 8014b0c:	5ce2      	ldrb	r2, [r4, r3]
 8014b0e:	2a2f      	cmp	r2, #47	@ 0x2f
 8014b10:	d03c      	beq.n	8014b8c <rmw_validate_full_topic_name+0xbc>
 8014b12:	1e63      	subs	r3, r4, #1
 8014b14:	eb03 0800 	add.w	r8, r3, r0
 8014b18:	f1c4 0e01 	rsb	lr, r4, #1
 8014b1c:	eb0e 0703 	add.w	r7, lr, r3
 8014b20:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8014b24:	f021 0220 	bic.w	r2, r1, #32
 8014b28:	3a41      	subs	r2, #65	@ 0x41
 8014b2a:	2a19      	cmp	r2, #25
 8014b2c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8014b30:	d90b      	bls.n	8014b4a <rmw_validate_full_topic_name+0x7a>
 8014b32:	295f      	cmp	r1, #95	@ 0x5f
 8014b34:	d009      	beq.n	8014b4a <rmw_validate_full_topic_name+0x7a>
 8014b36:	f1bc 0f0a 	cmp.w	ip, #10
 8014b3a:	d906      	bls.n	8014b4a <rmw_validate_full_topic_name+0x7a>
 8014b3c:	2304      	movs	r3, #4
 8014b3e:	602b      	str	r3, [r5, #0]
 8014b40:	2e00      	cmp	r6, #0
 8014b42:	d0df      	beq.n	8014b04 <rmw_validate_full_topic_name+0x34>
 8014b44:	6037      	str	r7, [r6, #0]
 8014b46:	2000      	movs	r0, #0
 8014b48:	e7d6      	b.n	8014af8 <rmw_validate_full_topic_name+0x28>
 8014b4a:	4543      	cmp	r3, r8
 8014b4c:	d1e6      	bne.n	8014b1c <rmw_validate_full_topic_name+0x4c>
 8014b4e:	4f1a      	ldr	r7, [pc, #104]	@ (8014bb8 <rmw_validate_full_topic_name+0xe8>)
 8014b50:	2301      	movs	r3, #1
 8014b52:	e004      	b.n	8014b5e <rmw_validate_full_topic_name+0x8e>
 8014b54:	4298      	cmp	r0, r3
 8014b56:	f104 0401 	add.w	r4, r4, #1
 8014b5a:	d91c      	bls.n	8014b96 <rmw_validate_full_topic_name+0xc6>
 8014b5c:	4613      	mov	r3, r2
 8014b5e:	4298      	cmp	r0, r3
 8014b60:	f103 0201 	add.w	r2, r3, #1
 8014b64:	d0f6      	beq.n	8014b54 <rmw_validate_full_topic_name+0x84>
 8014b66:	7821      	ldrb	r1, [r4, #0]
 8014b68:	292f      	cmp	r1, #47	@ 0x2f
 8014b6a:	d1f3      	bne.n	8014b54 <rmw_validate_full_topic_name+0x84>
 8014b6c:	7861      	ldrb	r1, [r4, #1]
 8014b6e:	292f      	cmp	r1, #47	@ 0x2f
 8014b70:	d01c      	beq.n	8014bac <rmw_validate_full_topic_name+0xdc>
 8014b72:	5dc9      	ldrb	r1, [r1, r7]
 8014b74:	0749      	lsls	r1, r1, #29
 8014b76:	d5ed      	bpl.n	8014b54 <rmw_validate_full_topic_name+0x84>
 8014b78:	2206      	movs	r2, #6
 8014b7a:	602a      	str	r2, [r5, #0]
 8014b7c:	2e00      	cmp	r6, #0
 8014b7e:	d0c1      	beq.n	8014b04 <rmw_validate_full_topic_name+0x34>
 8014b80:	6033      	str	r3, [r6, #0]
 8014b82:	e7bf      	b.n	8014b04 <rmw_validate_full_topic_name+0x34>
 8014b84:	200b      	movs	r0, #11
 8014b86:	4770      	bx	lr
 8014b88:	200b      	movs	r0, #11
 8014b8a:	e7b5      	b.n	8014af8 <rmw_validate_full_topic_name+0x28>
 8014b8c:	2203      	movs	r2, #3
 8014b8e:	602a      	str	r2, [r5, #0]
 8014b90:	2e00      	cmp	r6, #0
 8014b92:	d1f5      	bne.n	8014b80 <rmw_validate_full_topic_name+0xb0>
 8014b94:	e7b6      	b.n	8014b04 <rmw_validate_full_topic_name+0x34>
 8014b96:	28f7      	cmp	r0, #247	@ 0xf7
 8014b98:	d802      	bhi.n	8014ba0 <rmw_validate_full_topic_name+0xd0>
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	6028      	str	r0, [r5, #0]
 8014b9e:	e7ab      	b.n	8014af8 <rmw_validate_full_topic_name+0x28>
 8014ba0:	2307      	movs	r3, #7
 8014ba2:	602b      	str	r3, [r5, #0]
 8014ba4:	2e00      	cmp	r6, #0
 8014ba6:	d0ad      	beq.n	8014b04 <rmw_validate_full_topic_name+0x34>
 8014ba8:	23f6      	movs	r3, #246	@ 0xf6
 8014baa:	e7e9      	b.n	8014b80 <rmw_validate_full_topic_name+0xb0>
 8014bac:	2205      	movs	r2, #5
 8014bae:	602a      	str	r2, [r5, #0]
 8014bb0:	2e00      	cmp	r6, #0
 8014bb2:	d1e5      	bne.n	8014b80 <rmw_validate_full_topic_name+0xb0>
 8014bb4:	e7a6      	b.n	8014b04 <rmw_validate_full_topic_name+0x34>
 8014bb6:	bf00      	nop
 8014bb8:	0801b396 	.word	0x0801b396

08014bbc <rmw_validate_namespace_with_size>:
 8014bbc:	b340      	cbz	r0, 8014c10 <rmw_validate_namespace_with_size+0x54>
 8014bbe:	b570      	push	{r4, r5, r6, lr}
 8014bc0:	4614      	mov	r4, r2
 8014bc2:	b0c2      	sub	sp, #264	@ 0x108
 8014bc4:	b332      	cbz	r2, 8014c14 <rmw_validate_namespace_with_size+0x58>
 8014bc6:	2901      	cmp	r1, #1
 8014bc8:	460d      	mov	r5, r1
 8014bca:	461e      	mov	r6, r3
 8014bcc:	d102      	bne.n	8014bd4 <rmw_validate_namespace_with_size+0x18>
 8014bce:	7803      	ldrb	r3, [r0, #0]
 8014bd0:	2b2f      	cmp	r3, #47	@ 0x2f
 8014bd2:	d012      	beq.n	8014bfa <rmw_validate_namespace_with_size+0x3e>
 8014bd4:	aa01      	add	r2, sp, #4
 8014bd6:	4669      	mov	r1, sp
 8014bd8:	f7ff ff7a 	bl	8014ad0 <rmw_validate_full_topic_name>
 8014bdc:	b978      	cbnz	r0, 8014bfe <rmw_validate_namespace_with_size+0x42>
 8014bde:	9b00      	ldr	r3, [sp, #0]
 8014be0:	b14b      	cbz	r3, 8014bf6 <rmw_validate_namespace_with_size+0x3a>
 8014be2:	2b07      	cmp	r3, #7
 8014be4:	d007      	beq.n	8014bf6 <rmw_validate_namespace_with_size+0x3a>
 8014be6:	1e5a      	subs	r2, r3, #1
 8014be8:	2a05      	cmp	r2, #5
 8014bea:	d82b      	bhi.n	8014c44 <rmw_validate_namespace_with_size+0x88>
 8014bec:	e8df f002 	tbb	[pc, r2]
 8014bf0:	1e212427 	.word	0x1e212427
 8014bf4:	141b      	.short	0x141b
 8014bf6:	2df5      	cmp	r5, #245	@ 0xf5
 8014bf8:	d803      	bhi.n	8014c02 <rmw_validate_namespace_with_size+0x46>
 8014bfa:	2000      	movs	r0, #0
 8014bfc:	6020      	str	r0, [r4, #0]
 8014bfe:	b042      	add	sp, #264	@ 0x108
 8014c00:	bd70      	pop	{r4, r5, r6, pc}
 8014c02:	2307      	movs	r3, #7
 8014c04:	6023      	str	r3, [r4, #0]
 8014c06:	2e00      	cmp	r6, #0
 8014c08:	d0f9      	beq.n	8014bfe <rmw_validate_namespace_with_size+0x42>
 8014c0a:	23f4      	movs	r3, #244	@ 0xf4
 8014c0c:	6033      	str	r3, [r6, #0]
 8014c0e:	e7f6      	b.n	8014bfe <rmw_validate_namespace_with_size+0x42>
 8014c10:	200b      	movs	r0, #11
 8014c12:	4770      	bx	lr
 8014c14:	200b      	movs	r0, #11
 8014c16:	e7f2      	b.n	8014bfe <rmw_validate_namespace_with_size+0x42>
 8014c18:	2306      	movs	r3, #6
 8014c1a:	6023      	str	r3, [r4, #0]
 8014c1c:	2e00      	cmp	r6, #0
 8014c1e:	d0ee      	beq.n	8014bfe <rmw_validate_namespace_with_size+0x42>
 8014c20:	9b01      	ldr	r3, [sp, #4]
 8014c22:	6033      	str	r3, [r6, #0]
 8014c24:	e7eb      	b.n	8014bfe <rmw_validate_namespace_with_size+0x42>
 8014c26:	2305      	movs	r3, #5
 8014c28:	6023      	str	r3, [r4, #0]
 8014c2a:	e7f7      	b.n	8014c1c <rmw_validate_namespace_with_size+0x60>
 8014c2c:	2304      	movs	r3, #4
 8014c2e:	6023      	str	r3, [r4, #0]
 8014c30:	e7f4      	b.n	8014c1c <rmw_validate_namespace_with_size+0x60>
 8014c32:	2303      	movs	r3, #3
 8014c34:	6023      	str	r3, [r4, #0]
 8014c36:	e7f1      	b.n	8014c1c <rmw_validate_namespace_with_size+0x60>
 8014c38:	2302      	movs	r3, #2
 8014c3a:	6023      	str	r3, [r4, #0]
 8014c3c:	e7ee      	b.n	8014c1c <rmw_validate_namespace_with_size+0x60>
 8014c3e:	2301      	movs	r3, #1
 8014c40:	6023      	str	r3, [r4, #0]
 8014c42:	e7eb      	b.n	8014c1c <rmw_validate_namespace_with_size+0x60>
 8014c44:	4a03      	ldr	r2, [pc, #12]	@ (8014c54 <rmw_validate_namespace_with_size+0x98>)
 8014c46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014c4a:	a802      	add	r0, sp, #8
 8014c4c:	f7ff fcda 	bl	8014604 <rcutils_snprintf>
 8014c50:	2001      	movs	r0, #1
 8014c52:	e7d4      	b.n	8014bfe <rmw_validate_namespace_with_size+0x42>
 8014c54:	0801acc4 	.word	0x0801acc4

08014c58 <rmw_validate_namespace>:
 8014c58:	b168      	cbz	r0, 8014c76 <rmw_validate_namespace+0x1e>
 8014c5a:	b570      	push	{r4, r5, r6, lr}
 8014c5c:	460d      	mov	r5, r1
 8014c5e:	4616      	mov	r6, r2
 8014c60:	4604      	mov	r4, r0
 8014c62:	f7eb facd 	bl	8000200 <strlen>
 8014c66:	4633      	mov	r3, r6
 8014c68:	4601      	mov	r1, r0
 8014c6a:	462a      	mov	r2, r5
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c72:	f7ff bfa3 	b.w	8014bbc <rmw_validate_namespace_with_size>
 8014c76:	200b      	movs	r0, #11
 8014c78:	4770      	bx	lr
 8014c7a:	bf00      	nop

08014c7c <rmw_namespace_validation_result_string>:
 8014c7c:	2807      	cmp	r0, #7
 8014c7e:	bf9a      	itte	ls
 8014c80:	4b02      	ldrls	r3, [pc, #8]	@ (8014c8c <rmw_namespace_validation_result_string+0x10>)
 8014c82:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014c86:	4802      	ldrhi	r0, [pc, #8]	@ (8014c90 <rmw_namespace_validation_result_string+0x14>)
 8014c88:	4770      	bx	lr
 8014c8a:	bf00      	nop
 8014c8c:	0801aebc 	.word	0x0801aebc
 8014c90:	0801ad14 	.word	0x0801ad14

08014c94 <rmw_validate_node_name>:
 8014c94:	2800      	cmp	r0, #0
 8014c96:	d03b      	beq.n	8014d10 <rmw_validate_node_name+0x7c>
 8014c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c9c:	460d      	mov	r5, r1
 8014c9e:	2900      	cmp	r1, #0
 8014ca0:	d038      	beq.n	8014d14 <rmw_validate_node_name+0x80>
 8014ca2:	4616      	mov	r6, r2
 8014ca4:	4604      	mov	r4, r0
 8014ca6:	f7eb faab 	bl	8000200 <strlen>
 8014caa:	b1e0      	cbz	r0, 8014ce6 <rmw_validate_node_name+0x52>
 8014cac:	1e63      	subs	r3, r4, #1
 8014cae:	eb03 0800 	add.w	r8, r3, r0
 8014cb2:	f1c4 0101 	rsb	r1, r4, #1
 8014cb6:	18cf      	adds	r7, r1, r3
 8014cb8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8014cbc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8014cc0:	f02e 0c20 	bic.w	ip, lr, #32
 8014cc4:	2a09      	cmp	r2, #9
 8014cc6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8014cca:	d914      	bls.n	8014cf6 <rmw_validate_node_name+0x62>
 8014ccc:	f1bc 0f19 	cmp.w	ip, #25
 8014cd0:	d911      	bls.n	8014cf6 <rmw_validate_node_name+0x62>
 8014cd2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014cd6:	d00e      	beq.n	8014cf6 <rmw_validate_node_name+0x62>
 8014cd8:	2302      	movs	r3, #2
 8014cda:	602b      	str	r3, [r5, #0]
 8014cdc:	b106      	cbz	r6, 8014ce0 <rmw_validate_node_name+0x4c>
 8014cde:	6037      	str	r7, [r6, #0]
 8014ce0:	2000      	movs	r0, #0
 8014ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	602b      	str	r3, [r5, #0]
 8014cea:	2e00      	cmp	r6, #0
 8014cec:	d0f8      	beq.n	8014ce0 <rmw_validate_node_name+0x4c>
 8014cee:	2000      	movs	r0, #0
 8014cf0:	6030      	str	r0, [r6, #0]
 8014cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cf6:	4543      	cmp	r3, r8
 8014cf8:	d1dd      	bne.n	8014cb6 <rmw_validate_node_name+0x22>
 8014cfa:	7822      	ldrb	r2, [r4, #0]
 8014cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8014d34 <rmw_validate_node_name+0xa0>)
 8014cfe:	5cd3      	ldrb	r3, [r2, r3]
 8014d00:	f013 0304 	ands.w	r3, r3, #4
 8014d04:	d110      	bne.n	8014d28 <rmw_validate_node_name+0x94>
 8014d06:	28ff      	cmp	r0, #255	@ 0xff
 8014d08:	d806      	bhi.n	8014d18 <rmw_validate_node_name+0x84>
 8014d0a:	602b      	str	r3, [r5, #0]
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	e7e8      	b.n	8014ce2 <rmw_validate_node_name+0x4e>
 8014d10:	200b      	movs	r0, #11
 8014d12:	4770      	bx	lr
 8014d14:	200b      	movs	r0, #11
 8014d16:	e7e4      	b.n	8014ce2 <rmw_validate_node_name+0x4e>
 8014d18:	2204      	movs	r2, #4
 8014d1a:	602a      	str	r2, [r5, #0]
 8014d1c:	2e00      	cmp	r6, #0
 8014d1e:	d0df      	beq.n	8014ce0 <rmw_validate_node_name+0x4c>
 8014d20:	22fe      	movs	r2, #254	@ 0xfe
 8014d22:	6032      	str	r2, [r6, #0]
 8014d24:	4618      	mov	r0, r3
 8014d26:	e7dc      	b.n	8014ce2 <rmw_validate_node_name+0x4e>
 8014d28:	2303      	movs	r3, #3
 8014d2a:	602b      	str	r3, [r5, #0]
 8014d2c:	2e00      	cmp	r6, #0
 8014d2e:	d1de      	bne.n	8014cee <rmw_validate_node_name+0x5a>
 8014d30:	e7d6      	b.n	8014ce0 <rmw_validate_node_name+0x4c>
 8014d32:	bf00      	nop
 8014d34:	0801b396 	.word	0x0801b396

08014d38 <rmw_node_name_validation_result_string>:
 8014d38:	2804      	cmp	r0, #4
 8014d3a:	bf9a      	itte	ls
 8014d3c:	4b02      	ldrls	r3, [pc, #8]	@ (8014d48 <rmw_node_name_validation_result_string+0x10>)
 8014d3e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014d42:	4802      	ldrhi	r0, [pc, #8]	@ (8014d4c <rmw_node_name_validation_result_string+0x14>)
 8014d44:	4770      	bx	lr
 8014d46:	bf00      	nop
 8014d48:	0801afc8 	.word	0x0801afc8
 8014d4c:	0801aedc 	.word	0x0801aedc

08014d50 <get_memory>:
 8014d50:	4603      	mov	r3, r0
 8014d52:	6840      	ldr	r0, [r0, #4]
 8014d54:	b158      	cbz	r0, 8014d6e <get_memory+0x1e>
 8014d56:	6842      	ldr	r2, [r0, #4]
 8014d58:	605a      	str	r2, [r3, #4]
 8014d5a:	b10a      	cbz	r2, 8014d60 <get_memory+0x10>
 8014d5c:	2100      	movs	r1, #0
 8014d5e:	6011      	str	r1, [r2, #0]
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	6042      	str	r2, [r0, #4]
 8014d64:	b102      	cbz	r2, 8014d68 <get_memory+0x18>
 8014d66:	6010      	str	r0, [r2, #0]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	6002      	str	r2, [r0, #0]
 8014d6c:	6018      	str	r0, [r3, #0]
 8014d6e:	4770      	bx	lr

08014d70 <put_memory>:
 8014d70:	680b      	ldr	r3, [r1, #0]
 8014d72:	b10b      	cbz	r3, 8014d78 <put_memory+0x8>
 8014d74:	684a      	ldr	r2, [r1, #4]
 8014d76:	605a      	str	r2, [r3, #4]
 8014d78:	684a      	ldr	r2, [r1, #4]
 8014d7a:	b102      	cbz	r2, 8014d7e <put_memory+0xe>
 8014d7c:	6013      	str	r3, [r2, #0]
 8014d7e:	6803      	ldr	r3, [r0, #0]
 8014d80:	428b      	cmp	r3, r1
 8014d82:	6843      	ldr	r3, [r0, #4]
 8014d84:	bf08      	it	eq
 8014d86:	6002      	streq	r2, [r0, #0]
 8014d88:	604b      	str	r3, [r1, #4]
 8014d8a:	b103      	cbz	r3, 8014d8e <put_memory+0x1e>
 8014d8c:	6019      	str	r1, [r3, #0]
 8014d8e:	2300      	movs	r3, #0
 8014d90:	600b      	str	r3, [r1, #0]
 8014d92:	6041      	str	r1, [r0, #4]
 8014d94:	4770      	bx	lr
 8014d96:	bf00      	nop

08014d98 <rmw_destroy_client>:
 8014d98:	b570      	push	{r4, r5, r6, lr}
 8014d9a:	b128      	cbz	r0, 8014da8 <rmw_destroy_client+0x10>
 8014d9c:	4604      	mov	r4, r0
 8014d9e:	6800      	ldr	r0, [r0, #0]
 8014da0:	460d      	mov	r5, r1
 8014da2:	f7f7 f963 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 8014da6:	b910      	cbnz	r0, 8014dae <rmw_destroy_client+0x16>
 8014da8:	2401      	movs	r4, #1
 8014daa:	4620      	mov	r0, r4
 8014dac:	bd70      	pop	{r4, r5, r6, pc}
 8014dae:	6863      	ldr	r3, [r4, #4]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d0f9      	beq.n	8014da8 <rmw_destroy_client+0x10>
 8014db4:	2d00      	cmp	r5, #0
 8014db6:	d0f7      	beq.n	8014da8 <rmw_destroy_client+0x10>
 8014db8:	6828      	ldr	r0, [r5, #0]
 8014dba:	f7f7 f957 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	d0f2      	beq.n	8014da8 <rmw_destroy_client+0x10>
 8014dc2:	686e      	ldr	r6, [r5, #4]
 8014dc4:	2e00      	cmp	r6, #0
 8014dc6:	d0ef      	beq.n	8014da8 <rmw_destroy_client+0x10>
 8014dc8:	6864      	ldr	r4, [r4, #4]
 8014dca:	6932      	ldr	r2, [r6, #16]
 8014dcc:	6920      	ldr	r0, [r4, #16]
 8014dce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014dd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014dd6:	6819      	ldr	r1, [r3, #0]
 8014dd8:	f002 f81e 	bl	8016e18 <uxr_buffer_cancel_data>
 8014ddc:	4602      	mov	r2, r0
 8014dde:	6920      	ldr	r0, [r4, #16]
 8014de0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014de4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014de8:	f7f7 f8c0 	bl	800bf6c <run_xrce_session>
 8014dec:	6920      	ldr	r0, [r4, #16]
 8014dee:	6932      	ldr	r2, [r6, #16]
 8014df0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014df4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014df8:	6819      	ldr	r1, [r3, #0]
 8014dfa:	f7f9 fe2d 	bl	800ea58 <uxr_buffer_delete_entity>
 8014dfe:	4602      	mov	r2, r0
 8014e00:	6920      	ldr	r0, [r4, #16]
 8014e02:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014e06:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014e0a:	f7f7 f8af 	bl	800bf6c <run_xrce_session>
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	4628      	mov	r0, r5
 8014e12:	bf14      	ite	ne
 8014e14:	2400      	movne	r4, #0
 8014e16:	2402      	moveq	r4, #2
 8014e18:	f7f6 ff90 	bl	800bd3c <rmw_uxrce_fini_client_memory>
 8014e1c:	e7c5      	b.n	8014daa <rmw_destroy_client+0x12>
 8014e1e:	bf00      	nop

08014e20 <rmw_get_implementation_identifier>:
 8014e20:	4b01      	ldr	r3, [pc, #4]	@ (8014e28 <rmw_get_implementation_identifier+0x8>)
 8014e22:	6818      	ldr	r0, [r3, #0]
 8014e24:	4770      	bx	lr
 8014e26:	bf00      	nop
 8014e28:	0801aff4 	.word	0x0801aff4

08014e2c <rmw_init_options_init>:
 8014e2c:	b084      	sub	sp, #16
 8014e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e30:	b083      	sub	sp, #12
 8014e32:	ad09      	add	r5, sp, #36	@ 0x24
 8014e34:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014e38:	b130      	cbz	r0, 8014e48 <rmw_init_options_init+0x1c>
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	f7f6 fb6f 	bl	800b520 <rcutils_allocator_is_valid>
 8014e42:	b108      	cbz	r0, 8014e48 <rmw_init_options_init+0x1c>
 8014e44:	68a6      	ldr	r6, [r4, #8]
 8014e46:	b12e      	cbz	r6, 8014e54 <rmw_init_options_init+0x28>
 8014e48:	200b      	movs	r0, #11
 8014e4a:	b003      	add	sp, #12
 8014e4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e50:	b004      	add	sp, #16
 8014e52:	4770      	bx	lr
 8014e54:	2200      	movs	r2, #0
 8014e56:	2300      	movs	r3, #0
 8014e58:	e9c4 2300 	strd	r2, r3, [r4]
 8014e5c:	4b22      	ldr	r3, [pc, #136]	@ (8014ee8 <rmw_init_options_init+0xbc>)
 8014e5e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8014ef8 <rmw_init_options_init+0xcc>
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	60a3      	str	r3, [r4, #8]
 8014e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e68:	f104 0c20 	add.w	ip, r4, #32
 8014e6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e70:	466f      	mov	r7, sp
 8014e72:	682b      	ldr	r3, [r5, #0]
 8014e74:	f8cc 3000 	str.w	r3, [ip]
 8014e78:	4638      	mov	r0, r7
 8014e7a:	f8c4 e01c 	str.w	lr, [r4, #28]
 8014e7e:	60e6      	str	r6, [r4, #12]
 8014e80:	f7ff fd76 	bl	8014970 <rmw_get_default_security_options>
 8014e84:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014e88:	f104 0310 	add.w	r3, r4, #16
 8014e8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014e90:	2203      	movs	r2, #3
 8014e92:	4816      	ldr	r0, [pc, #88]	@ (8014eec <rmw_init_options_init+0xc0>)
 8014e94:	4916      	ldr	r1, [pc, #88]	@ (8014ef0 <rmw_init_options_init+0xc4>)
 8014e96:	7626      	strb	r6, [r4, #24]
 8014e98:	f7f6 fe90 	bl	800bbbc <rmw_uxrce_init_init_options_impl_memory>
 8014e9c:	4813      	ldr	r0, [pc, #76]	@ (8014eec <rmw_init_options_init+0xc0>)
 8014e9e:	f7ff ff57 	bl	8014d50 <get_memory>
 8014ea2:	b1f0      	cbz	r0, 8014ee2 <rmw_init_options_init+0xb6>
 8014ea4:	4a13      	ldr	r2, [pc, #76]	@ (8014ef4 <rmw_init_options_init+0xc8>)
 8014ea6:	6883      	ldr	r3, [r0, #8]
 8014ea8:	6851      	ldr	r1, [r2, #4]
 8014eaa:	7810      	ldrb	r0, [r2, #0]
 8014eac:	6363      	str	r3, [r4, #52]	@ 0x34
 8014eae:	7418      	strb	r0, [r3, #16]
 8014eb0:	6159      	str	r1, [r3, #20]
 8014eb2:	68d1      	ldr	r1, [r2, #12]
 8014eb4:	61d9      	str	r1, [r3, #28]
 8014eb6:	6911      	ldr	r1, [r2, #16]
 8014eb8:	6219      	str	r1, [r3, #32]
 8014eba:	6951      	ldr	r1, [r2, #20]
 8014ebc:	6892      	ldr	r2, [r2, #8]
 8014ebe:	619a      	str	r2, [r3, #24]
 8014ec0:	6259      	str	r1, [r3, #36]	@ 0x24
 8014ec2:	f7fb fa25 	bl	8010310 <uxr_nanos>
 8014ec6:	f003 fb69 	bl	801859c <srand>
 8014eca:	f003 fb95 	bl	80185f8 <rand>
 8014ece:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014ed0:	6298      	str	r0, [r3, #40]	@ 0x28
 8014ed2:	2800      	cmp	r0, #0
 8014ed4:	d0f9      	beq.n	8014eca <rmw_init_options_init+0x9e>
 8014ed6:	2000      	movs	r0, #0
 8014ed8:	b003      	add	sp, #12
 8014eda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014ede:	b004      	add	sp, #16
 8014ee0:	4770      	bx	lr
 8014ee2:	2001      	movs	r0, #1
 8014ee4:	e7b1      	b.n	8014e4a <rmw_init_options_init+0x1e>
 8014ee6:	bf00      	nop
 8014ee8:	0801aff4 	.word	0x0801aff4
 8014eec:	2001531c 	.word	0x2001531c
 8014ef0:	20010bb8 	.word	0x20010bb8
 8014ef4:	20010a44 	.word	0x20010a44
 8014ef8:	0801aa5c 	.word	0x0801aa5c

08014efc <rmw_init_options_copy>:
 8014efc:	b570      	push	{r4, r5, r6, lr}
 8014efe:	b158      	cbz	r0, 8014f18 <rmw_init_options_copy+0x1c>
 8014f00:	460d      	mov	r5, r1
 8014f02:	b149      	cbz	r1, 8014f18 <rmw_init_options_copy+0x1c>
 8014f04:	4604      	mov	r4, r0
 8014f06:	6880      	ldr	r0, [r0, #8]
 8014f08:	b120      	cbz	r0, 8014f14 <rmw_init_options_copy+0x18>
 8014f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8014f84 <rmw_init_options_copy+0x88>)
 8014f0c:	6819      	ldr	r1, [r3, #0]
 8014f0e:	f7eb f97f 	bl	8000210 <strcmp>
 8014f12:	bb90      	cbnz	r0, 8014f7a <rmw_init_options_copy+0x7e>
 8014f14:	68ab      	ldr	r3, [r5, #8]
 8014f16:	b113      	cbz	r3, 8014f1e <rmw_init_options_copy+0x22>
 8014f18:	250b      	movs	r5, #11
 8014f1a:	4628      	mov	r0, r5
 8014f1c:	bd70      	pop	{r4, r5, r6, pc}
 8014f1e:	4623      	mov	r3, r4
 8014f20:	462a      	mov	r2, r5
 8014f22:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8014f26:	f8d3 c000 	ldr.w	ip, [r3]
 8014f2a:	6858      	ldr	r0, [r3, #4]
 8014f2c:	6899      	ldr	r1, [r3, #8]
 8014f2e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8014f32:	f8c2 e00c 	str.w	lr, [r2, #12]
 8014f36:	3310      	adds	r3, #16
 8014f38:	42b3      	cmp	r3, r6
 8014f3a:	f8c2 c000 	str.w	ip, [r2]
 8014f3e:	6050      	str	r0, [r2, #4]
 8014f40:	6091      	str	r1, [r2, #8]
 8014f42:	f102 0210 	add.w	r2, r2, #16
 8014f46:	d1ee      	bne.n	8014f26 <rmw_init_options_copy+0x2a>
 8014f48:	6819      	ldr	r1, [r3, #0]
 8014f4a:	685b      	ldr	r3, [r3, #4]
 8014f4c:	480e      	ldr	r0, [pc, #56]	@ (8014f88 <rmw_init_options_copy+0x8c>)
 8014f4e:	6053      	str	r3, [r2, #4]
 8014f50:	6011      	str	r1, [r2, #0]
 8014f52:	f7ff fefd 	bl	8014d50 <get_memory>
 8014f56:	b198      	cbz	r0, 8014f80 <rmw_init_options_copy+0x84>
 8014f58:	6883      	ldr	r3, [r0, #8]
 8014f5a:	636b      	str	r3, [r5, #52]	@ 0x34
 8014f5c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8014f5e:	f102 0c10 	add.w	ip, r2, #16
 8014f62:	f103 0410 	add.w	r4, r3, #16
 8014f66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f6c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8014f70:	2500      	movs	r5, #0
 8014f72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014f76:	4628      	mov	r0, r5
 8014f78:	bd70      	pop	{r4, r5, r6, pc}
 8014f7a:	250c      	movs	r5, #12
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	bd70      	pop	{r4, r5, r6, pc}
 8014f80:	2501      	movs	r5, #1
 8014f82:	e7ca      	b.n	8014f1a <rmw_init_options_copy+0x1e>
 8014f84:	0801aff4 	.word	0x0801aff4
 8014f88:	2001531c 	.word	0x2001531c

08014f8c <rmw_init_options_fini>:
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	d03d      	beq.n	801500c <rmw_init_options_fini+0x80>
 8014f90:	b510      	push	{r4, lr}
 8014f92:	4604      	mov	r4, r0
 8014f94:	b08e      	sub	sp, #56	@ 0x38
 8014f96:	3020      	adds	r0, #32
 8014f98:	f7f6 fac2 	bl	800b520 <rcutils_allocator_is_valid>
 8014f9c:	b360      	cbz	r0, 8014ff8 <rmw_init_options_fini+0x6c>
 8014f9e:	68a0      	ldr	r0, [r4, #8]
 8014fa0:	b120      	cbz	r0, 8014fac <rmw_init_options_fini+0x20>
 8014fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8015014 <rmw_init_options_fini+0x88>)
 8014fa4:	6819      	ldr	r1, [r3, #0]
 8014fa6:	f7eb f933 	bl	8000210 <strcmp>
 8014faa:	bb68      	cbnz	r0, 8015008 <rmw_init_options_fini+0x7c>
 8014fac:	4b1a      	ldr	r3, [pc, #104]	@ (8015018 <rmw_init_options_fini+0x8c>)
 8014fae:	6819      	ldr	r1, [r3, #0]
 8014fb0:	b331      	cbz	r1, 8015000 <rmw_init_options_fini+0x74>
 8014fb2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8014fb4:	e001      	b.n	8014fba <rmw_init_options_fini+0x2e>
 8014fb6:	6849      	ldr	r1, [r1, #4]
 8014fb8:	b311      	cbz	r1, 8015000 <rmw_init_options_fini+0x74>
 8014fba:	688b      	ldr	r3, [r1, #8]
 8014fbc:	429a      	cmp	r2, r3
 8014fbe:	d1fa      	bne.n	8014fb6 <rmw_init_options_fini+0x2a>
 8014fc0:	4815      	ldr	r0, [pc, #84]	@ (8015018 <rmw_init_options_fini+0x8c>)
 8014fc2:	f7ff fed5 	bl	8014d70 <put_memory>
 8014fc6:	4668      	mov	r0, sp
 8014fc8:	f7ff fcc2 	bl	8014950 <rmw_get_zero_initialized_init_options>
 8014fcc:	46ee      	mov	lr, sp
 8014fce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014fd2:	46a4      	mov	ip, r4
 8014fd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014fd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014fdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014fe0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014fe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014fe8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014fec:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	b00e      	add	sp, #56	@ 0x38
 8014ff6:	bd10      	pop	{r4, pc}
 8014ff8:	230b      	movs	r3, #11
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	b00e      	add	sp, #56	@ 0x38
 8014ffe:	bd10      	pop	{r4, pc}
 8015000:	2301      	movs	r3, #1
 8015002:	4618      	mov	r0, r3
 8015004:	b00e      	add	sp, #56	@ 0x38
 8015006:	bd10      	pop	{r4, pc}
 8015008:	230c      	movs	r3, #12
 801500a:	e7f2      	b.n	8014ff2 <rmw_init_options_fini+0x66>
 801500c:	230b      	movs	r3, #11
 801500e:	4618      	mov	r0, r3
 8015010:	4770      	bx	lr
 8015012:	bf00      	nop
 8015014:	0801aff4 	.word	0x0801aff4
 8015018:	2001531c 	.word	0x2001531c

0801501c <rmw_init>:
 801501c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015020:	b083      	sub	sp, #12
 8015022:	2800      	cmp	r0, #0
 8015024:	f000 80d3 	beq.w	80151ce <rmw_init+0x1b2>
 8015028:	460e      	mov	r6, r1
 801502a:	2900      	cmp	r1, #0
 801502c:	f000 80cf 	beq.w	80151ce <rmw_init+0x1b2>
 8015030:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8015032:	4605      	mov	r5, r0
 8015034:	2b00      	cmp	r3, #0
 8015036:	f000 80ca 	beq.w	80151ce <rmw_init+0x1b2>
 801503a:	4b78      	ldr	r3, [pc, #480]	@ (801521c <rmw_init+0x200>)
 801503c:	6880      	ldr	r0, [r0, #8]
 801503e:	681f      	ldr	r7, [r3, #0]
 8015040:	b128      	cbz	r0, 801504e <rmw_init+0x32>
 8015042:	4639      	mov	r1, r7
 8015044:	f7eb f8e4 	bl	8000210 <strcmp>
 8015048:	2800      	cmp	r0, #0
 801504a:	f040 80ca 	bne.w	80151e2 <rmw_init+0x1c6>
 801504e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015052:	4c73      	ldr	r4, [pc, #460]	@ (8015220 <rmw_init+0x204>)
 8015054:	4973      	ldr	r1, [pc, #460]	@ (8015224 <rmw_init+0x208>)
 8015056:	4874      	ldr	r0, [pc, #464]	@ (8015228 <rmw_init+0x20c>)
 8015058:	60b7      	str	r7, [r6, #8]
 801505a:	e9c6 2300 	strd	r2, r3, [r6]
 801505e:	68eb      	ldr	r3, [r5, #12]
 8015060:	64b3      	str	r3, [r6, #72]	@ 0x48
 8015062:	2201      	movs	r2, #1
 8015064:	f7f6 fd4a 	bl	800bafc <rmw_uxrce_init_session_memory>
 8015068:	4620      	mov	r0, r4
 801506a:	4970      	ldr	r1, [pc, #448]	@ (801522c <rmw_init+0x210>)
 801506c:	2204      	movs	r2, #4
 801506e:	f7f6 fd85 	bl	800bb7c <rmw_uxrce_init_static_input_buffer_memory>
 8015072:	f04f 0800 	mov.w	r8, #0
 8015076:	486c      	ldr	r0, [pc, #432]	@ (8015228 <rmw_init+0x20c>)
 8015078:	f884 800d 	strb.w	r8, [r4, #13]
 801507c:	f7ff fe68 	bl	8014d50 <get_memory>
 8015080:	2800      	cmp	r0, #0
 8015082:	f000 80a9 	beq.w	80151d8 <rmw_init+0x1bc>
 8015086:	6884      	ldr	r4, [r0, #8]
 8015088:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801508a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801508c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015090:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015094:	9101      	str	r1, [sp, #4]
 8015096:	6a00      	ldr	r0, [r0, #32]
 8015098:	9000      	str	r0, [sp, #0]
 801509a:	f104 0910 	add.w	r9, r4, #16
 801509e:	4661      	mov	r1, ip
 80150a0:	4648      	mov	r0, r9
 80150a2:	f001 f8f1 	bl	8016288 <uxr_set_custom_transport_callbacks>
 80150a6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80150aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80150ae:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80150b2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80150b6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80150ba:	495d      	ldr	r1, [pc, #372]	@ (8015230 <rmw_init+0x214>)
 80150bc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80150c0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80150c4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80150c8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80150cc:	4859      	ldr	r0, [pc, #356]	@ (8015234 <rmw_init+0x218>)
 80150ce:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80150d2:	2201      	movs	r2, #1
 80150d4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80150d6:	f7f6 fcf1 	bl	800babc <rmw_uxrce_init_node_memory>
 80150da:	4957      	ldr	r1, [pc, #348]	@ (8015238 <rmw_init+0x21c>)
 80150dc:	4857      	ldr	r0, [pc, #348]	@ (801523c <rmw_init+0x220>)
 80150de:	2205      	movs	r2, #5
 80150e0:	f7f6 fccc 	bl	800ba7c <rmw_uxrce_init_subscription_memory>
 80150e4:	4956      	ldr	r1, [pc, #344]	@ (8015240 <rmw_init+0x224>)
 80150e6:	4857      	ldr	r0, [pc, #348]	@ (8015244 <rmw_init+0x228>)
 80150e8:	220a      	movs	r2, #10
 80150ea:	f7f6 fca7 	bl	800ba3c <rmw_uxrce_init_publisher_memory>
 80150ee:	4956      	ldr	r1, [pc, #344]	@ (8015248 <rmw_init+0x22c>)
 80150f0:	4856      	ldr	r0, [pc, #344]	@ (801524c <rmw_init+0x230>)
 80150f2:	2201      	movs	r2, #1
 80150f4:	f7f6 fc62 	bl	800b9bc <rmw_uxrce_init_service_memory>
 80150f8:	4955      	ldr	r1, [pc, #340]	@ (8015250 <rmw_init+0x234>)
 80150fa:	4856      	ldr	r0, [pc, #344]	@ (8015254 <rmw_init+0x238>)
 80150fc:	2201      	movs	r2, #1
 80150fe:	f7f6 fc7d 	bl	800b9fc <rmw_uxrce_init_client_memory>
 8015102:	4955      	ldr	r1, [pc, #340]	@ (8015258 <rmw_init+0x23c>)
 8015104:	4855      	ldr	r0, [pc, #340]	@ (801525c <rmw_init+0x240>)
 8015106:	220f      	movs	r2, #15
 8015108:	f7f6 fd18 	bl	800bb3c <rmw_uxrce_init_topic_memory>
 801510c:	4954      	ldr	r1, [pc, #336]	@ (8015260 <rmw_init+0x244>)
 801510e:	4855      	ldr	r0, [pc, #340]	@ (8015264 <rmw_init+0x248>)
 8015110:	2203      	movs	r2, #3
 8015112:	f7f6 fd53 	bl	800bbbc <rmw_uxrce_init_init_options_impl_memory>
 8015116:	4954      	ldr	r1, [pc, #336]	@ (8015268 <rmw_init+0x24c>)
 8015118:	4854      	ldr	r0, [pc, #336]	@ (801526c <rmw_init+0x250>)
 801511a:	2204      	movs	r2, #4
 801511c:	f7f6 fd6e 	bl	800bbfc <rmw_uxrce_init_wait_set_memory>
 8015120:	4953      	ldr	r1, [pc, #332]	@ (8015270 <rmw_init+0x254>)
 8015122:	4854      	ldr	r0, [pc, #336]	@ (8015274 <rmw_init+0x258>)
 8015124:	2204      	movs	r2, #4
 8015126:	f7f6 fd89 	bl	800bc3c <rmw_uxrce_init_guard_condition_memory>
 801512a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801512c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801512e:	4642      	mov	r2, r8
 8015130:	f000 fd9e 	bl	8015c70 <rmw_uxrce_transport_init>
 8015134:	4607      	mov	r7, r0
 8015136:	2800      	cmp	r0, #0
 8015138:	d158      	bne.n	80151ec <rmw_init+0x1d0>
 801513a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801513c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8015140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015142:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8015146:	4628      	mov	r0, r5
 8015148:	f7f9 ff46 	bl	800efd8 <uxr_init_session>
 801514c:	494a      	ldr	r1, [pc, #296]	@ (8015278 <rmw_init+0x25c>)
 801514e:	4622      	mov	r2, r4
 8015150:	4628      	mov	r0, r5
 8015152:	f7f9 ff65 	bl	800f020 <uxr_set_topic_callback>
 8015156:	4949      	ldr	r1, [pc, #292]	@ (801527c <rmw_init+0x260>)
 8015158:	463a      	mov	r2, r7
 801515a:	4628      	mov	r0, r5
 801515c:	f7f9 ff5c 	bl	800f018 <uxr_set_status_callback>
 8015160:	4947      	ldr	r1, [pc, #284]	@ (8015280 <rmw_init+0x264>)
 8015162:	463a      	mov	r2, r7
 8015164:	4628      	mov	r0, r5
 8015166:	f7f9 ff5f 	bl	800f028 <uxr_set_request_callback>
 801516a:	4946      	ldr	r1, [pc, #280]	@ (8015284 <rmw_init+0x268>)
 801516c:	463a      	mov	r2, r7
 801516e:	4628      	mov	r0, r5
 8015170:	f7f9 ff5e 	bl	800f030 <uxr_set_reply_callback>
 8015174:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015178:	2304      	movs	r3, #4
 801517a:	0092      	lsls	r2, r2, #2
 801517c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8015180:	4628      	mov	r0, r5
 8015182:	f7f9 ff93 	bl	800f0ac <uxr_create_input_reliable_stream>
 8015186:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801518a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801518e:	0092      	lsls	r2, r2, #2
 8015190:	2304      	movs	r3, #4
 8015192:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8015196:	4628      	mov	r0, r5
 8015198:	f7f9 ff60 	bl	800f05c <uxr_create_output_reliable_stream>
 801519c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80151a0:	4628      	mov	r0, r5
 80151a2:	f7f9 ff7d 	bl	800f0a0 <uxr_create_input_best_effort_stream>
 80151a6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80151aa:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80151ae:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80151b2:	3114      	adds	r1, #20
 80151b4:	4628      	mov	r0, r5
 80151b6:	f7f9 ff3f 	bl	800f038 <uxr_create_output_best_effort_stream>
 80151ba:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80151be:	4628      	mov	r0, r5
 80151c0:	f7fa fcca 	bl	800fb58 <uxr_create_session>
 80151c4:	b1f8      	cbz	r0, 8015206 <rmw_init+0x1ea>
 80151c6:	4638      	mov	r0, r7
 80151c8:	b003      	add	sp, #12
 80151ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151ce:	270b      	movs	r7, #11
 80151d0:	4638      	mov	r0, r7
 80151d2:	b003      	add	sp, #12
 80151d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151d8:	2701      	movs	r7, #1
 80151da:	4638      	mov	r0, r7
 80151dc:	b003      	add	sp, #12
 80151de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151e2:	270c      	movs	r7, #12
 80151e4:	4638      	mov	r0, r7
 80151e6:	b003      	add	sp, #12
 80151e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151ec:	4648      	mov	r0, r9
 80151ee:	f001 f88d 	bl	801630c <uxr_close_custom_transport>
 80151f2:	480d      	ldr	r0, [pc, #52]	@ (8015228 <rmw_init+0x20c>)
 80151f4:	4621      	mov	r1, r4
 80151f6:	f7ff fdbb 	bl	8014d70 <put_memory>
 80151fa:	4638      	mov	r0, r7
 80151fc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8015200:	b003      	add	sp, #12
 8015202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015206:	4648      	mov	r0, r9
 8015208:	f001 f880 	bl	801630c <uxr_close_custom_transport>
 801520c:	4806      	ldr	r0, [pc, #24]	@ (8015228 <rmw_init+0x20c>)
 801520e:	4621      	mov	r1, r4
 8015210:	f7ff fdae 	bl	8014d70 <put_memory>
 8015214:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8015216:	2701      	movs	r7, #1
 8015218:	e7d5      	b.n	80151c6 <rmw_init+0x1aa>
 801521a:	bf00      	nop
 801521c:	0801aff4 	.word	0x0801aff4
 8015220:	2001536c 	.word	0x2001536c
 8015224:	20011618 	.word	0x20011618
 8015228:	2001535c 	.word	0x2001535c
 801522c:	20012bc0 	.word	0x20012bc0
 8015230:	20010c3c 	.word	0x20010c3c
 8015234:	2001532c 	.word	0x2001532c
 8015238:	20014cc0 	.word	0x20014cc0
 801523c:	2001537c 	.word	0x2001537c
 8015240:	20010ce0 	.word	0x20010ce0
 8015244:	2001533c 	.word	0x2001533c
 8015248:	20011550 	.word	0x20011550
 801524c:	2001534c 	.word	0x2001534c
 8015250:	20010a70 	.word	0x20010a70
 8015254:	20010a60 	.word	0x20010a60
 8015258:	200150f8 	.word	0x200150f8
 801525c:	2001538c 	.word	0x2001538c
 8015260:	20010bb8 	.word	0x20010bb8
 8015264:	2001531c 	.word	0x2001531c
 8015268:	2001529c 	.word	0x2001529c
 801526c:	2001539c 	.word	0x2001539c
 8015270:	20010b38 	.word	0x20010b38
 8015274:	2001530c 	.word	0x2001530c
 8015278:	08017ff9 	.word	0x08017ff9
 801527c:	08017ff1 	.word	0x08017ff1
 8015280:	08018091 	.word	0x08018091
 8015284:	0801812d 	.word	0x0801812d

08015288 <rmw_context_fini>:
 8015288:	4b17      	ldr	r3, [pc, #92]	@ (80152e8 <rmw_context_fini+0x60>)
 801528a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801528c:	b570      	push	{r4, r5, r6, lr}
 801528e:	681c      	ldr	r4, [r3, #0]
 8015290:	4605      	mov	r5, r0
 8015292:	b334      	cbz	r4, 80152e2 <rmw_context_fini+0x5a>
 8015294:	2600      	movs	r6, #0
 8015296:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801529a:	6902      	ldr	r2, [r0, #16]
 801529c:	428a      	cmp	r2, r1
 801529e:	d018      	beq.n	80152d2 <rmw_context_fini+0x4a>
 80152a0:	2c00      	cmp	r4, #0
 80152a2:	d1f8      	bne.n	8015296 <rmw_context_fini+0xe>
 80152a4:	b189      	cbz	r1, 80152ca <rmw_context_fini+0x42>
 80152a6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80152aa:	789b      	ldrb	r3, [r3, #2]
 80152ac:	2b01      	cmp	r3, #1
 80152ae:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80152b2:	bf14      	ite	ne
 80152b4:	210a      	movne	r1, #10
 80152b6:	2100      	moveq	r1, #0
 80152b8:	f7fa fc26 	bl	800fb08 <uxr_delete_session_retries>
 80152bc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80152be:	f7f6 fcdd 	bl	800bc7c <rmw_uxrce_fini_session_memory>
 80152c2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80152c4:	3010      	adds	r0, #16
 80152c6:	f001 f821 	bl	801630c <uxr_close_custom_transport>
 80152ca:	2300      	movs	r3, #0
 80152cc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80152ce:	4630      	mov	r0, r6
 80152d0:	bd70      	pop	{r4, r5, r6, pc}
 80152d2:	3018      	adds	r0, #24
 80152d4:	f000 f90e 	bl	80154f4 <rmw_destroy_node>
 80152d8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80152da:	4606      	mov	r6, r0
 80152dc:	2c00      	cmp	r4, #0
 80152de:	d1da      	bne.n	8015296 <rmw_context_fini+0xe>
 80152e0:	e7e0      	b.n	80152a4 <rmw_context_fini+0x1c>
 80152e2:	4626      	mov	r6, r4
 80152e4:	e7de      	b.n	80152a4 <rmw_context_fini+0x1c>
 80152e6:	bf00      	nop
 80152e8:	2001532c 	.word	0x2001532c

080152ec <create_topic>:
 80152ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152f0:	4605      	mov	r5, r0
 80152f2:	b084      	sub	sp, #16
 80152f4:	4822      	ldr	r0, [pc, #136]	@ (8015380 <create_topic+0x94>)
 80152f6:	460f      	mov	r7, r1
 80152f8:	4616      	mov	r6, r2
 80152fa:	f7ff fd29 	bl	8014d50 <get_memory>
 80152fe:	4604      	mov	r4, r0
 8015300:	2800      	cmp	r0, #0
 8015302:	d039      	beq.n	8015378 <create_topic+0x8c>
 8015304:	692b      	ldr	r3, [r5, #16]
 8015306:	6884      	ldr	r4, [r0, #8]
 8015308:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015388 <create_topic+0x9c>
 801530c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015310:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015314:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015318:	1c42      	adds	r2, r0, #1
 801531a:	2102      	movs	r1, #2
 801531c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015320:	f7f9 fd9c 	bl	800ee5c <uxr_object_id>
 8015324:	223c      	movs	r2, #60	@ 0x3c
 8015326:	6120      	str	r0, [r4, #16]
 8015328:	4641      	mov	r1, r8
 801532a:	4638      	mov	r0, r7
 801532c:	f7f6 fe84 	bl	800c038 <generate_topic_name>
 8015330:	b1f0      	cbz	r0, 8015370 <create_topic+0x84>
 8015332:	4f14      	ldr	r7, [pc, #80]	@ (8015384 <create_topic+0x98>)
 8015334:	4630      	mov	r0, r6
 8015336:	2264      	movs	r2, #100	@ 0x64
 8015338:	4639      	mov	r1, r7
 801533a:	f7f6 fe4d 	bl	800bfd8 <generate_type_name>
 801533e:	b1b8      	cbz	r0, 8015370 <create_topic+0x84>
 8015340:	6928      	ldr	r0, [r5, #16]
 8015342:	2306      	movs	r3, #6
 8015344:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015348:	f8cd 8000 	str.w	r8, [sp]
 801534c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015350:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015354:	6811      	ldr	r1, [r2, #0]
 8015356:	696b      	ldr	r3, [r5, #20]
 8015358:	6922      	ldr	r2, [r4, #16]
 801535a:	f7f9 fbfb 	bl	800eb54 <uxr_buffer_create_topic_bin>
 801535e:	4602      	mov	r2, r0
 8015360:	6928      	ldr	r0, [r5, #16]
 8015362:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015366:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801536a:	f7f6 fdff 	bl	800bf6c <run_xrce_session>
 801536e:	b918      	cbnz	r0, 8015378 <create_topic+0x8c>
 8015370:	4620      	mov	r0, r4
 8015372:	f7f6 fcf9 	bl	800bd68 <rmw_uxrce_fini_topic_memory>
 8015376:	2400      	movs	r4, #0
 8015378:	4620      	mov	r0, r4
 801537a:	b004      	add	sp, #16
 801537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015380:	2001538c 	.word	0x2001538c
 8015384:	20015478 	.word	0x20015478
 8015388:	2001543c 	.word	0x2001543c

0801538c <destroy_topic>:
 801538c:	b538      	push	{r3, r4, r5, lr}
 801538e:	6985      	ldr	r5, [r0, #24]
 8015390:	b1d5      	cbz	r5, 80153c8 <destroy_topic+0x3c>
 8015392:	4604      	mov	r4, r0
 8015394:	6928      	ldr	r0, [r5, #16]
 8015396:	6922      	ldr	r2, [r4, #16]
 8015398:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801539c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153a0:	6819      	ldr	r1, [r3, #0]
 80153a2:	f7f9 fb59 	bl	800ea58 <uxr_buffer_delete_entity>
 80153a6:	4602      	mov	r2, r0
 80153a8:	6928      	ldr	r0, [r5, #16]
 80153aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80153ae:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80153b2:	f7f6 fddb 	bl	800bf6c <run_xrce_session>
 80153b6:	2800      	cmp	r0, #0
 80153b8:	4620      	mov	r0, r4
 80153ba:	bf14      	ite	ne
 80153bc:	2400      	movne	r4, #0
 80153be:	2402      	moveq	r4, #2
 80153c0:	f7f6 fcd2 	bl	800bd68 <rmw_uxrce_fini_topic_memory>
 80153c4:	4620      	mov	r0, r4
 80153c6:	bd38      	pop	{r3, r4, r5, pc}
 80153c8:	2401      	movs	r4, #1
 80153ca:	4620      	mov	r0, r4
 80153cc:	bd38      	pop	{r3, r4, r5, pc}
 80153ce:	bf00      	nop

080153d0 <create_node>:
 80153d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153d4:	b083      	sub	sp, #12
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d05f      	beq.n	801549a <create_node+0xca>
 80153da:	4606      	mov	r6, r0
 80153dc:	4835      	ldr	r0, [pc, #212]	@ (80154b4 <create_node+0xe4>)
 80153de:	460f      	mov	r7, r1
 80153e0:	4690      	mov	r8, r2
 80153e2:	461d      	mov	r5, r3
 80153e4:	f7ff fcb4 	bl	8014d50 <get_memory>
 80153e8:	2800      	cmp	r0, #0
 80153ea:	d056      	beq.n	801549a <create_node+0xca>
 80153ec:	6884      	ldr	r4, [r0, #8]
 80153ee:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80153f0:	6123      	str	r3, [r4, #16]
 80153f2:	f7ff fd15 	bl	8014e20 <rmw_get_implementation_identifier>
 80153f6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80153fa:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80153fe:	f8c4 9020 	str.w	r9, [r4, #32]
 8015402:	4630      	mov	r0, r6
 8015404:	f7ea fefc 	bl	8000200 <strlen>
 8015408:	1c42      	adds	r2, r0, #1
 801540a:	2a3c      	cmp	r2, #60	@ 0x3c
 801540c:	f104 0518 	add.w	r5, r4, #24
 8015410:	d840      	bhi.n	8015494 <create_node+0xc4>
 8015412:	4648      	mov	r0, r9
 8015414:	4631      	mov	r1, r6
 8015416:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801541a:	f003 fd5c 	bl	8018ed6 <memcpy>
 801541e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8015422:	4638      	mov	r0, r7
 8015424:	f7ea feec 	bl	8000200 <strlen>
 8015428:	1c42      	adds	r2, r0, #1
 801542a:	2a3c      	cmp	r2, #60	@ 0x3c
 801542c:	d832      	bhi.n	8015494 <create_node+0xc4>
 801542e:	4639      	mov	r1, r7
 8015430:	4648      	mov	r0, r9
 8015432:	f003 fd50 	bl	8018ed6 <memcpy>
 8015436:	6923      	ldr	r3, [r4, #16]
 8015438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801543c:	2101      	movs	r1, #1
 801543e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8015442:	1842      	adds	r2, r0, r1
 8015444:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8015448:	f7f9 fd08 	bl	800ee5c <uxr_object_id>
 801544c:	6160      	str	r0, [r4, #20]
 801544e:	783b      	ldrb	r3, [r7, #0]
 8015450:	2b2f      	cmp	r3, #47	@ 0x2f
 8015452:	d127      	bne.n	80154a4 <create_node+0xd4>
 8015454:	787b      	ldrb	r3, [r7, #1]
 8015456:	bb2b      	cbnz	r3, 80154a4 <create_node+0xd4>
 8015458:	4a17      	ldr	r2, [pc, #92]	@ (80154b8 <create_node+0xe8>)
 801545a:	4818      	ldr	r0, [pc, #96]	@ (80154bc <create_node+0xec>)
 801545c:	4633      	mov	r3, r6
 801545e:	213c      	movs	r1, #60	@ 0x3c
 8015460:	f003 f85c 	bl	801851c <sniprintf>
 8015464:	6920      	ldr	r0, [r4, #16]
 8015466:	4915      	ldr	r1, [pc, #84]	@ (80154bc <create_node+0xec>)
 8015468:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801546c:	9100      	str	r1, [sp, #0]
 801546e:	2106      	movs	r1, #6
 8015470:	9101      	str	r1, [sp, #4]
 8015472:	6811      	ldr	r1, [r2, #0]
 8015474:	6962      	ldr	r2, [r4, #20]
 8015476:	fa1f f388 	uxth.w	r3, r8
 801547a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801547e:	f7f9 fb37 	bl	800eaf0 <uxr_buffer_create_participant_bin>
 8015482:	4602      	mov	r2, r0
 8015484:	6920      	ldr	r0, [r4, #16]
 8015486:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801548a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801548e:	f7f6 fd6d 	bl	800bf6c <run_xrce_session>
 8015492:	b918      	cbnz	r0, 801549c <create_node+0xcc>
 8015494:	4628      	mov	r0, r5
 8015496:	f7f6 fbf7 	bl	800bc88 <rmw_uxrce_fini_node_memory>
 801549a:	2500      	movs	r5, #0
 801549c:	4628      	mov	r0, r5
 801549e:	b003      	add	sp, #12
 80154a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154a4:	4a06      	ldr	r2, [pc, #24]	@ (80154c0 <create_node+0xf0>)
 80154a6:	9600      	str	r6, [sp, #0]
 80154a8:	463b      	mov	r3, r7
 80154aa:	213c      	movs	r1, #60	@ 0x3c
 80154ac:	4803      	ldr	r0, [pc, #12]	@ (80154bc <create_node+0xec>)
 80154ae:	f003 f835 	bl	801851c <sniprintf>
 80154b2:	e7d7      	b.n	8015464 <create_node+0x94>
 80154b4:	2001532c 	.word	0x2001532c
 80154b8:	0801a718 	.word	0x0801a718
 80154bc:	200154dc 	.word	0x200154dc
 80154c0:	0801aa64 	.word	0x0801aa64

080154c4 <rmw_create_node>:
 80154c4:	b199      	cbz	r1, 80154ee <rmw_create_node+0x2a>
 80154c6:	780b      	ldrb	r3, [r1, #0]
 80154c8:	468c      	mov	ip, r1
 80154ca:	b183      	cbz	r3, 80154ee <rmw_create_node+0x2a>
 80154cc:	b410      	push	{r4}
 80154ce:	4614      	mov	r4, r2
 80154d0:	b14a      	cbz	r2, 80154e6 <rmw_create_node+0x22>
 80154d2:	7813      	ldrb	r3, [r2, #0]
 80154d4:	b13b      	cbz	r3, 80154e6 <rmw_create_node+0x22>
 80154d6:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80154d8:	4603      	mov	r3, r0
 80154da:	4621      	mov	r1, r4
 80154dc:	4660      	mov	r0, ip
 80154de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154e2:	f7ff bf75 	b.w	80153d0 <create_node>
 80154e6:	2000      	movs	r0, #0
 80154e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154ec:	4770      	bx	lr
 80154ee:	2000      	movs	r0, #0
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop

080154f4 <rmw_destroy_node>:
 80154f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154f6:	b328      	cbz	r0, 8015544 <rmw_destroy_node+0x50>
 80154f8:	4607      	mov	r7, r0
 80154fa:	6800      	ldr	r0, [r0, #0]
 80154fc:	b120      	cbz	r0, 8015508 <rmw_destroy_node+0x14>
 80154fe:	4b36      	ldr	r3, [pc, #216]	@ (80155d8 <rmw_destroy_node+0xe4>)
 8015500:	6819      	ldr	r1, [r3, #0]
 8015502:	f7ea fe85 	bl	8000210 <strcmp>
 8015506:	b9e8      	cbnz	r0, 8015544 <rmw_destroy_node+0x50>
 8015508:	687d      	ldr	r5, [r7, #4]
 801550a:	b1dd      	cbz	r5, 8015544 <rmw_destroy_node+0x50>
 801550c:	4b33      	ldr	r3, [pc, #204]	@ (80155dc <rmw_destroy_node+0xe8>)
 801550e:	681c      	ldr	r4, [r3, #0]
 8015510:	2c00      	cmp	r4, #0
 8015512:	d05f      	beq.n	80155d4 <rmw_destroy_node+0xe0>
 8015514:	2600      	movs	r6, #0
 8015516:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801551a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801551e:	429d      	cmp	r5, r3
 8015520:	d013      	beq.n	801554a <rmw_destroy_node+0x56>
 8015522:	2c00      	cmp	r4, #0
 8015524:	d1f7      	bne.n	8015516 <rmw_destroy_node+0x22>
 8015526:	4b2e      	ldr	r3, [pc, #184]	@ (80155e0 <rmw_destroy_node+0xec>)
 8015528:	681c      	ldr	r4, [r3, #0]
 801552a:	b1c4      	cbz	r4, 801555e <rmw_destroy_node+0x6a>
 801552c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015530:	6a0b      	ldr	r3, [r1, #32]
 8015532:	429d      	cmp	r5, r3
 8015534:	d1f9      	bne.n	801552a <rmw_destroy_node+0x36>
 8015536:	317c      	adds	r1, #124	@ 0x7c
 8015538:	4638      	mov	r0, r7
 801553a:	f000 fae5 	bl	8015b08 <rmw_destroy_subscription>
 801553e:	2801      	cmp	r0, #1
 8015540:	4606      	mov	r6, r0
 8015542:	d1f2      	bne.n	801552a <rmw_destroy_node+0x36>
 8015544:	2601      	movs	r6, #1
 8015546:	4630      	mov	r0, r6
 8015548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801554a:	3184      	adds	r1, #132	@ 0x84
 801554c:	4638      	mov	r0, r7
 801554e:	f7f6 f9e3 	bl	800b918 <rmw_destroy_publisher>
 8015552:	2801      	cmp	r0, #1
 8015554:	4606      	mov	r6, r0
 8015556:	d0f5      	beq.n	8015544 <rmw_destroy_node+0x50>
 8015558:	2c00      	cmp	r4, #0
 801555a:	d1dc      	bne.n	8015516 <rmw_destroy_node+0x22>
 801555c:	e7e3      	b.n	8015526 <rmw_destroy_node+0x32>
 801555e:	4b21      	ldr	r3, [pc, #132]	@ (80155e4 <rmw_destroy_node+0xf0>)
 8015560:	681c      	ldr	r4, [r3, #0]
 8015562:	b16c      	cbz	r4, 8015580 <rmw_destroy_node+0x8c>
 8015564:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015568:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801556a:	429d      	cmp	r5, r3
 801556c:	d1f9      	bne.n	8015562 <rmw_destroy_node+0x6e>
 801556e:	317c      	adds	r1, #124	@ 0x7c
 8015570:	4638      	mov	r0, r7
 8015572:	f000 f993 	bl	801589c <rmw_destroy_service>
 8015576:	2801      	cmp	r0, #1
 8015578:	4606      	mov	r6, r0
 801557a:	d0e3      	beq.n	8015544 <rmw_destroy_node+0x50>
 801557c:	2c00      	cmp	r4, #0
 801557e:	d1f1      	bne.n	8015564 <rmw_destroy_node+0x70>
 8015580:	4b19      	ldr	r3, [pc, #100]	@ (80155e8 <rmw_destroy_node+0xf4>)
 8015582:	681c      	ldr	r4, [r3, #0]
 8015584:	b16c      	cbz	r4, 80155a2 <rmw_destroy_node+0xae>
 8015586:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801558a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801558c:	429d      	cmp	r5, r3
 801558e:	d1f9      	bne.n	8015584 <rmw_destroy_node+0x90>
 8015590:	317c      	adds	r1, #124	@ 0x7c
 8015592:	4638      	mov	r0, r7
 8015594:	f7ff fc00 	bl	8014d98 <rmw_destroy_client>
 8015598:	2801      	cmp	r0, #1
 801559a:	4606      	mov	r6, r0
 801559c:	d0d2      	beq.n	8015544 <rmw_destroy_node+0x50>
 801559e:	2c00      	cmp	r4, #0
 80155a0:	d1f1      	bne.n	8015586 <rmw_destroy_node+0x92>
 80155a2:	6928      	ldr	r0, [r5, #16]
 80155a4:	696a      	ldr	r2, [r5, #20]
 80155a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80155aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80155ae:	6819      	ldr	r1, [r3, #0]
 80155b0:	f7f9 fa52 	bl	800ea58 <uxr_buffer_delete_entity>
 80155b4:	4602      	mov	r2, r0
 80155b6:	6928      	ldr	r0, [r5, #16]
 80155b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80155bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80155c0:	f7f6 fcd4 	bl	800bf6c <run_xrce_session>
 80155c4:	2800      	cmp	r0, #0
 80155c6:	bf08      	it	eq
 80155c8:	2602      	moveq	r6, #2
 80155ca:	4638      	mov	r0, r7
 80155cc:	f7f6 fb5c 	bl	800bc88 <rmw_uxrce_fini_node_memory>
 80155d0:	4630      	mov	r0, r6
 80155d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155d4:	4626      	mov	r6, r4
 80155d6:	e7a6      	b.n	8015526 <rmw_destroy_node+0x32>
 80155d8:	0801aff4 	.word	0x0801aff4
 80155dc:	2001533c 	.word	0x2001533c
 80155e0:	2001537c 	.word	0x2001537c
 80155e4:	2001534c 	.word	0x2001534c
 80155e8:	20010a60 	.word	0x20010a60

080155ec <rmw_node_get_graph_guard_condition>:
 80155ec:	6843      	ldr	r3, [r0, #4]
 80155ee:	6918      	ldr	r0, [r3, #16]
 80155f0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80155f4:	4770      	bx	lr
 80155f6:	bf00      	nop

080155f8 <rmw_send_request>:
 80155f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155fc:	4604      	mov	r4, r0
 80155fe:	6800      	ldr	r0, [r0, #0]
 8015600:	b08b      	sub	sp, #44	@ 0x2c
 8015602:	460e      	mov	r6, r1
 8015604:	4615      	mov	r5, r2
 8015606:	b128      	cbz	r0, 8015614 <rmw_send_request+0x1c>
 8015608:	4b21      	ldr	r3, [pc, #132]	@ (8015690 <rmw_send_request+0x98>)
 801560a:	6819      	ldr	r1, [r3, #0]
 801560c:	f7ea fe00 	bl	8000210 <strcmp>
 8015610:	2800      	cmp	r0, #0
 8015612:	d139      	bne.n	8015688 <rmw_send_request+0x90>
 8015614:	6864      	ldr	r4, [r4, #4]
 8015616:	6963      	ldr	r3, [r4, #20]
 8015618:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801561c:	689b      	ldr	r3, [r3, #8]
 801561e:	4798      	blx	r3
 8015620:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015624:	4630      	mov	r0, r6
 8015626:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801562a:	4798      	blx	r3
 801562c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015630:	9000      	str	r0, [sp, #0]
 8015632:	6922      	ldr	r2, [r4, #16]
 8015634:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8015636:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801563a:	ab02      	add	r3, sp, #8
 801563c:	f7fa ff08 	bl	8010450 <uxr_prepare_output_stream>
 8015640:	2700      	movs	r7, #0
 8015642:	6028      	str	r0, [r5, #0]
 8015644:	606f      	str	r7, [r5, #4]
 8015646:	b198      	cbz	r0, 8015670 <rmw_send_request+0x78>
 8015648:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801564c:	a902      	add	r1, sp, #8
 801564e:	4630      	mov	r0, r6
 8015650:	4798      	blx	r3
 8015652:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015656:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801565a:	2b01      	cmp	r3, #1
 801565c:	d00c      	beq.n	8015678 <rmw_send_request+0x80>
 801565e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015660:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015664:	f7fa f908 	bl	800f878 <uxr_run_session_until_confirm_delivery>
 8015668:	4638      	mov	r0, r7
 801566a:	b00b      	add	sp, #44	@ 0x2c
 801566c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015670:	2001      	movs	r0, #1
 8015672:	b00b      	add	sp, #44	@ 0x2c
 8015674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015678:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801567c:	f7f9 fd3c 	bl	800f0f8 <uxr_flash_output_streams>
 8015680:	4638      	mov	r0, r7
 8015682:	b00b      	add	sp, #44	@ 0x2c
 8015684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015688:	200c      	movs	r0, #12
 801568a:	b00b      	add	sp, #44	@ 0x2c
 801568c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015690:	0801aff4 	.word	0x0801aff4

08015694 <rmw_take_request>:
 8015694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015698:	4605      	mov	r5, r0
 801569a:	6800      	ldr	r0, [r0, #0]
 801569c:	b089      	sub	sp, #36	@ 0x24
 801569e:	460c      	mov	r4, r1
 80156a0:	4690      	mov	r8, r2
 80156a2:	461e      	mov	r6, r3
 80156a4:	b128      	cbz	r0, 80156b2 <rmw_take_request+0x1e>
 80156a6:	4b28      	ldr	r3, [pc, #160]	@ (8015748 <rmw_take_request+0xb4>)
 80156a8:	6819      	ldr	r1, [r3, #0]
 80156aa:	f7ea fdb1 	bl	8000210 <strcmp>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	d146      	bne.n	8015740 <rmw_take_request+0xac>
 80156b2:	b10e      	cbz	r6, 80156b8 <rmw_take_request+0x24>
 80156b4:	2300      	movs	r3, #0
 80156b6:	7033      	strb	r3, [r6, #0]
 80156b8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80156bc:	f7f6 fbd8 	bl	800be70 <rmw_uxrce_clean_expired_static_input_buffer>
 80156c0:	4648      	mov	r0, r9
 80156c2:	f7f6 fbad 	bl	800be20 <rmw_uxrce_find_static_input_buffer_by_owner>
 80156c6:	4607      	mov	r7, r0
 80156c8:	b3b0      	cbz	r0, 8015738 <rmw_take_request+0xa4>
 80156ca:	6885      	ldr	r5, [r0, #8]
 80156cc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80156d0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80156d4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80156d8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80156dc:	7423      	strb	r3, [r4, #16]
 80156de:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80156e2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80156e6:	74e2      	strb	r2, [r4, #19]
 80156e8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80156ec:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80156f0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80156f4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80156f8:	61e1      	str	r1, [r4, #28]
 80156fa:	6162      	str	r2, [r4, #20]
 80156fc:	61a3      	str	r3, [r4, #24]
 80156fe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015702:	689b      	ldr	r3, [r3, #8]
 8015704:	4798      	blx	r3
 8015706:	6844      	ldr	r4, [r0, #4]
 8015708:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801570c:	f105 0110 	add.w	r1, r5, #16
 8015710:	4668      	mov	r0, sp
 8015712:	f7f9 f8d9 	bl	800e8c8 <ucdr_init_buffer>
 8015716:	68e3      	ldr	r3, [r4, #12]
 8015718:	4641      	mov	r1, r8
 801571a:	4668      	mov	r0, sp
 801571c:	4798      	blx	r3
 801571e:	4639      	mov	r1, r7
 8015720:	4604      	mov	r4, r0
 8015722:	480a      	ldr	r0, [pc, #40]	@ (801574c <rmw_take_request+0xb8>)
 8015724:	f7ff fb24 	bl	8014d70 <put_memory>
 8015728:	b106      	cbz	r6, 801572c <rmw_take_request+0x98>
 801572a:	7034      	strb	r4, [r6, #0]
 801572c:	f084 0001 	eor.w	r0, r4, #1
 8015730:	b2c0      	uxtb	r0, r0
 8015732:	b009      	add	sp, #36	@ 0x24
 8015734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015738:	2001      	movs	r0, #1
 801573a:	b009      	add	sp, #36	@ 0x24
 801573c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015740:	200c      	movs	r0, #12
 8015742:	b009      	add	sp, #36	@ 0x24
 8015744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015748:	0801aff4 	.word	0x0801aff4
 801574c:	2001536c 	.word	0x2001536c

08015750 <rmw_send_response>:
 8015750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015752:	4605      	mov	r5, r0
 8015754:	6800      	ldr	r0, [r0, #0]
 8015756:	b091      	sub	sp, #68	@ 0x44
 8015758:	460c      	mov	r4, r1
 801575a:	4616      	mov	r6, r2
 801575c:	b128      	cbz	r0, 801576a <rmw_send_response+0x1a>
 801575e:	4b29      	ldr	r3, [pc, #164]	@ (8015804 <rmw_send_response+0xb4>)
 8015760:	6819      	ldr	r1, [r3, #0]
 8015762:	f7ea fd55 	bl	8000210 <strcmp>
 8015766:	2800      	cmp	r0, #0
 8015768:	d141      	bne.n	80157ee <rmw_send_response+0x9e>
 801576a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801576e:	9306      	str	r3, [sp, #24]
 8015770:	4623      	mov	r3, r4
 8015772:	9207      	str	r2, [sp, #28]
 8015774:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015778:	686d      	ldr	r5, [r5, #4]
 801577a:	789b      	ldrb	r3, [r3, #2]
 801577c:	68a1      	ldr	r1, [r4, #8]
 801577e:	f88d 2017 	strb.w	r2, [sp, #23]
 8015782:	f88d 3016 	strb.w	r3, [sp, #22]
 8015786:	68e2      	ldr	r2, [r4, #12]
 8015788:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801578c:	6860      	ldr	r0, [r4, #4]
 801578e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015792:	ab02      	add	r3, sp, #8
 8015794:	c307      	stmia	r3!, {r0, r1, r2}
 8015796:	696b      	ldr	r3, [r5, #20]
 8015798:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801579a:	68db      	ldr	r3, [r3, #12]
 801579c:	4798      	blx	r3
 801579e:	6844      	ldr	r4, [r0, #4]
 80157a0:	4630      	mov	r0, r6
 80157a2:	6923      	ldr	r3, [r4, #16]
 80157a4:	4798      	blx	r3
 80157a6:	f100 0318 	add.w	r3, r0, #24
 80157aa:	6938      	ldr	r0, [r7, #16]
 80157ac:	9300      	str	r3, [sp, #0]
 80157ae:	692a      	ldr	r2, [r5, #16]
 80157b0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80157b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80157b6:	ab08      	add	r3, sp, #32
 80157b8:	f7fa fe4a 	bl	8010450 <uxr_prepare_output_stream>
 80157bc:	b910      	cbnz	r0, 80157c4 <rmw_send_response+0x74>
 80157be:	2001      	movs	r0, #1
 80157c0:	b011      	add	sp, #68	@ 0x44
 80157c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157c4:	a902      	add	r1, sp, #8
 80157c6:	a808      	add	r0, sp, #32
 80157c8:	f7fb ff7a 	bl	80116c0 <uxr_serialize_SampleIdentity>
 80157cc:	68a3      	ldr	r3, [r4, #8]
 80157ce:	a908      	add	r1, sp, #32
 80157d0:	4630      	mov	r0, r6
 80157d2:	4798      	blx	r3
 80157d4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80157d8:	6938      	ldr	r0, [r7, #16]
 80157da:	2b01      	cmp	r3, #1
 80157dc:	d00a      	beq.n	80157f4 <rmw_send_response+0xa4>
 80157de:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80157e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80157e4:	f7fa f848 	bl	800f878 <uxr_run_session_until_confirm_delivery>
 80157e8:	2000      	movs	r0, #0
 80157ea:	b011      	add	sp, #68	@ 0x44
 80157ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157ee:	200c      	movs	r0, #12
 80157f0:	b011      	add	sp, #68	@ 0x44
 80157f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80157f8:	f7f9 fc7e 	bl	800f0f8 <uxr_flash_output_streams>
 80157fc:	2000      	movs	r0, #0
 80157fe:	b011      	add	sp, #68	@ 0x44
 8015800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015802:	bf00      	nop
 8015804:	0801aff4 	.word	0x0801aff4

08015808 <rmw_take_response>:
 8015808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801580c:	4604      	mov	r4, r0
 801580e:	6800      	ldr	r0, [r0, #0]
 8015810:	b088      	sub	sp, #32
 8015812:	4688      	mov	r8, r1
 8015814:	4617      	mov	r7, r2
 8015816:	461d      	mov	r5, r3
 8015818:	b120      	cbz	r0, 8015824 <rmw_take_response+0x1c>
 801581a:	4b1e      	ldr	r3, [pc, #120]	@ (8015894 <rmw_take_response+0x8c>)
 801581c:	6819      	ldr	r1, [r3, #0]
 801581e:	f7ea fcf7 	bl	8000210 <strcmp>
 8015822:	bb78      	cbnz	r0, 8015884 <rmw_take_response+0x7c>
 8015824:	b10d      	cbz	r5, 801582a <rmw_take_response+0x22>
 8015826:	2300      	movs	r3, #0
 8015828:	702b      	strb	r3, [r5, #0]
 801582a:	6864      	ldr	r4, [r4, #4]
 801582c:	f7f6 fb20 	bl	800be70 <rmw_uxrce_clean_expired_static_input_buffer>
 8015830:	4620      	mov	r0, r4
 8015832:	f7f6 faf5 	bl	800be20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015836:	4606      	mov	r6, r0
 8015838:	b340      	cbz	r0, 801588c <rmw_take_response+0x84>
 801583a:	6963      	ldr	r3, [r4, #20]
 801583c:	6884      	ldr	r4, [r0, #8]
 801583e:	68db      	ldr	r3, [r3, #12]
 8015840:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8015844:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015848:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801584c:	4798      	blx	r3
 801584e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015852:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015856:	f104 0110 	add.w	r1, r4, #16
 801585a:	4668      	mov	r0, sp
 801585c:	f7f9 f834 	bl	800e8c8 <ucdr_init_buffer>
 8015860:	4639      	mov	r1, r7
 8015862:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015866:	4668      	mov	r0, sp
 8015868:	4798      	blx	r3
 801586a:	4631      	mov	r1, r6
 801586c:	4604      	mov	r4, r0
 801586e:	480a      	ldr	r0, [pc, #40]	@ (8015898 <rmw_take_response+0x90>)
 8015870:	f7ff fa7e 	bl	8014d70 <put_memory>
 8015874:	b105      	cbz	r5, 8015878 <rmw_take_response+0x70>
 8015876:	702c      	strb	r4, [r5, #0]
 8015878:	f084 0001 	eor.w	r0, r4, #1
 801587c:	b2c0      	uxtb	r0, r0
 801587e:	b008      	add	sp, #32
 8015880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015884:	200c      	movs	r0, #12
 8015886:	b008      	add	sp, #32
 8015888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801588c:	2001      	movs	r0, #1
 801588e:	b008      	add	sp, #32
 8015890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015894:	0801aff4 	.word	0x0801aff4
 8015898:	2001536c 	.word	0x2001536c

0801589c <rmw_destroy_service>:
 801589c:	b570      	push	{r4, r5, r6, lr}
 801589e:	b128      	cbz	r0, 80158ac <rmw_destroy_service+0x10>
 80158a0:	4604      	mov	r4, r0
 80158a2:	6800      	ldr	r0, [r0, #0]
 80158a4:	460d      	mov	r5, r1
 80158a6:	f7f6 fbe1 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 80158aa:	b910      	cbnz	r0, 80158b2 <rmw_destroy_service+0x16>
 80158ac:	2401      	movs	r4, #1
 80158ae:	4620      	mov	r0, r4
 80158b0:	bd70      	pop	{r4, r5, r6, pc}
 80158b2:	6863      	ldr	r3, [r4, #4]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d0f9      	beq.n	80158ac <rmw_destroy_service+0x10>
 80158b8:	2d00      	cmp	r5, #0
 80158ba:	d0f7      	beq.n	80158ac <rmw_destroy_service+0x10>
 80158bc:	6828      	ldr	r0, [r5, #0]
 80158be:	f7f6 fbd5 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 80158c2:	2800      	cmp	r0, #0
 80158c4:	d0f2      	beq.n	80158ac <rmw_destroy_service+0x10>
 80158c6:	686e      	ldr	r6, [r5, #4]
 80158c8:	2e00      	cmp	r6, #0
 80158ca:	d0ef      	beq.n	80158ac <rmw_destroy_service+0x10>
 80158cc:	6864      	ldr	r4, [r4, #4]
 80158ce:	6932      	ldr	r2, [r6, #16]
 80158d0:	6920      	ldr	r0, [r4, #16]
 80158d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80158d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158da:	6819      	ldr	r1, [r3, #0]
 80158dc:	f001 fa9c 	bl	8016e18 <uxr_buffer_cancel_data>
 80158e0:	4602      	mov	r2, r0
 80158e2:	6920      	ldr	r0, [r4, #16]
 80158e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80158e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80158ec:	f7f6 fb3e 	bl	800bf6c <run_xrce_session>
 80158f0:	6920      	ldr	r0, [r4, #16]
 80158f2:	6932      	ldr	r2, [r6, #16]
 80158f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80158f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158fc:	6819      	ldr	r1, [r3, #0]
 80158fe:	f7f9 f8ab 	bl	800ea58 <uxr_buffer_delete_entity>
 8015902:	4602      	mov	r2, r0
 8015904:	6920      	ldr	r0, [r4, #16]
 8015906:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801590a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801590e:	f7f6 fb2d 	bl	800bf6c <run_xrce_session>
 8015912:	2800      	cmp	r0, #0
 8015914:	4628      	mov	r0, r5
 8015916:	bf14      	ite	ne
 8015918:	2400      	movne	r4, #0
 801591a:	2402      	moveq	r4, #2
 801591c:	f7f6 f9f8 	bl	800bd10 <rmw_uxrce_fini_service_memory>
 8015920:	e7c5      	b.n	80158ae <rmw_destroy_service+0x12>
 8015922:	bf00      	nop

08015924 <rmw_create_subscription>:
 8015924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015928:	b08d      	sub	sp, #52	@ 0x34
 801592a:	2800      	cmp	r0, #0
 801592c:	f000 80d1 	beq.w	8015ad2 <rmw_create_subscription+0x1ae>
 8015930:	460e      	mov	r6, r1
 8015932:	2900      	cmp	r1, #0
 8015934:	f000 80cd 	beq.w	8015ad2 <rmw_create_subscription+0x1ae>
 8015938:	4604      	mov	r4, r0
 801593a:	6800      	ldr	r0, [r0, #0]
 801593c:	4615      	mov	r5, r2
 801593e:	4698      	mov	r8, r3
 8015940:	f7f6 fb94 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 8015944:	2800      	cmp	r0, #0
 8015946:	f000 80c4 	beq.w	8015ad2 <rmw_create_subscription+0x1ae>
 801594a:	2d00      	cmp	r5, #0
 801594c:	f000 80c1 	beq.w	8015ad2 <rmw_create_subscription+0x1ae>
 8015950:	782b      	ldrb	r3, [r5, #0]
 8015952:	2b00      	cmp	r3, #0
 8015954:	f000 80bd 	beq.w	8015ad2 <rmw_create_subscription+0x1ae>
 8015958:	f1b8 0f00 	cmp.w	r8, #0
 801595c:	f000 80b9 	beq.w	8015ad2 <rmw_create_subscription+0x1ae>
 8015960:	485e      	ldr	r0, [pc, #376]	@ (8015adc <rmw_create_subscription+0x1b8>)
 8015962:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015966:	f7ff f9f3 	bl	8014d50 <get_memory>
 801596a:	4604      	mov	r4, r0
 801596c:	2800      	cmp	r0, #0
 801596e:	f000 80b1 	beq.w	8015ad4 <rmw_create_subscription+0x1b0>
 8015972:	6887      	ldr	r7, [r0, #8]
 8015974:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8015978:	f7ff fa52 	bl	8014e20 <rmw_get_implementation_identifier>
 801597c:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8015980:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8015982:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8015986:	4628      	mov	r0, r5
 8015988:	f7ea fc3a 	bl	8000200 <strlen>
 801598c:	3001      	adds	r0, #1
 801598e:	283c      	cmp	r0, #60	@ 0x3c
 8015990:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8015994:	f200 8096 	bhi.w	8015ac4 <rmw_create_subscription+0x1a0>
 8015998:	4a51      	ldr	r2, [pc, #324]	@ (8015ae0 <rmw_create_subscription+0x1bc>)
 801599a:	462b      	mov	r3, r5
 801599c:	213c      	movs	r1, #60	@ 0x3c
 801599e:	4650      	mov	r0, sl
 80159a0:	f002 fdbc 	bl	801851c <sniprintf>
 80159a4:	4641      	mov	r1, r8
 80159a6:	f8c7 9020 	str.w	r9, [r7, #32]
 80159aa:	2250      	movs	r2, #80	@ 0x50
 80159ac:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80159b0:	f003 fa91 	bl	8018ed6 <memcpy>
 80159b4:	494b      	ldr	r1, [pc, #300]	@ (8015ae4 <rmw_create_subscription+0x1c0>)
 80159b6:	4630      	mov	r0, r6
 80159b8:	f7f6 fb66 	bl	800c088 <get_message_typesupport_handle>
 80159bc:	2800      	cmp	r0, #0
 80159be:	f000 8081 	beq.w	8015ac4 <rmw_create_subscription+0x1a0>
 80159c2:	6842      	ldr	r2, [r0, #4]
 80159c4:	61ba      	str	r2, [r7, #24]
 80159c6:	2a00      	cmp	r2, #0
 80159c8:	d07c      	beq.n	8015ac4 <rmw_create_subscription+0x1a0>
 80159ca:	4629      	mov	r1, r5
 80159cc:	4643      	mov	r3, r8
 80159ce:	4648      	mov	r0, r9
 80159d0:	f7ff fc8c 	bl	80152ec <create_topic>
 80159d4:	61f8      	str	r0, [r7, #28]
 80159d6:	2800      	cmp	r0, #0
 80159d8:	d078      	beq.n	8015acc <rmw_create_subscription+0x1a8>
 80159da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80159de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80159e2:	2104      	movs	r1, #4
 80159e4:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80159e8:	1c42      	adds	r2, r0, #1
 80159ea:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80159ee:	f7f9 fa35 	bl	800ee5c <uxr_object_id>
 80159f2:	6138      	str	r0, [r7, #16]
 80159f4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80159f8:	2506      	movs	r5, #6
 80159fa:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80159fe:	9500      	str	r5, [sp, #0]
 8015a00:	6819      	ldr	r1, [r3, #0]
 8015a02:	693a      	ldr	r2, [r7, #16]
 8015a04:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015a08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a0c:	f7f9 f908 	bl	800ec20 <uxr_buffer_create_subscriber_bin>
 8015a10:	4602      	mov	r2, r0
 8015a12:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015a16:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015a1a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015a1e:	f7f6 faa5 	bl	800bf6c <run_xrce_session>
 8015a22:	2800      	cmp	r0, #0
 8015a24:	d04e      	beq.n	8015ac4 <rmw_create_subscription+0x1a0>
 8015a26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015a2e:	4629      	mov	r1, r5
 8015a30:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8015a34:	1c42      	adds	r2, r0, #1
 8015a36:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8015a3a:	f7f9 fa0f 	bl	800ee5c <uxr_object_id>
 8015a3e:	ae08      	add	r6, sp, #32
 8015a40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015a44:	69fb      	ldr	r3, [r7, #28]
 8015a46:	6178      	str	r0, [r7, #20]
 8015a48:	4641      	mov	r1, r8
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8015a50:	9305      	str	r3, [sp, #20]
 8015a52:	f7f6 faa7 	bl	800bfa4 <convert_qos_profile>
 8015a56:	9503      	str	r5, [sp, #12]
 8015a58:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015a5c:	9b05      	ldr	r3, [sp, #20]
 8015a5e:	9001      	str	r0, [sp, #4]
 8015a60:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015a64:	691b      	ldr	r3, [r3, #16]
 8015a66:	9300      	str	r3, [sp, #0]
 8015a68:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8015a6c:	f8db 1000 	ldr.w	r1, [fp]
 8015a70:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8015a74:	f7f9 f97a 	bl	800ed6c <uxr_buffer_create_datareader_bin>
 8015a78:	4602      	mov	r2, r0
 8015a7a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015a7e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015a82:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015a86:	f7f6 fa71 	bl	800bf6c <run_xrce_session>
 8015a8a:	b1d8      	cbz	r0, 8015ac4 <rmw_create_subscription+0x1a0>
 8015a8c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8015a90:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015a94:	2b02      	cmp	r3, #2
 8015a96:	bf0c      	ite	eq
 8015a98:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8015a9c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8015aa0:	9307      	str	r3, [sp, #28]
 8015aa2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8015aac:	ab0a      	add	r3, sp, #40	@ 0x28
 8015aae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	697a      	ldr	r2, [r7, #20]
 8015ab6:	9b07      	ldr	r3, [sp, #28]
 8015ab8:	6809      	ldr	r1, [r1, #0]
 8015aba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015abe:	f001 f971 	bl	8016da4 <uxr_buffer_request_data>
 8015ac2:	e007      	b.n	8015ad4 <rmw_create_subscription+0x1b0>
 8015ac4:	69f8      	ldr	r0, [r7, #28]
 8015ac6:	b108      	cbz	r0, 8015acc <rmw_create_subscription+0x1a8>
 8015ac8:	f7f6 f94e 	bl	800bd68 <rmw_uxrce_fini_topic_memory>
 8015acc:	4620      	mov	r0, r4
 8015ace:	f7f6 f909 	bl	800bce4 <rmw_uxrce_fini_subscription_memory>
 8015ad2:	2400      	movs	r4, #0
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	b00d      	add	sp, #52	@ 0x34
 8015ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015adc:	2001537c 	.word	0x2001537c
 8015ae0:	0801a718 	.word	0x0801a718
 8015ae4:	0801a3ac 	.word	0x0801a3ac

08015ae8 <rmw_subscription_get_actual_qos>:
 8015ae8:	b150      	cbz	r0, 8015b00 <rmw_subscription_get_actual_qos+0x18>
 8015aea:	b508      	push	{r3, lr}
 8015aec:	460b      	mov	r3, r1
 8015aee:	b149      	cbz	r1, 8015b04 <rmw_subscription_get_actual_qos+0x1c>
 8015af0:	6841      	ldr	r1, [r0, #4]
 8015af2:	2250      	movs	r2, #80	@ 0x50
 8015af4:	3128      	adds	r1, #40	@ 0x28
 8015af6:	4618      	mov	r0, r3
 8015af8:	f003 f9ed 	bl	8018ed6 <memcpy>
 8015afc:	2000      	movs	r0, #0
 8015afe:	bd08      	pop	{r3, pc}
 8015b00:	200b      	movs	r0, #11
 8015b02:	4770      	bx	lr
 8015b04:	200b      	movs	r0, #11
 8015b06:	bd08      	pop	{r3, pc}

08015b08 <rmw_destroy_subscription>:
 8015b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0a:	b128      	cbz	r0, 8015b18 <rmw_destroy_subscription+0x10>
 8015b0c:	4604      	mov	r4, r0
 8015b0e:	6800      	ldr	r0, [r0, #0]
 8015b10:	460d      	mov	r5, r1
 8015b12:	f7f6 faab 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 8015b16:	b910      	cbnz	r0, 8015b1e <rmw_destroy_subscription+0x16>
 8015b18:	2401      	movs	r4, #1
 8015b1a:	4620      	mov	r0, r4
 8015b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b1e:	6863      	ldr	r3, [r4, #4]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d0f9      	beq.n	8015b18 <rmw_destroy_subscription+0x10>
 8015b24:	2d00      	cmp	r5, #0
 8015b26:	d0f7      	beq.n	8015b18 <rmw_destroy_subscription+0x10>
 8015b28:	6828      	ldr	r0, [r5, #0]
 8015b2a:	f7f6 fa9f 	bl	800c06c <is_uxrce_rmw_identifier_valid>
 8015b2e:	2800      	cmp	r0, #0
 8015b30:	d0f2      	beq.n	8015b18 <rmw_destroy_subscription+0x10>
 8015b32:	686c      	ldr	r4, [r5, #4]
 8015b34:	2c00      	cmp	r4, #0
 8015b36:	d0ef      	beq.n	8015b18 <rmw_destroy_subscription+0x10>
 8015b38:	6a26      	ldr	r6, [r4, #32]
 8015b3a:	6962      	ldr	r2, [r4, #20]
 8015b3c:	6930      	ldr	r0, [r6, #16]
 8015b3e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015b42:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015b46:	6819      	ldr	r1, [r3, #0]
 8015b48:	f001 f966 	bl	8016e18 <uxr_buffer_cancel_data>
 8015b4c:	4602      	mov	r2, r0
 8015b4e:	6930      	ldr	r0, [r6, #16]
 8015b50:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015b54:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015b58:	f7f6 fa08 	bl	800bf6c <run_xrce_session>
 8015b5c:	69e0      	ldr	r0, [r4, #28]
 8015b5e:	f7ff fc15 	bl	801538c <destroy_topic>
 8015b62:	6a23      	ldr	r3, [r4, #32]
 8015b64:	6962      	ldr	r2, [r4, #20]
 8015b66:	6918      	ldr	r0, [r3, #16]
 8015b68:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015b6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015b70:	6819      	ldr	r1, [r3, #0]
 8015b72:	f7f8 ff71 	bl	800ea58 <uxr_buffer_delete_entity>
 8015b76:	6a23      	ldr	r3, [r4, #32]
 8015b78:	6922      	ldr	r2, [r4, #16]
 8015b7a:	691b      	ldr	r3, [r3, #16]
 8015b7c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8015b80:	4604      	mov	r4, r0
 8015b82:	6809      	ldr	r1, [r1, #0]
 8015b84:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015b88:	f7f8 ff66 	bl	800ea58 <uxr_buffer_delete_entity>
 8015b8c:	6937      	ldr	r7, [r6, #16]
 8015b8e:	4622      	mov	r2, r4
 8015b90:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8015b94:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8015b98:	4604      	mov	r4, r0
 8015b9a:	4638      	mov	r0, r7
 8015b9c:	f7f6 f9e6 	bl	800bf6c <run_xrce_session>
 8015ba0:	6936      	ldr	r6, [r6, #16]
 8015ba2:	4622      	mov	r2, r4
 8015ba4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8015ba8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8015bac:	4604      	mov	r4, r0
 8015bae:	4630      	mov	r0, r6
 8015bb0:	f7f6 f9dc 	bl	800bf6c <run_xrce_session>
 8015bb4:	b12c      	cbz	r4, 8015bc2 <rmw_destroy_subscription+0xba>
 8015bb6:	b120      	cbz	r0, 8015bc2 <rmw_destroy_subscription+0xba>
 8015bb8:	2400      	movs	r4, #0
 8015bba:	4628      	mov	r0, r5
 8015bbc:	f7f6 f892 	bl	800bce4 <rmw_uxrce_fini_subscription_memory>
 8015bc0:	e7ab      	b.n	8015b1a <rmw_destroy_subscription+0x12>
 8015bc2:	2402      	movs	r4, #2
 8015bc4:	e7f9      	b.n	8015bba <rmw_destroy_subscription+0xb2>
 8015bc6:	bf00      	nop

08015bc8 <rmw_take_with_info>:
 8015bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bca:	4604      	mov	r4, r0
 8015bcc:	6800      	ldr	r0, [r0, #0]
 8015bce:	b089      	sub	sp, #36	@ 0x24
 8015bd0:	460f      	mov	r7, r1
 8015bd2:	4615      	mov	r5, r2
 8015bd4:	b128      	cbz	r0, 8015be2 <rmw_take_with_info+0x1a>
 8015bd6:	4b24      	ldr	r3, [pc, #144]	@ (8015c68 <rmw_take_with_info+0xa0>)
 8015bd8:	6819      	ldr	r1, [r3, #0]
 8015bda:	f7ea fb19 	bl	8000210 <strcmp>
 8015bde:	2800      	cmp	r0, #0
 8015be0:	d13e      	bne.n	8015c60 <rmw_take_with_info+0x98>
 8015be2:	b305      	cbz	r5, 8015c26 <rmw_take_with_info+0x5e>
 8015be4:	6864      	ldr	r4, [r4, #4]
 8015be6:	2300      	movs	r3, #0
 8015be8:	702b      	strb	r3, [r5, #0]
 8015bea:	f7f6 f941 	bl	800be70 <rmw_uxrce_clean_expired_static_input_buffer>
 8015bee:	4620      	mov	r0, r4
 8015bf0:	f7f6 f916 	bl	800be20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015bf4:	4606      	mov	r6, r0
 8015bf6:	b1f0      	cbz	r0, 8015c36 <rmw_take_with_info+0x6e>
 8015bf8:	6881      	ldr	r1, [r0, #8]
 8015bfa:	4668      	mov	r0, sp
 8015bfc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015c00:	3110      	adds	r1, #16
 8015c02:	f7f8 fe61 	bl	800e8c8 <ucdr_init_buffer>
 8015c06:	69a3      	ldr	r3, [r4, #24]
 8015c08:	4639      	mov	r1, r7
 8015c0a:	68db      	ldr	r3, [r3, #12]
 8015c0c:	4668      	mov	r0, sp
 8015c0e:	4798      	blx	r3
 8015c10:	4631      	mov	r1, r6
 8015c12:	4604      	mov	r4, r0
 8015c14:	4815      	ldr	r0, [pc, #84]	@ (8015c6c <rmw_take_with_info+0xa4>)
 8015c16:	f7ff f8ab 	bl	8014d70 <put_memory>
 8015c1a:	702c      	strb	r4, [r5, #0]
 8015c1c:	f084 0001 	eor.w	r0, r4, #1
 8015c20:	b2c0      	uxtb	r0, r0
 8015c22:	b009      	add	sp, #36	@ 0x24
 8015c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c26:	6864      	ldr	r4, [r4, #4]
 8015c28:	f7f6 f922 	bl	800be70 <rmw_uxrce_clean_expired_static_input_buffer>
 8015c2c:	4620      	mov	r0, r4
 8015c2e:	f7f6 f8f7 	bl	800be20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c32:	4605      	mov	r5, r0
 8015c34:	b910      	cbnz	r0, 8015c3c <rmw_take_with_info+0x74>
 8015c36:	2001      	movs	r0, #1
 8015c38:	b009      	add	sp, #36	@ 0x24
 8015c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c3c:	68a9      	ldr	r1, [r5, #8]
 8015c3e:	4668      	mov	r0, sp
 8015c40:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015c44:	3110      	adds	r1, #16
 8015c46:	f7f8 fe3f 	bl	800e8c8 <ucdr_init_buffer>
 8015c4a:	69a3      	ldr	r3, [r4, #24]
 8015c4c:	4639      	mov	r1, r7
 8015c4e:	68db      	ldr	r3, [r3, #12]
 8015c50:	4668      	mov	r0, sp
 8015c52:	4798      	blx	r3
 8015c54:	4629      	mov	r1, r5
 8015c56:	4604      	mov	r4, r0
 8015c58:	4804      	ldr	r0, [pc, #16]	@ (8015c6c <rmw_take_with_info+0xa4>)
 8015c5a:	f7ff f889 	bl	8014d70 <put_memory>
 8015c5e:	e7dd      	b.n	8015c1c <rmw_take_with_info+0x54>
 8015c60:	200c      	movs	r0, #12
 8015c62:	b009      	add	sp, #36	@ 0x24
 8015c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c66:	bf00      	nop
 8015c68:	0801aff4 	.word	0x0801aff4
 8015c6c:	2001536c 	.word	0x2001536c

08015c70 <rmw_uxrce_transport_init>:
 8015c70:	b508      	push	{r3, lr}
 8015c72:	b108      	cbz	r0, 8015c78 <rmw_uxrce_transport_init+0x8>
 8015c74:	f100 0210 	add.w	r2, r0, #16
 8015c78:	b139      	cbz	r1, 8015c8a <rmw_uxrce_transport_init+0x1a>
 8015c7a:	6949      	ldr	r1, [r1, #20]
 8015c7c:	4610      	mov	r0, r2
 8015c7e:	f000 fb11 	bl	80162a4 <uxr_init_custom_transport>
 8015c82:	f080 0001 	eor.w	r0, r0, #1
 8015c86:	b2c0      	uxtb	r0, r0
 8015c88:	bd08      	pop	{r3, pc}
 8015c8a:	4b04      	ldr	r3, [pc, #16]	@ (8015c9c <rmw_uxrce_transport_init+0x2c>)
 8015c8c:	4610      	mov	r0, r2
 8015c8e:	6859      	ldr	r1, [r3, #4]
 8015c90:	f000 fb08 	bl	80162a4 <uxr_init_custom_transport>
 8015c94:	f080 0001 	eor.w	r0, r0, #1
 8015c98:	b2c0      	uxtb	r0, r0
 8015c9a:	bd08      	pop	{r3, pc}
 8015c9c:	20010a44 	.word	0x20010a44

08015ca0 <rmw_wait>:
 8015ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ca4:	b089      	sub	sp, #36	@ 0x24
 8015ca6:	4605      	mov	r5, r0
 8015ca8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015caa:	460e      	mov	r6, r1
 8015cac:	4698      	mov	r8, r3
 8015cae:	4691      	mov	r9, r2
 8015cb0:	2a00      	cmp	r2, #0
 8015cb2:	f000 810a 	beq.w	8015eca <rmw_wait+0x22a>
 8015cb6:	b16c      	cbz	r4, 8015cd4 <rmw_wait+0x34>
 8015cb8:	4bae      	ldr	r3, [pc, #696]	@ (8015f74 <rmw_wait+0x2d4>)
 8015cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015cbc:	af04      	add	r7, sp, #16
 8015cbe:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015cc2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015cc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015cca:	f7fe fe75 	bl	80149b8 <rmw_time_equal>
 8015cce:	2800      	cmp	r0, #0
 8015cd0:	f000 8127 	beq.w	8015f22 <rmw_wait+0x282>
 8015cd4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015cd8:	f7f6 f8ca 	bl	800be70 <rmw_uxrce_clean_expired_static_input_buffer>
 8015cdc:	4ba6      	ldr	r3, [pc, #664]	@ (8015f78 <rmw_wait+0x2d8>)
 8015cde:	681c      	ldr	r4, [r3, #0]
 8015ce0:	b14c      	cbz	r4, 8015cf6 <rmw_wait+0x56>
 8015ce2:	4623      	mov	r3, r4
 8015ce4:	2100      	movs	r1, #0
 8015ce6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015cea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015cee:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d1f7      	bne.n	8015ce6 <rmw_wait+0x46>
 8015cf6:	f1b9 0f00 	cmp.w	r9, #0
 8015cfa:	d011      	beq.n	8015d20 <rmw_wait+0x80>
 8015cfc:	f8d9 1000 	ldr.w	r1, [r9]
 8015d00:	b171      	cbz	r1, 8015d20 <rmw_wait+0x80>
 8015d02:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015d06:	2300      	movs	r3, #0
 8015d08:	2001      	movs	r0, #1
 8015d0a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015d0e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015d10:	6912      	ldr	r2, [r2, #16]
 8015d12:	3301      	adds	r3, #1
 8015d14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015d18:	4299      	cmp	r1, r3
 8015d1a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015d1e:	d1f4      	bne.n	8015d0a <rmw_wait+0x6a>
 8015d20:	f1b8 0f00 	cmp.w	r8, #0
 8015d24:	d011      	beq.n	8015d4a <rmw_wait+0xaa>
 8015d26:	f8d8 1000 	ldr.w	r1, [r8]
 8015d2a:	b171      	cbz	r1, 8015d4a <rmw_wait+0xaa>
 8015d2c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015d30:	2300      	movs	r3, #0
 8015d32:	2001      	movs	r0, #1
 8015d34:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015d38:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015d3a:	6912      	ldr	r2, [r2, #16]
 8015d3c:	3301      	adds	r3, #1
 8015d3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015d42:	4299      	cmp	r1, r3
 8015d44:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015d48:	d1f4      	bne.n	8015d34 <rmw_wait+0x94>
 8015d4a:	b185      	cbz	r5, 8015d6e <rmw_wait+0xce>
 8015d4c:	6829      	ldr	r1, [r5, #0]
 8015d4e:	b171      	cbz	r1, 8015d6e <rmw_wait+0xce>
 8015d50:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015d54:	2300      	movs	r3, #0
 8015d56:	2001      	movs	r0, #1
 8015d58:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015d5c:	6a12      	ldr	r2, [r2, #32]
 8015d5e:	6912      	ldr	r2, [r2, #16]
 8015d60:	3301      	adds	r3, #1
 8015d62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015d66:	4299      	cmp	r1, r3
 8015d68:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015d6c:	d1f4      	bne.n	8015d58 <rmw_wait+0xb8>
 8015d6e:	b34c      	cbz	r4, 8015dc4 <rmw_wait+0x124>
 8015d70:	4622      	mov	r2, r4
 8015d72:	2300      	movs	r3, #0
 8015d74:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015d78:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015d7c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015d80:	440b      	add	r3, r1
 8015d82:	b2db      	uxtb	r3, r3
 8015d84:	2a00      	cmp	r2, #0
 8015d86:	d1f5      	bne.n	8015d74 <rmw_wait+0xd4>
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	f000 8084 	beq.w	8015e96 <rmw_wait+0x1f6>
 8015d8e:	1c7a      	adds	r2, r7, #1
 8015d90:	d00d      	beq.n	8015dae <rmw_wait+0x10e>
 8015d92:	ee07 7a90 	vmov	s15, r7
 8015d96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015d9a:	ee07 3a90 	vmov	s15, r3
 8015d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015da6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015daa:	ee17 7a90 	vmov	r7, s15
 8015dae:	68a0      	ldr	r0, [r4, #8]
 8015db0:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015db4:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	f040 8090 	bne.w	8015ede <rmw_wait+0x23e>
 8015dbe:	6864      	ldr	r4, [r4, #4]
 8015dc0:	2c00      	cmp	r4, #0
 8015dc2:	d1f4      	bne.n	8015dae <rmw_wait+0x10e>
 8015dc4:	f1b9 0f00 	cmp.w	r9, #0
 8015dc8:	f000 80bc 	beq.w	8015f44 <rmw_wait+0x2a4>
 8015dcc:	f8d9 7000 	ldr.w	r7, [r9]
 8015dd0:	2f00      	cmp	r7, #0
 8015dd2:	f000 808e 	beq.w	8015ef2 <rmw_wait+0x252>
 8015dd6:	2400      	movs	r4, #0
 8015dd8:	4627      	mov	r7, r4
 8015dda:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015dde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015de2:	f7f6 f81d 	bl	800be20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d05f      	beq.n	8015eaa <rmw_wait+0x20a>
 8015dea:	f8d9 3000 	ldr.w	r3, [r9]
 8015dee:	3401      	adds	r4, #1
 8015df0:	42a3      	cmp	r3, r4
 8015df2:	f04f 0701 	mov.w	r7, #1
 8015df6:	d8f0      	bhi.n	8015dda <rmw_wait+0x13a>
 8015df8:	f1b8 0f00 	cmp.w	r8, #0
 8015dfc:	d012      	beq.n	8015e24 <rmw_wait+0x184>
 8015dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8015e02:	b17b      	cbz	r3, 8015e24 <rmw_wait+0x184>
 8015e04:	2400      	movs	r4, #0
 8015e06:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015e0a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e0e:	f7f6 f807 	bl	800be20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e12:	2800      	cmp	r0, #0
 8015e14:	d051      	beq.n	8015eba <rmw_wait+0x21a>
 8015e16:	f8d8 3000 	ldr.w	r3, [r8]
 8015e1a:	3401      	adds	r4, #1
 8015e1c:	42a3      	cmp	r3, r4
 8015e1e:	f04f 0701 	mov.w	r7, #1
 8015e22:	d8f0      	bhi.n	8015e06 <rmw_wait+0x166>
 8015e24:	b1dd      	cbz	r5, 8015e5e <rmw_wait+0x1be>
 8015e26:	682b      	ldr	r3, [r5, #0]
 8015e28:	b1cb      	cbz	r3, 8015e5e <rmw_wait+0x1be>
 8015e2a:	2400      	movs	r4, #0
 8015e2c:	686b      	ldr	r3, [r5, #4]
 8015e2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e32:	f7f5 fff5 	bl	800be20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e36:	b158      	cbz	r0, 8015e50 <rmw_wait+0x1b0>
 8015e38:	682b      	ldr	r3, [r5, #0]
 8015e3a:	3401      	adds	r4, #1
 8015e3c:	42a3      	cmp	r3, r4
 8015e3e:	d969      	bls.n	8015f14 <rmw_wait+0x274>
 8015e40:	686b      	ldr	r3, [r5, #4]
 8015e42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e46:	2701      	movs	r7, #1
 8015e48:	f7f5 ffea 	bl	800be20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e4c:	2800      	cmp	r0, #0
 8015e4e:	d1f3      	bne.n	8015e38 <rmw_wait+0x198>
 8015e50:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015e54:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015e58:	3401      	adds	r4, #1
 8015e5a:	42a3      	cmp	r3, r4
 8015e5c:	d8e6      	bhi.n	8015e2c <rmw_wait+0x18c>
 8015e5e:	b1a6      	cbz	r6, 8015e8a <rmw_wait+0x1ea>
 8015e60:	6834      	ldr	r4, [r6, #0]
 8015e62:	b194      	cbz	r4, 8015e8a <rmw_wait+0x1ea>
 8015e64:	2300      	movs	r3, #0
 8015e66:	461d      	mov	r5, r3
 8015e68:	e004      	b.n	8015e74 <rmw_wait+0x1d4>
 8015e6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015e6e:	3301      	adds	r3, #1
 8015e70:	42a3      	cmp	r3, r4
 8015e72:	d00a      	beq.n	8015e8a <rmw_wait+0x1ea>
 8015e74:	6870      	ldr	r0, [r6, #4]
 8015e76:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015e7a:	7c0a      	ldrb	r2, [r1, #16]
 8015e7c:	2a00      	cmp	r2, #0
 8015e7e:	d0f4      	beq.n	8015e6a <rmw_wait+0x1ca>
 8015e80:	3301      	adds	r3, #1
 8015e82:	42a3      	cmp	r3, r4
 8015e84:	740d      	strb	r5, [r1, #16]
 8015e86:	4617      	mov	r7, r2
 8015e88:	d1f4      	bne.n	8015e74 <rmw_wait+0x1d4>
 8015e8a:	2f00      	cmp	r7, #0
 8015e8c:	d03e      	beq.n	8015f0c <rmw_wait+0x26c>
 8015e8e:	2000      	movs	r0, #0
 8015e90:	b009      	add	sp, #36	@ 0x24
 8015e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e96:	68a0      	ldr	r0, [r4, #8]
 8015e98:	2100      	movs	r1, #0
 8015e9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e9e:	f7f9 fcb1 	bl	800f804 <uxr_run_session_timeout>
 8015ea2:	6864      	ldr	r4, [r4, #4]
 8015ea4:	2c00      	cmp	r4, #0
 8015ea6:	d1f6      	bne.n	8015e96 <rmw_wait+0x1f6>
 8015ea8:	e78c      	b.n	8015dc4 <rmw_wait+0x124>
 8015eaa:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015eae:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015eb2:	3401      	adds	r4, #1
 8015eb4:	42a3      	cmp	r3, r4
 8015eb6:	d890      	bhi.n	8015dda <rmw_wait+0x13a>
 8015eb8:	e79e      	b.n	8015df8 <rmw_wait+0x158>
 8015eba:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015ebe:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015ec2:	3401      	adds	r4, #1
 8015ec4:	429c      	cmp	r4, r3
 8015ec6:	d39e      	bcc.n	8015e06 <rmw_wait+0x166>
 8015ec8:	e7ac      	b.n	8015e24 <rmw_wait+0x184>
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	f47f aef3 	bne.w	8015cb6 <rmw_wait+0x16>
 8015ed0:	2800      	cmp	r0, #0
 8015ed2:	f47f aef0 	bne.w	8015cb6 <rmw_wait+0x16>
 8015ed6:	2900      	cmp	r1, #0
 8015ed8:	f47f aeed 	bne.w	8015cb6 <rmw_wait+0x16>
 8015edc:	e7d7      	b.n	8015e8e <rmw_wait+0x1ee>
 8015ede:	4639      	mov	r1, r7
 8015ee0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ee4:	f7f9 fca8 	bl	800f838 <uxr_run_session_until_data>
 8015ee8:	6864      	ldr	r4, [r4, #4]
 8015eea:	2c00      	cmp	r4, #0
 8015eec:	f47f af5f 	bne.w	8015dae <rmw_wait+0x10e>
 8015ef0:	e768      	b.n	8015dc4 <rmw_wait+0x124>
 8015ef2:	f1b8 0f00 	cmp.w	r8, #0
 8015ef6:	d032      	beq.n	8015f5e <rmw_wait+0x2be>
 8015ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d181      	bne.n	8015e04 <rmw_wait+0x164>
 8015f00:	461f      	mov	r7, r3
 8015f02:	2d00      	cmp	r5, #0
 8015f04:	d18f      	bne.n	8015e26 <rmw_wait+0x186>
 8015f06:	462f      	mov	r7, r5
 8015f08:	2e00      	cmp	r6, #0
 8015f0a:	d1a9      	bne.n	8015e60 <rmw_wait+0x1c0>
 8015f0c:	2002      	movs	r0, #2
 8015f0e:	b009      	add	sp, #36	@ 0x24
 8015f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f14:	2e00      	cmp	r6, #0
 8015f16:	d0ba      	beq.n	8015e8e <rmw_wait+0x1ee>
 8015f18:	6834      	ldr	r4, [r6, #0]
 8015f1a:	2701      	movs	r7, #1
 8015f1c:	2c00      	cmp	r4, #0
 8015f1e:	d1a1      	bne.n	8015e64 <rmw_wait+0x1c4>
 8015f20:	e7b5      	b.n	8015e8e <rmw_wait+0x1ee>
 8015f22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f26:	f7fe fd9b 	bl	8014a60 <rmw_time_total_nsec>
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	4a13      	ldr	r2, [pc, #76]	@ (8015f7c <rmw_wait+0x2dc>)
 8015f2e:	f7ea fec5 	bl	8000cbc <__aeabi_uldivmod>
 8015f32:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015f36:	f171 0300 	sbcs.w	r3, r1, #0
 8015f3a:	4607      	mov	r7, r0
 8015f3c:	bfa8      	it	ge
 8015f3e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015f42:	e6c9      	b.n	8015cd8 <rmw_wait+0x38>
 8015f44:	f1b8 0f00 	cmp.w	r8, #0
 8015f48:	d009      	beq.n	8015f5e <rmw_wait+0x2be>
 8015f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8015f4e:	464f      	mov	r7, r9
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	f47f af57 	bne.w	8015e04 <rmw_wait+0x164>
 8015f56:	2d00      	cmp	r5, #0
 8015f58:	f47f af65 	bne.w	8015e26 <rmw_wait+0x186>
 8015f5c:	e7d3      	b.n	8015f06 <rmw_wait+0x266>
 8015f5e:	b17d      	cbz	r5, 8015f80 <rmw_wait+0x2e0>
 8015f60:	682b      	ldr	r3, [r5, #0]
 8015f62:	4647      	mov	r7, r8
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	f47f af60 	bne.w	8015e2a <rmw_wait+0x18a>
 8015f6a:	2e00      	cmp	r6, #0
 8015f6c:	f47f af78 	bne.w	8015e60 <rmw_wait+0x1c0>
 8015f70:	e7cc      	b.n	8015f0c <rmw_wait+0x26c>
 8015f72:	bf00      	nop
 8015f74:	0801a1f0 	.word	0x0801a1f0
 8015f78:	2001535c 	.word	0x2001535c
 8015f7c:	000f4240 	.word	0x000f4240
 8015f80:	2e00      	cmp	r6, #0
 8015f82:	d0c3      	beq.n	8015f0c <rmw_wait+0x26c>
 8015f84:	6834      	ldr	r4, [r6, #0]
 8015f86:	462f      	mov	r7, r5
 8015f88:	2c00      	cmp	r4, #0
 8015f8a:	f47f af6b 	bne.w	8015e64 <rmw_wait+0x1c4>
 8015f8e:	e7bd      	b.n	8015f0c <rmw_wait+0x26c>

08015f90 <rmw_create_wait_set>:
 8015f90:	b508      	push	{r3, lr}
 8015f92:	4803      	ldr	r0, [pc, #12]	@ (8015fa0 <rmw_create_wait_set+0x10>)
 8015f94:	f7fe fedc 	bl	8014d50 <get_memory>
 8015f98:	b108      	cbz	r0, 8015f9e <rmw_create_wait_set+0xe>
 8015f9a:	6880      	ldr	r0, [r0, #8]
 8015f9c:	3010      	adds	r0, #16
 8015f9e:	bd08      	pop	{r3, pc}
 8015fa0:	2001539c 	.word	0x2001539c

08015fa4 <rmw_destroy_wait_set>:
 8015fa4:	b508      	push	{r3, lr}
 8015fa6:	4b08      	ldr	r3, [pc, #32]	@ (8015fc8 <rmw_destroy_wait_set+0x24>)
 8015fa8:	6819      	ldr	r1, [r3, #0]
 8015faa:	b911      	cbnz	r1, 8015fb2 <rmw_destroy_wait_set+0xe>
 8015fac:	e00a      	b.n	8015fc4 <rmw_destroy_wait_set+0x20>
 8015fae:	6849      	ldr	r1, [r1, #4]
 8015fb0:	b141      	cbz	r1, 8015fc4 <rmw_destroy_wait_set+0x20>
 8015fb2:	688b      	ldr	r3, [r1, #8]
 8015fb4:	3310      	adds	r3, #16
 8015fb6:	4298      	cmp	r0, r3
 8015fb8:	d1f9      	bne.n	8015fae <rmw_destroy_wait_set+0xa>
 8015fba:	4803      	ldr	r0, [pc, #12]	@ (8015fc8 <rmw_destroy_wait_set+0x24>)
 8015fbc:	f7fe fed8 	bl	8014d70 <put_memory>
 8015fc0:	2000      	movs	r0, #0
 8015fc2:	bd08      	pop	{r3, pc}
 8015fc4:	2001      	movs	r0, #1
 8015fc6:	bd08      	pop	{r3, pc}
 8015fc8:	2001539c 	.word	0x2001539c

08015fcc <rmw_uros_epoch_nanos>:
 8015fcc:	4b05      	ldr	r3, [pc, #20]	@ (8015fe4 <rmw_uros_epoch_nanos+0x18>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	b123      	cbz	r3, 8015fdc <rmw_uros_epoch_nanos+0x10>
 8015fd2:	6898      	ldr	r0, [r3, #8]
 8015fd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015fd8:	f7f9 b884 	b.w	800f0e4 <uxr_epoch_nanos>
 8015fdc:	2000      	movs	r0, #0
 8015fde:	2100      	movs	r1, #0
 8015fe0:	4770      	bx	lr
 8015fe2:	bf00      	nop
 8015fe4:	2001535c 	.word	0x2001535c

08015fe8 <sensor_msgs__msg__Imu__init>:
 8015fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fec:	4605      	mov	r5, r0
 8015fee:	b3c0      	cbz	r0, 8016062 <sensor_msgs__msg__Imu__init+0x7a>
 8015ff0:	f000 f864 	bl	80160bc <std_msgs__msg__Header__init>
 8015ff4:	4604      	mov	r4, r0
 8015ff6:	b310      	cbz	r0, 801603e <sensor_msgs__msg__Imu__init+0x56>
 8015ff8:	f105 0618 	add.w	r6, r5, #24
 8015ffc:	4630      	mov	r0, r6
 8015ffe:	f000 f893 	bl	8016128 <geometry_msgs__msg__Quaternion__init>
 8016002:	4604      	mov	r4, r0
 8016004:	2800      	cmp	r0, #0
 8016006:	d040      	beq.n	801608a <sensor_msgs__msg__Imu__init+0xa2>
 8016008:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801600c:	4638      	mov	r0, r7
 801600e:	f000 f8a1 	bl	8016154 <geometry_msgs__msg__Vector3__init>
 8016012:	4604      	mov	r4, r0
 8016014:	b348      	cbz	r0, 801606a <sensor_msgs__msg__Imu__init+0x82>
 8016016:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801601a:	4640      	mov	r0, r8
 801601c:	f000 f89a 	bl	8016154 <geometry_msgs__msg__Vector3__init>
 8016020:	4604      	mov	r4, r0
 8016022:	b9d8      	cbnz	r0, 801605c <sensor_msgs__msg__Imu__init+0x74>
 8016024:	4628      	mov	r0, r5
 8016026:	f000 f86d 	bl	8016104 <std_msgs__msg__Header__fini>
 801602a:	4630      	mov	r0, r6
 801602c:	f000 f890 	bl	8016150 <geometry_msgs__msg__Quaternion__fini>
 8016030:	4638      	mov	r0, r7
 8016032:	f000 f893 	bl	801615c <geometry_msgs__msg__Vector3__fini>
 8016036:	4640      	mov	r0, r8
 8016038:	f000 f890 	bl	801615c <geometry_msgs__msg__Vector3__fini>
 801603c:	e00e      	b.n	801605c <sensor_msgs__msg__Imu__init+0x74>
 801603e:	4628      	mov	r0, r5
 8016040:	f000 f860 	bl	8016104 <std_msgs__msg__Header__fini>
 8016044:	f105 0018 	add.w	r0, r5, #24
 8016048:	f000 f882 	bl	8016150 <geometry_msgs__msg__Quaternion__fini>
 801604c:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8016050:	f000 f884 	bl	801615c <geometry_msgs__msg__Vector3__fini>
 8016054:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8016058:	f000 f880 	bl	801615c <geometry_msgs__msg__Vector3__fini>
 801605c:	4620      	mov	r0, r4
 801605e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016062:	4604      	mov	r4, r0
 8016064:	4620      	mov	r0, r4
 8016066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801606a:	4628      	mov	r0, r5
 801606c:	f000 f84a 	bl	8016104 <std_msgs__msg__Header__fini>
 8016070:	4630      	mov	r0, r6
 8016072:	f000 f86d 	bl	8016150 <geometry_msgs__msg__Quaternion__fini>
 8016076:	4638      	mov	r0, r7
 8016078:	f000 f870 	bl	801615c <geometry_msgs__msg__Vector3__fini>
 801607c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8016080:	f000 f86c 	bl	801615c <geometry_msgs__msg__Vector3__fini>
 8016084:	4620      	mov	r0, r4
 8016086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801608a:	4628      	mov	r0, r5
 801608c:	f000 f83a 	bl	8016104 <std_msgs__msg__Header__fini>
 8016090:	4630      	mov	r0, r6
 8016092:	e7d9      	b.n	8016048 <sensor_msgs__msg__Imu__init+0x60>

08016094 <sensor_msgs__msg__Imu__fini>:
 8016094:	b188      	cbz	r0, 80160ba <sensor_msgs__msg__Imu__fini+0x26>
 8016096:	b510      	push	{r4, lr}
 8016098:	4604      	mov	r4, r0
 801609a:	f000 f833 	bl	8016104 <std_msgs__msg__Header__fini>
 801609e:	f104 0018 	add.w	r0, r4, #24
 80160a2:	f000 f855 	bl	8016150 <geometry_msgs__msg__Quaternion__fini>
 80160a6:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80160aa:	f000 f857 	bl	801615c <geometry_msgs__msg__Vector3__fini>
 80160ae:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80160b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160b6:	f000 b851 	b.w	801615c <geometry_msgs__msg__Vector3__fini>
 80160ba:	4770      	bx	lr

080160bc <std_msgs__msg__Header__init>:
 80160bc:	b570      	push	{r4, r5, r6, lr}
 80160be:	4605      	mov	r5, r0
 80160c0:	b1a8      	cbz	r0, 80160ee <std_msgs__msg__Header__init+0x32>
 80160c2:	f000 f82b 	bl	801611c <builtin_interfaces__msg__Time__init>
 80160c6:	4604      	mov	r4, r0
 80160c8:	b140      	cbz	r0, 80160dc <std_msgs__msg__Header__init+0x20>
 80160ca:	f105 0608 	add.w	r6, r5, #8
 80160ce:	4630      	mov	r0, r6
 80160d0:	f002 f89e 	bl	8018210 <rosidl_runtime_c__String__init>
 80160d4:	4604      	mov	r4, r0
 80160d6:	b168      	cbz	r0, 80160f4 <std_msgs__msg__Header__init+0x38>
 80160d8:	4620      	mov	r0, r4
 80160da:	bd70      	pop	{r4, r5, r6, pc}
 80160dc:	4628      	mov	r0, r5
 80160de:	f000 f821 	bl	8016124 <builtin_interfaces__msg__Time__fini>
 80160e2:	f105 0008 	add.w	r0, r5, #8
 80160e6:	f002 f8a9 	bl	801823c <rosidl_runtime_c__String__fini>
 80160ea:	4620      	mov	r0, r4
 80160ec:	bd70      	pop	{r4, r5, r6, pc}
 80160ee:	4604      	mov	r4, r0
 80160f0:	4620      	mov	r0, r4
 80160f2:	bd70      	pop	{r4, r5, r6, pc}
 80160f4:	4628      	mov	r0, r5
 80160f6:	f000 f815 	bl	8016124 <builtin_interfaces__msg__Time__fini>
 80160fa:	4630      	mov	r0, r6
 80160fc:	f002 f89e 	bl	801823c <rosidl_runtime_c__String__fini>
 8016100:	e7ea      	b.n	80160d8 <std_msgs__msg__Header__init+0x1c>
 8016102:	bf00      	nop

08016104 <std_msgs__msg__Header__fini>:
 8016104:	b148      	cbz	r0, 801611a <std_msgs__msg__Header__fini+0x16>
 8016106:	b510      	push	{r4, lr}
 8016108:	4604      	mov	r4, r0
 801610a:	f000 f80b 	bl	8016124 <builtin_interfaces__msg__Time__fini>
 801610e:	f104 0008 	add.w	r0, r4, #8
 8016112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016116:	f002 b891 	b.w	801823c <rosidl_runtime_c__String__fini>
 801611a:	4770      	bx	lr

0801611c <builtin_interfaces__msg__Time__init>:
 801611c:	3800      	subs	r0, #0
 801611e:	bf18      	it	ne
 8016120:	2001      	movne	r0, #1
 8016122:	4770      	bx	lr

08016124 <builtin_interfaces__msg__Time__fini>:
 8016124:	4770      	bx	lr
 8016126:	bf00      	nop

08016128 <geometry_msgs__msg__Quaternion__init>:
 8016128:	b160      	cbz	r0, 8016144 <geometry_msgs__msg__Quaternion__init+0x1c>
 801612a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8016148 <geometry_msgs__msg__Quaternion__init+0x20>
 801612e:	2200      	movs	r2, #0
 8016130:	2300      	movs	r3, #0
 8016132:	e9c0 2300 	strd	r2, r3, [r0]
 8016136:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801613a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801613e:	ed80 7b06 	vstr	d7, [r0, #24]
 8016142:	2001      	movs	r0, #1
 8016144:	4770      	bx	lr
 8016146:	bf00      	nop
 8016148:	00000000 	.word	0x00000000
 801614c:	3ff00000 	.word	0x3ff00000

08016150 <geometry_msgs__msg__Quaternion__fini>:
 8016150:	4770      	bx	lr
 8016152:	bf00      	nop

08016154 <geometry_msgs__msg__Vector3__init>:
 8016154:	3800      	subs	r0, #0
 8016156:	bf18      	it	ne
 8016158:	2001      	movne	r0, #1
 801615a:	4770      	bx	lr

0801615c <geometry_msgs__msg__Vector3__fini>:
 801615c:	4770      	bx	lr
 801615e:	bf00      	nop

08016160 <ucdr_serialize_string>:
 8016160:	b510      	push	{r4, lr}
 8016162:	b082      	sub	sp, #8
 8016164:	4604      	mov	r4, r0
 8016166:	4608      	mov	r0, r1
 8016168:	9101      	str	r1, [sp, #4]
 801616a:	f7ea f849 	bl	8000200 <strlen>
 801616e:	9901      	ldr	r1, [sp, #4]
 8016170:	1c42      	adds	r2, r0, #1
 8016172:	4620      	mov	r0, r4
 8016174:	b002      	add	sp, #8
 8016176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801617a:	f7f8 bc15 	b.w	800e9a8 <ucdr_serialize_sequence_char>
 801617e:	bf00      	nop

08016180 <ucdr_deserialize_string>:
 8016180:	b500      	push	{lr}
 8016182:	b083      	sub	sp, #12
 8016184:	ab01      	add	r3, sp, #4
 8016186:	f7f8 fc21 	bl	800e9cc <ucdr_deserialize_sequence_char>
 801618a:	b003      	add	sp, #12
 801618c:	f85d fb04 	ldr.w	pc, [sp], #4

08016190 <get_custom_error>:
 8016190:	4b01      	ldr	r3, [pc, #4]	@ (8016198 <get_custom_error+0x8>)
 8016192:	7818      	ldrb	r0, [r3, #0]
 8016194:	4770      	bx	lr
 8016196:	bf00      	nop
 8016198:	20015518 	.word	0x20015518

0801619c <recv_custom_msg>:
 801619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a0:	4693      	mov	fp, r2
 80161a2:	b089      	sub	sp, #36	@ 0x24
 80161a4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80161a8:	9305      	str	r3, [sp, #20]
 80161aa:	468a      	mov	sl, r1
 80161ac:	2100      	movs	r1, #0
 80161ae:	4604      	mov	r4, r0
 80161b0:	f88d 101e 	strb.w	r1, [sp, #30]
 80161b4:	b322      	cbz	r2, 8016200 <recv_custom_msg+0x64>
 80161b6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80161ba:	f10d 081f 	add.w	r8, sp, #31
 80161be:	af05      	add	r7, sp, #20
 80161c0:	f10d 061e 	add.w	r6, sp, #30
 80161c4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80161c8:	e002      	b.n	80161d0 <recv_custom_msg+0x34>
 80161ca:	9b05      	ldr	r3, [sp, #20]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	dd0f      	ble.n	80161f0 <recv_custom_msg+0x54>
 80161d0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80161d4:	4623      	mov	r3, r4
 80161d6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80161da:	e9cd 5600 	strd	r5, r6, [sp]
 80161de:	4622      	mov	r2, r4
 80161e0:	4648      	mov	r0, r9
 80161e2:	f001 f92d 	bl	8017440 <uxr_read_framed_msg>
 80161e6:	2800      	cmp	r0, #0
 80161e8:	d0ef      	beq.n	80161ca <recv_custom_msg+0x2e>
 80161ea:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80161ee:	b1b3      	cbz	r3, 801621e <recv_custom_msg+0x82>
 80161f0:	4b0f      	ldr	r3, [pc, #60]	@ (8016230 <recv_custom_msg+0x94>)
 80161f2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80161f6:	701a      	strb	r2, [r3, #0]
 80161f8:	2000      	movs	r0, #0
 80161fa:	b009      	add	sp, #36	@ 0x24
 80161fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016200:	f10d 021f 	add.w	r2, sp, #31
 8016204:	9200      	str	r2, [sp, #0]
 8016206:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801620a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801620e:	4601      	mov	r1, r0
 8016210:	47a8      	blx	r5
 8016212:	2800      	cmp	r0, #0
 8016214:	d0ec      	beq.n	80161f0 <recv_custom_msg+0x54>
 8016216:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d1e8      	bne.n	80161f0 <recv_custom_msg+0x54>
 801621e:	f8cb 0000 	str.w	r0, [fp]
 8016222:	2001      	movs	r0, #1
 8016224:	f8ca 4000 	str.w	r4, [sl]
 8016228:	b009      	add	sp, #36	@ 0x24
 801622a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801622e:	bf00      	nop
 8016230:	20015518 	.word	0x20015518

08016234 <send_custom_msg>:
 8016234:	b530      	push	{r4, r5, lr}
 8016236:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801623a:	b087      	sub	sp, #28
 801623c:	4615      	mov	r5, r2
 801623e:	b974      	cbnz	r4, 801625e <send_custom_msg+0x2a>
 8016240:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8016244:	f10d 0317 	add.w	r3, sp, #23
 8016248:	47a0      	blx	r4
 801624a:	b108      	cbz	r0, 8016250 <send_custom_msg+0x1c>
 801624c:	42a8      	cmp	r0, r5
 801624e:	d015      	beq.n	801627c <send_custom_msg+0x48>
 8016250:	4b0c      	ldr	r3, [pc, #48]	@ (8016284 <send_custom_msg+0x50>)
 8016252:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8016256:	701a      	strb	r2, [r3, #0]
 8016258:	2000      	movs	r0, #0
 801625a:	b007      	add	sp, #28
 801625c:	bd30      	pop	{r4, r5, pc}
 801625e:	460b      	mov	r3, r1
 8016260:	2200      	movs	r2, #0
 8016262:	f10d 0117 	add.w	r1, sp, #23
 8016266:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801626a:	4602      	mov	r2, r0
 801626c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8016270:	9500      	str	r5, [sp, #0]
 8016272:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8016276:	f000 feeb 	bl	8017050 <uxr_write_framed_msg>
 801627a:	e7e6      	b.n	801624a <send_custom_msg+0x16>
 801627c:	2001      	movs	r0, #1
 801627e:	b007      	add	sp, #28
 8016280:	bd30      	pop	{r4, r5, pc}
 8016282:	bf00      	nop
 8016284:	20015518 	.word	0x20015518

08016288 <uxr_set_custom_transport_callbacks>:
 8016288:	b410      	push	{r4}
 801628a:	9c01      	ldr	r4, [sp, #4]
 801628c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8016290:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8016294:	9b02      	ldr	r3, [sp, #8]
 8016296:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801629a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801629e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80162a2:	4770      	bx	lr

080162a4 <uxr_init_custom_transport>:
 80162a4:	b538      	push	{r3, r4, r5, lr}
 80162a6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80162aa:	b303      	cbz	r3, 80162ee <uxr_init_custom_transport+0x4a>
 80162ac:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80162b0:	4604      	mov	r4, r0
 80162b2:	b1e2      	cbz	r2, 80162ee <uxr_init_custom_transport+0x4a>
 80162b4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80162b8:	b1ca      	cbz	r2, 80162ee <uxr_init_custom_transport+0x4a>
 80162ba:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80162be:	b1b2      	cbz	r2, 80162ee <uxr_init_custom_transport+0x4a>
 80162c0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80162c4:	4798      	blx	r3
 80162c6:	4605      	mov	r5, r0
 80162c8:	b188      	cbz	r0, 80162ee <uxr_init_custom_transport+0x4a>
 80162ca:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80162ce:	b98b      	cbnz	r3, 80162f4 <uxr_init_custom_transport+0x50>
 80162d0:	490b      	ldr	r1, [pc, #44]	@ (8016300 <uxr_init_custom_transport+0x5c>)
 80162d2:	4b0c      	ldr	r3, [pc, #48]	@ (8016304 <uxr_init_custom_transport+0x60>)
 80162d4:	4a0c      	ldr	r2, [pc, #48]	@ (8016308 <uxr_init_custom_transport+0x64>)
 80162d6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80162da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80162de:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80162e2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80162e6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80162ea:	4628      	mov	r0, r5
 80162ec:	bd38      	pop	{r3, r4, r5, pc}
 80162ee:	2500      	movs	r5, #0
 80162f0:	4628      	mov	r0, r5
 80162f2:	bd38      	pop	{r3, r4, r5, pc}
 80162f4:	2100      	movs	r1, #0
 80162f6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80162fa:	f000 fea3 	bl	8017044 <uxr_init_framing_io>
 80162fe:	e7e7      	b.n	80162d0 <uxr_init_custom_transport+0x2c>
 8016300:	08016235 	.word	0x08016235
 8016304:	0801619d 	.word	0x0801619d
 8016308:	08016191 	.word	0x08016191

0801630c <uxr_close_custom_transport>:
 801630c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8016310:	4718      	bx	r3
 8016312:	bf00      	nop

08016314 <uxr_init_input_best_effort_stream>:
 8016314:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016318:	8003      	strh	r3, [r0, #0]
 801631a:	4770      	bx	lr

0801631c <uxr_reset_input_best_effort_stream>:
 801631c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016320:	8003      	strh	r3, [r0, #0]
 8016322:	4770      	bx	lr

08016324 <uxr_receive_best_effort_message>:
 8016324:	b538      	push	{r3, r4, r5, lr}
 8016326:	4604      	mov	r4, r0
 8016328:	8800      	ldrh	r0, [r0, #0]
 801632a:	460d      	mov	r5, r1
 801632c:	f000 fe72 	bl	8017014 <uxr_seq_num_cmp>
 8016330:	4603      	mov	r3, r0
 8016332:	2b00      	cmp	r3, #0
 8016334:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016338:	bfb8      	it	lt
 801633a:	8025      	strhlt	r5, [r4, #0]
 801633c:	bd38      	pop	{r3, r4, r5, pc}
 801633e:	bf00      	nop

08016340 <on_full_input_buffer>:
 8016340:	b570      	push	{r4, r5, r6, lr}
 8016342:	4605      	mov	r5, r0
 8016344:	460c      	mov	r4, r1
 8016346:	682b      	ldr	r3, [r5, #0]
 8016348:	6809      	ldr	r1, [r1, #0]
 801634a:	8920      	ldrh	r0, [r4, #8]
 801634c:	6862      	ldr	r2, [r4, #4]
 801634e:	fbb2 f2f0 	udiv	r2, r2, r0
 8016352:	eba3 0c01 	sub.w	ip, r3, r1
 8016356:	fbbc fcf2 	udiv	ip, ip, r2
 801635a:	f10c 0c01 	add.w	ip, ip, #1
 801635e:	fa1f f38c 	uxth.w	r3, ip
 8016362:	fbb3 f6f0 	udiv	r6, r3, r0
 8016366:	fb00 3316 	mls	r3, r0, r6, r3
 801636a:	b29b      	uxth	r3, r3
 801636c:	fb02 f303 	mul.w	r3, r2, r3
 8016370:	1d18      	adds	r0, r3, #4
 8016372:	4408      	add	r0, r1
 8016374:	7d26      	ldrb	r6, [r4, #20]
 8016376:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801637a:	b116      	cbz	r6, 8016382 <on_full_input_buffer+0x42>
 801637c:	2600      	movs	r6, #0
 801637e:	f840 6c04 	str.w	r6, [r0, #-4]
 8016382:	2a03      	cmp	r2, #3
 8016384:	d801      	bhi.n	801638a <on_full_input_buffer+0x4a>
 8016386:	2001      	movs	r0, #1
 8016388:	bd70      	pop	{r4, r5, r6, pc}
 801638a:	3308      	adds	r3, #8
 801638c:	4419      	add	r1, r3
 801638e:	4628      	mov	r0, r5
 8016390:	692b      	ldr	r3, [r5, #16]
 8016392:	3a04      	subs	r2, #4
 8016394:	f7f8 fa90 	bl	800e8b8 <ucdr_init_buffer_origin>
 8016398:	4628      	mov	r0, r5
 801639a:	4903      	ldr	r1, [pc, #12]	@ (80163a8 <on_full_input_buffer+0x68>)
 801639c:	4622      	mov	r2, r4
 801639e:	f7f8 fa67 	bl	800e870 <ucdr_set_on_full_buffer_callback>
 80163a2:	2000      	movs	r0, #0
 80163a4:	bd70      	pop	{r4, r5, r6, pc}
 80163a6:	bf00      	nop
 80163a8:	08016341 	.word	0x08016341

080163ac <uxr_init_input_reliable_stream>:
 80163ac:	b500      	push	{lr}
 80163ae:	e9c0 1200 	strd	r1, r2, [r0]
 80163b2:	f04f 0e00 	mov.w	lr, #0
 80163b6:	9a01      	ldr	r2, [sp, #4]
 80163b8:	8103      	strh	r3, [r0, #8]
 80163ba:	6102      	str	r2, [r0, #16]
 80163bc:	f880 e014 	strb.w	lr, [r0, #20]
 80163c0:	b1d3      	cbz	r3, 80163f8 <uxr_init_input_reliable_stream+0x4c>
 80163c2:	f8c1 e000 	str.w	lr, [r1]
 80163c6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80163ca:	f1bc 0f01 	cmp.w	ip, #1
 80163ce:	d913      	bls.n	80163f8 <uxr_init_input_reliable_stream+0x4c>
 80163d0:	2301      	movs	r3, #1
 80163d2:	fbb3 f1fc 	udiv	r1, r3, ip
 80163d6:	fb0c 3111 	mls	r1, ip, r1, r3
 80163da:	b289      	uxth	r1, r1
 80163dc:	6842      	ldr	r2, [r0, #4]
 80163de:	fbb2 f2fc 	udiv	r2, r2, ip
 80163e2:	fb01 f202 	mul.w	r2, r1, r2
 80163e6:	6801      	ldr	r1, [r0, #0]
 80163e8:	f841 e002 	str.w	lr, [r1, r2]
 80163ec:	3301      	adds	r3, #1
 80163ee:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80163f2:	b29b      	uxth	r3, r3
 80163f4:	459c      	cmp	ip, r3
 80163f6:	d8ec      	bhi.n	80163d2 <uxr_init_input_reliable_stream+0x26>
 80163f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80163fc:	60c3      	str	r3, [r0, #12]
 80163fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8016402:	bf00      	nop

08016404 <uxr_reset_input_reliable_stream>:
 8016404:	8901      	ldrh	r1, [r0, #8]
 8016406:	b1e9      	cbz	r1, 8016444 <uxr_reset_input_reliable_stream+0x40>
 8016408:	f04f 0c00 	mov.w	ip, #0
 801640c:	b500      	push	{lr}
 801640e:	4663      	mov	r3, ip
 8016410:	46e6      	mov	lr, ip
 8016412:	fbb3 f2f1 	udiv	r2, r3, r1
 8016416:	fb01 3312 	mls	r3, r1, r2, r3
 801641a:	b29b      	uxth	r3, r3
 801641c:	6842      	ldr	r2, [r0, #4]
 801641e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016422:	fb02 f303 	mul.w	r3, r2, r3
 8016426:	6802      	ldr	r2, [r0, #0]
 8016428:	f842 e003 	str.w	lr, [r2, r3]
 801642c:	f10c 0c01 	add.w	ip, ip, #1
 8016430:	8901      	ldrh	r1, [r0, #8]
 8016432:	fa1f f38c 	uxth.w	r3, ip
 8016436:	4299      	cmp	r1, r3
 8016438:	d8eb      	bhi.n	8016412 <uxr_reset_input_reliable_stream+0xe>
 801643a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801643e:	60c3      	str	r3, [r0, #12]
 8016440:	f85d fb04 	ldr.w	pc, [sp], #4
 8016444:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016448:	60c3      	str	r3, [r0, #12]
 801644a:	4770      	bx	lr

0801644c <uxr_receive_reliable_message>:
 801644c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016450:	4604      	mov	r4, r0
 8016452:	460d      	mov	r5, r1
 8016454:	8901      	ldrh	r1, [r0, #8]
 8016456:	8980      	ldrh	r0, [r0, #12]
 8016458:	4690      	mov	r8, r2
 801645a:	461f      	mov	r7, r3
 801645c:	f000 fdd2 	bl	8017004 <uxr_seq_num_add>
 8016460:	4629      	mov	r1, r5
 8016462:	4606      	mov	r6, r0
 8016464:	89a0      	ldrh	r0, [r4, #12]
 8016466:	f000 fdd5 	bl	8017014 <uxr_seq_num_cmp>
 801646a:	2800      	cmp	r0, #0
 801646c:	db0a      	blt.n	8016484 <uxr_receive_reliable_message+0x38>
 801646e:	2600      	movs	r6, #0
 8016470:	89e0      	ldrh	r0, [r4, #14]
 8016472:	4629      	mov	r1, r5
 8016474:	f000 fdce 	bl	8017014 <uxr_seq_num_cmp>
 8016478:	2800      	cmp	r0, #0
 801647a:	da00      	bge.n	801647e <uxr_receive_reliable_message+0x32>
 801647c:	81e5      	strh	r5, [r4, #14]
 801647e:	4630      	mov	r0, r6
 8016480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016484:	4630      	mov	r0, r6
 8016486:	4629      	mov	r1, r5
 8016488:	f000 fdc4 	bl	8017014 <uxr_seq_num_cmp>
 801648c:	2800      	cmp	r0, #0
 801648e:	dbee      	blt.n	801646e <uxr_receive_reliable_message+0x22>
 8016490:	6923      	ldr	r3, [r4, #16]
 8016492:	4640      	mov	r0, r8
 8016494:	4798      	blx	r3
 8016496:	2101      	movs	r1, #1
 8016498:	4681      	mov	r9, r0
 801649a:	89a0      	ldrh	r0, [r4, #12]
 801649c:	f000 fdb2 	bl	8017004 <uxr_seq_num_add>
 80164a0:	f1b9 0f00 	cmp.w	r9, #0
 80164a4:	d101      	bne.n	80164aa <uxr_receive_reliable_message+0x5e>
 80164a6:	4285      	cmp	r5, r0
 80164a8:	d047      	beq.n	801653a <uxr_receive_reliable_message+0xee>
 80164aa:	8922      	ldrh	r2, [r4, #8]
 80164ac:	fbb5 f0f2 	udiv	r0, r5, r2
 80164b0:	fb02 5010 	mls	r0, r2, r0, r5
 80164b4:	b280      	uxth	r0, r0
 80164b6:	6863      	ldr	r3, [r4, #4]
 80164b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80164bc:	fb00 f303 	mul.w	r3, r0, r3
 80164c0:	6820      	ldr	r0, [r4, #0]
 80164c2:	3304      	adds	r3, #4
 80164c4:	4418      	add	r0, r3
 80164c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d1cf      	bne.n	801646e <uxr_receive_reliable_message+0x22>
 80164ce:	4641      	mov	r1, r8
 80164d0:	463a      	mov	r2, r7
 80164d2:	f002 fd00 	bl	8018ed6 <memcpy>
 80164d6:	8921      	ldrh	r1, [r4, #8]
 80164d8:	fbb5 f2f1 	udiv	r2, r5, r1
 80164dc:	fb01 5212 	mls	r2, r1, r2, r5
 80164e0:	b292      	uxth	r2, r2
 80164e2:	6863      	ldr	r3, [r4, #4]
 80164e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80164e8:	fb02 f303 	mul.w	r3, r2, r3
 80164ec:	6822      	ldr	r2, [r4, #0]
 80164ee:	50d7      	str	r7, [r2, r3]
 80164f0:	9a08      	ldr	r2, [sp, #32]
 80164f2:	2301      	movs	r3, #1
 80164f4:	7013      	strb	r3, [r2, #0]
 80164f6:	f1b9 0f00 	cmp.w	r9, #0
 80164fa:	d0b8      	beq.n	801646e <uxr_receive_reliable_message+0x22>
 80164fc:	89a6      	ldrh	r6, [r4, #12]
 80164fe:	4630      	mov	r0, r6
 8016500:	2101      	movs	r1, #1
 8016502:	f000 fd7f 	bl	8017004 <uxr_seq_num_add>
 8016506:	8922      	ldrh	r2, [r4, #8]
 8016508:	6863      	ldr	r3, [r4, #4]
 801650a:	fbb3 f3f2 	udiv	r3, r3, r2
 801650e:	4606      	mov	r6, r0
 8016510:	fbb0 f0f2 	udiv	r0, r0, r2
 8016514:	fb02 6010 	mls	r0, r2, r0, r6
 8016518:	b280      	uxth	r0, r0
 801651a:	fb00 f303 	mul.w	r3, r0, r3
 801651e:	6820      	ldr	r0, [r4, #0]
 8016520:	3304      	adds	r3, #4
 8016522:	4418      	add	r0, r3
 8016524:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d0a0      	beq.n	801646e <uxr_receive_reliable_message+0x22>
 801652c:	6923      	ldr	r3, [r4, #16]
 801652e:	4798      	blx	r3
 8016530:	2802      	cmp	r0, #2
 8016532:	d008      	beq.n	8016546 <uxr_receive_reliable_message+0xfa>
 8016534:	2801      	cmp	r0, #1
 8016536:	d0e2      	beq.n	80164fe <uxr_receive_reliable_message+0xb2>
 8016538:	e799      	b.n	801646e <uxr_receive_reliable_message+0x22>
 801653a:	9b08      	ldr	r3, [sp, #32]
 801653c:	81a5      	strh	r5, [r4, #12]
 801653e:	2601      	movs	r6, #1
 8016540:	f883 9000 	strb.w	r9, [r3]
 8016544:	e794      	b.n	8016470 <uxr_receive_reliable_message+0x24>
 8016546:	2601      	movs	r6, #1
 8016548:	e792      	b.n	8016470 <uxr_receive_reliable_message+0x24>
 801654a:	bf00      	nop

0801654c <uxr_next_input_reliable_buffer_available>:
 801654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016550:	4604      	mov	r4, r0
 8016552:	460f      	mov	r7, r1
 8016554:	8980      	ldrh	r0, [r0, #12]
 8016556:	2101      	movs	r1, #1
 8016558:	4690      	mov	r8, r2
 801655a:	f000 fd53 	bl	8017004 <uxr_seq_num_add>
 801655e:	8922      	ldrh	r2, [r4, #8]
 8016560:	fbb0 f6f2 	udiv	r6, r0, r2
 8016564:	fb02 0616 	mls	r6, r2, r6, r0
 8016568:	b2b6      	uxth	r6, r6
 801656a:	6863      	ldr	r3, [r4, #4]
 801656c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016570:	fb06 f303 	mul.w	r3, r6, r3
 8016574:	6826      	ldr	r6, [r4, #0]
 8016576:	3304      	adds	r3, #4
 8016578:	441e      	add	r6, r3
 801657a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801657e:	f1b9 0f00 	cmp.w	r9, #0
 8016582:	d023      	beq.n	80165cc <uxr_next_input_reliable_buffer_available+0x80>
 8016584:	6923      	ldr	r3, [r4, #16]
 8016586:	4605      	mov	r5, r0
 8016588:	4630      	mov	r0, r6
 801658a:	4798      	blx	r3
 801658c:	4682      	mov	sl, r0
 801658e:	b300      	cbz	r0, 80165d2 <uxr_next_input_reliable_buffer_available+0x86>
 8016590:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016594:	2101      	movs	r1, #1
 8016596:	4650      	mov	r0, sl
 8016598:	f000 fd34 	bl	8017004 <uxr_seq_num_add>
 801659c:	8921      	ldrh	r1, [r4, #8]
 801659e:	fbb0 f2f1 	udiv	r2, r0, r1
 80165a2:	4682      	mov	sl, r0
 80165a4:	fb01 0212 	mls	r2, r1, r2, r0
 80165a8:	e9d4 0300 	ldrd	r0, r3, [r4]
 80165ac:	b292      	uxth	r2, r2
 80165ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80165b2:	fb02 f303 	mul.w	r3, r2, r3
 80165b6:	3304      	adds	r3, #4
 80165b8:	4418      	add	r0, r3
 80165ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80165be:	b12b      	cbz	r3, 80165cc <uxr_next_input_reliable_buffer_available+0x80>
 80165c0:	6923      	ldr	r3, [r4, #16]
 80165c2:	4798      	blx	r3
 80165c4:	2802      	cmp	r0, #2
 80165c6:	d01b      	beq.n	8016600 <uxr_next_input_reliable_buffer_available+0xb4>
 80165c8:	2801      	cmp	r0, #1
 80165ca:	d0e3      	beq.n	8016594 <uxr_next_input_reliable_buffer_available+0x48>
 80165cc:	2000      	movs	r0, #0
 80165ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d2:	464a      	mov	r2, r9
 80165d4:	4631      	mov	r1, r6
 80165d6:	4638      	mov	r0, r7
 80165d8:	f7f8 f976 	bl	800e8c8 <ucdr_init_buffer>
 80165dc:	8921      	ldrh	r1, [r4, #8]
 80165de:	fbb5 f2f1 	udiv	r2, r5, r1
 80165e2:	fb01 5212 	mls	r2, r1, r2, r5
 80165e6:	b292      	uxth	r2, r2
 80165e8:	6863      	ldr	r3, [r4, #4]
 80165ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80165ee:	fb02 f303 	mul.w	r3, r2, r3
 80165f2:	6822      	ldr	r2, [r4, #0]
 80165f4:	f842 a003 	str.w	sl, [r2, r3]
 80165f8:	2001      	movs	r0, #1
 80165fa:	81a5      	strh	r5, [r4, #12]
 80165fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016600:	8920      	ldrh	r0, [r4, #8]
 8016602:	fbb5 f3f0 	udiv	r3, r5, r0
 8016606:	fb00 5513 	mls	r5, r0, r3, r5
 801660a:	b2ad      	uxth	r5, r5
 801660c:	6863      	ldr	r3, [r4, #4]
 801660e:	fbb3 f3f0 	udiv	r3, r3, r0
 8016612:	fb03 f505 	mul.w	r5, r3, r5
 8016616:	6823      	ldr	r3, [r4, #0]
 8016618:	2000      	movs	r0, #0
 801661a:	5158      	str	r0, [r3, r5]
 801661c:	eb06 0108 	add.w	r1, r6, r8
 8016620:	eba9 0208 	sub.w	r2, r9, r8
 8016624:	4638      	mov	r0, r7
 8016626:	f7f8 f94f 	bl	800e8c8 <ucdr_init_buffer>
 801662a:	4638      	mov	r0, r7
 801662c:	4903      	ldr	r1, [pc, #12]	@ (801663c <uxr_next_input_reliable_buffer_available+0xf0>)
 801662e:	4622      	mov	r2, r4
 8016630:	f7f8 f91e 	bl	800e870 <ucdr_set_on_full_buffer_callback>
 8016634:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016638:	2001      	movs	r0, #1
 801663a:	e7c8      	b.n	80165ce <uxr_next_input_reliable_buffer_available+0x82>
 801663c:	08016341 	.word	0x08016341

08016640 <uxr_process_heartbeat>:
 8016640:	b538      	push	{r3, r4, r5, lr}
 8016642:	4611      	mov	r1, r2
 8016644:	4604      	mov	r4, r0
 8016646:	89c0      	ldrh	r0, [r0, #14]
 8016648:	4615      	mov	r5, r2
 801664a:	f000 fce3 	bl	8017014 <uxr_seq_num_cmp>
 801664e:	2800      	cmp	r0, #0
 8016650:	bfb8      	it	lt
 8016652:	81e5      	strhlt	r5, [r4, #14]
 8016654:	bd38      	pop	{r3, r4, r5, pc}
 8016656:	bf00      	nop

08016658 <uxr_compute_acknack>:
 8016658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801665c:	8903      	ldrh	r3, [r0, #8]
 801665e:	8985      	ldrh	r5, [r0, #12]
 8016660:	4604      	mov	r4, r0
 8016662:	460e      	mov	r6, r1
 8016664:	b1d3      	cbz	r3, 801669c <uxr_compute_acknack+0x44>
 8016666:	4628      	mov	r0, r5
 8016668:	2701      	movs	r7, #1
 801666a:	e003      	b.n	8016674 <uxr_compute_acknack+0x1c>
 801666c:	4567      	cmp	r7, ip
 801666e:	d215      	bcs.n	801669c <uxr_compute_acknack+0x44>
 8016670:	89a0      	ldrh	r0, [r4, #12]
 8016672:	3701      	adds	r7, #1
 8016674:	b2b9      	uxth	r1, r7
 8016676:	f000 fcc5 	bl	8017004 <uxr_seq_num_add>
 801667a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801667e:	fbb0 f3fc 	udiv	r3, r0, ip
 8016682:	fb0c 0313 	mls	r3, ip, r3, r0
 8016686:	b29a      	uxth	r2, r3
 8016688:	e9d4 1300 	ldrd	r1, r3, [r4]
 801668c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016690:	fb02 f303 	mul.w	r3, r2, r3
 8016694:	58cb      	ldr	r3, [r1, r3]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d1e8      	bne.n	801666c <uxr_compute_acknack+0x14>
 801669a:	4605      	mov	r5, r0
 801669c:	8035      	strh	r5, [r6, #0]
 801669e:	2101      	movs	r1, #1
 80166a0:	4628      	mov	r0, r5
 80166a2:	89e7      	ldrh	r7, [r4, #14]
 80166a4:	f000 fcb2 	bl	801700c <uxr_seq_num_sub>
 80166a8:	4601      	mov	r1, r0
 80166aa:	4638      	mov	r0, r7
 80166ac:	f000 fcae 	bl	801700c <uxr_seq_num_sub>
 80166b0:	4605      	mov	r5, r0
 80166b2:	b318      	cbz	r0, 80166fc <uxr_compute_acknack+0xa4>
 80166b4:	f04f 0900 	mov.w	r9, #0
 80166b8:	464f      	mov	r7, r9
 80166ba:	f04f 0801 	mov.w	r8, #1
 80166be:	fa1f f189 	uxth.w	r1, r9
 80166c2:	8830      	ldrh	r0, [r6, #0]
 80166c4:	f000 fc9e 	bl	8017004 <uxr_seq_num_add>
 80166c8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80166cc:	fbb0 f3fc 	udiv	r3, r0, ip
 80166d0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80166d4:	fb03 001c 	mls	r0, r3, ip, r0
 80166d8:	b283      	uxth	r3, r0
 80166da:	fbb2 f2fc 	udiv	r2, r2, ip
 80166de:	fb02 f303 	mul.w	r3, r2, r3
 80166e2:	fa08 f209 	lsl.w	r2, r8, r9
 80166e6:	58cb      	ldr	r3, [r1, r3]
 80166e8:	f109 0901 	add.w	r9, r9, #1
 80166ec:	b90b      	cbnz	r3, 80166f2 <uxr_compute_acknack+0x9a>
 80166ee:	4317      	orrs	r7, r2
 80166f0:	b2bf      	uxth	r7, r7
 80166f2:	454d      	cmp	r5, r9
 80166f4:	d1e3      	bne.n	80166be <uxr_compute_acknack+0x66>
 80166f6:	4638      	mov	r0, r7
 80166f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166fc:	4607      	mov	r7, r0
 80166fe:	4638      	mov	r0, r7
 8016700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016704 <uxr_init_output_best_effort_stream>:
 8016704:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016708:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801670c:	6001      	str	r1, [r0, #0]
 801670e:	7303      	strb	r3, [r0, #12]
 8016710:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016714:	4770      	bx	lr
 8016716:	bf00      	nop

08016718 <uxr_reset_output_best_effort_stream>:
 8016718:	7b02      	ldrb	r2, [r0, #12]
 801671a:	6042      	str	r2, [r0, #4]
 801671c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016720:	81c3      	strh	r3, [r0, #14]
 8016722:	4770      	bx	lr

08016724 <uxr_prepare_best_effort_buffer_to_write>:
 8016724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016726:	4604      	mov	r4, r0
 8016728:	b083      	sub	sp, #12
 801672a:	6840      	ldr	r0, [r0, #4]
 801672c:	460d      	mov	r5, r1
 801672e:	4616      	mov	r6, r2
 8016730:	f7f9 fdce 	bl	80102d0 <uxr_submessage_padding>
 8016734:	6863      	ldr	r3, [r4, #4]
 8016736:	4418      	add	r0, r3
 8016738:	68a3      	ldr	r3, [r4, #8]
 801673a:	1942      	adds	r2, r0, r5
 801673c:	4293      	cmp	r3, r2
 801673e:	bf2c      	ite	cs
 8016740:	2701      	movcs	r7, #1
 8016742:	2700      	movcc	r7, #0
 8016744:	d202      	bcs.n	801674c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016746:	4638      	mov	r0, r7
 8016748:	b003      	add	sp, #12
 801674a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801674c:	9000      	str	r0, [sp, #0]
 801674e:	6821      	ldr	r1, [r4, #0]
 8016750:	4630      	mov	r0, r6
 8016752:	2300      	movs	r3, #0
 8016754:	f7f8 f8a6 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 8016758:	6861      	ldr	r1, [r4, #4]
 801675a:	4638      	mov	r0, r7
 801675c:	4429      	add	r1, r5
 801675e:	6061      	str	r1, [r4, #4]
 8016760:	b003      	add	sp, #12
 8016762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016764 <uxr_prepare_best_effort_buffer_to_send>:
 8016764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016768:	4604      	mov	r4, r0
 801676a:	461d      	mov	r5, r3
 801676c:	6840      	ldr	r0, [r0, #4]
 801676e:	7b23      	ldrb	r3, [r4, #12]
 8016770:	4298      	cmp	r0, r3
 8016772:	bf8c      	ite	hi
 8016774:	2601      	movhi	r6, #1
 8016776:	2600      	movls	r6, #0
 8016778:	d802      	bhi.n	8016780 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801677a:	4630      	mov	r0, r6
 801677c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016780:	4688      	mov	r8, r1
 8016782:	89e0      	ldrh	r0, [r4, #14]
 8016784:	2101      	movs	r1, #1
 8016786:	4617      	mov	r7, r2
 8016788:	f000 fc3c 	bl	8017004 <uxr_seq_num_add>
 801678c:	6823      	ldr	r3, [r4, #0]
 801678e:	81e0      	strh	r0, [r4, #14]
 8016790:	8028      	strh	r0, [r5, #0]
 8016792:	f8c8 3000 	str.w	r3, [r8]
 8016796:	6863      	ldr	r3, [r4, #4]
 8016798:	603b      	str	r3, [r7, #0]
 801679a:	7b23      	ldrb	r3, [r4, #12]
 801679c:	6063      	str	r3, [r4, #4]
 801679e:	4630      	mov	r0, r6
 80167a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167a4 <on_full_output_buffer>:
 80167a4:	b538      	push	{r3, r4, r5, lr}
 80167a6:	6802      	ldr	r2, [r0, #0]
 80167a8:	460c      	mov	r4, r1
 80167aa:	6809      	ldr	r1, [r1, #0]
 80167ac:	8923      	ldrh	r3, [r4, #8]
 80167ae:	eba2 0c01 	sub.w	ip, r2, r1
 80167b2:	6862      	ldr	r2, [r4, #4]
 80167b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80167b8:	fbbc fcf2 	udiv	ip, ip, r2
 80167bc:	f10c 0c01 	add.w	ip, ip, #1
 80167c0:	fa1f fc8c 	uxth.w	ip, ip
 80167c4:	fbbc fef3 	udiv	lr, ip, r3
 80167c8:	fb03 c31e 	mls	r3, r3, lr, ip
 80167cc:	b29b      	uxth	r3, r3
 80167ce:	fb02 f303 	mul.w	r3, r2, r3
 80167d2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80167d6:	58ca      	ldr	r2, [r1, r3]
 80167d8:	4463      	add	r3, ip
 80167da:	eba2 020c 	sub.w	r2, r2, ip
 80167de:	3308      	adds	r3, #8
 80167e0:	4605      	mov	r5, r0
 80167e2:	4419      	add	r1, r3
 80167e4:	3a04      	subs	r2, #4
 80167e6:	6903      	ldr	r3, [r0, #16]
 80167e8:	f7f8 f866 	bl	800e8b8 <ucdr_init_buffer_origin>
 80167ec:	4628      	mov	r0, r5
 80167ee:	4903      	ldr	r1, [pc, #12]	@ (80167fc <on_full_output_buffer+0x58>)
 80167f0:	4622      	mov	r2, r4
 80167f2:	f7f8 f83d 	bl	800e870 <ucdr_set_on_full_buffer_callback>
 80167f6:	2000      	movs	r0, #0
 80167f8:	bd38      	pop	{r3, r4, r5, pc}
 80167fa:	bf00      	nop
 80167fc:	080167a5 	.word	0x080167a5

08016800 <uxr_init_output_reliable_stream>:
 8016800:	b410      	push	{r4}
 8016802:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016806:	8103      	strh	r3, [r0, #8]
 8016808:	e9c0 1200 	strd	r1, r2, [r0]
 801680c:	f880 c00c 	strb.w	ip, [r0, #12]
 8016810:	b1d3      	cbz	r3, 8016848 <uxr_init_output_reliable_stream+0x48>
 8016812:	f8c1 c000 	str.w	ip, [r1]
 8016816:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801681a:	f1bc 0f01 	cmp.w	ip, #1
 801681e:	d913      	bls.n	8016848 <uxr_init_output_reliable_stream+0x48>
 8016820:	2301      	movs	r3, #1
 8016822:	fbb3 f1fc 	udiv	r1, r3, ip
 8016826:	fb0c 3111 	mls	r1, ip, r1, r3
 801682a:	b289      	uxth	r1, r1
 801682c:	6842      	ldr	r2, [r0, #4]
 801682e:	6804      	ldr	r4, [r0, #0]
 8016830:	fbb2 f2fc 	udiv	r2, r2, ip
 8016834:	fb01 f202 	mul.w	r2, r1, r2
 8016838:	7b01      	ldrb	r1, [r0, #12]
 801683a:	50a1      	str	r1, [r4, r2]
 801683c:	3301      	adds	r3, #1
 801683e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016842:	b29b      	uxth	r3, r3
 8016844:	459c      	cmp	ip, r3
 8016846:	d8ec      	bhi.n	8016822 <uxr_init_output_reliable_stream+0x22>
 8016848:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801684c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016850:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016854:	4905      	ldr	r1, [pc, #20]	@ (801686c <uxr_init_output_reliable_stream+0x6c>)
 8016856:	f85d 4b04 	ldr.w	r4, [sp], #4
 801685a:	f8c0 100e 	str.w	r1, [r0, #14]
 801685e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016862:	2300      	movs	r3, #0
 8016864:	8242      	strh	r2, [r0, #18]
 8016866:	8403      	strh	r3, [r0, #32]
 8016868:	4770      	bx	lr
 801686a:	bf00      	nop
 801686c:	ffff0000 	.word	0xffff0000

08016870 <uxr_reset_output_reliable_stream>:
 8016870:	8901      	ldrh	r1, [r0, #8]
 8016872:	b1b1      	cbz	r1, 80168a2 <uxr_reset_output_reliable_stream+0x32>
 8016874:	f04f 0c00 	mov.w	ip, #0
 8016878:	4663      	mov	r3, ip
 801687a:	fbb3 f2f1 	udiv	r2, r3, r1
 801687e:	fb01 3312 	mls	r3, r1, r2, r3
 8016882:	b29b      	uxth	r3, r3
 8016884:	6842      	ldr	r2, [r0, #4]
 8016886:	fbb2 f2f1 	udiv	r2, r2, r1
 801688a:	6801      	ldr	r1, [r0, #0]
 801688c:	fb02 f303 	mul.w	r3, r2, r3
 8016890:	7b02      	ldrb	r2, [r0, #12]
 8016892:	50ca      	str	r2, [r1, r3]
 8016894:	f10c 0c01 	add.w	ip, ip, #1
 8016898:	8901      	ldrh	r1, [r0, #8]
 801689a:	fa1f f38c 	uxth.w	r3, ip
 801689e:	4299      	cmp	r1, r3
 80168a0:	d8eb      	bhi.n	801687a <uxr_reset_output_reliable_stream+0xa>
 80168a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80168a6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80168aa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80168ae:	4904      	ldr	r1, [pc, #16]	@ (80168c0 <uxr_reset_output_reliable_stream+0x50>)
 80168b0:	f8c0 100e 	str.w	r1, [r0, #14]
 80168b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168b8:	2300      	movs	r3, #0
 80168ba:	8242      	strh	r2, [r0, #18]
 80168bc:	8403      	strh	r3, [r0, #32]
 80168be:	4770      	bx	lr
 80168c0:	ffff0000 	.word	0xffff0000

080168c4 <uxr_prepare_reliable_buffer_to_write>:
 80168c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168c8:	4604      	mov	r4, r0
 80168ca:	b091      	sub	sp, #68	@ 0x44
 80168cc:	8900      	ldrh	r0, [r0, #8]
 80168ce:	89e6      	ldrh	r6, [r4, #14]
 80168d0:	6823      	ldr	r3, [r4, #0]
 80168d2:	9204      	str	r2, [sp, #16]
 80168d4:	fbb6 f2f0 	udiv	r2, r6, r0
 80168d8:	fb00 6212 	mls	r2, r0, r2, r6
 80168dc:	b292      	uxth	r2, r2
 80168de:	6865      	ldr	r5, [r4, #4]
 80168e0:	fbb5 f5f0 	udiv	r5, r5, r0
 80168e4:	fb05 3202 	mla	r2, r5, r2, r3
 80168e8:	3204      	adds	r2, #4
 80168ea:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80168ee:	f894 900c 	ldrb.w	r9, [r4, #12]
 80168f2:	9203      	str	r2, [sp, #12]
 80168f4:	468b      	mov	fp, r1
 80168f6:	1f2f      	subs	r7, r5, #4
 80168f8:	2800      	cmp	r0, #0
 80168fa:	f000 814c 	beq.w	8016b96 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80168fe:	f04f 0c00 	mov.w	ip, #0
 8016902:	46e2      	mov	sl, ip
 8016904:	4661      	mov	r1, ip
 8016906:	fbb1 f2f0 	udiv	r2, r1, r0
 801690a:	fb00 1212 	mls	r2, r0, r2, r1
 801690e:	b292      	uxth	r2, r2
 8016910:	fb05 f202 	mul.w	r2, r5, r2
 8016914:	f10c 0c01 	add.w	ip, ip, #1
 8016918:	589a      	ldr	r2, [r3, r2]
 801691a:	454a      	cmp	r2, r9
 801691c:	bf08      	it	eq
 801691e:	f10a 0a01 	addeq.w	sl, sl, #1
 8016922:	fa1f f18c 	uxth.w	r1, ip
 8016926:	bf08      	it	eq
 8016928:	fa1f fa8a 	uxtheq.w	sl, sl
 801692c:	4281      	cmp	r1, r0
 801692e:	d3ea      	bcc.n	8016906 <uxr_prepare_reliable_buffer_to_write+0x42>
 8016930:	4640      	mov	r0, r8
 8016932:	2104      	movs	r1, #4
 8016934:	f8cd a014 	str.w	sl, [sp, #20]
 8016938:	f7f7 ffca 	bl	800e8d0 <ucdr_alignment>
 801693c:	4480      	add	r8, r0
 801693e:	eb08 020b 	add.w	r2, r8, fp
 8016942:	42ba      	cmp	r2, r7
 8016944:	f240 80cd 	bls.w	8016ae2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8016948:	7b22      	ldrb	r2, [r4, #12]
 801694a:	445a      	add	r2, fp
 801694c:	42ba      	cmp	r2, r7
 801694e:	f240 80b5 	bls.w	8016abc <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016952:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8016956:	33fc      	adds	r3, #252	@ 0xfc
 8016958:	b2ba      	uxth	r2, r7
 801695a:	4413      	add	r3, r2
 801695c:	b29b      	uxth	r3, r3
 801695e:	fb0a f903 	mul.w	r9, sl, r3
 8016962:	45d9      	cmp	r9, fp
 8016964:	9305      	str	r3, [sp, #20]
 8016966:	9306      	str	r3, [sp, #24]
 8016968:	f0c0 80b7 	bcc.w	8016ada <uxr_prepare_reliable_buffer_to_write+0x216>
 801696c:	f108 0304 	add.w	r3, r8, #4
 8016970:	42bb      	cmp	r3, r7
 8016972:	f080 80db 	bcs.w	8016b2c <uxr_prepare_reliable_buffer_to_write+0x268>
 8016976:	f1a2 0904 	sub.w	r9, r2, #4
 801697a:	eba9 0908 	sub.w	r9, r9, r8
 801697e:	9b05      	ldr	r3, [sp, #20]
 8016980:	fa1f f989 	uxth.w	r9, r9
 8016984:	ebab 0b09 	sub.w	fp, fp, r9
 8016988:	fbbb f2f3 	udiv	r2, fp, r3
 801698c:	fb03 b312 	mls	r3, r3, r2, fp
 8016990:	2b00      	cmp	r3, #0
 8016992:	f000 80c8 	beq.w	8016b26 <uxr_prepare_reliable_buffer_to_write+0x262>
 8016996:	3201      	adds	r2, #1
 8016998:	b292      	uxth	r2, r2
 801699a:	9306      	str	r3, [sp, #24]
 801699c:	4552      	cmp	r2, sl
 801699e:	f200 809c 	bhi.w	8016ada <uxr_prepare_reliable_buffer_to_write+0x216>
 80169a2:	f10d 0b20 	add.w	fp, sp, #32
 80169a6:	2a00      	cmp	r2, #0
 80169a8:	d042      	beq.n	8016a30 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80169aa:	f8cd 801c 	str.w	r8, [sp, #28]
 80169ae:	f04f 0a00 	mov.w	sl, #0
 80169b2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80169b6:	9505      	str	r5, [sp, #20]
 80169b8:	f10d 0b20 	add.w	fp, sp, #32
 80169bc:	4615      	mov	r5, r2
 80169be:	e000      	b.n	80169c2 <uxr_prepare_reliable_buffer_to_write+0xfe>
 80169c0:	46c1      	mov	r9, r8
 80169c2:	8920      	ldrh	r0, [r4, #8]
 80169c4:	fbb6 f2f0 	udiv	r2, r6, r0
 80169c8:	fb00 6112 	mls	r1, r0, r2, r6
 80169cc:	b28a      	uxth	r2, r1
 80169ce:	6863      	ldr	r3, [r4, #4]
 80169d0:	fbb3 f1f0 	udiv	r1, r3, r0
 80169d4:	6823      	ldr	r3, [r4, #0]
 80169d6:	fb02 f101 	mul.w	r1, r2, r1
 80169da:	3104      	adds	r1, #4
 80169dc:	4419      	add	r1, r3
 80169de:	4658      	mov	r0, fp
 80169e0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80169e4:	9200      	str	r2, [sp, #0]
 80169e6:	2300      	movs	r3, #0
 80169e8:	463a      	mov	r2, r7
 80169ea:	f7f7 ff5b 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 80169ee:	464a      	mov	r2, r9
 80169f0:	2300      	movs	r3, #0
 80169f2:	210d      	movs	r1, #13
 80169f4:	4658      	mov	r0, fp
 80169f6:	f7f9 fc2b 	bl	8010250 <uxr_buffer_submessage_header>
 80169fa:	8921      	ldrh	r1, [r4, #8]
 80169fc:	fbb6 f2f1 	udiv	r2, r6, r1
 8016a00:	fb01 6212 	mls	r2, r1, r2, r6
 8016a04:	b292      	uxth	r2, r2
 8016a06:	6863      	ldr	r3, [r4, #4]
 8016a08:	fbb3 f3f1 	udiv	r3, r3, r1
 8016a0c:	fb02 f303 	mul.w	r3, r2, r3
 8016a10:	6822      	ldr	r2, [r4, #0]
 8016a12:	4630      	mov	r0, r6
 8016a14:	50d7      	str	r7, [r2, r3]
 8016a16:	2101      	movs	r1, #1
 8016a18:	f000 faf4 	bl	8017004 <uxr_seq_num_add>
 8016a1c:	f10a 0a01 	add.w	sl, sl, #1
 8016a20:	fa1f f38a 	uxth.w	r3, sl
 8016a24:	429d      	cmp	r5, r3
 8016a26:	4606      	mov	r6, r0
 8016a28:	d8ca      	bhi.n	80169c0 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8016a2a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016a2e:	9d05      	ldr	r5, [sp, #20]
 8016a30:	8920      	ldrh	r0, [r4, #8]
 8016a32:	fbb6 f3f0 	udiv	r3, r6, r0
 8016a36:	fb00 6313 	mls	r3, r0, r3, r6
 8016a3a:	b299      	uxth	r1, r3
 8016a3c:	6863      	ldr	r3, [r4, #4]
 8016a3e:	fbb3 f3f0 	udiv	r3, r3, r0
 8016a42:	fb01 f303 	mul.w	r3, r1, r3
 8016a46:	6821      	ldr	r1, [r4, #0]
 8016a48:	3304      	adds	r3, #4
 8016a4a:	4419      	add	r1, r3
 8016a4c:	463a      	mov	r2, r7
 8016a4e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016a52:	9000      	str	r0, [sp, #0]
 8016a54:	2300      	movs	r3, #0
 8016a56:	4658      	mov	r0, fp
 8016a58:	f7f7 ff24 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 8016a5c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016a60:	4658      	mov	r0, fp
 8016a62:	fa1f f289 	uxth.w	r2, r9
 8016a66:	2302      	movs	r3, #2
 8016a68:	210d      	movs	r1, #13
 8016a6a:	f7f9 fbf1 	bl	8010250 <uxr_buffer_submessage_header>
 8016a6e:	9b03      	ldr	r3, [sp, #12]
 8016a70:	8927      	ldrh	r7, [r4, #8]
 8016a72:	7b20      	ldrb	r0, [r4, #12]
 8016a74:	f108 0104 	add.w	r1, r8, #4
 8016a78:	440b      	add	r3, r1
 8016a7a:	4619      	mov	r1, r3
 8016a7c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016a80:	fb07 6313 	mls	r3, r7, r3, r6
 8016a84:	f1a5 0208 	sub.w	r2, r5, #8
 8016a88:	b29d      	uxth	r5, r3
 8016a8a:	3004      	adds	r0, #4
 8016a8c:	6863      	ldr	r3, [r4, #4]
 8016a8e:	fbb3 f3f7 	udiv	r3, r3, r7
 8016a92:	fb05 f303 	mul.w	r3, r5, r3
 8016a96:	6825      	ldr	r5, [r4, #0]
 8016a98:	4448      	add	r0, r9
 8016a9a:	50e8      	str	r0, [r5, r3]
 8016a9c:	9d04      	ldr	r5, [sp, #16]
 8016a9e:	eba2 0208 	sub.w	r2, r2, r8
 8016aa2:	4628      	mov	r0, r5
 8016aa4:	f7f7 ff10 	bl	800e8c8 <ucdr_init_buffer>
 8016aa8:	4628      	mov	r0, r5
 8016aaa:	493c      	ldr	r1, [pc, #240]	@ (8016b9c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016aac:	4622      	mov	r2, r4
 8016aae:	f7f7 fedf 	bl	800e870 <ucdr_set_on_full_buffer_callback>
 8016ab2:	2001      	movs	r0, #1
 8016ab4:	81e6      	strh	r6, [r4, #14]
 8016ab6:	b011      	add	sp, #68	@ 0x44
 8016ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016abc:	2101      	movs	r1, #1
 8016abe:	89e0      	ldrh	r0, [r4, #14]
 8016ac0:	f000 faa0 	bl	8017004 <uxr_seq_num_add>
 8016ac4:	8921      	ldrh	r1, [r4, #8]
 8016ac6:	4605      	mov	r5, r0
 8016ac8:	8a60      	ldrh	r0, [r4, #18]
 8016aca:	f000 fa9b 	bl	8017004 <uxr_seq_num_add>
 8016ace:	4601      	mov	r1, r0
 8016ad0:	4628      	mov	r0, r5
 8016ad2:	f000 fa9f 	bl	8017014 <uxr_seq_num_cmp>
 8016ad6:	2800      	cmp	r0, #0
 8016ad8:	dd42      	ble.n	8016b60 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8016ada:	2000      	movs	r0, #0
 8016adc:	b011      	add	sp, #68	@ 0x44
 8016ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ae2:	8921      	ldrh	r1, [r4, #8]
 8016ae4:	8a60      	ldrh	r0, [r4, #18]
 8016ae6:	9205      	str	r2, [sp, #20]
 8016ae8:	f000 fa8c 	bl	8017004 <uxr_seq_num_add>
 8016aec:	4601      	mov	r1, r0
 8016aee:	4630      	mov	r0, r6
 8016af0:	f000 fa90 	bl	8017014 <uxr_seq_num_cmp>
 8016af4:	2800      	cmp	r0, #0
 8016af6:	9a05      	ldr	r2, [sp, #20]
 8016af8:	dcef      	bgt.n	8016ada <uxr_prepare_reliable_buffer_to_write+0x216>
 8016afa:	8927      	ldrh	r7, [r4, #8]
 8016afc:	fbb6 f3f7 	udiv	r3, r6, r7
 8016b00:	fb07 6313 	mls	r3, r7, r3, r6
 8016b04:	b29d      	uxth	r5, r3
 8016b06:	6863      	ldr	r3, [r4, #4]
 8016b08:	6824      	ldr	r4, [r4, #0]
 8016b0a:	fbb3 f3f7 	udiv	r3, r3, r7
 8016b0e:	fb05 f303 	mul.w	r3, r5, r3
 8016b12:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016b16:	50e2      	str	r2, [r4, r3]
 8016b18:	2300      	movs	r3, #0
 8016b1a:	f8cd 8000 	str.w	r8, [sp]
 8016b1e:	f7f7 fec1 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 8016b22:	2001      	movs	r0, #1
 8016b24:	e7da      	b.n	8016adc <uxr_prepare_reliable_buffer_to_write+0x218>
 8016b26:	b293      	uxth	r3, r2
 8016b28:	461a      	mov	r2, r3
 8016b2a:	e737      	b.n	801699c <uxr_prepare_reliable_buffer_to_write+0xd8>
 8016b2c:	4630      	mov	r0, r6
 8016b2e:	2101      	movs	r1, #1
 8016b30:	9207      	str	r2, [sp, #28]
 8016b32:	f000 fa67 	bl	8017004 <uxr_seq_num_add>
 8016b36:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016b3a:	fbb0 f1fc 	udiv	r1, r0, ip
 8016b3e:	fb0c 0111 	mls	r1, ip, r1, r0
 8016b42:	4606      	mov	r6, r0
 8016b44:	b288      	uxth	r0, r1
 8016b46:	6863      	ldr	r3, [r4, #4]
 8016b48:	fbb3 f1fc 	udiv	r1, r3, ip
 8016b4c:	6823      	ldr	r3, [r4, #0]
 8016b4e:	9a07      	ldr	r2, [sp, #28]
 8016b50:	fb00 f101 	mul.w	r1, r0, r1
 8016b54:	3104      	adds	r1, #4
 8016b56:	440b      	add	r3, r1
 8016b58:	9303      	str	r3, [sp, #12]
 8016b5a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8016b5e:	e70a      	b.n	8016976 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016b60:	8921      	ldrh	r1, [r4, #8]
 8016b62:	fbb5 f3f1 	udiv	r3, r5, r1
 8016b66:	fb01 5313 	mls	r3, r1, r3, r5
 8016b6a:	b29a      	uxth	r2, r3
 8016b6c:	6863      	ldr	r3, [r4, #4]
 8016b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016b72:	6821      	ldr	r1, [r4, #0]
 8016b74:	9804      	ldr	r0, [sp, #16]
 8016b76:	fb02 f303 	mul.w	r3, r2, r3
 8016b7a:	3304      	adds	r3, #4
 8016b7c:	7b22      	ldrb	r2, [r4, #12]
 8016b7e:	4419      	add	r1, r3
 8016b80:	445a      	add	r2, fp
 8016b82:	f841 2c04 	str.w	r2, [r1, #-4]
 8016b86:	7b23      	ldrb	r3, [r4, #12]
 8016b88:	9300      	str	r3, [sp, #0]
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	f7f7 fe8a 	bl	800e8a4 <ucdr_init_buffer_origin_offset>
 8016b90:	81e5      	strh	r5, [r4, #14]
 8016b92:	2001      	movs	r0, #1
 8016b94:	e7a2      	b.n	8016adc <uxr_prepare_reliable_buffer_to_write+0x218>
 8016b96:	4682      	mov	sl, r0
 8016b98:	e6ca      	b.n	8016930 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8016b9a:	bf00      	nop
 8016b9c:	080167a5 	.word	0x080167a5

08016ba0 <uxr_prepare_next_reliable_buffer_to_send>:
 8016ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ba2:	4604      	mov	r4, r0
 8016ba4:	460f      	mov	r7, r1
 8016ba6:	8a00      	ldrh	r0, [r0, #16]
 8016ba8:	2101      	movs	r1, #1
 8016baa:	4616      	mov	r6, r2
 8016bac:	461d      	mov	r5, r3
 8016bae:	f000 fa29 	bl	8017004 <uxr_seq_num_add>
 8016bb2:	8028      	strh	r0, [r5, #0]
 8016bb4:	8922      	ldrh	r2, [r4, #8]
 8016bb6:	fbb0 f3f2 	udiv	r3, r0, r2
 8016bba:	fb02 0c13 	mls	ip, r2, r3, r0
 8016bbe:	fa1f fc8c 	uxth.w	ip, ip
 8016bc2:	6863      	ldr	r3, [r4, #4]
 8016bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8016bc8:	fb0c fc03 	mul.w	ip, ip, r3
 8016bcc:	6823      	ldr	r3, [r4, #0]
 8016bce:	89e1      	ldrh	r1, [r4, #14]
 8016bd0:	f10c 0c04 	add.w	ip, ip, #4
 8016bd4:	4463      	add	r3, ip
 8016bd6:	603b      	str	r3, [r7, #0]
 8016bd8:	6823      	ldr	r3, [r4, #0]
 8016bda:	449c      	add	ip, r3
 8016bdc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016be0:	6033      	str	r3, [r6, #0]
 8016be2:	f000 fa17 	bl	8017014 <uxr_seq_num_cmp>
 8016be6:	2800      	cmp	r0, #0
 8016be8:	dd01      	ble.n	8016bee <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016bea:	2000      	movs	r0, #0
 8016bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bee:	7b23      	ldrb	r3, [r4, #12]
 8016bf0:	6832      	ldr	r2, [r6, #0]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d9f9      	bls.n	8016bea <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016bf6:	8a61      	ldrh	r1, [r4, #18]
 8016bf8:	8a20      	ldrh	r0, [r4, #16]
 8016bfa:	f000 fa07 	bl	801700c <uxr_seq_num_sub>
 8016bfe:	8923      	ldrh	r3, [r4, #8]
 8016c00:	4283      	cmp	r3, r0
 8016c02:	d0f2      	beq.n	8016bea <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016c04:	8828      	ldrh	r0, [r5, #0]
 8016c06:	89e3      	ldrh	r3, [r4, #14]
 8016c08:	8220      	strh	r0, [r4, #16]
 8016c0a:	4298      	cmp	r0, r3
 8016c0c:	d001      	beq.n	8016c12 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016c0e:	2001      	movs	r0, #1
 8016c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c12:	2101      	movs	r1, #1
 8016c14:	f000 f9f6 	bl	8017004 <uxr_seq_num_add>
 8016c18:	81e0      	strh	r0, [r4, #14]
 8016c1a:	2001      	movs	r0, #1
 8016c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c1e:	bf00      	nop

08016c20 <uxr_update_output_stream_heartbeat_timestamp>:
 8016c20:	b570      	push	{r4, r5, r6, lr}
 8016c22:	8a01      	ldrh	r1, [r0, #16]
 8016c24:	4604      	mov	r4, r0
 8016c26:	8a40      	ldrh	r0, [r0, #18]
 8016c28:	4615      	mov	r5, r2
 8016c2a:	461e      	mov	r6, r3
 8016c2c:	f000 f9f2 	bl	8017014 <uxr_seq_num_cmp>
 8016c30:	2800      	cmp	r0, #0
 8016c32:	db07      	blt.n	8016c44 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016c34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016c38:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016c3c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016c40:	2000      	movs	r0, #0
 8016c42:	bd70      	pop	{r4, r5, r6, pc}
 8016c44:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016c48:	b940      	cbnz	r0, 8016c5c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016c4a:	2301      	movs	r3, #1
 8016c4c:	f884 3020 	strb.w	r3, [r4, #32]
 8016c50:	3564      	adds	r5, #100	@ 0x64
 8016c52:	f146 0600 	adc.w	r6, r6, #0
 8016c56:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016c5a:	bd70      	pop	{r4, r5, r6, pc}
 8016c5c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016c60:	4295      	cmp	r5, r2
 8016c62:	eb76 0303 	sbcs.w	r3, r6, r3
 8016c66:	bfa5      	ittet	ge
 8016c68:	3001      	addge	r0, #1
 8016c6a:	f884 0020 	strbge.w	r0, [r4, #32]
 8016c6e:	2000      	movlt	r0, #0
 8016c70:	2001      	movge	r0, #1
 8016c72:	e7ed      	b.n	8016c50 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016c74 <uxr_begin_output_nack_buffer_it>:
 8016c74:	8a40      	ldrh	r0, [r0, #18]
 8016c76:	4770      	bx	lr

08016c78 <uxr_next_reliable_nack_buffer_to_send>:
 8016c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c7c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016c80:	b082      	sub	sp, #8
 8016c82:	f1b8 0f00 	cmp.w	r8, #0
 8016c86:	d011      	beq.n	8016cac <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016c88:	4604      	mov	r4, r0
 8016c8a:	8818      	ldrh	r0, [r3, #0]
 8016c8c:	460e      	mov	r6, r1
 8016c8e:	4617      	mov	r7, r2
 8016c90:	461d      	mov	r5, r3
 8016c92:	2101      	movs	r1, #1
 8016c94:	f000 f9b6 	bl	8017004 <uxr_seq_num_add>
 8016c98:	8028      	strh	r0, [r5, #0]
 8016c9a:	8a21      	ldrh	r1, [r4, #16]
 8016c9c:	f000 f9ba 	bl	8017014 <uxr_seq_num_cmp>
 8016ca0:	2800      	cmp	r0, #0
 8016ca2:	dd07      	ble.n	8016cb4 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016ca4:	f04f 0800 	mov.w	r8, #0
 8016ca8:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016cac:	4640      	mov	r0, r8
 8016cae:	b002      	add	sp, #8
 8016cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cb4:	8921      	ldrh	r1, [r4, #8]
 8016cb6:	8828      	ldrh	r0, [r5, #0]
 8016cb8:	6823      	ldr	r3, [r4, #0]
 8016cba:	fbb0 f2f1 	udiv	r2, r0, r1
 8016cbe:	fb01 0c12 	mls	ip, r1, r2, r0
 8016cc2:	fa1f f28c 	uxth.w	r2, ip
 8016cc6:	9301      	str	r3, [sp, #4]
 8016cc8:	6863      	ldr	r3, [r4, #4]
 8016cca:	fbb3 fcf1 	udiv	ip, r3, r1
 8016cce:	9b01      	ldr	r3, [sp, #4]
 8016cd0:	fb02 fc0c 	mul.w	ip, r2, ip
 8016cd4:	f10c 0c04 	add.w	ip, ip, #4
 8016cd8:	4463      	add	r3, ip
 8016cda:	6033      	str	r3, [r6, #0]
 8016cdc:	6823      	ldr	r3, [r4, #0]
 8016cde:	4463      	add	r3, ip
 8016ce0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016ce4:	603b      	str	r3, [r7, #0]
 8016ce6:	7b22      	ldrb	r2, [r4, #12]
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	d0d2      	beq.n	8016c92 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016cec:	4640      	mov	r0, r8
 8016cee:	b002      	add	sp, #8
 8016cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016cf4 <uxr_process_acknack>:
 8016cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	460e      	mov	r6, r1
 8016cfa:	4610      	mov	r0, r2
 8016cfc:	2101      	movs	r1, #1
 8016cfe:	f000 f985 	bl	801700c <uxr_seq_num_sub>
 8016d02:	8a61      	ldrh	r1, [r4, #18]
 8016d04:	f000 f982 	bl	801700c <uxr_seq_num_sub>
 8016d08:	b1c0      	cbz	r0, 8016d3c <uxr_process_acknack+0x48>
 8016d0a:	4605      	mov	r5, r0
 8016d0c:	2700      	movs	r7, #0
 8016d0e:	2101      	movs	r1, #1
 8016d10:	8a60      	ldrh	r0, [r4, #18]
 8016d12:	f000 f977 	bl	8017004 <uxr_seq_num_add>
 8016d16:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016d1a:	fbb0 f1fc 	udiv	r1, r0, ip
 8016d1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016d22:	fb0c 0111 	mls	r1, ip, r1, r0
 8016d26:	b289      	uxth	r1, r1
 8016d28:	3701      	adds	r7, #1
 8016d2a:	fbb3 f3fc 	udiv	r3, r3, ip
 8016d2e:	fb01 f303 	mul.w	r3, r1, r3
 8016d32:	42bd      	cmp	r5, r7
 8016d34:	7b21      	ldrb	r1, [r4, #12]
 8016d36:	8260      	strh	r0, [r4, #18]
 8016d38:	50d1      	str	r1, [r2, r3]
 8016d3a:	d1e8      	bne.n	8016d0e <uxr_process_acknack+0x1a>
 8016d3c:	3e00      	subs	r6, #0
 8016d3e:	f04f 0300 	mov.w	r3, #0
 8016d42:	bf18      	it	ne
 8016d44:	2601      	movne	r6, #1
 8016d46:	f884 3020 	strb.w	r3, [r4, #32]
 8016d4a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016d50 <uxr_is_output_up_to_date>:
 8016d50:	8a01      	ldrh	r1, [r0, #16]
 8016d52:	8a40      	ldrh	r0, [r0, #18]
 8016d54:	b508      	push	{r3, lr}
 8016d56:	f000 f95d 	bl	8017014 <uxr_seq_num_cmp>
 8016d5a:	fab0 f080 	clz	r0, r0
 8016d5e:	0940      	lsrs	r0, r0, #5
 8016d60:	bd08      	pop	{r3, pc}
 8016d62:	bf00      	nop

08016d64 <get_available_free_slots>:
 8016d64:	8902      	ldrh	r2, [r0, #8]
 8016d66:	b1da      	cbz	r2, 8016da0 <get_available_free_slots+0x3c>
 8016d68:	b530      	push	{r4, r5, lr}
 8016d6a:	2100      	movs	r1, #0
 8016d6c:	6843      	ldr	r3, [r0, #4]
 8016d6e:	6805      	ldr	r5, [r0, #0]
 8016d70:	7b04      	ldrb	r4, [r0, #12]
 8016d72:	fbb3 fef2 	udiv	lr, r3, r2
 8016d76:	4608      	mov	r0, r1
 8016d78:	460b      	mov	r3, r1
 8016d7a:	fbb3 fcf2 	udiv	ip, r3, r2
 8016d7e:	fb02 331c 	mls	r3, r2, ip, r3
 8016d82:	b29b      	uxth	r3, r3
 8016d84:	fb0e f303 	mul.w	r3, lr, r3
 8016d88:	3101      	adds	r1, #1
 8016d8a:	f855 c003 	ldr.w	ip, [r5, r3]
 8016d8e:	4564      	cmp	r4, ip
 8016d90:	bf08      	it	eq
 8016d92:	3001      	addeq	r0, #1
 8016d94:	b28b      	uxth	r3, r1
 8016d96:	bf08      	it	eq
 8016d98:	b280      	uxtheq	r0, r0
 8016d9a:	4293      	cmp	r3, r2
 8016d9c:	d3ed      	bcc.n	8016d7a <get_available_free_slots+0x16>
 8016d9e:	bd30      	pop	{r4, r5, pc}
 8016da0:	4610      	mov	r0, r2
 8016da2:	4770      	bx	lr

08016da4 <uxr_buffer_request_data>:
 8016da4:	b530      	push	{r4, r5, lr}
 8016da6:	b095      	sub	sp, #84	@ 0x54
 8016da8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8016dac:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8016dae:	9303      	str	r3, [sp, #12]
 8016db0:	2200      	movs	r2, #0
 8016db2:	2d00      	cmp	r5, #0
 8016db4:	bf14      	ite	ne
 8016db6:	2101      	movne	r1, #1
 8016db8:	4611      	moveq	r1, r2
 8016dba:	4604      	mov	r4, r0
 8016dbc:	f88d 301c 	strb.w	r3, [sp, #28]
 8016dc0:	f88d 201d 	strb.w	r2, [sp, #29]
 8016dc4:	f88d 201e 	strb.w	r2, [sp, #30]
 8016dc8:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8016dcc:	d021      	beq.n	8016e12 <uxr_buffer_request_data+0x6e>
 8016dce:	682a      	ldr	r2, [r5, #0]
 8016dd0:	686b      	ldr	r3, [r5, #4]
 8016dd2:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8016dd6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8016dda:	2210      	movs	r2, #16
 8016ddc:	2308      	movs	r3, #8
 8016dde:	2100      	movs	r1, #0
 8016de0:	e9cd 3100 	strd	r3, r1, [sp]
 8016de4:	4620      	mov	r0, r4
 8016de6:	9905      	ldr	r1, [sp, #20]
 8016de8:	ab0c      	add	r3, sp, #48	@ 0x30
 8016dea:	f7f8 ff93 	bl	800fd14 <uxr_prepare_stream_to_write_submessage>
 8016dee:	b918      	cbnz	r0, 8016df8 <uxr_buffer_request_data+0x54>
 8016df0:	4604      	mov	r4, r0
 8016df2:	4620      	mov	r0, r4
 8016df4:	b015      	add	sp, #84	@ 0x54
 8016df6:	bd30      	pop	{r4, r5, pc}
 8016df8:	9904      	ldr	r1, [sp, #16]
 8016dfa:	aa06      	add	r2, sp, #24
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	f7f9 f8bf 	bl	800ff80 <uxr_init_base_object_request>
 8016e02:	a906      	add	r1, sp, #24
 8016e04:	4604      	mov	r4, r0
 8016e06:	a80c      	add	r0, sp, #48	@ 0x30
 8016e08:	f7fa fbba 	bl	8011580 <uxr_serialize_READ_DATA_Payload>
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	b015      	add	sp, #84	@ 0x54
 8016e10:	bd30      	pop	{r4, r5, pc}
 8016e12:	2208      	movs	r2, #8
 8016e14:	e7e2      	b.n	8016ddc <uxr_buffer_request_data+0x38>
 8016e16:	bf00      	nop

08016e18 <uxr_buffer_cancel_data>:
 8016e18:	b510      	push	{r4, lr}
 8016e1a:	b094      	sub	sp, #80	@ 0x50
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	9202      	str	r2, [sp, #8]
 8016e20:	9205      	str	r2, [sp, #20]
 8016e22:	9301      	str	r3, [sp, #4]
 8016e24:	2201      	movs	r2, #1
 8016e26:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016e2a:	f88d 301e 	strb.w	r3, [sp, #30]
 8016e2e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8016e32:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8016e36:	2308      	movs	r3, #8
 8016e38:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8016e3c:	9300      	str	r3, [sp, #0]
 8016e3e:	2210      	movs	r2, #16
 8016e40:	ab0c      	add	r3, sp, #48	@ 0x30
 8016e42:	4604      	mov	r4, r0
 8016e44:	9103      	str	r1, [sp, #12]
 8016e46:	f7f8 ff65 	bl	800fd14 <uxr_prepare_stream_to_write_submessage>
 8016e4a:	b918      	cbnz	r0, 8016e54 <uxr_buffer_cancel_data+0x3c>
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	4620      	mov	r0, r4
 8016e50:	b014      	add	sp, #80	@ 0x50
 8016e52:	bd10      	pop	{r4, pc}
 8016e54:	9905      	ldr	r1, [sp, #20]
 8016e56:	aa06      	add	r2, sp, #24
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f7f9 f891 	bl	800ff80 <uxr_init_base_object_request>
 8016e5e:	a906      	add	r1, sp, #24
 8016e60:	4604      	mov	r4, r0
 8016e62:	a80c      	add	r0, sp, #48	@ 0x30
 8016e64:	f7fa fb8c 	bl	8011580 <uxr_serialize_READ_DATA_Payload>
 8016e68:	4620      	mov	r0, r4
 8016e6a:	b014      	add	sp, #80	@ 0x50
 8016e6c:	bd10      	pop	{r4, pc}
 8016e6e:	bf00      	nop

08016e70 <read_submessage_format>:
 8016e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e74:	b095      	sub	sp, #84	@ 0x54
 8016e76:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8016e7a:	b113      	cbz	r3, 8016e82 <read_submessage_format+0x12>
 8016e7c:	b015      	add	sp, #84	@ 0x54
 8016e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e82:	460c      	mov	r4, r1
 8016e84:	4615      	mov	r5, r2
 8016e86:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016e8a:	4607      	mov	r7, r0
 8016e8c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8016e8e:	9004      	str	r0, [sp, #16]
 8016e90:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8016e92:	9005      	str	r0, [sp, #20]
 8016e94:	1a52      	subs	r2, r2, r1
 8016e96:	a80c      	add	r0, sp, #48	@ 0x30
 8016e98:	4699      	mov	r9, r3
 8016e9a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8016e9e:	f7f7 fd13 	bl	800e8c8 <ucdr_init_buffer>
 8016ea2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016ea6:	a80c      	add	r0, sp, #48	@ 0x30
 8016ea8:	f7f7 fce2 	bl	800e870 <ucdr_set_on_full_buffer_callback>
 8016eac:	69e2      	ldr	r2, [r4, #28]
 8016eae:	b19a      	cbz	r2, 8016ed8 <read_submessage_format+0x68>
 8016eb0:	f1b8 0f07 	cmp.w	r8, #7
 8016eb4:	f882 9014 	strb.w	r9, [r2, #20]
 8016eb8:	d040      	beq.n	8016f3c <read_submessage_format+0xcc>
 8016eba:	f1b8 0f08 	cmp.w	r8, #8
 8016ebe:	d02e      	beq.n	8016f1e <read_submessage_format+0xae>
 8016ec0:	f1b8 0f06 	cmp.w	r8, #6
 8016ec4:	d011      	beq.n	8016eea <read_submessage_format+0x7a>
 8016ec6:	2301      	movs	r3, #1
 8016ec8:	7513      	strb	r3, [r2, #20]
 8016eca:	4629      	mov	r1, r5
 8016ecc:	4620      	mov	r0, r4
 8016ece:	f7f7 fd4b 	bl	800e968 <ucdr_advance_buffer>
 8016ed2:	b015      	add	sp, #84	@ 0x54
 8016ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ed8:	f1b8 0f07 	cmp.w	r8, #7
 8016edc:	d02e      	beq.n	8016f3c <read_submessage_format+0xcc>
 8016ede:	f1b8 0f08 	cmp.w	r8, #8
 8016ee2:	d01c      	beq.n	8016f1e <read_submessage_format+0xae>
 8016ee4:	f1b8 0f06 	cmp.w	r8, #6
 8016ee8:	d1ef      	bne.n	8016eca <read_submessage_format+0x5a>
 8016eea:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8016eee:	f1b8 0f00 	cmp.w	r8, #0
 8016ef2:	d011      	beq.n	8016f18 <read_submessage_format+0xa8>
 8016ef4:	ab0c      	add	r3, sp, #48	@ 0x30
 8016ef6:	e9cd 3500 	strd	r3, r5, [sp]
 8016efa:	2306      	movs	r3, #6
 8016efc:	f88d 3016 	strb.w	r3, [sp, #22]
 8016f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016f04:	9302      	str	r3, [sp, #8]
 8016f06:	4632      	mov	r2, r6
 8016f08:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016f0c:	4638      	mov	r0, r7
 8016f0e:	47c0      	blx	r8
 8016f10:	2301      	movs	r3, #1
 8016f12:	69e2      	ldr	r2, [r4, #28]
 8016f14:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8016f18:	2a00      	cmp	r2, #0
 8016f1a:	d1d4      	bne.n	8016ec6 <read_submessage_format+0x56>
 8016f1c:	e7d5      	b.n	8016eca <read_submessage_format+0x5a>
 8016f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d0f8      	beq.n	8016f18 <read_submessage_format+0xa8>
 8016f26:	a906      	add	r1, sp, #24
 8016f28:	a80c      	add	r0, sp, #48	@ 0x30
 8016f2a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8016f2e:	f7fa fbed 	bl	801170c <uxr_deserialize_SampleIdentity>
 8016f32:	b9a0      	cbnz	r0, 8016f5e <read_submessage_format+0xee>
 8016f34:	69e2      	ldr	r2, [r4, #28]
 8016f36:	2a00      	cmp	r2, #0
 8016f38:	d1c5      	bne.n	8016ec6 <read_submessage_format+0x56>
 8016f3a:	e7c6      	b.n	8016eca <read_submessage_format+0x5a>
 8016f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016f40:	b13b      	cbz	r3, 8016f52 <read_submessage_format+0xe2>
 8016f42:	a906      	add	r1, sp, #24
 8016f44:	a80c      	add	r0, sp, #48	@ 0x30
 8016f46:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8016f4a:	f7fa f8b3 	bl	80110b4 <uxr_deserialize_BaseObjectRequest>
 8016f4e:	bb60      	cbnz	r0, 8016faa <read_submessage_format+0x13a>
 8016f50:	69e2      	ldr	r2, [r4, #28]
 8016f52:	68a3      	ldr	r3, [r4, #8]
 8016f54:	442b      	add	r3, r5
 8016f56:	60a3      	str	r3, [r4, #8]
 8016f58:	2a00      	cmp	r2, #0
 8016f5a:	d1b4      	bne.n	8016ec6 <read_submessage_format+0x56>
 8016f5c:	e7b5      	b.n	8016eca <read_submessage_format+0x5a>
 8016f5e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016f62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016f64:	1a52      	subs	r2, r2, r1
 8016f66:	eba8 0803 	sub.w	r8, r8, r3
 8016f6a:	a80c      	add	r0, sp, #48	@ 0x30
 8016f6c:	f7f7 fcac 	bl	800e8c8 <ucdr_init_buffer>
 8016f70:	44a8      	add	r8, r5
 8016f72:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016f76:	a80c      	add	r0, sp, #48	@ 0x30
 8016f78:	f7f7 fc7a 	bl	800e870 <ucdr_set_on_full_buffer_callback>
 8016f7c:	fa1f f888 	uxth.w	r8, r8
 8016f80:	ab0c      	add	r3, sp, #48	@ 0x30
 8016f82:	9300      	str	r3, [sp, #0]
 8016f84:	f8cd 8004 	str.w	r8, [sp, #4]
 8016f88:	2108      	movs	r1, #8
 8016f8a:	f88d 1016 	strb.w	r1, [sp, #22]
 8016f8e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8016f92:	9102      	str	r1, [sp, #8]
 8016f94:	ab06      	add	r3, sp, #24
 8016f96:	4632      	mov	r2, r6
 8016f98:	9905      	ldr	r1, [sp, #20]
 8016f9a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8016f9e:	4638      	mov	r0, r7
 8016fa0:	47b0      	blx	r6
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8016fa8:	e7c4      	b.n	8016f34 <read_submessage_format+0xc4>
 8016faa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016fae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016fb0:	1a52      	subs	r2, r2, r1
 8016fb2:	a80c      	add	r0, sp, #48	@ 0x30
 8016fb4:	eba8 0803 	sub.w	r8, r8, r3
 8016fb8:	f7f7 fc86 	bl	800e8c8 <ucdr_init_buffer>
 8016fbc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016fc0:	a80c      	add	r0, sp, #48	@ 0x30
 8016fc2:	f7f7 fc55 	bl	800e870 <ucdr_set_on_full_buffer_callback>
 8016fc6:	ab0c      	add	r3, sp, #48	@ 0x30
 8016fc8:	9300      	str	r3, [sp, #0]
 8016fca:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8016fce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016fd2:	44a8      	add	r8, r5
 8016fd4:	fa1f f888 	uxth.w	r8, r8
 8016fd8:	f8cd 8004 	str.w	r8, [sp, #4]
 8016fdc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016fe0:	2107      	movs	r1, #7
 8016fe2:	f88d 1016 	strb.w	r1, [sp, #22]
 8016fe6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8016fea:	9102      	str	r1, [sp, #8]
 8016fec:	4632      	mov	r2, r6
 8016fee:	b29b      	uxth	r3, r3
 8016ff0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8016ff4:	9905      	ldr	r1, [sp, #20]
 8016ff6:	4638      	mov	r0, r7
 8016ff8:	47b0      	blx	r6
 8016ffa:	2301      	movs	r3, #1
 8016ffc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017000:	e7a6      	b.n	8016f50 <read_submessage_format+0xe0>
 8017002:	bf00      	nop

08017004 <uxr_seq_num_add>:
 8017004:	4408      	add	r0, r1
 8017006:	b280      	uxth	r0, r0
 8017008:	4770      	bx	lr
 801700a:	bf00      	nop

0801700c <uxr_seq_num_sub>:
 801700c:	1a40      	subs	r0, r0, r1
 801700e:	b280      	uxth	r0, r0
 8017010:	4770      	bx	lr
 8017012:	bf00      	nop

08017014 <uxr_seq_num_cmp>:
 8017014:	4288      	cmp	r0, r1
 8017016:	d011      	beq.n	801703c <uxr_seq_num_cmp+0x28>
 8017018:	d309      	bcc.n	801702e <uxr_seq_num_cmp+0x1a>
 801701a:	4288      	cmp	r0, r1
 801701c:	d910      	bls.n	8017040 <uxr_seq_num_cmp+0x2c>
 801701e:	1a40      	subs	r0, r0, r1
 8017020:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8017024:	bfd4      	ite	le
 8017026:	2001      	movle	r0, #1
 8017028:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801702c:	4770      	bx	lr
 801702e:	1a0b      	subs	r3, r1, r0
 8017030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017034:	daf1      	bge.n	801701a <uxr_seq_num_cmp+0x6>
 8017036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801703a:	4770      	bx	lr
 801703c:	2000      	movs	r0, #0
 801703e:	4770      	bx	lr
 8017040:	2001      	movs	r0, #1
 8017042:	4770      	bx	lr

08017044 <uxr_init_framing_io>:
 8017044:	2300      	movs	r3, #0
 8017046:	7041      	strb	r1, [r0, #1]
 8017048:	7003      	strb	r3, [r0, #0]
 801704a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801704c:	4770      	bx	lr
 801704e:	bf00      	nop

08017050 <uxr_write_framed_msg>:
 8017050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017054:	4617      	mov	r7, r2
 8017056:	7842      	ldrb	r2, [r0, #1]
 8017058:	b083      	sub	sp, #12
 801705a:	460e      	mov	r6, r1
 801705c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8017060:	469a      	mov	sl, r3
 8017062:	2901      	cmp	r1, #1
 8017064:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8017068:	4604      	mov	r4, r0
 801706a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801706e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8017072:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8017076:	f240 8137 	bls.w	80172e8 <uxr_write_framed_msg+0x298>
 801707a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801707e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8017082:	2901      	cmp	r1, #1
 8017084:	f04f 0202 	mov.w	r2, #2
 8017088:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801708c:	f240 808f 	bls.w	80171ae <uxr_write_framed_msg+0x15e>
 8017090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017092:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8017096:	b2dd      	uxtb	r5, r3
 8017098:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801709c:	2203      	movs	r2, #3
 801709e:	2901      	cmp	r1, #1
 80170a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80170a4:	f240 809a 	bls.w	80171dc <uxr_write_framed_msg+0x18c>
 80170a8:	18a1      	adds	r1, r4, r2
 80170aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80170ac:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80170b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80170b4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80170b8:	3201      	adds	r2, #1
 80170ba:	2801      	cmp	r0, #1
 80170bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80170c0:	f240 80a0 	bls.w	8017204 <uxr_write_framed_msg+0x1b4>
 80170c4:	18a0      	adds	r0, r4, r2
 80170c6:	3201      	adds	r2, #1
 80170c8:	b2d2      	uxtb	r2, r2
 80170ca:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80170ce:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	f000 80a9 	beq.w	801722a <uxr_write_framed_msg+0x1da>
 80170d8:	f04f 0900 	mov.w	r9, #0
 80170dc:	46c8      	mov	r8, r9
 80170de:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80170e2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80170e6:	2901      	cmp	r1, #1
 80170e8:	f240 80c3 	bls.w	8017272 <uxr_write_framed_msg+0x222>
 80170ec:	2a29      	cmp	r2, #41	@ 0x29
 80170ee:	f200 809f 	bhi.w	8017230 <uxr_write_framed_msg+0x1e0>
 80170f2:	18a1      	adds	r1, r4, r2
 80170f4:	3201      	adds	r2, #1
 80170f6:	b2d2      	uxtb	r2, r2
 80170f8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80170fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017100:	ea89 0303 	eor.w	r3, r9, r3
 8017104:	498c      	ldr	r1, [pc, #560]	@ (8017338 <uxr_write_framed_msg+0x2e8>)
 8017106:	b2db      	uxtb	r3, r3
 8017108:	f108 0801 	add.w	r8, r8, #1
 801710c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017110:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8017114:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017116:	4543      	cmp	r3, r8
 8017118:	d8e1      	bhi.n	80170de <uxr_write_framed_msg+0x8e>
 801711a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801711e:	fa5f f889 	uxtb.w	r8, r9
 8017122:	9301      	str	r3, [sp, #4]
 8017124:	f04f 0900 	mov.w	r9, #0
 8017128:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 801712c:	fa5f f18a 	uxtb.w	r1, sl
 8017130:	2901      	cmp	r1, #1
 8017132:	d921      	bls.n	8017178 <uxr_write_framed_msg+0x128>
 8017134:	2a29      	cmp	r2, #41	@ 0x29
 8017136:	f240 80af 	bls.w	8017298 <uxr_write_framed_msg+0x248>
 801713a:	2500      	movs	r5, #0
 801713c:	e000      	b.n	8017140 <uxr_write_framed_msg+0xf0>
 801713e:	b160      	cbz	r0, 801715a <uxr_write_framed_msg+0x10a>
 8017140:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017144:	1b52      	subs	r2, r2, r5
 8017146:	465b      	mov	r3, fp
 8017148:	4421      	add	r1, r4
 801714a:	4638      	mov	r0, r7
 801714c:	47b0      	blx	r6
 801714e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017152:	4405      	add	r5, r0
 8017154:	4295      	cmp	r5, r2
 8017156:	d3f2      	bcc.n	801713e <uxr_write_framed_msg+0xee>
 8017158:	d003      	beq.n	8017162 <uxr_write_framed_msg+0x112>
 801715a:	2000      	movs	r0, #0
 801715c:	b003      	add	sp, #12
 801715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017162:	fa5f f18a 	uxtb.w	r1, sl
 8017166:	f04f 0300 	mov.w	r3, #0
 801716a:	2901      	cmp	r1, #1
 801716c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017170:	f04f 0200 	mov.w	r2, #0
 8017174:	f200 8090 	bhi.w	8017298 <uxr_write_framed_msg+0x248>
 8017178:	1c51      	adds	r1, r2, #1
 801717a:	b2c9      	uxtb	r1, r1
 801717c:	2929      	cmp	r1, #41	@ 0x29
 801717e:	d8dc      	bhi.n	801713a <uxr_write_framed_msg+0xea>
 8017180:	18a5      	adds	r5, r4, r2
 8017182:	4421      	add	r1, r4
 8017184:	3202      	adds	r2, #2
 8017186:	f088 0820 	eor.w	r8, r8, #32
 801718a:	4648      	mov	r0, r9
 801718c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8017190:	b2d2      	uxtb	r2, r2
 8017192:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8017196:	f04f 0901 	mov.w	r9, #1
 801719a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801719e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80171a2:	2800      	cmp	r0, #0
 80171a4:	f040 8085 	bne.w	80172b2 <uxr_write_framed_msg+0x262>
 80171a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80171ac:	e7bc      	b.n	8017128 <uxr_write_framed_msg+0xd8>
 80171ae:	4611      	mov	r1, r2
 80171b0:	f04f 0c03 	mov.w	ip, #3
 80171b4:	2204      	movs	r2, #4
 80171b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80171b8:	4421      	add	r1, r4
 80171ba:	b2dd      	uxtb	r5, r3
 80171bc:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80171c0:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80171c4:	44a4      	add	ip, r4
 80171c6:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80171ca:	f080 0020 	eor.w	r0, r0, #32
 80171ce:	2901      	cmp	r1, #1
 80171d0:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80171d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80171d8:	f63f af66 	bhi.w	80170a8 <uxr_write_framed_msg+0x58>
 80171dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80171de:	18a0      	adds	r0, r4, r2
 80171e0:	f085 0520 	eor.w	r5, r5, #32
 80171e4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80171e8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80171ec:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80171f0:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80171f4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80171f8:	3202      	adds	r2, #2
 80171fa:	2801      	cmp	r0, #1
 80171fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017200:	f63f af60 	bhi.w	80170c4 <uxr_write_framed_msg+0x74>
 8017204:	1c50      	adds	r0, r2, #1
 8017206:	18a5      	adds	r5, r4, r2
 8017208:	fa54 f080 	uxtab	r0, r4, r0
 801720c:	3202      	adds	r2, #2
 801720e:	f081 0120 	eor.w	r1, r1, #32
 8017212:	b2d2      	uxtb	r2, r2
 8017214:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017218:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 801721c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017220:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017224:	2b00      	cmp	r3, #0
 8017226:	f47f af57 	bne.w	80170d8 <uxr_write_framed_msg+0x88>
 801722a:	9301      	str	r3, [sp, #4]
 801722c:	4698      	mov	r8, r3
 801722e:	e779      	b.n	8017124 <uxr_write_framed_msg+0xd4>
 8017230:	2500      	movs	r5, #0
 8017232:	e001      	b.n	8017238 <uxr_write_framed_msg+0x1e8>
 8017234:	2800      	cmp	r0, #0
 8017236:	d090      	beq.n	801715a <uxr_write_framed_msg+0x10a>
 8017238:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801723c:	1b52      	subs	r2, r2, r5
 801723e:	465b      	mov	r3, fp
 8017240:	4421      	add	r1, r4
 8017242:	4638      	mov	r0, r7
 8017244:	47b0      	blx	r6
 8017246:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801724a:	4405      	add	r5, r0
 801724c:	4295      	cmp	r5, r2
 801724e:	d3f1      	bcc.n	8017234 <uxr_write_framed_msg+0x1e4>
 8017250:	d183      	bne.n	801715a <uxr_write_framed_msg+0x10a>
 8017252:	f04f 0300 	mov.w	r3, #0
 8017256:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801725a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801725c:	4543      	cmp	r3, r8
 801725e:	d964      	bls.n	801732a <uxr_write_framed_msg+0x2da>
 8017260:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8017264:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8017268:	2901      	cmp	r1, #1
 801726a:	f04f 0200 	mov.w	r2, #0
 801726e:	f63f af3d 	bhi.w	80170ec <uxr_write_framed_msg+0x9c>
 8017272:	1c51      	adds	r1, r2, #1
 8017274:	b2c9      	uxtb	r1, r1
 8017276:	2929      	cmp	r1, #41	@ 0x29
 8017278:	d8da      	bhi.n	8017230 <uxr_write_framed_msg+0x1e0>
 801727a:	18a0      	adds	r0, r4, r2
 801727c:	4421      	add	r1, r4
 801727e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8017282:	3202      	adds	r2, #2
 8017284:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8017288:	b2d2      	uxtb	r2, r2
 801728a:	f083 0020 	eor.w	r0, r3, #32
 801728e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8017292:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017296:	e733      	b.n	8017100 <uxr_write_framed_msg+0xb0>
 8017298:	18a1      	adds	r1, r4, r2
 801729a:	3201      	adds	r2, #1
 801729c:	4648      	mov	r0, r9
 801729e:	b2d2      	uxtb	r2, r2
 80172a0:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80172a4:	f04f 0901 	mov.w	r9, #1
 80172a8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80172ac:	2800      	cmp	r0, #0
 80172ae:	f43f af7b 	beq.w	80171a8 <uxr_write_framed_msg+0x158>
 80172b2:	2500      	movs	r5, #0
 80172b4:	e002      	b.n	80172bc <uxr_write_framed_msg+0x26c>
 80172b6:	2800      	cmp	r0, #0
 80172b8:	f43f af4f 	beq.w	801715a <uxr_write_framed_msg+0x10a>
 80172bc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80172c0:	1b52      	subs	r2, r2, r5
 80172c2:	465b      	mov	r3, fp
 80172c4:	4421      	add	r1, r4
 80172c6:	4638      	mov	r0, r7
 80172c8:	47b0      	blx	r6
 80172ca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80172ce:	4405      	add	r5, r0
 80172d0:	4295      	cmp	r5, r2
 80172d2:	d3f0      	bcc.n	80172b6 <uxr_write_framed_msg+0x266>
 80172d4:	f47f af41 	bne.w	801715a <uxr_write_framed_msg+0x10a>
 80172d8:	2300      	movs	r3, #0
 80172da:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80172de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80172e0:	b298      	uxth	r0, r3
 80172e2:	b003      	add	sp, #12
 80172e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172e8:	217d      	movs	r1, #125	@ 0x7d
 80172ea:	f082 0220 	eor.w	r2, r2, #32
 80172ee:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80172f2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80172f6:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80172fa:	2901      	cmp	r1, #1
 80172fc:	f04f 0203 	mov.w	r2, #3
 8017300:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017304:	d804      	bhi.n	8017310 <uxr_write_framed_msg+0x2c0>
 8017306:	4611      	mov	r1, r2
 8017308:	f04f 0c04 	mov.w	ip, #4
 801730c:	2205      	movs	r2, #5
 801730e:	e752      	b.n	80171b6 <uxr_write_framed_msg+0x166>
 8017310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017312:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8017316:	b2dd      	uxtb	r5, r3
 8017318:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801731c:	2204      	movs	r2, #4
 801731e:	2901      	cmp	r1, #1
 8017320:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017324:	f63f aec0 	bhi.w	80170a8 <uxr_write_framed_msg+0x58>
 8017328:	e758      	b.n	80171dc <uxr_write_framed_msg+0x18c>
 801732a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801732e:	fa5f f889 	uxtb.w	r8, r9
 8017332:	9301      	str	r3, [sp, #4]
 8017334:	2200      	movs	r2, #0
 8017336:	e6f5      	b.n	8017124 <uxr_write_framed_msg+0xd4>
 8017338:	0801aff8 	.word	0x0801aff8

0801733c <uxr_framing_read_transport>:
 801733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017340:	4604      	mov	r4, r0
 8017342:	b083      	sub	sp, #12
 8017344:	461f      	mov	r7, r3
 8017346:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801734a:	4689      	mov	r9, r1
 801734c:	4692      	mov	sl, r2
 801734e:	f7f8 ffc5 	bl	80102dc <uxr_millis>
 8017352:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017356:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801735a:	42b3      	cmp	r3, r6
 801735c:	4680      	mov	r8, r0
 801735e:	d061      	beq.n	8017424 <uxr_framing_read_transport+0xe8>
 8017360:	d81c      	bhi.n	801739c <uxr_framing_read_transport+0x60>
 8017362:	1e75      	subs	r5, r6, #1
 8017364:	1aed      	subs	r5, r5, r3
 8017366:	b2ed      	uxtb	r5, r5
 8017368:	2600      	movs	r6, #0
 801736a:	455d      	cmp	r5, fp
 801736c:	d81f      	bhi.n	80173ae <uxr_framing_read_transport+0x72>
 801736e:	19ab      	adds	r3, r5, r6
 8017370:	455b      	cmp	r3, fp
 8017372:	bf84      	itt	hi
 8017374:	ebab 0605 	subhi.w	r6, fp, r5
 8017378:	b2f6      	uxtbhi	r6, r6
 801737a:	b9ed      	cbnz	r5, 80173b8 <uxr_framing_read_transport+0x7c>
 801737c:	f04f 0b00 	mov.w	fp, #0
 8017380:	f7f8 ffac 	bl	80102dc <uxr_millis>
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	eba0 0808 	sub.w	r8, r0, r8
 801738a:	eba3 0308 	sub.w	r3, r3, r8
 801738e:	4658      	mov	r0, fp
 8017390:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017394:	603b      	str	r3, [r7, #0]
 8017396:	b003      	add	sp, #12
 8017398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801739c:	2e00      	cmp	r6, #0
 801739e:	d049      	beq.n	8017434 <uxr_framing_read_transport+0xf8>
 80173a0:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80173a4:	b2ed      	uxtb	r5, r5
 80173a6:	3e01      	subs	r6, #1
 80173a8:	455d      	cmp	r5, fp
 80173aa:	b2f6      	uxtb	r6, r6
 80173ac:	d9df      	bls.n	801736e <uxr_framing_read_transport+0x32>
 80173ae:	fa5f f58b 	uxtb.w	r5, fp
 80173b2:	2600      	movs	r6, #0
 80173b4:	2d00      	cmp	r5, #0
 80173b6:	d0e1      	beq.n	801737c <uxr_framing_read_transport+0x40>
 80173b8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80173bc:	3102      	adds	r1, #2
 80173be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173c0:	9300      	str	r3, [sp, #0]
 80173c2:	683b      	ldr	r3, [r7, #0]
 80173c4:	4421      	add	r1, r4
 80173c6:	462a      	mov	r2, r5
 80173c8:	4650      	mov	r0, sl
 80173ca:	47c8      	blx	r9
 80173cc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80173d0:	4a1a      	ldr	r2, [pc, #104]	@ (801743c <uxr_framing_read_transport+0x100>)
 80173d2:	4403      	add	r3, r0
 80173d4:	0859      	lsrs	r1, r3, #1
 80173d6:	fba2 2101 	umull	r2, r1, r2, r1
 80173da:	0889      	lsrs	r1, r1, #2
 80173dc:	222a      	movs	r2, #42	@ 0x2a
 80173de:	fb02 3111 	mls	r1, r2, r1, r3
 80173e2:	4683      	mov	fp, r0
 80173e4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80173e8:	2800      	cmp	r0, #0
 80173ea:	d0c7      	beq.n	801737c <uxr_framing_read_transport+0x40>
 80173ec:	42a8      	cmp	r0, r5
 80173ee:	d1c7      	bne.n	8017380 <uxr_framing_read_transport+0x44>
 80173f0:	2e00      	cmp	r6, #0
 80173f2:	d0c5      	beq.n	8017380 <uxr_framing_read_transport+0x44>
 80173f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173f6:	9300      	str	r3, [sp, #0]
 80173f8:	3102      	adds	r1, #2
 80173fa:	4632      	mov	r2, r6
 80173fc:	4421      	add	r1, r4
 80173fe:	2300      	movs	r3, #0
 8017400:	4650      	mov	r0, sl
 8017402:	47c8      	blx	r9
 8017404:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017408:	4a0c      	ldr	r2, [pc, #48]	@ (801743c <uxr_framing_read_transport+0x100>)
 801740a:	180b      	adds	r3, r1, r0
 801740c:	0859      	lsrs	r1, r3, #1
 801740e:	fba2 1201 	umull	r1, r2, r2, r1
 8017412:	0892      	lsrs	r2, r2, #2
 8017414:	212a      	movs	r1, #42	@ 0x2a
 8017416:	fb01 3312 	mls	r3, r1, r2, r3
 801741a:	eb00 0b05 	add.w	fp, r0, r5
 801741e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8017422:	e7ad      	b.n	8017380 <uxr_framing_read_transport+0x44>
 8017424:	2600      	movs	r6, #0
 8017426:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801742a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801742c:	d9bf      	bls.n	80173ae <uxr_framing_read_transport+0x72>
 801742e:	2102      	movs	r1, #2
 8017430:	2529      	movs	r5, #41	@ 0x29
 8017432:	e7c4      	b.n	80173be <uxr_framing_read_transport+0x82>
 8017434:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8017438:	b2ed      	uxtb	r5, r5
 801743a:	e796      	b.n	801736a <uxr_framing_read_transport+0x2e>
 801743c:	30c30c31 	.word	0x30c30c31

08017440 <uxr_read_framed_msg>:
 8017440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017444:	461e      	mov	r6, r3
 8017446:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801744a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801744e:	429d      	cmp	r5, r3
 8017450:	b083      	sub	sp, #12
 8017452:	4604      	mov	r4, r0
 8017454:	4688      	mov	r8, r1
 8017456:	4691      	mov	r9, r2
 8017458:	f000 8188 	beq.w	801776c <uxr_read_framed_msg+0x32c>
 801745c:	7823      	ldrb	r3, [r4, #0]
 801745e:	4dc1      	ldr	r5, [pc, #772]	@ (8017764 <uxr_read_framed_msg+0x324>)
 8017460:	4fc1      	ldr	r7, [pc, #772]	@ (8017768 <uxr_read_framed_msg+0x328>)
 8017462:	2b07      	cmp	r3, #7
 8017464:	d8fd      	bhi.n	8017462 <uxr_read_framed_msg+0x22>
 8017466:	e8df f013 	tbh	[pc, r3, lsl #1]
 801746a:	0115      	.short	0x0115
 801746c:	00d600f6 	.word	0x00d600f6
 8017470:	009000b9 	.word	0x009000b9
 8017474:	0030004d 	.word	0x0030004d
 8017478:	0008      	.short	0x0008
 801747a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801747e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017482:	4299      	cmp	r1, r3
 8017484:	f000 814a 	beq.w	801771c <uxr_read_framed_msg+0x2dc>
 8017488:	18e2      	adds	r2, r4, r3
 801748a:	7892      	ldrb	r2, [r2, #2]
 801748c:	2a7d      	cmp	r2, #125	@ 0x7d
 801748e:	f000 8199 	beq.w	80177c4 <uxr_read_framed_msg+0x384>
 8017492:	3301      	adds	r3, #1
 8017494:	0858      	lsrs	r0, r3, #1
 8017496:	fba5 1000 	umull	r1, r0, r5, r0
 801749a:	0880      	lsrs	r0, r0, #2
 801749c:	212a      	movs	r1, #42	@ 0x2a
 801749e:	fb01 3310 	mls	r3, r1, r0, r3
 80174a2:	2a7e      	cmp	r2, #126	@ 0x7e
 80174a4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80174a8:	f000 8252 	beq.w	8017950 <uxr_read_framed_msg+0x510>
 80174ac:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80174ae:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80174b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	2200      	movs	r2, #0
 80174b8:	4299      	cmp	r1, r3
 80174ba:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80174bc:	7022      	strb	r2, [r4, #0]
 80174be:	f000 8179 	beq.w	80177b4 <uxr_read_framed_msg+0x374>
 80174c2:	2000      	movs	r0, #0
 80174c4:	b003      	add	sp, #12
 80174c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174ca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80174ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80174d2:	4299      	cmp	r1, r3
 80174d4:	f000 8131 	beq.w	801773a <uxr_read_framed_msg+0x2fa>
 80174d8:	18e2      	adds	r2, r4, r3
 80174da:	7890      	ldrb	r0, [r2, #2]
 80174dc:	287d      	cmp	r0, #125	@ 0x7d
 80174de:	f000 8190 	beq.w	8017802 <uxr_read_framed_msg+0x3c2>
 80174e2:	3301      	adds	r3, #1
 80174e4:	085a      	lsrs	r2, r3, #1
 80174e6:	fba5 1202 	umull	r1, r2, r5, r2
 80174ea:	0892      	lsrs	r2, r2, #2
 80174ec:	212a      	movs	r1, #42	@ 0x2a
 80174ee:	fb01 3312 	mls	r3, r1, r2, r3
 80174f2:	287e      	cmp	r0, #126	@ 0x7e
 80174f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80174f8:	f000 821a 	beq.w	8017930 <uxr_read_framed_msg+0x4f0>
 80174fc:	2307      	movs	r3, #7
 80174fe:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8017500:	7023      	strb	r3, [r4, #0]
 8017502:	e7ae      	b.n	8017462 <uxr_read_framed_msg+0x22>
 8017504:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017506:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801750a:	459e      	cmp	lr, r3
 801750c:	d938      	bls.n	8017580 <uxr_read_framed_msg+0x140>
 801750e:	ee07 8a90 	vmov	s15, r8
 8017512:	212a      	movs	r1, #42	@ 0x2a
 8017514:	e020      	b.n	8017558 <uxr_read_framed_msg+0x118>
 8017516:	f89b c002 	ldrb.w	ip, [fp, #2]
 801751a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801751e:	f000 80d4 	beq.w	80176ca <uxr_read_framed_msg+0x28a>
 8017522:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017526:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801752a:	f000 8219 	beq.w	8017960 <uxr_read_framed_msg+0x520>
 801752e:	f806 c003 	strb.w	ip, [r6, r3]
 8017532:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8017536:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017538:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801753c:	ea8a 000c 	eor.w	r0, sl, ip
 8017540:	b2c0      	uxtb	r0, r0
 8017542:	3301      	adds	r3, #1
 8017544:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8017548:	b29b      	uxth	r3, r3
 801754a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801754e:	4573      	cmp	r3, lr
 8017550:	8663      	strh	r3, [r4, #50]	@ 0x32
 8017552:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8017554:	f080 8120 	bcs.w	8017798 <uxr_read_framed_msg+0x358>
 8017558:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801755c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017560:	f100 0c01 	add.w	ip, r0, #1
 8017564:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017568:	fba5 8202 	umull	r8, r2, r5, r2
 801756c:	0892      	lsrs	r2, r2, #2
 801756e:	4582      	cmp	sl, r0
 8017570:	eb04 0b00 	add.w	fp, r4, r0
 8017574:	fb01 c212 	mls	r2, r1, r2, ip
 8017578:	d1cd      	bne.n	8017516 <uxr_read_framed_msg+0xd6>
 801757a:	ee17 8a90 	vmov	r8, s15
 801757e:	459e      	cmp	lr, r3
 8017580:	f040 8111 	bne.w	80177a6 <uxr_read_framed_msg+0x366>
 8017584:	2306      	movs	r3, #6
 8017586:	7023      	strb	r3, [r4, #0]
 8017588:	e76b      	b.n	8017462 <uxr_read_framed_msg+0x22>
 801758a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801758e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017592:	4298      	cmp	r0, r3
 8017594:	f000 80c2 	beq.w	801771c <uxr_read_framed_msg+0x2dc>
 8017598:	18e2      	adds	r2, r4, r3
 801759a:	7891      	ldrb	r1, [r2, #2]
 801759c:	297d      	cmp	r1, #125	@ 0x7d
 801759e:	f000 814c 	beq.w	801783a <uxr_read_framed_msg+0x3fa>
 80175a2:	3301      	adds	r3, #1
 80175a4:	085a      	lsrs	r2, r3, #1
 80175a6:	fba5 0202 	umull	r0, r2, r5, r2
 80175aa:	0892      	lsrs	r2, r2, #2
 80175ac:	202a      	movs	r0, #42	@ 0x2a
 80175ae:	fb00 3312 	mls	r3, r0, r2, r3
 80175b2:	297e      	cmp	r1, #126	@ 0x7e
 80175b4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80175b8:	f000 81ca 	beq.w	8017950 <uxr_read_framed_msg+0x510>
 80175bc:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80175be:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80175c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80175c4:	b29b      	uxth	r3, r3
 80175c6:	2000      	movs	r0, #0
 80175c8:	428b      	cmp	r3, r1
 80175ca:	8623      	strh	r3, [r4, #48]	@ 0x30
 80175cc:	8660      	strh	r0, [r4, #50]	@ 0x32
 80175ce:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80175d0:	f240 80df 	bls.w	8017792 <uxr_read_framed_msg+0x352>
 80175d4:	7020      	strb	r0, [r4, #0]
 80175d6:	b003      	add	sp, #12
 80175d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175dc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80175e0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80175e4:	4299      	cmp	r1, r3
 80175e6:	f000 80a8 	beq.w	801773a <uxr_read_framed_msg+0x2fa>
 80175ea:	18e2      	adds	r2, r4, r3
 80175ec:	7890      	ldrb	r0, [r2, #2]
 80175ee:	287d      	cmp	r0, #125	@ 0x7d
 80175f0:	f000 8164 	beq.w	80178bc <uxr_read_framed_msg+0x47c>
 80175f4:	3301      	adds	r3, #1
 80175f6:	085a      	lsrs	r2, r3, #1
 80175f8:	fba5 1202 	umull	r1, r2, r5, r2
 80175fc:	0892      	lsrs	r2, r2, #2
 80175fe:	212a      	movs	r1, #42	@ 0x2a
 8017600:	fb01 3312 	mls	r3, r1, r2, r3
 8017604:	287e      	cmp	r0, #126	@ 0x7e
 8017606:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801760a:	f000 8191 	beq.w	8017930 <uxr_read_framed_msg+0x4f0>
 801760e:	2304      	movs	r3, #4
 8017610:	8620      	strh	r0, [r4, #48]	@ 0x30
 8017612:	7023      	strb	r3, [r4, #0]
 8017614:	e725      	b.n	8017462 <uxr_read_framed_msg+0x22>
 8017616:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801761a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801761e:	4290      	cmp	r0, r2
 8017620:	f000 80b3 	beq.w	801778a <uxr_read_framed_msg+0x34a>
 8017624:	18a3      	adds	r3, r4, r2
 8017626:	7899      	ldrb	r1, [r3, #2]
 8017628:	297d      	cmp	r1, #125	@ 0x7d
 801762a:	f000 8164 	beq.w	80178f6 <uxr_read_framed_msg+0x4b6>
 801762e:	3201      	adds	r2, #1
 8017630:	0850      	lsrs	r0, r2, #1
 8017632:	fba5 3000 	umull	r3, r0, r5, r0
 8017636:	0880      	lsrs	r0, r0, #2
 8017638:	232a      	movs	r3, #42	@ 0x2a
 801763a:	fb03 2210 	mls	r2, r3, r0, r2
 801763e:	297e      	cmp	r1, #126	@ 0x7e
 8017640:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017644:	f000 8188 	beq.w	8017958 <uxr_read_framed_msg+0x518>
 8017648:	7863      	ldrb	r3, [r4, #1]
 801764a:	428b      	cmp	r3, r1
 801764c:	bf0c      	ite	eq
 801764e:	2303      	moveq	r3, #3
 8017650:	2300      	movne	r3, #0
 8017652:	7023      	strb	r3, [r4, #0]
 8017654:	e705      	b.n	8017462 <uxr_read_framed_msg+0x22>
 8017656:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801765a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801765e:	2200      	movs	r2, #0
 8017660:	4299      	cmp	r1, r3
 8017662:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8017666:	d06c      	beq.n	8017742 <uxr_read_framed_msg+0x302>
 8017668:	18e2      	adds	r2, r4, r3
 801766a:	7890      	ldrb	r0, [r2, #2]
 801766c:	287d      	cmp	r0, #125	@ 0x7d
 801766e:	f000 8101 	beq.w	8017874 <uxr_read_framed_msg+0x434>
 8017672:	3301      	adds	r3, #1
 8017674:	085a      	lsrs	r2, r3, #1
 8017676:	fba5 1202 	umull	r1, r2, r5, r2
 801767a:	0892      	lsrs	r2, r2, #2
 801767c:	212a      	movs	r1, #42	@ 0x2a
 801767e:	fb01 3312 	mls	r3, r1, r2, r3
 8017682:	287e      	cmp	r0, #126	@ 0x7e
 8017684:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8017688:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801768c:	d059      	beq.n	8017742 <uxr_read_framed_msg+0x302>
 801768e:	2302      	movs	r3, #2
 8017690:	7023      	strb	r3, [r4, #0]
 8017692:	e6e6      	b.n	8017462 <uxr_read_framed_msg+0x22>
 8017694:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017698:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801769c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80176a0:	1c51      	adds	r1, r2, #1
 80176a2:	084b      	lsrs	r3, r1, #1
 80176a4:	fba5 c303 	umull	ip, r3, r5, r3
 80176a8:	089b      	lsrs	r3, r3, #2
 80176aa:	fb0e 1313 	mls	r3, lr, r3, r1
 80176ae:	4592      	cmp	sl, r2
 80176b0:	eb04 0002 	add.w	r0, r4, r2
 80176b4:	b2da      	uxtb	r2, r3
 80176b6:	f43f af04 	beq.w	80174c2 <uxr_read_framed_msg+0x82>
 80176ba:	7883      	ldrb	r3, [r0, #2]
 80176bc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80176c0:	2b7e      	cmp	r3, #126	@ 0x7e
 80176c2:	d1ed      	bne.n	80176a0 <uxr_read_framed_msg+0x260>
 80176c4:	2301      	movs	r3, #1
 80176c6:	7023      	strb	r3, [r4, #0]
 80176c8:	e6cb      	b.n	8017462 <uxr_read_framed_msg+0x22>
 80176ca:	f100 0c01 	add.w	ip, r0, #1
 80176ce:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80176d2:	fba5 8202 	umull	r8, r2, r5, r2
 80176d6:	0892      	lsrs	r2, r2, #2
 80176d8:	fb01 c212 	mls	r2, r1, r2, ip
 80176dc:	eb04 0c02 	add.w	ip, r4, r2
 80176e0:	b2d2      	uxtb	r2, r2
 80176e2:	4592      	cmp	sl, r2
 80176e4:	f100 0002 	add.w	r0, r0, #2
 80176e8:	f43f af47 	beq.w	801757a <uxr_read_framed_msg+0x13a>
 80176ec:	0842      	lsrs	r2, r0, #1
 80176ee:	f89c a002 	ldrb.w	sl, [ip, #2]
 80176f2:	fba5 8202 	umull	r8, r2, r5, r2
 80176f6:	0892      	lsrs	r2, r2, #2
 80176f8:	fb01 0012 	mls	r0, r1, r2, r0
 80176fc:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8017700:	f08a 0c20 	eor.w	ip, sl, #32
 8017704:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8017708:	f47f af11 	bne.w	801752e <uxr_read_framed_msg+0xee>
 801770c:	459e      	cmp	lr, r3
 801770e:	ee17 8a90 	vmov	r8, s15
 8017712:	f43f af37 	beq.w	8017584 <uxr_read_framed_msg+0x144>
 8017716:	2301      	movs	r3, #1
 8017718:	7023      	strb	r3, [r4, #0]
 801771a:	e6a2      	b.n	8017462 <uxr_read_framed_msg+0x22>
 801771c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801771e:	9300      	str	r3, [sp, #0]
 8017720:	2301      	movs	r3, #1
 8017722:	9301      	str	r3, [sp, #4]
 8017724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017726:	464a      	mov	r2, r9
 8017728:	4641      	mov	r1, r8
 801772a:	4620      	mov	r0, r4
 801772c:	f7ff fe06 	bl	801733c <uxr_framing_read_transport>
 8017730:	2800      	cmp	r0, #0
 8017732:	f43f aec6 	beq.w	80174c2 <uxr_read_framed_msg+0x82>
 8017736:	7823      	ldrb	r3, [r4, #0]
 8017738:	e693      	b.n	8017462 <uxr_read_framed_msg+0x22>
 801773a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801773c:	9300      	str	r3, [sp, #0]
 801773e:	2302      	movs	r3, #2
 8017740:	e7ef      	b.n	8017722 <uxr_read_framed_msg+0x2e2>
 8017742:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017744:	9300      	str	r3, [sp, #0]
 8017746:	2304      	movs	r3, #4
 8017748:	9301      	str	r3, [sp, #4]
 801774a:	464a      	mov	r2, r9
 801774c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801774e:	4641      	mov	r1, r8
 8017750:	4620      	mov	r0, r4
 8017752:	f7ff fdf3 	bl	801733c <uxr_framing_read_transport>
 8017756:	2800      	cmp	r0, #0
 8017758:	d1ed      	bne.n	8017736 <uxr_read_framed_msg+0x2f6>
 801775a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801775e:	2b7e      	cmp	r3, #126	@ 0x7e
 8017760:	d0e9      	beq.n	8017736 <uxr_read_framed_msg+0x2f6>
 8017762:	e6ae      	b.n	80174c2 <uxr_read_framed_msg+0x82>
 8017764:	30c30c31 	.word	0x30c30c31
 8017768:	0801aff8 	.word	0x0801aff8
 801776c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801776e:	9300      	str	r3, [sp, #0]
 8017770:	2305      	movs	r3, #5
 8017772:	9301      	str	r3, [sp, #4]
 8017774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017776:	f7ff fde1 	bl	801733c <uxr_framing_read_transport>
 801777a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801777e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017782:	429a      	cmp	r2, r3
 8017784:	f43f ae9d 	beq.w	80174c2 <uxr_read_framed_msg+0x82>
 8017788:	e668      	b.n	801745c <uxr_read_framed_msg+0x1c>
 801778a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801778c:	9300      	str	r3, [sp, #0]
 801778e:	2303      	movs	r3, #3
 8017790:	e7c7      	b.n	8017722 <uxr_read_framed_msg+0x2e2>
 8017792:	2305      	movs	r3, #5
 8017794:	7023      	strb	r3, [r4, #0]
 8017796:	e664      	b.n	8017462 <uxr_read_framed_msg+0x22>
 8017798:	ee17 8a90 	vmov	r8, s15
 801779c:	f43f aef2 	beq.w	8017584 <uxr_read_framed_msg+0x144>
 80177a0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80177a4:	d08e      	beq.n	80176c4 <uxr_read_framed_msg+0x284>
 80177a6:	ebae 0303 	sub.w	r3, lr, r3
 80177aa:	3302      	adds	r3, #2
 80177ac:	9301      	str	r3, [sp, #4]
 80177ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80177b0:	9300      	str	r3, [sp, #0]
 80177b2:	e7b7      	b.n	8017724 <uxr_read_framed_msg+0x2e4>
 80177b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80177b6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80177ba:	7013      	strb	r3, [r2, #0]
 80177bc:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80177be:	b003      	add	sp, #12
 80177c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177c4:	f103 0c01 	add.w	ip, r3, #1
 80177c8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80177cc:	fba5 0202 	umull	r0, r2, r5, r2
 80177d0:	0892      	lsrs	r2, r2, #2
 80177d2:	202a      	movs	r0, #42	@ 0x2a
 80177d4:	fb00 c212 	mls	r2, r0, r2, ip
 80177d8:	fa5f fc82 	uxtb.w	ip, r2
 80177dc:	4561      	cmp	r1, ip
 80177de:	d09d      	beq.n	801771c <uxr_read_framed_msg+0x2dc>
 80177e0:	3302      	adds	r3, #2
 80177e2:	4422      	add	r2, r4
 80177e4:	0859      	lsrs	r1, r3, #1
 80177e6:	7892      	ldrb	r2, [r2, #2]
 80177e8:	fba5 c101 	umull	ip, r1, r5, r1
 80177ec:	0889      	lsrs	r1, r1, #2
 80177ee:	fb00 3311 	mls	r3, r0, r1, r3
 80177f2:	2a7e      	cmp	r2, #126	@ 0x7e
 80177f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80177f8:	f000 80aa 	beq.w	8017950 <uxr_read_framed_msg+0x510>
 80177fc:	f082 0220 	eor.w	r2, r2, #32
 8017800:	e654      	b.n	80174ac <uxr_read_framed_msg+0x6c>
 8017802:	1c58      	adds	r0, r3, #1
 8017804:	0842      	lsrs	r2, r0, #1
 8017806:	fba5 c202 	umull	ip, r2, r5, r2
 801780a:	0892      	lsrs	r2, r2, #2
 801780c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017810:	fb0c 0212 	mls	r2, ip, r2, r0
 8017814:	b2d0      	uxtb	r0, r2
 8017816:	4281      	cmp	r1, r0
 8017818:	d08f      	beq.n	801773a <uxr_read_framed_msg+0x2fa>
 801781a:	4422      	add	r2, r4
 801781c:	3302      	adds	r3, #2
 801781e:	7890      	ldrb	r0, [r2, #2]
 8017820:	085a      	lsrs	r2, r3, #1
 8017822:	fba5 1202 	umull	r1, r2, r5, r2
 8017826:	0892      	lsrs	r2, r2, #2
 8017828:	fb0c 3312 	mls	r3, ip, r2, r3
 801782c:	287e      	cmp	r0, #126	@ 0x7e
 801782e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017832:	d07d      	beq.n	8017930 <uxr_read_framed_msg+0x4f0>
 8017834:	f080 0020 	eor.w	r0, r0, #32
 8017838:	e660      	b.n	80174fc <uxr_read_framed_msg+0xbc>
 801783a:	1c59      	adds	r1, r3, #1
 801783c:	084a      	lsrs	r2, r1, #1
 801783e:	fba5 c202 	umull	ip, r2, r5, r2
 8017842:	0892      	lsrs	r2, r2, #2
 8017844:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017848:	fb0c 1212 	mls	r2, ip, r2, r1
 801784c:	b2d1      	uxtb	r1, r2
 801784e:	4288      	cmp	r0, r1
 8017850:	f43f af64 	beq.w	801771c <uxr_read_framed_msg+0x2dc>
 8017854:	4422      	add	r2, r4
 8017856:	3302      	adds	r3, #2
 8017858:	7891      	ldrb	r1, [r2, #2]
 801785a:	085a      	lsrs	r2, r3, #1
 801785c:	fba5 0202 	umull	r0, r2, r5, r2
 8017860:	0892      	lsrs	r2, r2, #2
 8017862:	fb0c 3312 	mls	r3, ip, r2, r3
 8017866:	297e      	cmp	r1, #126	@ 0x7e
 8017868:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801786c:	d070      	beq.n	8017950 <uxr_read_framed_msg+0x510>
 801786e:	f081 0120 	eor.w	r1, r1, #32
 8017872:	e6a3      	b.n	80175bc <uxr_read_framed_msg+0x17c>
 8017874:	f103 0c01 	add.w	ip, r3, #1
 8017878:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801787c:	fba5 0202 	umull	r0, r2, r5, r2
 8017880:	0892      	lsrs	r2, r2, #2
 8017882:	202a      	movs	r0, #42	@ 0x2a
 8017884:	fb00 c212 	mls	r2, r0, r2, ip
 8017888:	fa5f fc82 	uxtb.w	ip, r2
 801788c:	4561      	cmp	r1, ip
 801788e:	f43f af58 	beq.w	8017742 <uxr_read_framed_msg+0x302>
 8017892:	4422      	add	r2, r4
 8017894:	3302      	adds	r3, #2
 8017896:	7891      	ldrb	r1, [r2, #2]
 8017898:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801789c:	085a      	lsrs	r2, r3, #1
 801789e:	fba5 c202 	umull	ip, r2, r5, r2
 80178a2:	0892      	lsrs	r2, r2, #2
 80178a4:	fb00 3312 	mls	r3, r0, r2, r3
 80178a8:	297e      	cmp	r1, #126	@ 0x7e
 80178aa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80178ae:	f43f af48 	beq.w	8017742 <uxr_read_framed_msg+0x302>
 80178b2:	f081 0120 	eor.w	r1, r1, #32
 80178b6:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80178ba:	e6e8      	b.n	801768e <uxr_read_framed_msg+0x24e>
 80178bc:	1c58      	adds	r0, r3, #1
 80178be:	0842      	lsrs	r2, r0, #1
 80178c0:	fba5 c202 	umull	ip, r2, r5, r2
 80178c4:	0892      	lsrs	r2, r2, #2
 80178c6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80178ca:	fb0c 0212 	mls	r2, ip, r2, r0
 80178ce:	b2d0      	uxtb	r0, r2
 80178d0:	4281      	cmp	r1, r0
 80178d2:	f43f af32 	beq.w	801773a <uxr_read_framed_msg+0x2fa>
 80178d6:	4422      	add	r2, r4
 80178d8:	3302      	adds	r3, #2
 80178da:	7890      	ldrb	r0, [r2, #2]
 80178dc:	085a      	lsrs	r2, r3, #1
 80178de:	fba5 1202 	umull	r1, r2, r5, r2
 80178e2:	0892      	lsrs	r2, r2, #2
 80178e4:	fb0c 3312 	mls	r3, ip, r2, r3
 80178e8:	287e      	cmp	r0, #126	@ 0x7e
 80178ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80178ee:	d01f      	beq.n	8017930 <uxr_read_framed_msg+0x4f0>
 80178f0:	f080 0020 	eor.w	r0, r0, #32
 80178f4:	e68b      	b.n	801760e <uxr_read_framed_msg+0x1ce>
 80178f6:	1c51      	adds	r1, r2, #1
 80178f8:	084b      	lsrs	r3, r1, #1
 80178fa:	fba5 c303 	umull	ip, r3, r5, r3
 80178fe:	089b      	lsrs	r3, r3, #2
 8017900:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017904:	fb0c 1313 	mls	r3, ip, r3, r1
 8017908:	b2d9      	uxtb	r1, r3
 801790a:	4288      	cmp	r0, r1
 801790c:	f43f af3d 	beq.w	801778a <uxr_read_framed_msg+0x34a>
 8017910:	3202      	adds	r2, #2
 8017912:	4423      	add	r3, r4
 8017914:	0850      	lsrs	r0, r2, #1
 8017916:	789b      	ldrb	r3, [r3, #2]
 8017918:	fba5 1000 	umull	r1, r0, r5, r0
 801791c:	0880      	lsrs	r0, r0, #2
 801791e:	fb0c 2210 	mls	r2, ip, r0, r2
 8017922:	2b7e      	cmp	r3, #126	@ 0x7e
 8017924:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017928:	d016      	beq.n	8017958 <uxr_read_framed_msg+0x518>
 801792a:	f083 0120 	eor.w	r1, r3, #32
 801792e:	e68b      	b.n	8017648 <uxr_read_framed_msg+0x208>
 8017930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017932:	9300      	str	r3, [sp, #0]
 8017934:	2302      	movs	r3, #2
 8017936:	9301      	str	r3, [sp, #4]
 8017938:	464a      	mov	r2, r9
 801793a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801793c:	4641      	mov	r1, r8
 801793e:	4620      	mov	r0, r4
 8017940:	f7ff fcfc 	bl	801733c <uxr_framing_read_transport>
 8017944:	2800      	cmp	r0, #0
 8017946:	f47f aef6 	bne.w	8017736 <uxr_read_framed_msg+0x2f6>
 801794a:	2301      	movs	r3, #1
 801794c:	7023      	strb	r3, [r4, #0]
 801794e:	e588      	b.n	8017462 <uxr_read_framed_msg+0x22>
 8017950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017952:	9300      	str	r3, [sp, #0]
 8017954:	2301      	movs	r3, #1
 8017956:	e7ee      	b.n	8017936 <uxr_read_framed_msg+0x4f6>
 8017958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801795a:	9300      	str	r3, [sp, #0]
 801795c:	2303      	movs	r3, #3
 801795e:	e7ea      	b.n	8017936 <uxr_read_framed_msg+0x4f6>
 8017960:	ee17 8a90 	vmov	r8, s15
 8017964:	e6ae      	b.n	80176c4 <uxr_read_framed_msg+0x284>
 8017966:	bf00      	nop

08017968 <rcl_get_default_domain_id>:
 8017968:	b530      	push	{r4, r5, lr}
 801796a:	b083      	sub	sp, #12
 801796c:	2300      	movs	r3, #0
 801796e:	9300      	str	r3, [sp, #0]
 8017970:	b1d0      	cbz	r0, 80179a8 <rcl_get_default_domain_id+0x40>
 8017972:	4604      	mov	r4, r0
 8017974:	4669      	mov	r1, sp
 8017976:	4815      	ldr	r0, [pc, #84]	@ (80179cc <rcl_get_default_domain_id+0x64>)
 8017978:	f7fc fd2e 	bl	80143d8 <rcutils_get_env>
 801797c:	4602      	mov	r2, r0
 801797e:	b110      	cbz	r0, 8017986 <rcl_get_default_domain_id+0x1e>
 8017980:	2001      	movs	r0, #1
 8017982:	b003      	add	sp, #12
 8017984:	bd30      	pop	{r4, r5, pc}
 8017986:	9b00      	ldr	r3, [sp, #0]
 8017988:	b18b      	cbz	r3, 80179ae <rcl_get_default_domain_id+0x46>
 801798a:	7818      	ldrb	r0, [r3, #0]
 801798c:	2800      	cmp	r0, #0
 801798e:	d0f8      	beq.n	8017982 <rcl_get_default_domain_id+0x1a>
 8017990:	a901      	add	r1, sp, #4
 8017992:	4618      	mov	r0, r3
 8017994:	9201      	str	r2, [sp, #4]
 8017996:	f000 ffb5 	bl	8018904 <strtoul>
 801799a:	4605      	mov	r5, r0
 801799c:	b150      	cbz	r0, 80179b4 <rcl_get_default_domain_id+0x4c>
 801799e:	1c43      	adds	r3, r0, #1
 80179a0:	d00d      	beq.n	80179be <rcl_get_default_domain_id+0x56>
 80179a2:	6025      	str	r5, [r4, #0]
 80179a4:	2000      	movs	r0, #0
 80179a6:	e7ec      	b.n	8017982 <rcl_get_default_domain_id+0x1a>
 80179a8:	200b      	movs	r0, #11
 80179aa:	b003      	add	sp, #12
 80179ac:	bd30      	pop	{r4, r5, pc}
 80179ae:	4618      	mov	r0, r3
 80179b0:	b003      	add	sp, #12
 80179b2:	bd30      	pop	{r4, r5, pc}
 80179b4:	9b01      	ldr	r3, [sp, #4]
 80179b6:	781b      	ldrb	r3, [r3, #0]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d0f2      	beq.n	80179a2 <rcl_get_default_domain_id+0x3a>
 80179bc:	e7e0      	b.n	8017980 <rcl_get_default_domain_id+0x18>
 80179be:	f001 fa5d 	bl	8018e7c <__errno>
 80179c2:	6803      	ldr	r3, [r0, #0]
 80179c4:	2b22      	cmp	r3, #34	@ 0x22
 80179c6:	d1ec      	bne.n	80179a2 <rcl_get_default_domain_id+0x3a>
 80179c8:	e7da      	b.n	8017980 <rcl_get_default_domain_id+0x18>
 80179ca:	bf00      	nop
 80179cc:	0801b1f8 	.word	0x0801b1f8

080179d0 <rcl_expand_topic_name>:
 80179d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d4:	b08b      	sub	sp, #44	@ 0x2c
 80179d6:	9306      	str	r3, [sp, #24]
 80179d8:	2800      	cmp	r0, #0
 80179da:	f000 80ad 	beq.w	8017b38 <rcl_expand_topic_name+0x168>
 80179de:	460e      	mov	r6, r1
 80179e0:	2900      	cmp	r1, #0
 80179e2:	f000 80a9 	beq.w	8017b38 <rcl_expand_topic_name+0x168>
 80179e6:	4617      	mov	r7, r2
 80179e8:	2a00      	cmp	r2, #0
 80179ea:	f000 80a5 	beq.w	8017b38 <rcl_expand_topic_name+0x168>
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	f000 80a2 	beq.w	8017b38 <rcl_expand_topic_name+0x168>
 80179f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	f000 809e 	beq.w	8017b38 <rcl_expand_topic_name+0x168>
 80179fc:	2200      	movs	r2, #0
 80179fe:	a909      	add	r1, sp, #36	@ 0x24
 8017a00:	4680      	mov	r8, r0
 8017a02:	f000 f9fb 	bl	8017dfc <rcl_validate_topic_name>
 8017a06:	4604      	mov	r4, r0
 8017a08:	2800      	cmp	r0, #0
 8017a0a:	f040 8096 	bne.w	8017b3a <rcl_expand_topic_name+0x16a>
 8017a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	f040 809a 	bne.w	8017b4a <rcl_expand_topic_name+0x17a>
 8017a16:	4602      	mov	r2, r0
 8017a18:	a909      	add	r1, sp, #36	@ 0x24
 8017a1a:	4630      	mov	r0, r6
 8017a1c:	f7fd f93a 	bl	8014c94 <rmw_validate_node_name>
 8017a20:	2800      	cmp	r0, #0
 8017a22:	f040 808e 	bne.w	8017b42 <rcl_expand_topic_name+0x172>
 8017a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017a28:	2a00      	cmp	r2, #0
 8017a2a:	f040 8093 	bne.w	8017b54 <rcl_expand_topic_name+0x184>
 8017a2e:	a909      	add	r1, sp, #36	@ 0x24
 8017a30:	4638      	mov	r0, r7
 8017a32:	f7fd f911 	bl	8014c58 <rmw_validate_namespace>
 8017a36:	2800      	cmp	r0, #0
 8017a38:	f040 8083 	bne.w	8017b42 <rcl_expand_topic_name+0x172>
 8017a3c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017a3e:	2c00      	cmp	r4, #0
 8017a40:	f040 80ed 	bne.w	8017c1e <rcl_expand_topic_name+0x24e>
 8017a44:	217b      	movs	r1, #123	@ 0x7b
 8017a46:	4640      	mov	r0, r8
 8017a48:	f001 f97e 	bl	8018d48 <strchr>
 8017a4c:	f898 3000 	ldrb.w	r3, [r8]
 8017a50:	2b2f      	cmp	r3, #47	@ 0x2f
 8017a52:	4605      	mov	r5, r0
 8017a54:	f000 809e 	beq.w	8017b94 <rcl_expand_topic_name+0x1c4>
 8017a58:	2b7e      	cmp	r3, #126	@ 0x7e
 8017a5a:	f040 80a2 	bne.w	8017ba2 <rcl_expand_topic_name+0x1d2>
 8017a5e:	4638      	mov	r0, r7
 8017a60:	f7e8 fbce 	bl	8000200 <strlen>
 8017a64:	4a82      	ldr	r2, [pc, #520]	@ (8017c70 <rcl_expand_topic_name+0x2a0>)
 8017a66:	4b83      	ldr	r3, [pc, #524]	@ (8017c74 <rcl_expand_topic_name+0x2a4>)
 8017a68:	2801      	cmp	r0, #1
 8017a6a:	bf18      	it	ne
 8017a6c:	4613      	movne	r3, r2
 8017a6e:	9302      	str	r3, [sp, #8]
 8017a70:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017a72:	9300      	str	r3, [sp, #0]
 8017a74:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017a78:	f108 0301 	add.w	r3, r8, #1
 8017a7c:	9305      	str	r3, [sp, #20]
 8017a7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017a82:	9301      	str	r3, [sp, #4]
 8017a84:	ab14      	add	r3, sp, #80	@ 0x50
 8017a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017a88:	f7fc fcce 	bl	8014428 <rcutils_format_string_limit>
 8017a8c:	4682      	mov	sl, r0
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	f000 80c7 	beq.w	8017c22 <rcl_expand_topic_name+0x252>
 8017a94:	2d00      	cmp	r5, #0
 8017a96:	f000 80a2 	beq.w	8017bde <rcl_expand_topic_name+0x20e>
 8017a9a:	217b      	movs	r1, #123	@ 0x7b
 8017a9c:	f001 f954 	bl	8018d48 <strchr>
 8017aa0:	46d1      	mov	r9, sl
 8017aa2:	4605      	mov	r5, r0
 8017aa4:	9407      	str	r4, [sp, #28]
 8017aa6:	46d3      	mov	fp, sl
 8017aa8:	464c      	mov	r4, r9
 8017aaa:	2d00      	cmp	r5, #0
 8017aac:	f000 80be 	beq.w	8017c2c <rcl_expand_topic_name+0x25c>
 8017ab0:	217d      	movs	r1, #125	@ 0x7d
 8017ab2:	4620      	mov	r0, r4
 8017ab4:	f001 f948 	bl	8018d48 <strchr>
 8017ab8:	eba0 0905 	sub.w	r9, r0, r5
 8017abc:	f109 0a01 	add.w	sl, r9, #1
 8017ac0:	486d      	ldr	r0, [pc, #436]	@ (8017c78 <rcl_expand_topic_name+0x2a8>)
 8017ac2:	4652      	mov	r2, sl
 8017ac4:	4629      	mov	r1, r5
 8017ac6:	f001 f94c 	bl	8018d62 <strncmp>
 8017aca:	2800      	cmp	r0, #0
 8017acc:	d067      	beq.n	8017b9e <rcl_expand_topic_name+0x1ce>
 8017ace:	486b      	ldr	r0, [pc, #428]	@ (8017c7c <rcl_expand_topic_name+0x2ac>)
 8017ad0:	4652      	mov	r2, sl
 8017ad2:	4629      	mov	r1, r5
 8017ad4:	f001 f945 	bl	8018d62 <strncmp>
 8017ad8:	b130      	cbz	r0, 8017ae8 <rcl_expand_topic_name+0x118>
 8017ada:	4869      	ldr	r0, [pc, #420]	@ (8017c80 <rcl_expand_topic_name+0x2b0>)
 8017adc:	4652      	mov	r2, sl
 8017ade:	4629      	mov	r1, r5
 8017ae0:	f001 f93f 	bl	8018d62 <strncmp>
 8017ae4:	2800      	cmp	r0, #0
 8017ae6:	d137      	bne.n	8017b58 <rcl_expand_topic_name+0x188>
 8017ae8:	46b9      	mov	r9, r7
 8017aea:	ab16      	add	r3, sp, #88	@ 0x58
 8017aec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017af0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017af4:	ab14      	add	r3, sp, #80	@ 0x50
 8017af6:	4628      	mov	r0, r5
 8017af8:	cb0c      	ldmia	r3, {r2, r3}
 8017afa:	4651      	mov	r1, sl
 8017afc:	f7fc fdd0 	bl	80146a0 <rcutils_strndup>
 8017b00:	4605      	mov	r5, r0
 8017b02:	2800      	cmp	r0, #0
 8017b04:	f000 809c 	beq.w	8017c40 <rcl_expand_topic_name+0x270>
 8017b08:	464a      	mov	r2, r9
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	ab14      	add	r3, sp, #80	@ 0x50
 8017b0e:	4629      	mov	r1, r5
 8017b10:	f7fc fcc4 	bl	801449c <rcutils_repl_str>
 8017b14:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017b16:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017b18:	4604      	mov	r4, r0
 8017b1a:	4628      	mov	r0, r5
 8017b1c:	4798      	blx	r3
 8017b1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017b20:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017b22:	4658      	mov	r0, fp
 8017b24:	4798      	blx	r3
 8017b26:	2c00      	cmp	r4, #0
 8017b28:	d07b      	beq.n	8017c22 <rcl_expand_topic_name+0x252>
 8017b2a:	217b      	movs	r1, #123	@ 0x7b
 8017b2c:	4620      	mov	r0, r4
 8017b2e:	f001 f90b 	bl	8018d48 <strchr>
 8017b32:	46a3      	mov	fp, r4
 8017b34:	4605      	mov	r5, r0
 8017b36:	e7b8      	b.n	8017aaa <rcl_expand_topic_name+0xda>
 8017b38:	240b      	movs	r4, #11
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	b00b      	add	sp, #44	@ 0x2c
 8017b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b42:	f7f9 fea7 	bl	8011894 <rcl_convert_rmw_ret_to_rcl_ret>
 8017b46:	4604      	mov	r4, r0
 8017b48:	e7f7      	b.n	8017b3a <rcl_expand_topic_name+0x16a>
 8017b4a:	2467      	movs	r4, #103	@ 0x67
 8017b4c:	4620      	mov	r0, r4
 8017b4e:	b00b      	add	sp, #44	@ 0x2c
 8017b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b54:	24c9      	movs	r4, #201	@ 0xc9
 8017b56:	e7f0      	b.n	8017b3a <rcl_expand_topic_name+0x16a>
 8017b58:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8017b5c:	9806      	ldr	r0, [sp, #24]
 8017b5e:	1c69      	adds	r1, r5, #1
 8017b60:	f7fc feb8 	bl	80148d4 <rcutils_string_map_getn>
 8017b64:	4681      	mov	r9, r0
 8017b66:	2800      	cmp	r0, #0
 8017b68:	d1bf      	bne.n	8017aea <rcl_expand_topic_name+0x11a>
 8017b6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017b6c:	aa16      	add	r2, sp, #88	@ 0x58
 8017b6e:	6018      	str	r0, [r3, #0]
 8017b70:	ca07      	ldmia	r2, {r0, r1, r2}
 8017b72:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017b76:	ab14      	add	r3, sp, #80	@ 0x50
 8017b78:	cb0c      	ldmia	r3, {r2, r3}
 8017b7a:	4651      	mov	r1, sl
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	f7fc fd8f 	bl	80146a0 <rcutils_strndup>
 8017b82:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017b84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017b86:	4798      	blx	r3
 8017b88:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017b8a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017b8c:	4658      	mov	r0, fp
 8017b8e:	2469      	movs	r4, #105	@ 0x69
 8017b90:	4798      	blx	r3
 8017b92:	e7d2      	b.n	8017b3a <rcl_expand_topic_name+0x16a>
 8017b94:	2800      	cmp	r0, #0
 8017b96:	d05b      	beq.n	8017c50 <rcl_expand_topic_name+0x280>
 8017b98:	46c1      	mov	r9, r8
 8017b9a:	46a2      	mov	sl, r4
 8017b9c:	e782      	b.n	8017aa4 <rcl_expand_topic_name+0xd4>
 8017b9e:	46b1      	mov	r9, r6
 8017ba0:	e7a3      	b.n	8017aea <rcl_expand_topic_name+0x11a>
 8017ba2:	2800      	cmp	r0, #0
 8017ba4:	d1f8      	bne.n	8017b98 <rcl_expand_topic_name+0x1c8>
 8017ba6:	4638      	mov	r0, r7
 8017ba8:	f7e8 fb2a 	bl	8000200 <strlen>
 8017bac:	4a35      	ldr	r2, [pc, #212]	@ (8017c84 <rcl_expand_topic_name+0x2b4>)
 8017bae:	4b36      	ldr	r3, [pc, #216]	@ (8017c88 <rcl_expand_topic_name+0x2b8>)
 8017bb0:	f8cd 8010 	str.w	r8, [sp, #16]
 8017bb4:	2801      	cmp	r0, #1
 8017bb6:	bf18      	it	ne
 8017bb8:	4613      	movne	r3, r2
 8017bba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017bbe:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017bc2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017bc4:	9703      	str	r7, [sp, #12]
 8017bc6:	9200      	str	r2, [sp, #0]
 8017bc8:	ab14      	add	r3, sp, #80	@ 0x50
 8017bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017bcc:	f7fc fc2c 	bl	8014428 <rcutils_format_string_limit>
 8017bd0:	4682      	mov	sl, r0
 8017bd2:	4653      	mov	r3, sl
 8017bd4:	b32b      	cbz	r3, 8017c22 <rcl_expand_topic_name+0x252>
 8017bd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017bd8:	f8c3 a000 	str.w	sl, [r3]
 8017bdc:	e7ad      	b.n	8017b3a <rcl_expand_topic_name+0x16a>
 8017bde:	f89a 3000 	ldrb.w	r3, [sl]
 8017be2:	2b2f      	cmp	r3, #47	@ 0x2f
 8017be4:	d0f7      	beq.n	8017bd6 <rcl_expand_topic_name+0x206>
 8017be6:	4638      	mov	r0, r7
 8017be8:	f7e8 fb0a 	bl	8000200 <strlen>
 8017bec:	4a25      	ldr	r2, [pc, #148]	@ (8017c84 <rcl_expand_topic_name+0x2b4>)
 8017bee:	4b26      	ldr	r3, [pc, #152]	@ (8017c88 <rcl_expand_topic_name+0x2b8>)
 8017bf0:	f8cd a010 	str.w	sl, [sp, #16]
 8017bf4:	2801      	cmp	r0, #1
 8017bf6:	bf18      	it	ne
 8017bf8:	4613      	movne	r3, r2
 8017bfa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017bfe:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017c02:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017c04:	9703      	str	r7, [sp, #12]
 8017c06:	9200      	str	r2, [sp, #0]
 8017c08:	ab14      	add	r3, sp, #80	@ 0x50
 8017c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017c0c:	f7fc fc0c 	bl	8014428 <rcutils_format_string_limit>
 8017c10:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017c12:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017c14:	4605      	mov	r5, r0
 8017c16:	4650      	mov	r0, sl
 8017c18:	4798      	blx	r3
 8017c1a:	46aa      	mov	sl, r5
 8017c1c:	e7d9      	b.n	8017bd2 <rcl_expand_topic_name+0x202>
 8017c1e:	24ca      	movs	r4, #202	@ 0xca
 8017c20:	e78b      	b.n	8017b3a <rcl_expand_topic_name+0x16a>
 8017c22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017c24:	2300      	movs	r3, #0
 8017c26:	6013      	str	r3, [r2, #0]
 8017c28:	240a      	movs	r4, #10
 8017c2a:	e786      	b.n	8017b3a <rcl_expand_topic_name+0x16a>
 8017c2c:	465b      	mov	r3, fp
 8017c2e:	9c07      	ldr	r4, [sp, #28]
 8017c30:	46da      	mov	sl, fp
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d1d3      	bne.n	8017bde <rcl_expand_topic_name+0x20e>
 8017c36:	f898 3000 	ldrb.w	r3, [r8]
 8017c3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8017c3c:	d0cb      	beq.n	8017bd6 <rcl_expand_topic_name+0x206>
 8017c3e:	e7b2      	b.n	8017ba6 <rcl_expand_topic_name+0x1d6>
 8017c40:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8017c44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017c46:	6015      	str	r5, [r2, #0]
 8017c48:	4658      	mov	r0, fp
 8017c4a:	4798      	blx	r3
 8017c4c:	240a      	movs	r4, #10
 8017c4e:	e774      	b.n	8017b3a <rcl_expand_topic_name+0x16a>
 8017c50:	ab17      	add	r3, sp, #92	@ 0x5c
 8017c52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c56:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017c5a:	ab14      	add	r3, sp, #80	@ 0x50
 8017c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017c5e:	4640      	mov	r0, r8
 8017c60:	f7fc fcfc 	bl	801465c <rcutils_strdup>
 8017c64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017c66:	2800      	cmp	r0, #0
 8017c68:	6018      	str	r0, [r3, #0]
 8017c6a:	bf08      	it	eq
 8017c6c:	240a      	moveq	r4, #10
 8017c6e:	e764      	b.n	8017b3a <rcl_expand_topic_name+0x16a>
 8017c70:	0801b208 	.word	0x0801b208
 8017c74:	0801a714 	.word	0x0801a714
 8017c78:	0801b210 	.word	0x0801b210
 8017c7c:	0801b218 	.word	0x0801b218
 8017c80:	0801b220 	.word	0x0801b220
 8017c84:	0801aa64 	.word	0x0801aa64
 8017c88:	0801a724 	.word	0x0801a724

08017c8c <rcl_get_default_topic_name_substitutions>:
 8017c8c:	2800      	cmp	r0, #0
 8017c8e:	bf0c      	ite	eq
 8017c90:	200b      	moveq	r0, #11
 8017c92:	2000      	movne	r0, #0
 8017c94:	4770      	bx	lr
 8017c96:	bf00      	nop

08017c98 <rcl_get_zero_initialized_guard_condition>:
 8017c98:	4a03      	ldr	r2, [pc, #12]	@ (8017ca8 <rcl_get_zero_initialized_guard_condition+0x10>)
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ca0:	e883 0003 	stmia.w	r3, {r0, r1}
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	4770      	bx	lr
 8017ca8:	0801b22c 	.word	0x0801b22c

08017cac <rcl_guard_condition_init_from_rmw>:
 8017cac:	b082      	sub	sp, #8
 8017cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb2:	b086      	sub	sp, #24
 8017cb4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017cb8:	4604      	mov	r4, r0
 8017cba:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017cbe:	460e      	mov	r6, r1
 8017cc0:	4617      	mov	r7, r2
 8017cc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017cc6:	f10d 0e04 	add.w	lr, sp, #4
 8017cca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017cce:	f8dc 3000 	ldr.w	r3, [ip]
 8017cd2:	f8ce 3000 	str.w	r3, [lr]
 8017cd6:	a801      	add	r0, sp, #4
 8017cd8:	f7f3 fc22 	bl	800b520 <rcutils_allocator_is_valid>
 8017cdc:	b350      	cbz	r0, 8017d34 <rcl_guard_condition_init_from_rmw+0x88>
 8017cde:	b34c      	cbz	r4, 8017d34 <rcl_guard_condition_init_from_rmw+0x88>
 8017ce0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017ce4:	f1b8 0f00 	cmp.w	r8, #0
 8017ce8:	d11e      	bne.n	8017d28 <rcl_guard_condition_init_from_rmw+0x7c>
 8017cea:	b31f      	cbz	r7, 8017d34 <rcl_guard_condition_init_from_rmw+0x88>
 8017cec:	4638      	mov	r0, r7
 8017cee:	f7f9 fdef 	bl	80118d0 <rcl_context_is_valid>
 8017cf2:	b328      	cbz	r0, 8017d40 <rcl_guard_condition_init_from_rmw+0x94>
 8017cf4:	9b01      	ldr	r3, [sp, #4]
 8017cf6:	9905      	ldr	r1, [sp, #20]
 8017cf8:	201c      	movs	r0, #28
 8017cfa:	4798      	blx	r3
 8017cfc:	4605      	mov	r5, r0
 8017cfe:	6060      	str	r0, [r4, #4]
 8017d00:	b358      	cbz	r0, 8017d5a <rcl_guard_condition_init_from_rmw+0xae>
 8017d02:	b1fe      	cbz	r6, 8017d44 <rcl_guard_condition_init_from_rmw+0x98>
 8017d04:	6006      	str	r6, [r0, #0]
 8017d06:	f880 8004 	strb.w	r8, [r0, #4]
 8017d0a:	ac01      	add	r4, sp, #4
 8017d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d0e:	f105 0c08 	add.w	ip, r5, #8
 8017d12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017d16:	6823      	ldr	r3, [r4, #0]
 8017d18:	f8cc 3000 	str.w	r3, [ip]
 8017d1c:	2000      	movs	r0, #0
 8017d1e:	b006      	add	sp, #24
 8017d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d24:	b002      	add	sp, #8
 8017d26:	4770      	bx	lr
 8017d28:	2064      	movs	r0, #100	@ 0x64
 8017d2a:	b006      	add	sp, #24
 8017d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d30:	b002      	add	sp, #8
 8017d32:	4770      	bx	lr
 8017d34:	200b      	movs	r0, #11
 8017d36:	b006      	add	sp, #24
 8017d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d3c:	b002      	add	sp, #8
 8017d3e:	4770      	bx	lr
 8017d40:	2065      	movs	r0, #101	@ 0x65
 8017d42:	e7f2      	b.n	8017d2a <rcl_guard_condition_init_from_rmw+0x7e>
 8017d44:	6838      	ldr	r0, [r7, #0]
 8017d46:	3028      	adds	r0, #40	@ 0x28
 8017d48:	f000 fa3a 	bl	80181c0 <rmw_create_guard_condition>
 8017d4c:	6028      	str	r0, [r5, #0]
 8017d4e:	6865      	ldr	r5, [r4, #4]
 8017d50:	682e      	ldr	r6, [r5, #0]
 8017d52:	b126      	cbz	r6, 8017d5e <rcl_guard_condition_init_from_rmw+0xb2>
 8017d54:	2301      	movs	r3, #1
 8017d56:	712b      	strb	r3, [r5, #4]
 8017d58:	e7d7      	b.n	8017d0a <rcl_guard_condition_init_from_rmw+0x5e>
 8017d5a:	200a      	movs	r0, #10
 8017d5c:	e7e5      	b.n	8017d2a <rcl_guard_condition_init_from_rmw+0x7e>
 8017d5e:	4628      	mov	r0, r5
 8017d60:	9b02      	ldr	r3, [sp, #8]
 8017d62:	9905      	ldr	r1, [sp, #20]
 8017d64:	4798      	blx	r3
 8017d66:	6066      	str	r6, [r4, #4]
 8017d68:	2001      	movs	r0, #1
 8017d6a:	e7de      	b.n	8017d2a <rcl_guard_condition_init_from_rmw+0x7e>

08017d6c <rcl_guard_condition_fini>:
 8017d6c:	b570      	push	{r4, r5, r6, lr}
 8017d6e:	b082      	sub	sp, #8
 8017d70:	b1f0      	cbz	r0, 8017db0 <rcl_guard_condition_fini+0x44>
 8017d72:	6843      	ldr	r3, [r0, #4]
 8017d74:	4604      	mov	r4, r0
 8017d76:	b163      	cbz	r3, 8017d92 <rcl_guard_condition_fini+0x26>
 8017d78:	6818      	ldr	r0, [r3, #0]
 8017d7a:	68de      	ldr	r6, [r3, #12]
 8017d7c:	6999      	ldr	r1, [r3, #24]
 8017d7e:	b160      	cbz	r0, 8017d9a <rcl_guard_condition_fini+0x2e>
 8017d80:	791d      	ldrb	r5, [r3, #4]
 8017d82:	b965      	cbnz	r5, 8017d9e <rcl_guard_condition_fini+0x32>
 8017d84:	4618      	mov	r0, r3
 8017d86:	47b0      	blx	r6
 8017d88:	2300      	movs	r3, #0
 8017d8a:	4628      	mov	r0, r5
 8017d8c:	6063      	str	r3, [r4, #4]
 8017d8e:	b002      	add	sp, #8
 8017d90:	bd70      	pop	{r4, r5, r6, pc}
 8017d92:	461d      	mov	r5, r3
 8017d94:	4628      	mov	r0, r5
 8017d96:	b002      	add	sp, #8
 8017d98:	bd70      	pop	{r4, r5, r6, pc}
 8017d9a:	4605      	mov	r5, r0
 8017d9c:	e7f2      	b.n	8017d84 <rcl_guard_condition_fini+0x18>
 8017d9e:	9101      	str	r1, [sp, #4]
 8017da0:	f000 fa22 	bl	80181e8 <rmw_destroy_guard_condition>
 8017da4:	1e05      	subs	r5, r0, #0
 8017da6:	6863      	ldr	r3, [r4, #4]
 8017da8:	9901      	ldr	r1, [sp, #4]
 8017daa:	bf18      	it	ne
 8017dac:	2501      	movne	r5, #1
 8017dae:	e7e9      	b.n	8017d84 <rcl_guard_condition_fini+0x18>
 8017db0:	250b      	movs	r5, #11
 8017db2:	4628      	mov	r0, r5
 8017db4:	b002      	add	sp, #8
 8017db6:	bd70      	pop	{r4, r5, r6, pc}

08017db8 <rcl_guard_condition_get_default_options>:
 8017db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dba:	b087      	sub	sp, #28
 8017dbc:	4606      	mov	r6, r0
 8017dbe:	4668      	mov	r0, sp
 8017dc0:	f7f3 fba0 	bl	800b504 <rcutils_get_default_allocator>
 8017dc4:	4b09      	ldr	r3, [pc, #36]	@ (8017dec <rcl_guard_condition_get_default_options+0x34>)
 8017dc6:	46ee      	mov	lr, sp
 8017dc8:	469c      	mov	ip, r3
 8017dca:	461d      	mov	r5, r3
 8017dcc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017dd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017dd6:	4634      	mov	r4, r6
 8017dd8:	f8de 7000 	ldr.w	r7, [lr]
 8017ddc:	f8cc 7000 	str.w	r7, [ip]
 8017de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017de2:	4630      	mov	r0, r6
 8017de4:	6027      	str	r7, [r4, #0]
 8017de6:	b007      	add	sp, #28
 8017de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dea:	bf00      	nop
 8017dec:	2001551c 	.word	0x2001551c

08017df0 <rcl_guard_condition_get_rmw_handle>:
 8017df0:	b110      	cbz	r0, 8017df8 <rcl_guard_condition_get_rmw_handle+0x8>
 8017df2:	6840      	ldr	r0, [r0, #4]
 8017df4:	b100      	cbz	r0, 8017df8 <rcl_guard_condition_get_rmw_handle+0x8>
 8017df6:	6800      	ldr	r0, [r0, #0]
 8017df8:	4770      	bx	lr
 8017dfa:	bf00      	nop

08017dfc <rcl_validate_topic_name>:
 8017dfc:	2800      	cmp	r0, #0
 8017dfe:	d07a      	beq.n	8017ef6 <rcl_validate_topic_name+0xfa>
 8017e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e04:	460e      	mov	r6, r1
 8017e06:	2900      	cmp	r1, #0
 8017e08:	d07c      	beq.n	8017f04 <rcl_validate_topic_name+0x108>
 8017e0a:	4617      	mov	r7, r2
 8017e0c:	4605      	mov	r5, r0
 8017e0e:	f7e8 f9f7 	bl	8000200 <strlen>
 8017e12:	b1b0      	cbz	r0, 8017e42 <rcl_validate_topic_name+0x46>
 8017e14:	f895 9000 	ldrb.w	r9, [r5]
 8017e18:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017f9c <rcl_validate_topic_name+0x1a0>
 8017e1c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8017e20:	f013 0304 	ands.w	r3, r3, #4
 8017e24:	d169      	bne.n	8017efa <rcl_validate_topic_name+0xfe>
 8017e26:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8017e2a:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017e2e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017e30:	d10e      	bne.n	8017e50 <rcl_validate_topic_name+0x54>
 8017e32:	2202      	movs	r2, #2
 8017e34:	6032      	str	r2, [r6, #0]
 8017e36:	b36f      	cbz	r7, 8017e94 <rcl_validate_topic_name+0x98>
 8017e38:	f8c7 8000 	str.w	r8, [r7]
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e42:	2301      	movs	r3, #1
 8017e44:	6033      	str	r3, [r6, #0]
 8017e46:	b32f      	cbz	r7, 8017e94 <rcl_validate_topic_name+0x98>
 8017e48:	2000      	movs	r0, #0
 8017e4a:	6038      	str	r0, [r7, #0]
 8017e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e50:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017e54:	461c      	mov	r4, r3
 8017e56:	4619      	mov	r1, r3
 8017e58:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017e5c:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017e60:	f1be 0f09 	cmp.w	lr, #9
 8017e64:	d919      	bls.n	8017e9a <rcl_validate_topic_name+0x9e>
 8017e66:	f022 0e20 	bic.w	lr, r2, #32
 8017e6a:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017e6e:	f1be 0f19 	cmp.w	lr, #25
 8017e72:	d912      	bls.n	8017e9a <rcl_validate_topic_name+0x9e>
 8017e74:	2a5f      	cmp	r2, #95	@ 0x5f
 8017e76:	d019      	beq.n	8017eac <rcl_validate_topic_name+0xb0>
 8017e78:	2a2f      	cmp	r2, #47	@ 0x2f
 8017e7a:	d051      	beq.n	8017f20 <rcl_validate_topic_name+0x124>
 8017e7c:	2a7e      	cmp	r2, #126	@ 0x7e
 8017e7e:	d048      	beq.n	8017f12 <rcl_validate_topic_name+0x116>
 8017e80:	2a7b      	cmp	r2, #123	@ 0x7b
 8017e82:	d054      	beq.n	8017f2e <rcl_validate_topic_name+0x132>
 8017e84:	2a7d      	cmp	r2, #125	@ 0x7d
 8017e86:	d161      	bne.n	8017f4c <rcl_validate_topic_name+0x150>
 8017e88:	2c00      	cmp	r4, #0
 8017e8a:	d155      	bne.n	8017f38 <rcl_validate_topic_name+0x13c>
 8017e8c:	2305      	movs	r3, #5
 8017e8e:	6033      	str	r3, [r6, #0]
 8017e90:	b107      	cbz	r7, 8017e94 <rcl_validate_topic_name+0x98>
 8017e92:	6039      	str	r1, [r7, #0]
 8017e94:	2000      	movs	r0, #0
 8017e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e9a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017e9e:	0752      	lsls	r2, r2, #29
 8017ea0:	d504      	bpl.n	8017eac <rcl_validate_topic_name+0xb0>
 8017ea2:	b11c      	cbz	r4, 8017eac <rcl_validate_topic_name+0xb0>
 8017ea4:	b111      	cbz	r1, 8017eac <rcl_validate_topic_name+0xb0>
 8017ea6:	1e4a      	subs	r2, r1, #1
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	d02d      	beq.n	8017f08 <rcl_validate_topic_name+0x10c>
 8017eac:	3101      	adds	r1, #1
 8017eae:	4288      	cmp	r0, r1
 8017eb0:	d1d2      	bne.n	8017e58 <rcl_validate_topic_name+0x5c>
 8017eb2:	2c00      	cmp	r4, #0
 8017eb4:	d145      	bne.n	8017f42 <rcl_validate_topic_name+0x146>
 8017eb6:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8017eba:	d04f      	beq.n	8017f5c <rcl_validate_topic_name+0x160>
 8017ebc:	4620      	mov	r0, r4
 8017ebe:	2301      	movs	r3, #1
 8017ec0:	e006      	b.n	8017ed0 <rcl_validate_topic_name+0xd4>
 8017ec2:	428b      	cmp	r3, r1
 8017ec4:	f105 0501 	add.w	r5, r5, #1
 8017ec8:	f103 0201 	add.w	r2, r3, #1
 8017ecc:	d236      	bcs.n	8017f3c <rcl_validate_topic_name+0x140>
 8017ece:	4613      	mov	r3, r2
 8017ed0:	4580      	cmp	r8, r0
 8017ed2:	f100 0001 	add.w	r0, r0, #1
 8017ed6:	d0f4      	beq.n	8017ec2 <rcl_validate_topic_name+0xc6>
 8017ed8:	782a      	ldrb	r2, [r5, #0]
 8017eda:	2a2f      	cmp	r2, #47	@ 0x2f
 8017edc:	d1f1      	bne.n	8017ec2 <rcl_validate_topic_name+0xc6>
 8017ede:	786a      	ldrb	r2, [r5, #1]
 8017ee0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017ee4:	0754      	lsls	r4, r2, #29
 8017ee6:	d5ec      	bpl.n	8017ec2 <rcl_validate_topic_name+0xc6>
 8017ee8:	2204      	movs	r2, #4
 8017eea:	6032      	str	r2, [r6, #0]
 8017eec:	2f00      	cmp	r7, #0
 8017eee:	d0d1      	beq.n	8017e94 <rcl_validate_topic_name+0x98>
 8017ef0:	603b      	str	r3, [r7, #0]
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	e7aa      	b.n	8017e4c <rcl_validate_topic_name+0x50>
 8017ef6:	200b      	movs	r0, #11
 8017ef8:	4770      	bx	lr
 8017efa:	2304      	movs	r3, #4
 8017efc:	6033      	str	r3, [r6, #0]
 8017efe:	2f00      	cmp	r7, #0
 8017f00:	d1a2      	bne.n	8017e48 <rcl_validate_topic_name+0x4c>
 8017f02:	e7c7      	b.n	8017e94 <rcl_validate_topic_name+0x98>
 8017f04:	200b      	movs	r0, #11
 8017f06:	e7a1      	b.n	8017e4c <rcl_validate_topic_name+0x50>
 8017f08:	2309      	movs	r3, #9
 8017f0a:	6033      	str	r3, [r6, #0]
 8017f0c:	2f00      	cmp	r7, #0
 8017f0e:	d1c0      	bne.n	8017e92 <rcl_validate_topic_name+0x96>
 8017f10:	e7c0      	b.n	8017e94 <rcl_validate_topic_name+0x98>
 8017f12:	2900      	cmp	r1, #0
 8017f14:	d0ca      	beq.n	8017eac <rcl_validate_topic_name+0xb0>
 8017f16:	2306      	movs	r3, #6
 8017f18:	6033      	str	r3, [r6, #0]
 8017f1a:	2f00      	cmp	r7, #0
 8017f1c:	d1b9      	bne.n	8017e92 <rcl_validate_topic_name+0x96>
 8017f1e:	e7b9      	b.n	8017e94 <rcl_validate_topic_name+0x98>
 8017f20:	2c00      	cmp	r4, #0
 8017f22:	d0c3      	beq.n	8017eac <rcl_validate_topic_name+0xb0>
 8017f24:	2308      	movs	r3, #8
 8017f26:	6033      	str	r3, [r6, #0]
 8017f28:	2f00      	cmp	r7, #0
 8017f2a:	d1b2      	bne.n	8017e92 <rcl_validate_topic_name+0x96>
 8017f2c:	e7b2      	b.n	8017e94 <rcl_validate_topic_name+0x98>
 8017f2e:	2c00      	cmp	r4, #0
 8017f30:	d1f8      	bne.n	8017f24 <rcl_validate_topic_name+0x128>
 8017f32:	460b      	mov	r3, r1
 8017f34:	2401      	movs	r4, #1
 8017f36:	e7b9      	b.n	8017eac <rcl_validate_topic_name+0xb0>
 8017f38:	2400      	movs	r4, #0
 8017f3a:	e7b7      	b.n	8017eac <rcl_validate_topic_name+0xb0>
 8017f3c:	2000      	movs	r0, #0
 8017f3e:	6030      	str	r0, [r6, #0]
 8017f40:	e784      	b.n	8017e4c <rcl_validate_topic_name+0x50>
 8017f42:	2205      	movs	r2, #5
 8017f44:	6032      	str	r2, [r6, #0]
 8017f46:	2f00      	cmp	r7, #0
 8017f48:	d1d2      	bne.n	8017ef0 <rcl_validate_topic_name+0xf4>
 8017f4a:	e7a3      	b.n	8017e94 <rcl_validate_topic_name+0x98>
 8017f4c:	2c00      	cmp	r4, #0
 8017f4e:	bf14      	ite	ne
 8017f50:	2308      	movne	r3, #8
 8017f52:	2303      	moveq	r3, #3
 8017f54:	6033      	str	r3, [r6, #0]
 8017f56:	2f00      	cmp	r7, #0
 8017f58:	d19b      	bne.n	8017e92 <rcl_validate_topic_name+0x96>
 8017f5a:	e79b      	b.n	8017e94 <rcl_validate_topic_name+0x98>
 8017f5c:	2301      	movs	r3, #1
 8017f5e:	e00a      	b.n	8017f76 <rcl_validate_topic_name+0x17a>
 8017f60:	2c01      	cmp	r4, #1
 8017f62:	d013      	beq.n	8017f8c <rcl_validate_topic_name+0x190>
 8017f64:	4299      	cmp	r1, r3
 8017f66:	f104 0401 	add.w	r4, r4, #1
 8017f6a:	f105 0501 	add.w	r5, r5, #1
 8017f6e:	f103 0201 	add.w	r2, r3, #1
 8017f72:	d9e3      	bls.n	8017f3c <rcl_validate_topic_name+0x140>
 8017f74:	4613      	mov	r3, r2
 8017f76:	45a0      	cmp	r8, r4
 8017f78:	d0f4      	beq.n	8017f64 <rcl_validate_topic_name+0x168>
 8017f7a:	782a      	ldrb	r2, [r5, #0]
 8017f7c:	2a2f      	cmp	r2, #47	@ 0x2f
 8017f7e:	d1ef      	bne.n	8017f60 <rcl_validate_topic_name+0x164>
 8017f80:	786a      	ldrb	r2, [r5, #1]
 8017f82:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017f86:	0752      	lsls	r2, r2, #29
 8017f88:	d5ec      	bpl.n	8017f64 <rcl_validate_topic_name+0x168>
 8017f8a:	e7ad      	b.n	8017ee8 <rcl_validate_topic_name+0xec>
 8017f8c:	2307      	movs	r3, #7
 8017f8e:	6033      	str	r3, [r6, #0]
 8017f90:	2f00      	cmp	r7, #0
 8017f92:	f43f af7f 	beq.w	8017e94 <rcl_validate_topic_name+0x98>
 8017f96:	603c      	str	r4, [r7, #0]
 8017f98:	2000      	movs	r0, #0
 8017f9a:	e757      	b.n	8017e4c <rcl_validate_topic_name+0x50>
 8017f9c:	0801b396 	.word	0x0801b396

08017fa0 <rcutils_string_array_fini>:
 8017fa0:	b320      	cbz	r0, 8017fec <rcutils_string_array_fini+0x4c>
 8017fa2:	b570      	push	{r4, r5, r6, lr}
 8017fa4:	4604      	mov	r4, r0
 8017fa6:	6840      	ldr	r0, [r0, #4]
 8017fa8:	b1d8      	cbz	r0, 8017fe2 <rcutils_string_array_fini+0x42>
 8017faa:	f104 0008 	add.w	r0, r4, #8
 8017fae:	f7f3 fab7 	bl	800b520 <rcutils_allocator_is_valid>
 8017fb2:	b1b8      	cbz	r0, 8017fe4 <rcutils_string_array_fini+0x44>
 8017fb4:	6823      	ldr	r3, [r4, #0]
 8017fb6:	b1bb      	cbz	r3, 8017fe8 <rcutils_string_array_fini+0x48>
 8017fb8:	2500      	movs	r5, #0
 8017fba:	6860      	ldr	r0, [r4, #4]
 8017fbc:	462e      	mov	r6, r5
 8017fbe:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8017fc2:	68e3      	ldr	r3, [r4, #12]
 8017fc4:	69a1      	ldr	r1, [r4, #24]
 8017fc6:	4798      	blx	r3
 8017fc8:	e9d4 3000 	ldrd	r3, r0, [r4]
 8017fcc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8017fd0:	3501      	adds	r5, #1
 8017fd2:	429d      	cmp	r5, r3
 8017fd4:	d3f3      	bcc.n	8017fbe <rcutils_string_array_fini+0x1e>
 8017fd6:	68e3      	ldr	r3, [r4, #12]
 8017fd8:	69a1      	ldr	r1, [r4, #24]
 8017fda:	4798      	blx	r3
 8017fdc:	2000      	movs	r0, #0
 8017fde:	e9c4 0000 	strd	r0, r0, [r4]
 8017fe2:	bd70      	pop	{r4, r5, r6, pc}
 8017fe4:	200b      	movs	r0, #11
 8017fe6:	bd70      	pop	{r4, r5, r6, pc}
 8017fe8:	6860      	ldr	r0, [r4, #4]
 8017fea:	e7f4      	b.n	8017fd6 <rcutils_string_array_fini+0x36>
 8017fec:	200b      	movs	r0, #11
 8017fee:	4770      	bx	lr

08017ff0 <on_status>:
 8017ff0:	b082      	sub	sp, #8
 8017ff2:	b002      	add	sp, #8
 8017ff4:	4770      	bx	lr
 8017ff6:	bf00      	nop

08017ff8 <on_topic>:
 8017ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ffc:	4a22      	ldr	r2, [pc, #136]	@ (8018088 <on_topic+0x90>)
 8017ffe:	b094      	sub	sp, #80	@ 0x50
 8018000:	6812      	ldr	r2, [r2, #0]
 8018002:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8018004:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018008:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801800c:	b3c2      	cbz	r2, 8018080 <on_topic+0x88>
 801800e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8018012:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8018016:	e001      	b.n	801801c <on_topic+0x24>
 8018018:	6852      	ldr	r2, [r2, #4]
 801801a:	b38a      	cbz	r2, 8018080 <on_topic+0x88>
 801801c:	6894      	ldr	r4, [r2, #8]
 801801e:	8aa3      	ldrh	r3, [r4, #20]
 8018020:	428b      	cmp	r3, r1
 8018022:	d1f9      	bne.n	8018018 <on_topic+0x20>
 8018024:	7da3      	ldrb	r3, [r4, #22]
 8018026:	4283      	cmp	r3, r0
 8018028:	d1f6      	bne.n	8018018 <on_topic+0x20>
 801802a:	2248      	movs	r2, #72	@ 0x48
 801802c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018030:	4668      	mov	r0, sp
 8018032:	f000 ff50 	bl	8018ed6 <memcpy>
 8018036:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801803a:	cb0c      	ldmia	r3, {r2, r3}
 801803c:	4620      	mov	r0, r4
 801803e:	f7f3 fe9f 	bl	800bd80 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018042:	4607      	mov	r7, r0
 8018044:	b1e0      	cbz	r0, 8018080 <on_topic+0x88>
 8018046:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801804a:	4632      	mov	r2, r6
 801804c:	4628      	mov	r0, r5
 801804e:	f108 0110 	add.w	r1, r8, #16
 8018052:	f7f4 fd95 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 8018056:	b930      	cbnz	r0, 8018066 <on_topic+0x6e>
 8018058:	480c      	ldr	r0, [pc, #48]	@ (801808c <on_topic+0x94>)
 801805a:	4639      	mov	r1, r7
 801805c:	b014      	add	sp, #80	@ 0x50
 801805e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018062:	f7fc be85 	b.w	8014d70 <put_memory>
 8018066:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801806a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801806e:	f7fd ffad 	bl	8015fcc <rmw_uros_epoch_nanos>
 8018072:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8018076:	2305      	movs	r3, #5
 8018078:	e942 0102 	strd	r0, r1, [r2, #-8]
 801807c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8018080:	b014      	add	sp, #80	@ 0x50
 8018082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018086:	bf00      	nop
 8018088:	2001537c 	.word	0x2001537c
 801808c:	2001536c 	.word	0x2001536c

08018090 <on_request>:
 8018090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018094:	4823      	ldr	r0, [pc, #140]	@ (8018124 <on_request+0x94>)
 8018096:	b094      	sub	sp, #80	@ 0x50
 8018098:	6800      	ldr	r0, [r0, #0]
 801809a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801809c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80180a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80180a2:	2800      	cmp	r0, #0
 80180a4:	d03b      	beq.n	801811e <on_request+0x8e>
 80180a6:	461d      	mov	r5, r3
 80180a8:	e001      	b.n	80180ae <on_request+0x1e>
 80180aa:	6840      	ldr	r0, [r0, #4]
 80180ac:	b3b8      	cbz	r0, 801811e <on_request+0x8e>
 80180ae:	6884      	ldr	r4, [r0, #8]
 80180b0:	8b21      	ldrh	r1, [r4, #24]
 80180b2:	4291      	cmp	r1, r2
 80180b4:	d1f9      	bne.n	80180aa <on_request+0x1a>
 80180b6:	2248      	movs	r2, #72	@ 0x48
 80180b8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80180bc:	4668      	mov	r0, sp
 80180be:	f000 ff0a 	bl	8018ed6 <memcpy>
 80180c2:	f104 0320 	add.w	r3, r4, #32
 80180c6:	cb0c      	ldmia	r3, {r2, r3}
 80180c8:	4620      	mov	r0, r4
 80180ca:	f7f3 fe59 	bl	800bd80 <rmw_uxrce_get_static_input_buffer_for_entity>
 80180ce:	4680      	mov	r8, r0
 80180d0:	b328      	cbz	r0, 801811e <on_request+0x8e>
 80180d2:	4638      	mov	r0, r7
 80180d4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80180d8:	4632      	mov	r2, r6
 80180da:	f107 0110 	add.w	r1, r7, #16
 80180de:	f7f4 fd4f 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 80180e2:	b930      	cbnz	r0, 80180f2 <on_request+0x62>
 80180e4:	4810      	ldr	r0, [pc, #64]	@ (8018128 <on_request+0x98>)
 80180e6:	4641      	mov	r1, r8
 80180e8:	b014      	add	sp, #80	@ 0x50
 80180ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180ee:	f7fc be3f 	b.w	8014d70 <put_memory>
 80180f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80180f4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80180f8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80180fc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018100:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018104:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018108:	e88c 0003 	stmia.w	ip, {r0, r1}
 801810c:	f7fd ff5e 	bl	8015fcc <rmw_uros_epoch_nanos>
 8018110:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8018114:	2303      	movs	r3, #3
 8018116:	e942 0102 	strd	r0, r1, [r2, #-8]
 801811a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801811e:	b014      	add	sp, #80	@ 0x50
 8018120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018124:	2001534c 	.word	0x2001534c
 8018128:	2001536c 	.word	0x2001536c

0801812c <on_reply>:
 801812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018130:	4821      	ldr	r0, [pc, #132]	@ (80181b8 <on_reply+0x8c>)
 8018132:	b094      	sub	sp, #80	@ 0x50
 8018134:	6800      	ldr	r0, [r0, #0]
 8018136:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018138:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801813c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801813e:	b3b8      	cbz	r0, 80181b0 <on_reply+0x84>
 8018140:	461d      	mov	r5, r3
 8018142:	e001      	b.n	8018148 <on_reply+0x1c>
 8018144:	6840      	ldr	r0, [r0, #4]
 8018146:	b398      	cbz	r0, 80181b0 <on_reply+0x84>
 8018148:	6884      	ldr	r4, [r0, #8]
 801814a:	8b21      	ldrh	r1, [r4, #24]
 801814c:	4291      	cmp	r1, r2
 801814e:	d1f9      	bne.n	8018144 <on_reply+0x18>
 8018150:	2248      	movs	r2, #72	@ 0x48
 8018152:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8018156:	4668      	mov	r0, sp
 8018158:	f000 febd 	bl	8018ed6 <memcpy>
 801815c:	f104 0320 	add.w	r3, r4, #32
 8018160:	cb0c      	ldmia	r3, {r2, r3}
 8018162:	4620      	mov	r0, r4
 8018164:	f7f3 fe0c 	bl	800bd80 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018168:	4680      	mov	r8, r0
 801816a:	b308      	cbz	r0, 80181b0 <on_reply+0x84>
 801816c:	4638      	mov	r0, r7
 801816e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8018172:	4632      	mov	r2, r6
 8018174:	f107 0110 	add.w	r1, r7, #16
 8018178:	f7f4 fd02 	bl	800cb80 <ucdr_deserialize_array_uint8_t>
 801817c:	b930      	cbnz	r0, 801818c <on_reply+0x60>
 801817e:	480f      	ldr	r0, [pc, #60]	@ (80181bc <on_reply+0x90>)
 8018180:	4641      	mov	r1, r8
 8018182:	b014      	add	sp, #80	@ 0x50
 8018184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018188:	f7fc bdf2 	b.w	8014d70 <put_memory>
 801818c:	2200      	movs	r2, #0
 801818e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8018192:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8018196:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801819a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801819e:	f7fd ff15 	bl	8015fcc <rmw_uros_epoch_nanos>
 80181a2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80181a6:	2304      	movs	r3, #4
 80181a8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80181ac:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80181b0:	b014      	add	sp, #80	@ 0x50
 80181b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181b6:	bf00      	nop
 80181b8:	20010a60 	.word	0x20010a60
 80181bc:	2001536c 	.word	0x2001536c

080181c0 <rmw_create_guard_condition>:
 80181c0:	b538      	push	{r3, r4, r5, lr}
 80181c2:	4605      	mov	r5, r0
 80181c4:	4807      	ldr	r0, [pc, #28]	@ (80181e4 <rmw_create_guard_condition+0x24>)
 80181c6:	f7fc fdc3 	bl	8014d50 <get_memory>
 80181ca:	b148      	cbz	r0, 80181e0 <rmw_create_guard_condition+0x20>
 80181cc:	6884      	ldr	r4, [r0, #8]
 80181ce:	2300      	movs	r3, #0
 80181d0:	7423      	strb	r3, [r4, #16]
 80181d2:	61e5      	str	r5, [r4, #28]
 80181d4:	f7fc fe24 	bl	8014e20 <rmw_get_implementation_identifier>
 80181d8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80181dc:	f104 0014 	add.w	r0, r4, #20
 80181e0:	bd38      	pop	{r3, r4, r5, pc}
 80181e2:	bf00      	nop
 80181e4:	2001530c 	.word	0x2001530c

080181e8 <rmw_destroy_guard_condition>:
 80181e8:	b508      	push	{r3, lr}
 80181ea:	4b08      	ldr	r3, [pc, #32]	@ (801820c <rmw_destroy_guard_condition+0x24>)
 80181ec:	6819      	ldr	r1, [r3, #0]
 80181ee:	b911      	cbnz	r1, 80181f6 <rmw_destroy_guard_condition+0xe>
 80181f0:	e00a      	b.n	8018208 <rmw_destroy_guard_condition+0x20>
 80181f2:	6849      	ldr	r1, [r1, #4]
 80181f4:	b141      	cbz	r1, 8018208 <rmw_destroy_guard_condition+0x20>
 80181f6:	688b      	ldr	r3, [r1, #8]
 80181f8:	3314      	adds	r3, #20
 80181fa:	4298      	cmp	r0, r3
 80181fc:	d1f9      	bne.n	80181f2 <rmw_destroy_guard_condition+0xa>
 80181fe:	4803      	ldr	r0, [pc, #12]	@ (801820c <rmw_destroy_guard_condition+0x24>)
 8018200:	f7fc fdb6 	bl	8014d70 <put_memory>
 8018204:	2000      	movs	r0, #0
 8018206:	bd08      	pop	{r3, pc}
 8018208:	2001      	movs	r0, #1
 801820a:	bd08      	pop	{r3, pc}
 801820c:	2001530c 	.word	0x2001530c

08018210 <rosidl_runtime_c__String__init>:
 8018210:	b510      	push	{r4, lr}
 8018212:	4604      	mov	r4, r0
 8018214:	b086      	sub	sp, #24
 8018216:	b170      	cbz	r0, 8018236 <rosidl_runtime_c__String__init+0x26>
 8018218:	a801      	add	r0, sp, #4
 801821a:	f7f3 f973 	bl	800b504 <rcutils_get_default_allocator>
 801821e:	9b01      	ldr	r3, [sp, #4]
 8018220:	9905      	ldr	r1, [sp, #20]
 8018222:	2001      	movs	r0, #1
 8018224:	4798      	blx	r3
 8018226:	6020      	str	r0, [r4, #0]
 8018228:	b128      	cbz	r0, 8018236 <rosidl_runtime_c__String__init+0x26>
 801822a:	2100      	movs	r1, #0
 801822c:	2201      	movs	r2, #1
 801822e:	7001      	strb	r1, [r0, #0]
 8018230:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8018234:	4610      	mov	r0, r2
 8018236:	b006      	add	sp, #24
 8018238:	bd10      	pop	{r4, pc}
 801823a:	bf00      	nop

0801823c <rosidl_runtime_c__String__fini>:
 801823c:	b320      	cbz	r0, 8018288 <rosidl_runtime_c__String__fini+0x4c>
 801823e:	b510      	push	{r4, lr}
 8018240:	6803      	ldr	r3, [r0, #0]
 8018242:	b086      	sub	sp, #24
 8018244:	4604      	mov	r4, r0
 8018246:	b173      	cbz	r3, 8018266 <rosidl_runtime_c__String__fini+0x2a>
 8018248:	6883      	ldr	r3, [r0, #8]
 801824a:	b1f3      	cbz	r3, 801828a <rosidl_runtime_c__String__fini+0x4e>
 801824c:	a801      	add	r0, sp, #4
 801824e:	f7f3 f959 	bl	800b504 <rcutils_get_default_allocator>
 8018252:	9b02      	ldr	r3, [sp, #8]
 8018254:	9905      	ldr	r1, [sp, #20]
 8018256:	6820      	ldr	r0, [r4, #0]
 8018258:	4798      	blx	r3
 801825a:	2300      	movs	r3, #0
 801825c:	e9c4 3300 	strd	r3, r3, [r4]
 8018260:	60a3      	str	r3, [r4, #8]
 8018262:	b006      	add	sp, #24
 8018264:	bd10      	pop	{r4, pc}
 8018266:	6843      	ldr	r3, [r0, #4]
 8018268:	b9db      	cbnz	r3, 80182a2 <rosidl_runtime_c__String__fini+0x66>
 801826a:	6883      	ldr	r3, [r0, #8]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d0f8      	beq.n	8018262 <rosidl_runtime_c__String__fini+0x26>
 8018270:	4b12      	ldr	r3, [pc, #72]	@ (80182bc <rosidl_runtime_c__String__fini+0x80>)
 8018272:	4813      	ldr	r0, [pc, #76]	@ (80182c0 <rosidl_runtime_c__String__fini+0x84>)
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	2251      	movs	r2, #81	@ 0x51
 8018278:	68db      	ldr	r3, [r3, #12]
 801827a:	2101      	movs	r1, #1
 801827c:	f000 fbf0 	bl	8018a60 <fwrite>
 8018280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018284:	f000 f83e 	bl	8018304 <exit>
 8018288:	4770      	bx	lr
 801828a:	4b0c      	ldr	r3, [pc, #48]	@ (80182bc <rosidl_runtime_c__String__fini+0x80>)
 801828c:	480d      	ldr	r0, [pc, #52]	@ (80182c4 <rosidl_runtime_c__String__fini+0x88>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	224c      	movs	r2, #76	@ 0x4c
 8018292:	68db      	ldr	r3, [r3, #12]
 8018294:	2101      	movs	r1, #1
 8018296:	f000 fbe3 	bl	8018a60 <fwrite>
 801829a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801829e:	f000 f831 	bl	8018304 <exit>
 80182a2:	4b06      	ldr	r3, [pc, #24]	@ (80182bc <rosidl_runtime_c__String__fini+0x80>)
 80182a4:	4808      	ldr	r0, [pc, #32]	@ (80182c8 <rosidl_runtime_c__String__fini+0x8c>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	224e      	movs	r2, #78	@ 0x4e
 80182aa:	68db      	ldr	r3, [r3, #12]
 80182ac:	2101      	movs	r1, #1
 80182ae:	f000 fbd7 	bl	8018a60 <fwrite>
 80182b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80182b6:	f000 f825 	bl	8018304 <exit>
 80182ba:	bf00      	nop
 80182bc:	20000754 	.word	0x20000754
 80182c0:	0801b2d4 	.word	0x0801b2d4
 80182c4:	0801b234 	.word	0x0801b234
 80182c8:	0801b284 	.word	0x0801b284

080182cc <calloc>:
 80182cc:	4b02      	ldr	r3, [pc, #8]	@ (80182d8 <calloc+0xc>)
 80182ce:	460a      	mov	r2, r1
 80182d0:	4601      	mov	r1, r0
 80182d2:	6818      	ldr	r0, [r3, #0]
 80182d4:	f000 b802 	b.w	80182dc <_calloc_r>
 80182d8:	20000754 	.word	0x20000754

080182dc <_calloc_r>:
 80182dc:	b570      	push	{r4, r5, r6, lr}
 80182de:	fba1 5402 	umull	r5, r4, r1, r2
 80182e2:	b93c      	cbnz	r4, 80182f4 <_calloc_r+0x18>
 80182e4:	4629      	mov	r1, r5
 80182e6:	f000 f899 	bl	801841c <_malloc_r>
 80182ea:	4606      	mov	r6, r0
 80182ec:	b928      	cbnz	r0, 80182fa <_calloc_r+0x1e>
 80182ee:	2600      	movs	r6, #0
 80182f0:	4630      	mov	r0, r6
 80182f2:	bd70      	pop	{r4, r5, r6, pc}
 80182f4:	220c      	movs	r2, #12
 80182f6:	6002      	str	r2, [r0, #0]
 80182f8:	e7f9      	b.n	80182ee <_calloc_r+0x12>
 80182fa:	462a      	mov	r2, r5
 80182fc:	4621      	mov	r1, r4
 80182fe:	f000 fd82 	bl	8018e06 <memset>
 8018302:	e7f5      	b.n	80182f0 <_calloc_r+0x14>

08018304 <exit>:
 8018304:	b508      	push	{r3, lr}
 8018306:	4b06      	ldr	r3, [pc, #24]	@ (8018320 <exit+0x1c>)
 8018308:	4604      	mov	r4, r0
 801830a:	b113      	cbz	r3, 8018312 <exit+0xe>
 801830c:	2100      	movs	r1, #0
 801830e:	f3af 8000 	nop.w
 8018312:	4b04      	ldr	r3, [pc, #16]	@ (8018324 <exit+0x20>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	b103      	cbz	r3, 801831a <exit+0x16>
 8018318:	4798      	blx	r3
 801831a:	4620      	mov	r0, r4
 801831c:	f7ea f878 	bl	8002410 <_exit>
 8018320:	00000000 	.word	0x00000000
 8018324:	20015670 	.word	0x20015670

08018328 <getenv>:
 8018328:	b507      	push	{r0, r1, r2, lr}
 801832a:	4b04      	ldr	r3, [pc, #16]	@ (801833c <getenv+0x14>)
 801832c:	4601      	mov	r1, r0
 801832e:	aa01      	add	r2, sp, #4
 8018330:	6818      	ldr	r0, [r3, #0]
 8018332:	f000 f805 	bl	8018340 <_findenv_r>
 8018336:	b003      	add	sp, #12
 8018338:	f85d fb04 	ldr.w	pc, [sp], #4
 801833c:	20000754 	.word	0x20000754

08018340 <_findenv_r>:
 8018340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018344:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80183b4 <_findenv_r+0x74>
 8018348:	4606      	mov	r6, r0
 801834a:	4689      	mov	r9, r1
 801834c:	4617      	mov	r7, r2
 801834e:	f000 fdf7 	bl	8018f40 <__env_lock>
 8018352:	f8da 4000 	ldr.w	r4, [sl]
 8018356:	b134      	cbz	r4, 8018366 <_findenv_r+0x26>
 8018358:	464b      	mov	r3, r9
 801835a:	4698      	mov	r8, r3
 801835c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018360:	b13a      	cbz	r2, 8018372 <_findenv_r+0x32>
 8018362:	2a3d      	cmp	r2, #61	@ 0x3d
 8018364:	d1f9      	bne.n	801835a <_findenv_r+0x1a>
 8018366:	4630      	mov	r0, r6
 8018368:	f000 fdf0 	bl	8018f4c <__env_unlock>
 801836c:	2000      	movs	r0, #0
 801836e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018372:	eba8 0809 	sub.w	r8, r8, r9
 8018376:	46a3      	mov	fp, r4
 8018378:	f854 0b04 	ldr.w	r0, [r4], #4
 801837c:	2800      	cmp	r0, #0
 801837e:	d0f2      	beq.n	8018366 <_findenv_r+0x26>
 8018380:	4642      	mov	r2, r8
 8018382:	4649      	mov	r1, r9
 8018384:	f000 fced 	bl	8018d62 <strncmp>
 8018388:	2800      	cmp	r0, #0
 801838a:	d1f4      	bne.n	8018376 <_findenv_r+0x36>
 801838c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018390:	eb03 0508 	add.w	r5, r3, r8
 8018394:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018398:	2b3d      	cmp	r3, #61	@ 0x3d
 801839a:	d1ec      	bne.n	8018376 <_findenv_r+0x36>
 801839c:	f8da 3000 	ldr.w	r3, [sl]
 80183a0:	ebab 0303 	sub.w	r3, fp, r3
 80183a4:	109b      	asrs	r3, r3, #2
 80183a6:	4630      	mov	r0, r6
 80183a8:	603b      	str	r3, [r7, #0]
 80183aa:	f000 fdcf 	bl	8018f4c <__env_unlock>
 80183ae:	1c68      	adds	r0, r5, #1
 80183b0:	e7dd      	b.n	801836e <_findenv_r+0x2e>
 80183b2:	bf00      	nop
 80183b4:	20000000 	.word	0x20000000

080183b8 <malloc>:
 80183b8:	4b02      	ldr	r3, [pc, #8]	@ (80183c4 <malloc+0xc>)
 80183ba:	4601      	mov	r1, r0
 80183bc:	6818      	ldr	r0, [r3, #0]
 80183be:	f000 b82d 	b.w	801841c <_malloc_r>
 80183c2:	bf00      	nop
 80183c4:	20000754 	.word	0x20000754

080183c8 <free>:
 80183c8:	4b02      	ldr	r3, [pc, #8]	@ (80183d4 <free+0xc>)
 80183ca:	4601      	mov	r1, r0
 80183cc:	6818      	ldr	r0, [r3, #0]
 80183ce:	f000 bdc3 	b.w	8018f58 <_free_r>
 80183d2:	bf00      	nop
 80183d4:	20000754 	.word	0x20000754

080183d8 <sbrk_aligned>:
 80183d8:	b570      	push	{r4, r5, r6, lr}
 80183da:	4e0f      	ldr	r6, [pc, #60]	@ (8018418 <sbrk_aligned+0x40>)
 80183dc:	460c      	mov	r4, r1
 80183de:	6831      	ldr	r1, [r6, #0]
 80183e0:	4605      	mov	r5, r0
 80183e2:	b911      	cbnz	r1, 80183ea <sbrk_aligned+0x12>
 80183e4:	f000 fd3a 	bl	8018e5c <_sbrk_r>
 80183e8:	6030      	str	r0, [r6, #0]
 80183ea:	4621      	mov	r1, r4
 80183ec:	4628      	mov	r0, r5
 80183ee:	f000 fd35 	bl	8018e5c <_sbrk_r>
 80183f2:	1c43      	adds	r3, r0, #1
 80183f4:	d103      	bne.n	80183fe <sbrk_aligned+0x26>
 80183f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80183fa:	4620      	mov	r0, r4
 80183fc:	bd70      	pop	{r4, r5, r6, pc}
 80183fe:	1cc4      	adds	r4, r0, #3
 8018400:	f024 0403 	bic.w	r4, r4, #3
 8018404:	42a0      	cmp	r0, r4
 8018406:	d0f8      	beq.n	80183fa <sbrk_aligned+0x22>
 8018408:	1a21      	subs	r1, r4, r0
 801840a:	4628      	mov	r0, r5
 801840c:	f000 fd26 	bl	8018e5c <_sbrk_r>
 8018410:	3001      	adds	r0, #1
 8018412:	d1f2      	bne.n	80183fa <sbrk_aligned+0x22>
 8018414:	e7ef      	b.n	80183f6 <sbrk_aligned+0x1e>
 8018416:	bf00      	nop
 8018418:	20015530 	.word	0x20015530

0801841c <_malloc_r>:
 801841c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018420:	1ccd      	adds	r5, r1, #3
 8018422:	f025 0503 	bic.w	r5, r5, #3
 8018426:	3508      	adds	r5, #8
 8018428:	2d0c      	cmp	r5, #12
 801842a:	bf38      	it	cc
 801842c:	250c      	movcc	r5, #12
 801842e:	2d00      	cmp	r5, #0
 8018430:	4606      	mov	r6, r0
 8018432:	db01      	blt.n	8018438 <_malloc_r+0x1c>
 8018434:	42a9      	cmp	r1, r5
 8018436:	d904      	bls.n	8018442 <_malloc_r+0x26>
 8018438:	230c      	movs	r3, #12
 801843a:	6033      	str	r3, [r6, #0]
 801843c:	2000      	movs	r0, #0
 801843e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018518 <_malloc_r+0xfc>
 8018446:	f000 f89d 	bl	8018584 <__malloc_lock>
 801844a:	f8d8 3000 	ldr.w	r3, [r8]
 801844e:	461c      	mov	r4, r3
 8018450:	bb44      	cbnz	r4, 80184a4 <_malloc_r+0x88>
 8018452:	4629      	mov	r1, r5
 8018454:	4630      	mov	r0, r6
 8018456:	f7ff ffbf 	bl	80183d8 <sbrk_aligned>
 801845a:	1c43      	adds	r3, r0, #1
 801845c:	4604      	mov	r4, r0
 801845e:	d158      	bne.n	8018512 <_malloc_r+0xf6>
 8018460:	f8d8 4000 	ldr.w	r4, [r8]
 8018464:	4627      	mov	r7, r4
 8018466:	2f00      	cmp	r7, #0
 8018468:	d143      	bne.n	80184f2 <_malloc_r+0xd6>
 801846a:	2c00      	cmp	r4, #0
 801846c:	d04b      	beq.n	8018506 <_malloc_r+0xea>
 801846e:	6823      	ldr	r3, [r4, #0]
 8018470:	4639      	mov	r1, r7
 8018472:	4630      	mov	r0, r6
 8018474:	eb04 0903 	add.w	r9, r4, r3
 8018478:	f000 fcf0 	bl	8018e5c <_sbrk_r>
 801847c:	4581      	cmp	r9, r0
 801847e:	d142      	bne.n	8018506 <_malloc_r+0xea>
 8018480:	6821      	ldr	r1, [r4, #0]
 8018482:	1a6d      	subs	r5, r5, r1
 8018484:	4629      	mov	r1, r5
 8018486:	4630      	mov	r0, r6
 8018488:	f7ff ffa6 	bl	80183d8 <sbrk_aligned>
 801848c:	3001      	adds	r0, #1
 801848e:	d03a      	beq.n	8018506 <_malloc_r+0xea>
 8018490:	6823      	ldr	r3, [r4, #0]
 8018492:	442b      	add	r3, r5
 8018494:	6023      	str	r3, [r4, #0]
 8018496:	f8d8 3000 	ldr.w	r3, [r8]
 801849a:	685a      	ldr	r2, [r3, #4]
 801849c:	bb62      	cbnz	r2, 80184f8 <_malloc_r+0xdc>
 801849e:	f8c8 7000 	str.w	r7, [r8]
 80184a2:	e00f      	b.n	80184c4 <_malloc_r+0xa8>
 80184a4:	6822      	ldr	r2, [r4, #0]
 80184a6:	1b52      	subs	r2, r2, r5
 80184a8:	d420      	bmi.n	80184ec <_malloc_r+0xd0>
 80184aa:	2a0b      	cmp	r2, #11
 80184ac:	d917      	bls.n	80184de <_malloc_r+0xc2>
 80184ae:	1961      	adds	r1, r4, r5
 80184b0:	42a3      	cmp	r3, r4
 80184b2:	6025      	str	r5, [r4, #0]
 80184b4:	bf18      	it	ne
 80184b6:	6059      	strne	r1, [r3, #4]
 80184b8:	6863      	ldr	r3, [r4, #4]
 80184ba:	bf08      	it	eq
 80184bc:	f8c8 1000 	streq.w	r1, [r8]
 80184c0:	5162      	str	r2, [r4, r5]
 80184c2:	604b      	str	r3, [r1, #4]
 80184c4:	4630      	mov	r0, r6
 80184c6:	f000 f863 	bl	8018590 <__malloc_unlock>
 80184ca:	f104 000b 	add.w	r0, r4, #11
 80184ce:	1d23      	adds	r3, r4, #4
 80184d0:	f020 0007 	bic.w	r0, r0, #7
 80184d4:	1ac2      	subs	r2, r0, r3
 80184d6:	bf1c      	itt	ne
 80184d8:	1a1b      	subne	r3, r3, r0
 80184da:	50a3      	strne	r3, [r4, r2]
 80184dc:	e7af      	b.n	801843e <_malloc_r+0x22>
 80184de:	6862      	ldr	r2, [r4, #4]
 80184e0:	42a3      	cmp	r3, r4
 80184e2:	bf0c      	ite	eq
 80184e4:	f8c8 2000 	streq.w	r2, [r8]
 80184e8:	605a      	strne	r2, [r3, #4]
 80184ea:	e7eb      	b.n	80184c4 <_malloc_r+0xa8>
 80184ec:	4623      	mov	r3, r4
 80184ee:	6864      	ldr	r4, [r4, #4]
 80184f0:	e7ae      	b.n	8018450 <_malloc_r+0x34>
 80184f2:	463c      	mov	r4, r7
 80184f4:	687f      	ldr	r7, [r7, #4]
 80184f6:	e7b6      	b.n	8018466 <_malloc_r+0x4a>
 80184f8:	461a      	mov	r2, r3
 80184fa:	685b      	ldr	r3, [r3, #4]
 80184fc:	42a3      	cmp	r3, r4
 80184fe:	d1fb      	bne.n	80184f8 <_malloc_r+0xdc>
 8018500:	2300      	movs	r3, #0
 8018502:	6053      	str	r3, [r2, #4]
 8018504:	e7de      	b.n	80184c4 <_malloc_r+0xa8>
 8018506:	230c      	movs	r3, #12
 8018508:	6033      	str	r3, [r6, #0]
 801850a:	4630      	mov	r0, r6
 801850c:	f000 f840 	bl	8018590 <__malloc_unlock>
 8018510:	e794      	b.n	801843c <_malloc_r+0x20>
 8018512:	6005      	str	r5, [r0, #0]
 8018514:	e7d6      	b.n	80184c4 <_malloc_r+0xa8>
 8018516:	bf00      	nop
 8018518:	20015534 	.word	0x20015534

0801851c <sniprintf>:
 801851c:	b40c      	push	{r2, r3}
 801851e:	b530      	push	{r4, r5, lr}
 8018520:	4b17      	ldr	r3, [pc, #92]	@ (8018580 <sniprintf+0x64>)
 8018522:	1e0c      	subs	r4, r1, #0
 8018524:	681d      	ldr	r5, [r3, #0]
 8018526:	b09d      	sub	sp, #116	@ 0x74
 8018528:	da08      	bge.n	801853c <sniprintf+0x20>
 801852a:	238b      	movs	r3, #139	@ 0x8b
 801852c:	602b      	str	r3, [r5, #0]
 801852e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018532:	b01d      	add	sp, #116	@ 0x74
 8018534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018538:	b002      	add	sp, #8
 801853a:	4770      	bx	lr
 801853c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018540:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018544:	bf14      	ite	ne
 8018546:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801854a:	4623      	moveq	r3, r4
 801854c:	9304      	str	r3, [sp, #16]
 801854e:	9307      	str	r3, [sp, #28]
 8018550:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018554:	9002      	str	r0, [sp, #8]
 8018556:	9006      	str	r0, [sp, #24]
 8018558:	f8ad 3016 	strh.w	r3, [sp, #22]
 801855c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801855e:	ab21      	add	r3, sp, #132	@ 0x84
 8018560:	a902      	add	r1, sp, #8
 8018562:	4628      	mov	r0, r5
 8018564:	9301      	str	r3, [sp, #4]
 8018566:	f000 fd9d 	bl	80190a4 <_svfiprintf_r>
 801856a:	1c43      	adds	r3, r0, #1
 801856c:	bfbc      	itt	lt
 801856e:	238b      	movlt	r3, #139	@ 0x8b
 8018570:	602b      	strlt	r3, [r5, #0]
 8018572:	2c00      	cmp	r4, #0
 8018574:	d0dd      	beq.n	8018532 <sniprintf+0x16>
 8018576:	9b02      	ldr	r3, [sp, #8]
 8018578:	2200      	movs	r2, #0
 801857a:	701a      	strb	r2, [r3, #0]
 801857c:	e7d9      	b.n	8018532 <sniprintf+0x16>
 801857e:	bf00      	nop
 8018580:	20000754 	.word	0x20000754

08018584 <__malloc_lock>:
 8018584:	4801      	ldr	r0, [pc, #4]	@ (801858c <__malloc_lock+0x8>)
 8018586:	f000 bca4 	b.w	8018ed2 <__retarget_lock_acquire_recursive>
 801858a:	bf00      	nop
 801858c:	20015675 	.word	0x20015675

08018590 <__malloc_unlock>:
 8018590:	4801      	ldr	r0, [pc, #4]	@ (8018598 <__malloc_unlock+0x8>)
 8018592:	f000 bc9f 	b.w	8018ed4 <__retarget_lock_release_recursive>
 8018596:	bf00      	nop
 8018598:	20015675 	.word	0x20015675

0801859c <srand>:
 801859c:	b538      	push	{r3, r4, r5, lr}
 801859e:	4b10      	ldr	r3, [pc, #64]	@ (80185e0 <srand+0x44>)
 80185a0:	681d      	ldr	r5, [r3, #0]
 80185a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80185a4:	4604      	mov	r4, r0
 80185a6:	b9b3      	cbnz	r3, 80185d6 <srand+0x3a>
 80185a8:	2018      	movs	r0, #24
 80185aa:	f7ff ff05 	bl	80183b8 <malloc>
 80185ae:	4602      	mov	r2, r0
 80185b0:	6328      	str	r0, [r5, #48]	@ 0x30
 80185b2:	b920      	cbnz	r0, 80185be <srand+0x22>
 80185b4:	4b0b      	ldr	r3, [pc, #44]	@ (80185e4 <srand+0x48>)
 80185b6:	480c      	ldr	r0, [pc, #48]	@ (80185e8 <srand+0x4c>)
 80185b8:	2146      	movs	r1, #70	@ 0x46
 80185ba:	f000 fca3 	bl	8018f04 <__assert_func>
 80185be:	490b      	ldr	r1, [pc, #44]	@ (80185ec <srand+0x50>)
 80185c0:	4b0b      	ldr	r3, [pc, #44]	@ (80185f0 <srand+0x54>)
 80185c2:	e9c0 1300 	strd	r1, r3, [r0]
 80185c6:	4b0b      	ldr	r3, [pc, #44]	@ (80185f4 <srand+0x58>)
 80185c8:	6083      	str	r3, [r0, #8]
 80185ca:	230b      	movs	r3, #11
 80185cc:	8183      	strh	r3, [r0, #12]
 80185ce:	2100      	movs	r1, #0
 80185d0:	2001      	movs	r0, #1
 80185d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80185d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80185d8:	2200      	movs	r2, #0
 80185da:	611c      	str	r4, [r3, #16]
 80185dc:	615a      	str	r2, [r3, #20]
 80185de:	bd38      	pop	{r3, r4, r5, pc}
 80185e0:	20000754 	.word	0x20000754
 80185e4:	0801b326 	.word	0x0801b326
 80185e8:	0801b33d 	.word	0x0801b33d
 80185ec:	abcd330e 	.word	0xabcd330e
 80185f0:	e66d1234 	.word	0xe66d1234
 80185f4:	0005deec 	.word	0x0005deec

080185f8 <rand>:
 80185f8:	4b16      	ldr	r3, [pc, #88]	@ (8018654 <rand+0x5c>)
 80185fa:	b510      	push	{r4, lr}
 80185fc:	681c      	ldr	r4, [r3, #0]
 80185fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018600:	b9b3      	cbnz	r3, 8018630 <rand+0x38>
 8018602:	2018      	movs	r0, #24
 8018604:	f7ff fed8 	bl	80183b8 <malloc>
 8018608:	4602      	mov	r2, r0
 801860a:	6320      	str	r0, [r4, #48]	@ 0x30
 801860c:	b920      	cbnz	r0, 8018618 <rand+0x20>
 801860e:	4b12      	ldr	r3, [pc, #72]	@ (8018658 <rand+0x60>)
 8018610:	4812      	ldr	r0, [pc, #72]	@ (801865c <rand+0x64>)
 8018612:	2152      	movs	r1, #82	@ 0x52
 8018614:	f000 fc76 	bl	8018f04 <__assert_func>
 8018618:	4911      	ldr	r1, [pc, #68]	@ (8018660 <rand+0x68>)
 801861a:	4b12      	ldr	r3, [pc, #72]	@ (8018664 <rand+0x6c>)
 801861c:	e9c0 1300 	strd	r1, r3, [r0]
 8018620:	4b11      	ldr	r3, [pc, #68]	@ (8018668 <rand+0x70>)
 8018622:	6083      	str	r3, [r0, #8]
 8018624:	230b      	movs	r3, #11
 8018626:	8183      	strh	r3, [r0, #12]
 8018628:	2100      	movs	r1, #0
 801862a:	2001      	movs	r0, #1
 801862c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018630:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018632:	480e      	ldr	r0, [pc, #56]	@ (801866c <rand+0x74>)
 8018634:	690b      	ldr	r3, [r1, #16]
 8018636:	694c      	ldr	r4, [r1, #20]
 8018638:	4a0d      	ldr	r2, [pc, #52]	@ (8018670 <rand+0x78>)
 801863a:	4358      	muls	r0, r3
 801863c:	fb02 0004 	mla	r0, r2, r4, r0
 8018640:	fba3 3202 	umull	r3, r2, r3, r2
 8018644:	3301      	adds	r3, #1
 8018646:	eb40 0002 	adc.w	r0, r0, r2
 801864a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801864e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018652:	bd10      	pop	{r4, pc}
 8018654:	20000754 	.word	0x20000754
 8018658:	0801b326 	.word	0x0801b326
 801865c:	0801b33d 	.word	0x0801b33d
 8018660:	abcd330e 	.word	0xabcd330e
 8018664:	e66d1234 	.word	0xe66d1234
 8018668:	0005deec 	.word	0x0005deec
 801866c:	5851f42d 	.word	0x5851f42d
 8018670:	4c957f2d 	.word	0x4c957f2d

08018674 <realloc>:
 8018674:	4b02      	ldr	r3, [pc, #8]	@ (8018680 <realloc+0xc>)
 8018676:	460a      	mov	r2, r1
 8018678:	4601      	mov	r1, r0
 801867a:	6818      	ldr	r0, [r3, #0]
 801867c:	f000 b8a6 	b.w	80187cc <_realloc_r>
 8018680:	20000754 	.word	0x20000754

08018684 <std>:
 8018684:	2300      	movs	r3, #0
 8018686:	b510      	push	{r4, lr}
 8018688:	4604      	mov	r4, r0
 801868a:	e9c0 3300 	strd	r3, r3, [r0]
 801868e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018692:	6083      	str	r3, [r0, #8]
 8018694:	8181      	strh	r1, [r0, #12]
 8018696:	6643      	str	r3, [r0, #100]	@ 0x64
 8018698:	81c2      	strh	r2, [r0, #14]
 801869a:	6183      	str	r3, [r0, #24]
 801869c:	4619      	mov	r1, r3
 801869e:	2208      	movs	r2, #8
 80186a0:	305c      	adds	r0, #92	@ 0x5c
 80186a2:	f000 fbb0 	bl	8018e06 <memset>
 80186a6:	4b0d      	ldr	r3, [pc, #52]	@ (80186dc <std+0x58>)
 80186a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80186aa:	4b0d      	ldr	r3, [pc, #52]	@ (80186e0 <std+0x5c>)
 80186ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80186ae:	4b0d      	ldr	r3, [pc, #52]	@ (80186e4 <std+0x60>)
 80186b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80186b2:	4b0d      	ldr	r3, [pc, #52]	@ (80186e8 <std+0x64>)
 80186b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80186b6:	4b0d      	ldr	r3, [pc, #52]	@ (80186ec <std+0x68>)
 80186b8:	6224      	str	r4, [r4, #32]
 80186ba:	429c      	cmp	r4, r3
 80186bc:	d006      	beq.n	80186cc <std+0x48>
 80186be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80186c2:	4294      	cmp	r4, r2
 80186c4:	d002      	beq.n	80186cc <std+0x48>
 80186c6:	33d0      	adds	r3, #208	@ 0xd0
 80186c8:	429c      	cmp	r4, r3
 80186ca:	d105      	bne.n	80186d8 <std+0x54>
 80186cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80186d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186d4:	f000 bbfc 	b.w	8018ed0 <__retarget_lock_init_recursive>
 80186d8:	bd10      	pop	{r4, pc}
 80186da:	bf00      	nop
 80186dc:	080199a5 	.word	0x080199a5
 80186e0:	080199c7 	.word	0x080199c7
 80186e4:	080199ff 	.word	0x080199ff
 80186e8:	08019a23 	.word	0x08019a23
 80186ec:	20015538 	.word	0x20015538

080186f0 <stdio_exit_handler>:
 80186f0:	4a02      	ldr	r2, [pc, #8]	@ (80186fc <stdio_exit_handler+0xc>)
 80186f2:	4903      	ldr	r1, [pc, #12]	@ (8018700 <stdio_exit_handler+0x10>)
 80186f4:	4803      	ldr	r0, [pc, #12]	@ (8018704 <stdio_exit_handler+0x14>)
 80186f6:	f000 b90f 	b.w	8018918 <_fwalk_sglue>
 80186fa:	bf00      	nop
 80186fc:	20000748 	.word	0x20000748
 8018700:	08019945 	.word	0x08019945
 8018704:	20000758 	.word	0x20000758

08018708 <cleanup_stdio>:
 8018708:	6841      	ldr	r1, [r0, #4]
 801870a:	4b0c      	ldr	r3, [pc, #48]	@ (801873c <cleanup_stdio+0x34>)
 801870c:	4299      	cmp	r1, r3
 801870e:	b510      	push	{r4, lr}
 8018710:	4604      	mov	r4, r0
 8018712:	d001      	beq.n	8018718 <cleanup_stdio+0x10>
 8018714:	f001 f916 	bl	8019944 <_fflush_r>
 8018718:	68a1      	ldr	r1, [r4, #8]
 801871a:	4b09      	ldr	r3, [pc, #36]	@ (8018740 <cleanup_stdio+0x38>)
 801871c:	4299      	cmp	r1, r3
 801871e:	d002      	beq.n	8018726 <cleanup_stdio+0x1e>
 8018720:	4620      	mov	r0, r4
 8018722:	f001 f90f 	bl	8019944 <_fflush_r>
 8018726:	68e1      	ldr	r1, [r4, #12]
 8018728:	4b06      	ldr	r3, [pc, #24]	@ (8018744 <cleanup_stdio+0x3c>)
 801872a:	4299      	cmp	r1, r3
 801872c:	d004      	beq.n	8018738 <cleanup_stdio+0x30>
 801872e:	4620      	mov	r0, r4
 8018730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018734:	f001 b906 	b.w	8019944 <_fflush_r>
 8018738:	bd10      	pop	{r4, pc}
 801873a:	bf00      	nop
 801873c:	20015538 	.word	0x20015538
 8018740:	200155a0 	.word	0x200155a0
 8018744:	20015608 	.word	0x20015608

08018748 <global_stdio_init.part.0>:
 8018748:	b510      	push	{r4, lr}
 801874a:	4b0b      	ldr	r3, [pc, #44]	@ (8018778 <global_stdio_init.part.0+0x30>)
 801874c:	4c0b      	ldr	r4, [pc, #44]	@ (801877c <global_stdio_init.part.0+0x34>)
 801874e:	4a0c      	ldr	r2, [pc, #48]	@ (8018780 <global_stdio_init.part.0+0x38>)
 8018750:	601a      	str	r2, [r3, #0]
 8018752:	4620      	mov	r0, r4
 8018754:	2200      	movs	r2, #0
 8018756:	2104      	movs	r1, #4
 8018758:	f7ff ff94 	bl	8018684 <std>
 801875c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018760:	2201      	movs	r2, #1
 8018762:	2109      	movs	r1, #9
 8018764:	f7ff ff8e 	bl	8018684 <std>
 8018768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801876c:	2202      	movs	r2, #2
 801876e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018772:	2112      	movs	r1, #18
 8018774:	f7ff bf86 	b.w	8018684 <std>
 8018778:	20015670 	.word	0x20015670
 801877c:	20015538 	.word	0x20015538
 8018780:	080186f1 	.word	0x080186f1

08018784 <__sfp_lock_acquire>:
 8018784:	4801      	ldr	r0, [pc, #4]	@ (801878c <__sfp_lock_acquire+0x8>)
 8018786:	f000 bba4 	b.w	8018ed2 <__retarget_lock_acquire_recursive>
 801878a:	bf00      	nop
 801878c:	20015676 	.word	0x20015676

08018790 <__sfp_lock_release>:
 8018790:	4801      	ldr	r0, [pc, #4]	@ (8018798 <__sfp_lock_release+0x8>)
 8018792:	f000 bb9f 	b.w	8018ed4 <__retarget_lock_release_recursive>
 8018796:	bf00      	nop
 8018798:	20015676 	.word	0x20015676

0801879c <__sinit>:
 801879c:	b510      	push	{r4, lr}
 801879e:	4604      	mov	r4, r0
 80187a0:	f7ff fff0 	bl	8018784 <__sfp_lock_acquire>
 80187a4:	6a23      	ldr	r3, [r4, #32]
 80187a6:	b11b      	cbz	r3, 80187b0 <__sinit+0x14>
 80187a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80187ac:	f7ff bff0 	b.w	8018790 <__sfp_lock_release>
 80187b0:	4b04      	ldr	r3, [pc, #16]	@ (80187c4 <__sinit+0x28>)
 80187b2:	6223      	str	r3, [r4, #32]
 80187b4:	4b04      	ldr	r3, [pc, #16]	@ (80187c8 <__sinit+0x2c>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d1f5      	bne.n	80187a8 <__sinit+0xc>
 80187bc:	f7ff ffc4 	bl	8018748 <global_stdio_init.part.0>
 80187c0:	e7f2      	b.n	80187a8 <__sinit+0xc>
 80187c2:	bf00      	nop
 80187c4:	08018709 	.word	0x08018709
 80187c8:	20015670 	.word	0x20015670

080187cc <_realloc_r>:
 80187cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187d0:	4680      	mov	r8, r0
 80187d2:	4615      	mov	r5, r2
 80187d4:	460c      	mov	r4, r1
 80187d6:	b921      	cbnz	r1, 80187e2 <_realloc_r+0x16>
 80187d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187dc:	4611      	mov	r1, r2
 80187de:	f7ff be1d 	b.w	801841c <_malloc_r>
 80187e2:	b92a      	cbnz	r2, 80187f0 <_realloc_r+0x24>
 80187e4:	f000 fbb8 	bl	8018f58 <_free_r>
 80187e8:	2400      	movs	r4, #0
 80187ea:	4620      	mov	r0, r4
 80187ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187f0:	f001 f8d0 	bl	8019994 <_malloc_usable_size_r>
 80187f4:	4285      	cmp	r5, r0
 80187f6:	4606      	mov	r6, r0
 80187f8:	d802      	bhi.n	8018800 <_realloc_r+0x34>
 80187fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80187fe:	d8f4      	bhi.n	80187ea <_realloc_r+0x1e>
 8018800:	4629      	mov	r1, r5
 8018802:	4640      	mov	r0, r8
 8018804:	f7ff fe0a 	bl	801841c <_malloc_r>
 8018808:	4607      	mov	r7, r0
 801880a:	2800      	cmp	r0, #0
 801880c:	d0ec      	beq.n	80187e8 <_realloc_r+0x1c>
 801880e:	42b5      	cmp	r5, r6
 8018810:	462a      	mov	r2, r5
 8018812:	4621      	mov	r1, r4
 8018814:	bf28      	it	cs
 8018816:	4632      	movcs	r2, r6
 8018818:	f000 fb5d 	bl	8018ed6 <memcpy>
 801881c:	4621      	mov	r1, r4
 801881e:	4640      	mov	r0, r8
 8018820:	f000 fb9a 	bl	8018f58 <_free_r>
 8018824:	463c      	mov	r4, r7
 8018826:	e7e0      	b.n	80187ea <_realloc_r+0x1e>

08018828 <_strtoul_l.constprop.0>:
 8018828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801882c:	4e34      	ldr	r6, [pc, #208]	@ (8018900 <_strtoul_l.constprop.0+0xd8>)
 801882e:	4686      	mov	lr, r0
 8018830:	460d      	mov	r5, r1
 8018832:	4628      	mov	r0, r5
 8018834:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018838:	5d37      	ldrb	r7, [r6, r4]
 801883a:	f017 0708 	ands.w	r7, r7, #8
 801883e:	d1f8      	bne.n	8018832 <_strtoul_l.constprop.0+0xa>
 8018840:	2c2d      	cmp	r4, #45	@ 0x2d
 8018842:	d12f      	bne.n	80188a4 <_strtoul_l.constprop.0+0x7c>
 8018844:	782c      	ldrb	r4, [r5, #0]
 8018846:	2701      	movs	r7, #1
 8018848:	1c85      	adds	r5, r0, #2
 801884a:	f033 0010 	bics.w	r0, r3, #16
 801884e:	d109      	bne.n	8018864 <_strtoul_l.constprop.0+0x3c>
 8018850:	2c30      	cmp	r4, #48	@ 0x30
 8018852:	d12c      	bne.n	80188ae <_strtoul_l.constprop.0+0x86>
 8018854:	7828      	ldrb	r0, [r5, #0]
 8018856:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801885a:	2858      	cmp	r0, #88	@ 0x58
 801885c:	d127      	bne.n	80188ae <_strtoul_l.constprop.0+0x86>
 801885e:	786c      	ldrb	r4, [r5, #1]
 8018860:	2310      	movs	r3, #16
 8018862:	3502      	adds	r5, #2
 8018864:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018868:	2600      	movs	r6, #0
 801886a:	fbb8 f8f3 	udiv	r8, r8, r3
 801886e:	fb03 f908 	mul.w	r9, r3, r8
 8018872:	ea6f 0909 	mvn.w	r9, r9
 8018876:	4630      	mov	r0, r6
 8018878:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801887c:	f1bc 0f09 	cmp.w	ip, #9
 8018880:	d81c      	bhi.n	80188bc <_strtoul_l.constprop.0+0x94>
 8018882:	4664      	mov	r4, ip
 8018884:	42a3      	cmp	r3, r4
 8018886:	dd2a      	ble.n	80188de <_strtoul_l.constprop.0+0xb6>
 8018888:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801888c:	d007      	beq.n	801889e <_strtoul_l.constprop.0+0x76>
 801888e:	4580      	cmp	r8, r0
 8018890:	d322      	bcc.n	80188d8 <_strtoul_l.constprop.0+0xb0>
 8018892:	d101      	bne.n	8018898 <_strtoul_l.constprop.0+0x70>
 8018894:	45a1      	cmp	r9, r4
 8018896:	db1f      	blt.n	80188d8 <_strtoul_l.constprop.0+0xb0>
 8018898:	fb00 4003 	mla	r0, r0, r3, r4
 801889c:	2601      	movs	r6, #1
 801889e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80188a2:	e7e9      	b.n	8018878 <_strtoul_l.constprop.0+0x50>
 80188a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80188a6:	bf04      	itt	eq
 80188a8:	782c      	ldrbeq	r4, [r5, #0]
 80188aa:	1c85      	addeq	r5, r0, #2
 80188ac:	e7cd      	b.n	801884a <_strtoul_l.constprop.0+0x22>
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d1d8      	bne.n	8018864 <_strtoul_l.constprop.0+0x3c>
 80188b2:	2c30      	cmp	r4, #48	@ 0x30
 80188b4:	bf0c      	ite	eq
 80188b6:	2308      	moveq	r3, #8
 80188b8:	230a      	movne	r3, #10
 80188ba:	e7d3      	b.n	8018864 <_strtoul_l.constprop.0+0x3c>
 80188bc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80188c0:	f1bc 0f19 	cmp.w	ip, #25
 80188c4:	d801      	bhi.n	80188ca <_strtoul_l.constprop.0+0xa2>
 80188c6:	3c37      	subs	r4, #55	@ 0x37
 80188c8:	e7dc      	b.n	8018884 <_strtoul_l.constprop.0+0x5c>
 80188ca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80188ce:	f1bc 0f19 	cmp.w	ip, #25
 80188d2:	d804      	bhi.n	80188de <_strtoul_l.constprop.0+0xb6>
 80188d4:	3c57      	subs	r4, #87	@ 0x57
 80188d6:	e7d5      	b.n	8018884 <_strtoul_l.constprop.0+0x5c>
 80188d8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80188dc:	e7df      	b.n	801889e <_strtoul_l.constprop.0+0x76>
 80188de:	1c73      	adds	r3, r6, #1
 80188e0:	d106      	bne.n	80188f0 <_strtoul_l.constprop.0+0xc8>
 80188e2:	2322      	movs	r3, #34	@ 0x22
 80188e4:	f8ce 3000 	str.w	r3, [lr]
 80188e8:	4630      	mov	r0, r6
 80188ea:	b932      	cbnz	r2, 80188fa <_strtoul_l.constprop.0+0xd2>
 80188ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188f0:	b107      	cbz	r7, 80188f4 <_strtoul_l.constprop.0+0xcc>
 80188f2:	4240      	negs	r0, r0
 80188f4:	2a00      	cmp	r2, #0
 80188f6:	d0f9      	beq.n	80188ec <_strtoul_l.constprop.0+0xc4>
 80188f8:	b106      	cbz	r6, 80188fc <_strtoul_l.constprop.0+0xd4>
 80188fa:	1e69      	subs	r1, r5, #1
 80188fc:	6011      	str	r1, [r2, #0]
 80188fe:	e7f5      	b.n	80188ec <_strtoul_l.constprop.0+0xc4>
 8018900:	0801b396 	.word	0x0801b396

08018904 <strtoul>:
 8018904:	4613      	mov	r3, r2
 8018906:	460a      	mov	r2, r1
 8018908:	4601      	mov	r1, r0
 801890a:	4802      	ldr	r0, [pc, #8]	@ (8018914 <strtoul+0x10>)
 801890c:	6800      	ldr	r0, [r0, #0]
 801890e:	f7ff bf8b 	b.w	8018828 <_strtoul_l.constprop.0>
 8018912:	bf00      	nop
 8018914:	20000754 	.word	0x20000754

08018918 <_fwalk_sglue>:
 8018918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801891c:	4607      	mov	r7, r0
 801891e:	4688      	mov	r8, r1
 8018920:	4614      	mov	r4, r2
 8018922:	2600      	movs	r6, #0
 8018924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018928:	f1b9 0901 	subs.w	r9, r9, #1
 801892c:	d505      	bpl.n	801893a <_fwalk_sglue+0x22>
 801892e:	6824      	ldr	r4, [r4, #0]
 8018930:	2c00      	cmp	r4, #0
 8018932:	d1f7      	bne.n	8018924 <_fwalk_sglue+0xc>
 8018934:	4630      	mov	r0, r6
 8018936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801893a:	89ab      	ldrh	r3, [r5, #12]
 801893c:	2b01      	cmp	r3, #1
 801893e:	d907      	bls.n	8018950 <_fwalk_sglue+0x38>
 8018940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018944:	3301      	adds	r3, #1
 8018946:	d003      	beq.n	8018950 <_fwalk_sglue+0x38>
 8018948:	4629      	mov	r1, r5
 801894a:	4638      	mov	r0, r7
 801894c:	47c0      	blx	r8
 801894e:	4306      	orrs	r6, r0
 8018950:	3568      	adds	r5, #104	@ 0x68
 8018952:	e7e9      	b.n	8018928 <_fwalk_sglue+0x10>

08018954 <_vsniprintf_r>:
 8018954:	b530      	push	{r4, r5, lr}
 8018956:	4614      	mov	r4, r2
 8018958:	2c00      	cmp	r4, #0
 801895a:	b09b      	sub	sp, #108	@ 0x6c
 801895c:	4605      	mov	r5, r0
 801895e:	461a      	mov	r2, r3
 8018960:	da05      	bge.n	801896e <_vsniprintf_r+0x1a>
 8018962:	238b      	movs	r3, #139	@ 0x8b
 8018964:	6003      	str	r3, [r0, #0]
 8018966:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801896a:	b01b      	add	sp, #108	@ 0x6c
 801896c:	bd30      	pop	{r4, r5, pc}
 801896e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018972:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018976:	bf14      	ite	ne
 8018978:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801897c:	4623      	moveq	r3, r4
 801897e:	9302      	str	r3, [sp, #8]
 8018980:	9305      	str	r3, [sp, #20]
 8018982:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018986:	9100      	str	r1, [sp, #0]
 8018988:	9104      	str	r1, [sp, #16]
 801898a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801898e:	4669      	mov	r1, sp
 8018990:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018992:	f000 fb87 	bl	80190a4 <_svfiprintf_r>
 8018996:	1c43      	adds	r3, r0, #1
 8018998:	bfbc      	itt	lt
 801899a:	238b      	movlt	r3, #139	@ 0x8b
 801899c:	602b      	strlt	r3, [r5, #0]
 801899e:	2c00      	cmp	r4, #0
 80189a0:	d0e3      	beq.n	801896a <_vsniprintf_r+0x16>
 80189a2:	9b00      	ldr	r3, [sp, #0]
 80189a4:	2200      	movs	r2, #0
 80189a6:	701a      	strb	r2, [r3, #0]
 80189a8:	e7df      	b.n	801896a <_vsniprintf_r+0x16>
	...

080189ac <vsniprintf>:
 80189ac:	b507      	push	{r0, r1, r2, lr}
 80189ae:	9300      	str	r3, [sp, #0]
 80189b0:	4613      	mov	r3, r2
 80189b2:	460a      	mov	r2, r1
 80189b4:	4601      	mov	r1, r0
 80189b6:	4803      	ldr	r0, [pc, #12]	@ (80189c4 <vsniprintf+0x18>)
 80189b8:	6800      	ldr	r0, [r0, #0]
 80189ba:	f7ff ffcb 	bl	8018954 <_vsniprintf_r>
 80189be:	b003      	add	sp, #12
 80189c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80189c4:	20000754 	.word	0x20000754

080189c8 <_fwrite_r>:
 80189c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189cc:	9c08      	ldr	r4, [sp, #32]
 80189ce:	468a      	mov	sl, r1
 80189d0:	4690      	mov	r8, r2
 80189d2:	fb02 f903 	mul.w	r9, r2, r3
 80189d6:	4606      	mov	r6, r0
 80189d8:	b118      	cbz	r0, 80189e2 <_fwrite_r+0x1a>
 80189da:	6a03      	ldr	r3, [r0, #32]
 80189dc:	b90b      	cbnz	r3, 80189e2 <_fwrite_r+0x1a>
 80189de:	f7ff fedd 	bl	801879c <__sinit>
 80189e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80189e4:	07dd      	lsls	r5, r3, #31
 80189e6:	d405      	bmi.n	80189f4 <_fwrite_r+0x2c>
 80189e8:	89a3      	ldrh	r3, [r4, #12]
 80189ea:	0598      	lsls	r0, r3, #22
 80189ec:	d402      	bmi.n	80189f4 <_fwrite_r+0x2c>
 80189ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80189f0:	f000 fa6f 	bl	8018ed2 <__retarget_lock_acquire_recursive>
 80189f4:	89a3      	ldrh	r3, [r4, #12]
 80189f6:	0719      	lsls	r1, r3, #28
 80189f8:	d516      	bpl.n	8018a28 <_fwrite_r+0x60>
 80189fa:	6923      	ldr	r3, [r4, #16]
 80189fc:	b1a3      	cbz	r3, 8018a28 <_fwrite_r+0x60>
 80189fe:	2500      	movs	r5, #0
 8018a00:	454d      	cmp	r5, r9
 8018a02:	d01f      	beq.n	8018a44 <_fwrite_r+0x7c>
 8018a04:	68a7      	ldr	r7, [r4, #8]
 8018a06:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8018a0a:	3f01      	subs	r7, #1
 8018a0c:	2f00      	cmp	r7, #0
 8018a0e:	60a7      	str	r7, [r4, #8]
 8018a10:	da04      	bge.n	8018a1c <_fwrite_r+0x54>
 8018a12:	69a3      	ldr	r3, [r4, #24]
 8018a14:	429f      	cmp	r7, r3
 8018a16:	db0f      	blt.n	8018a38 <_fwrite_r+0x70>
 8018a18:	290a      	cmp	r1, #10
 8018a1a:	d00d      	beq.n	8018a38 <_fwrite_r+0x70>
 8018a1c:	6823      	ldr	r3, [r4, #0]
 8018a1e:	1c5a      	adds	r2, r3, #1
 8018a20:	6022      	str	r2, [r4, #0]
 8018a22:	7019      	strb	r1, [r3, #0]
 8018a24:	3501      	adds	r5, #1
 8018a26:	e7eb      	b.n	8018a00 <_fwrite_r+0x38>
 8018a28:	4621      	mov	r1, r4
 8018a2a:	4630      	mov	r0, r6
 8018a2c:	f000 f864 	bl	8018af8 <__swsetup_r>
 8018a30:	2800      	cmp	r0, #0
 8018a32:	d0e4      	beq.n	80189fe <_fwrite_r+0x36>
 8018a34:	2500      	movs	r5, #0
 8018a36:	e005      	b.n	8018a44 <_fwrite_r+0x7c>
 8018a38:	4622      	mov	r2, r4
 8018a3a:	4630      	mov	r0, r6
 8018a3c:	f000 f81e 	bl	8018a7c <__swbuf_r>
 8018a40:	3001      	adds	r0, #1
 8018a42:	d1ef      	bne.n	8018a24 <_fwrite_r+0x5c>
 8018a44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018a46:	07da      	lsls	r2, r3, #31
 8018a48:	d405      	bmi.n	8018a56 <_fwrite_r+0x8e>
 8018a4a:	89a3      	ldrh	r3, [r4, #12]
 8018a4c:	059b      	lsls	r3, r3, #22
 8018a4e:	d402      	bmi.n	8018a56 <_fwrite_r+0x8e>
 8018a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018a52:	f000 fa3f 	bl	8018ed4 <__retarget_lock_release_recursive>
 8018a56:	fbb5 f0f8 	udiv	r0, r5, r8
 8018a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018a60 <fwrite>:
 8018a60:	b507      	push	{r0, r1, r2, lr}
 8018a62:	9300      	str	r3, [sp, #0]
 8018a64:	4613      	mov	r3, r2
 8018a66:	460a      	mov	r2, r1
 8018a68:	4601      	mov	r1, r0
 8018a6a:	4803      	ldr	r0, [pc, #12]	@ (8018a78 <fwrite+0x18>)
 8018a6c:	6800      	ldr	r0, [r0, #0]
 8018a6e:	f7ff ffab 	bl	80189c8 <_fwrite_r>
 8018a72:	b003      	add	sp, #12
 8018a74:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a78:	20000754 	.word	0x20000754

08018a7c <__swbuf_r>:
 8018a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a7e:	460e      	mov	r6, r1
 8018a80:	4614      	mov	r4, r2
 8018a82:	4605      	mov	r5, r0
 8018a84:	b118      	cbz	r0, 8018a8e <__swbuf_r+0x12>
 8018a86:	6a03      	ldr	r3, [r0, #32]
 8018a88:	b90b      	cbnz	r3, 8018a8e <__swbuf_r+0x12>
 8018a8a:	f7ff fe87 	bl	801879c <__sinit>
 8018a8e:	69a3      	ldr	r3, [r4, #24]
 8018a90:	60a3      	str	r3, [r4, #8]
 8018a92:	89a3      	ldrh	r3, [r4, #12]
 8018a94:	071a      	lsls	r2, r3, #28
 8018a96:	d501      	bpl.n	8018a9c <__swbuf_r+0x20>
 8018a98:	6923      	ldr	r3, [r4, #16]
 8018a9a:	b943      	cbnz	r3, 8018aae <__swbuf_r+0x32>
 8018a9c:	4621      	mov	r1, r4
 8018a9e:	4628      	mov	r0, r5
 8018aa0:	f000 f82a 	bl	8018af8 <__swsetup_r>
 8018aa4:	b118      	cbz	r0, 8018aae <__swbuf_r+0x32>
 8018aa6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018aaa:	4638      	mov	r0, r7
 8018aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018aae:	6823      	ldr	r3, [r4, #0]
 8018ab0:	6922      	ldr	r2, [r4, #16]
 8018ab2:	1a98      	subs	r0, r3, r2
 8018ab4:	6963      	ldr	r3, [r4, #20]
 8018ab6:	b2f6      	uxtb	r6, r6
 8018ab8:	4283      	cmp	r3, r0
 8018aba:	4637      	mov	r7, r6
 8018abc:	dc05      	bgt.n	8018aca <__swbuf_r+0x4e>
 8018abe:	4621      	mov	r1, r4
 8018ac0:	4628      	mov	r0, r5
 8018ac2:	f000 ff3f 	bl	8019944 <_fflush_r>
 8018ac6:	2800      	cmp	r0, #0
 8018ac8:	d1ed      	bne.n	8018aa6 <__swbuf_r+0x2a>
 8018aca:	68a3      	ldr	r3, [r4, #8]
 8018acc:	3b01      	subs	r3, #1
 8018ace:	60a3      	str	r3, [r4, #8]
 8018ad0:	6823      	ldr	r3, [r4, #0]
 8018ad2:	1c5a      	adds	r2, r3, #1
 8018ad4:	6022      	str	r2, [r4, #0]
 8018ad6:	701e      	strb	r6, [r3, #0]
 8018ad8:	6962      	ldr	r2, [r4, #20]
 8018ada:	1c43      	adds	r3, r0, #1
 8018adc:	429a      	cmp	r2, r3
 8018ade:	d004      	beq.n	8018aea <__swbuf_r+0x6e>
 8018ae0:	89a3      	ldrh	r3, [r4, #12]
 8018ae2:	07db      	lsls	r3, r3, #31
 8018ae4:	d5e1      	bpl.n	8018aaa <__swbuf_r+0x2e>
 8018ae6:	2e0a      	cmp	r6, #10
 8018ae8:	d1df      	bne.n	8018aaa <__swbuf_r+0x2e>
 8018aea:	4621      	mov	r1, r4
 8018aec:	4628      	mov	r0, r5
 8018aee:	f000 ff29 	bl	8019944 <_fflush_r>
 8018af2:	2800      	cmp	r0, #0
 8018af4:	d0d9      	beq.n	8018aaa <__swbuf_r+0x2e>
 8018af6:	e7d6      	b.n	8018aa6 <__swbuf_r+0x2a>

08018af8 <__swsetup_r>:
 8018af8:	b538      	push	{r3, r4, r5, lr}
 8018afa:	4b29      	ldr	r3, [pc, #164]	@ (8018ba0 <__swsetup_r+0xa8>)
 8018afc:	4605      	mov	r5, r0
 8018afe:	6818      	ldr	r0, [r3, #0]
 8018b00:	460c      	mov	r4, r1
 8018b02:	b118      	cbz	r0, 8018b0c <__swsetup_r+0x14>
 8018b04:	6a03      	ldr	r3, [r0, #32]
 8018b06:	b90b      	cbnz	r3, 8018b0c <__swsetup_r+0x14>
 8018b08:	f7ff fe48 	bl	801879c <__sinit>
 8018b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b10:	0719      	lsls	r1, r3, #28
 8018b12:	d422      	bmi.n	8018b5a <__swsetup_r+0x62>
 8018b14:	06da      	lsls	r2, r3, #27
 8018b16:	d407      	bmi.n	8018b28 <__swsetup_r+0x30>
 8018b18:	2209      	movs	r2, #9
 8018b1a:	602a      	str	r2, [r5, #0]
 8018b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018b20:	81a3      	strh	r3, [r4, #12]
 8018b22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018b26:	e033      	b.n	8018b90 <__swsetup_r+0x98>
 8018b28:	0758      	lsls	r0, r3, #29
 8018b2a:	d512      	bpl.n	8018b52 <__swsetup_r+0x5a>
 8018b2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018b2e:	b141      	cbz	r1, 8018b42 <__swsetup_r+0x4a>
 8018b30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018b34:	4299      	cmp	r1, r3
 8018b36:	d002      	beq.n	8018b3e <__swsetup_r+0x46>
 8018b38:	4628      	mov	r0, r5
 8018b3a:	f000 fa0d 	bl	8018f58 <_free_r>
 8018b3e:	2300      	movs	r3, #0
 8018b40:	6363      	str	r3, [r4, #52]	@ 0x34
 8018b42:	89a3      	ldrh	r3, [r4, #12]
 8018b44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018b48:	81a3      	strh	r3, [r4, #12]
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	6063      	str	r3, [r4, #4]
 8018b4e:	6923      	ldr	r3, [r4, #16]
 8018b50:	6023      	str	r3, [r4, #0]
 8018b52:	89a3      	ldrh	r3, [r4, #12]
 8018b54:	f043 0308 	orr.w	r3, r3, #8
 8018b58:	81a3      	strh	r3, [r4, #12]
 8018b5a:	6923      	ldr	r3, [r4, #16]
 8018b5c:	b94b      	cbnz	r3, 8018b72 <__swsetup_r+0x7a>
 8018b5e:	89a3      	ldrh	r3, [r4, #12]
 8018b60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018b68:	d003      	beq.n	8018b72 <__swsetup_r+0x7a>
 8018b6a:	4621      	mov	r1, r4
 8018b6c:	4628      	mov	r0, r5
 8018b6e:	f000 f83f 	bl	8018bf0 <__smakebuf_r>
 8018b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b76:	f013 0201 	ands.w	r2, r3, #1
 8018b7a:	d00a      	beq.n	8018b92 <__swsetup_r+0x9a>
 8018b7c:	2200      	movs	r2, #0
 8018b7e:	60a2      	str	r2, [r4, #8]
 8018b80:	6962      	ldr	r2, [r4, #20]
 8018b82:	4252      	negs	r2, r2
 8018b84:	61a2      	str	r2, [r4, #24]
 8018b86:	6922      	ldr	r2, [r4, #16]
 8018b88:	b942      	cbnz	r2, 8018b9c <__swsetup_r+0xa4>
 8018b8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018b8e:	d1c5      	bne.n	8018b1c <__swsetup_r+0x24>
 8018b90:	bd38      	pop	{r3, r4, r5, pc}
 8018b92:	0799      	lsls	r1, r3, #30
 8018b94:	bf58      	it	pl
 8018b96:	6962      	ldrpl	r2, [r4, #20]
 8018b98:	60a2      	str	r2, [r4, #8]
 8018b9a:	e7f4      	b.n	8018b86 <__swsetup_r+0x8e>
 8018b9c:	2000      	movs	r0, #0
 8018b9e:	e7f7      	b.n	8018b90 <__swsetup_r+0x98>
 8018ba0:	20000754 	.word	0x20000754

08018ba4 <__swhatbuf_r>:
 8018ba4:	b570      	push	{r4, r5, r6, lr}
 8018ba6:	460c      	mov	r4, r1
 8018ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bac:	2900      	cmp	r1, #0
 8018bae:	b096      	sub	sp, #88	@ 0x58
 8018bb0:	4615      	mov	r5, r2
 8018bb2:	461e      	mov	r6, r3
 8018bb4:	da0d      	bge.n	8018bd2 <__swhatbuf_r+0x2e>
 8018bb6:	89a3      	ldrh	r3, [r4, #12]
 8018bb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018bbc:	f04f 0100 	mov.w	r1, #0
 8018bc0:	bf14      	ite	ne
 8018bc2:	2340      	movne	r3, #64	@ 0x40
 8018bc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018bc8:	2000      	movs	r0, #0
 8018bca:	6031      	str	r1, [r6, #0]
 8018bcc:	602b      	str	r3, [r5, #0]
 8018bce:	b016      	add	sp, #88	@ 0x58
 8018bd0:	bd70      	pop	{r4, r5, r6, pc}
 8018bd2:	466a      	mov	r2, sp
 8018bd4:	f000 f920 	bl	8018e18 <_fstat_r>
 8018bd8:	2800      	cmp	r0, #0
 8018bda:	dbec      	blt.n	8018bb6 <__swhatbuf_r+0x12>
 8018bdc:	9901      	ldr	r1, [sp, #4]
 8018bde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018be2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018be6:	4259      	negs	r1, r3
 8018be8:	4159      	adcs	r1, r3
 8018bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018bee:	e7eb      	b.n	8018bc8 <__swhatbuf_r+0x24>

08018bf0 <__smakebuf_r>:
 8018bf0:	898b      	ldrh	r3, [r1, #12]
 8018bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018bf4:	079d      	lsls	r5, r3, #30
 8018bf6:	4606      	mov	r6, r0
 8018bf8:	460c      	mov	r4, r1
 8018bfa:	d507      	bpl.n	8018c0c <__smakebuf_r+0x1c>
 8018bfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018c00:	6023      	str	r3, [r4, #0]
 8018c02:	6123      	str	r3, [r4, #16]
 8018c04:	2301      	movs	r3, #1
 8018c06:	6163      	str	r3, [r4, #20]
 8018c08:	b003      	add	sp, #12
 8018c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c0c:	ab01      	add	r3, sp, #4
 8018c0e:	466a      	mov	r2, sp
 8018c10:	f7ff ffc8 	bl	8018ba4 <__swhatbuf_r>
 8018c14:	9f00      	ldr	r7, [sp, #0]
 8018c16:	4605      	mov	r5, r0
 8018c18:	4639      	mov	r1, r7
 8018c1a:	4630      	mov	r0, r6
 8018c1c:	f7ff fbfe 	bl	801841c <_malloc_r>
 8018c20:	b948      	cbnz	r0, 8018c36 <__smakebuf_r+0x46>
 8018c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c26:	059a      	lsls	r2, r3, #22
 8018c28:	d4ee      	bmi.n	8018c08 <__smakebuf_r+0x18>
 8018c2a:	f023 0303 	bic.w	r3, r3, #3
 8018c2e:	f043 0302 	orr.w	r3, r3, #2
 8018c32:	81a3      	strh	r3, [r4, #12]
 8018c34:	e7e2      	b.n	8018bfc <__smakebuf_r+0xc>
 8018c36:	89a3      	ldrh	r3, [r4, #12]
 8018c38:	6020      	str	r0, [r4, #0]
 8018c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018c3e:	81a3      	strh	r3, [r4, #12]
 8018c40:	9b01      	ldr	r3, [sp, #4]
 8018c42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018c46:	b15b      	cbz	r3, 8018c60 <__smakebuf_r+0x70>
 8018c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c4c:	4630      	mov	r0, r6
 8018c4e:	f000 f8f5 	bl	8018e3c <_isatty_r>
 8018c52:	b128      	cbz	r0, 8018c60 <__smakebuf_r+0x70>
 8018c54:	89a3      	ldrh	r3, [r4, #12]
 8018c56:	f023 0303 	bic.w	r3, r3, #3
 8018c5a:	f043 0301 	orr.w	r3, r3, #1
 8018c5e:	81a3      	strh	r3, [r4, #12]
 8018c60:	89a3      	ldrh	r3, [r4, #12]
 8018c62:	431d      	orrs	r5, r3
 8018c64:	81a5      	strh	r5, [r4, #12]
 8018c66:	e7cf      	b.n	8018c08 <__smakebuf_r+0x18>

08018c68 <iprintf>:
 8018c68:	b40f      	push	{r0, r1, r2, r3}
 8018c6a:	b507      	push	{r0, r1, r2, lr}
 8018c6c:	4906      	ldr	r1, [pc, #24]	@ (8018c88 <iprintf+0x20>)
 8018c6e:	ab04      	add	r3, sp, #16
 8018c70:	6808      	ldr	r0, [r1, #0]
 8018c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c76:	6881      	ldr	r1, [r0, #8]
 8018c78:	9301      	str	r3, [sp, #4]
 8018c7a:	f000 fb39 	bl	80192f0 <_vfiprintf_r>
 8018c7e:	b003      	add	sp, #12
 8018c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c84:	b004      	add	sp, #16
 8018c86:	4770      	bx	lr
 8018c88:	20000754 	.word	0x20000754

08018c8c <_puts_r>:
 8018c8c:	6a03      	ldr	r3, [r0, #32]
 8018c8e:	b570      	push	{r4, r5, r6, lr}
 8018c90:	6884      	ldr	r4, [r0, #8]
 8018c92:	4605      	mov	r5, r0
 8018c94:	460e      	mov	r6, r1
 8018c96:	b90b      	cbnz	r3, 8018c9c <_puts_r+0x10>
 8018c98:	f7ff fd80 	bl	801879c <__sinit>
 8018c9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018c9e:	07db      	lsls	r3, r3, #31
 8018ca0:	d405      	bmi.n	8018cae <_puts_r+0x22>
 8018ca2:	89a3      	ldrh	r3, [r4, #12]
 8018ca4:	0598      	lsls	r0, r3, #22
 8018ca6:	d402      	bmi.n	8018cae <_puts_r+0x22>
 8018ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018caa:	f000 f912 	bl	8018ed2 <__retarget_lock_acquire_recursive>
 8018cae:	89a3      	ldrh	r3, [r4, #12]
 8018cb0:	0719      	lsls	r1, r3, #28
 8018cb2:	d502      	bpl.n	8018cba <_puts_r+0x2e>
 8018cb4:	6923      	ldr	r3, [r4, #16]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d135      	bne.n	8018d26 <_puts_r+0x9a>
 8018cba:	4621      	mov	r1, r4
 8018cbc:	4628      	mov	r0, r5
 8018cbe:	f7ff ff1b 	bl	8018af8 <__swsetup_r>
 8018cc2:	b380      	cbz	r0, 8018d26 <_puts_r+0x9a>
 8018cc4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018cc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018cca:	07da      	lsls	r2, r3, #31
 8018ccc:	d405      	bmi.n	8018cda <_puts_r+0x4e>
 8018cce:	89a3      	ldrh	r3, [r4, #12]
 8018cd0:	059b      	lsls	r3, r3, #22
 8018cd2:	d402      	bmi.n	8018cda <_puts_r+0x4e>
 8018cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018cd6:	f000 f8fd 	bl	8018ed4 <__retarget_lock_release_recursive>
 8018cda:	4628      	mov	r0, r5
 8018cdc:	bd70      	pop	{r4, r5, r6, pc}
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	da04      	bge.n	8018cec <_puts_r+0x60>
 8018ce2:	69a2      	ldr	r2, [r4, #24]
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	dc17      	bgt.n	8018d18 <_puts_r+0x8c>
 8018ce8:	290a      	cmp	r1, #10
 8018cea:	d015      	beq.n	8018d18 <_puts_r+0x8c>
 8018cec:	6823      	ldr	r3, [r4, #0]
 8018cee:	1c5a      	adds	r2, r3, #1
 8018cf0:	6022      	str	r2, [r4, #0]
 8018cf2:	7019      	strb	r1, [r3, #0]
 8018cf4:	68a3      	ldr	r3, [r4, #8]
 8018cf6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018cfa:	3b01      	subs	r3, #1
 8018cfc:	60a3      	str	r3, [r4, #8]
 8018cfe:	2900      	cmp	r1, #0
 8018d00:	d1ed      	bne.n	8018cde <_puts_r+0x52>
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	da11      	bge.n	8018d2a <_puts_r+0x9e>
 8018d06:	4622      	mov	r2, r4
 8018d08:	210a      	movs	r1, #10
 8018d0a:	4628      	mov	r0, r5
 8018d0c:	f7ff feb6 	bl	8018a7c <__swbuf_r>
 8018d10:	3001      	adds	r0, #1
 8018d12:	d0d7      	beq.n	8018cc4 <_puts_r+0x38>
 8018d14:	250a      	movs	r5, #10
 8018d16:	e7d7      	b.n	8018cc8 <_puts_r+0x3c>
 8018d18:	4622      	mov	r2, r4
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	f7ff feae 	bl	8018a7c <__swbuf_r>
 8018d20:	3001      	adds	r0, #1
 8018d22:	d1e7      	bne.n	8018cf4 <_puts_r+0x68>
 8018d24:	e7ce      	b.n	8018cc4 <_puts_r+0x38>
 8018d26:	3e01      	subs	r6, #1
 8018d28:	e7e4      	b.n	8018cf4 <_puts_r+0x68>
 8018d2a:	6823      	ldr	r3, [r4, #0]
 8018d2c:	1c5a      	adds	r2, r3, #1
 8018d2e:	6022      	str	r2, [r4, #0]
 8018d30:	220a      	movs	r2, #10
 8018d32:	701a      	strb	r2, [r3, #0]
 8018d34:	e7ee      	b.n	8018d14 <_puts_r+0x88>
	...

08018d38 <puts>:
 8018d38:	4b02      	ldr	r3, [pc, #8]	@ (8018d44 <puts+0xc>)
 8018d3a:	4601      	mov	r1, r0
 8018d3c:	6818      	ldr	r0, [r3, #0]
 8018d3e:	f7ff bfa5 	b.w	8018c8c <_puts_r>
 8018d42:	bf00      	nop
 8018d44:	20000754 	.word	0x20000754

08018d48 <strchr>:
 8018d48:	b2c9      	uxtb	r1, r1
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d52:	b112      	cbz	r2, 8018d5a <strchr+0x12>
 8018d54:	428a      	cmp	r2, r1
 8018d56:	d1f9      	bne.n	8018d4c <strchr+0x4>
 8018d58:	4770      	bx	lr
 8018d5a:	2900      	cmp	r1, #0
 8018d5c:	bf18      	it	ne
 8018d5e:	2000      	movne	r0, #0
 8018d60:	4770      	bx	lr

08018d62 <strncmp>:
 8018d62:	b510      	push	{r4, lr}
 8018d64:	b16a      	cbz	r2, 8018d82 <strncmp+0x20>
 8018d66:	3901      	subs	r1, #1
 8018d68:	1884      	adds	r4, r0, r2
 8018d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018d72:	429a      	cmp	r2, r3
 8018d74:	d103      	bne.n	8018d7e <strncmp+0x1c>
 8018d76:	42a0      	cmp	r0, r4
 8018d78:	d001      	beq.n	8018d7e <strncmp+0x1c>
 8018d7a:	2a00      	cmp	r2, #0
 8018d7c:	d1f5      	bne.n	8018d6a <strncmp+0x8>
 8018d7e:	1ad0      	subs	r0, r2, r3
 8018d80:	bd10      	pop	{r4, pc}
 8018d82:	4610      	mov	r0, r2
 8018d84:	e7fc      	b.n	8018d80 <strncmp+0x1e>

08018d86 <strstr>:
 8018d86:	780a      	ldrb	r2, [r1, #0]
 8018d88:	b570      	push	{r4, r5, r6, lr}
 8018d8a:	b96a      	cbnz	r2, 8018da8 <strstr+0x22>
 8018d8c:	bd70      	pop	{r4, r5, r6, pc}
 8018d8e:	429a      	cmp	r2, r3
 8018d90:	d109      	bne.n	8018da6 <strstr+0x20>
 8018d92:	460c      	mov	r4, r1
 8018d94:	4605      	mov	r5, r0
 8018d96:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d0f6      	beq.n	8018d8c <strstr+0x6>
 8018d9e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018da2:	429e      	cmp	r6, r3
 8018da4:	d0f7      	beq.n	8018d96 <strstr+0x10>
 8018da6:	3001      	adds	r0, #1
 8018da8:	7803      	ldrb	r3, [r0, #0]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d1ef      	bne.n	8018d8e <strstr+0x8>
 8018dae:	4618      	mov	r0, r3
 8018db0:	e7ec      	b.n	8018d8c <strstr+0x6>

08018db2 <memcmp>:
 8018db2:	b510      	push	{r4, lr}
 8018db4:	3901      	subs	r1, #1
 8018db6:	4402      	add	r2, r0
 8018db8:	4290      	cmp	r0, r2
 8018dba:	d101      	bne.n	8018dc0 <memcmp+0xe>
 8018dbc:	2000      	movs	r0, #0
 8018dbe:	e005      	b.n	8018dcc <memcmp+0x1a>
 8018dc0:	7803      	ldrb	r3, [r0, #0]
 8018dc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018dc6:	42a3      	cmp	r3, r4
 8018dc8:	d001      	beq.n	8018dce <memcmp+0x1c>
 8018dca:	1b18      	subs	r0, r3, r4
 8018dcc:	bd10      	pop	{r4, pc}
 8018dce:	3001      	adds	r0, #1
 8018dd0:	e7f2      	b.n	8018db8 <memcmp+0x6>

08018dd2 <memmove>:
 8018dd2:	4288      	cmp	r0, r1
 8018dd4:	b510      	push	{r4, lr}
 8018dd6:	eb01 0402 	add.w	r4, r1, r2
 8018dda:	d902      	bls.n	8018de2 <memmove+0x10>
 8018ddc:	4284      	cmp	r4, r0
 8018dde:	4623      	mov	r3, r4
 8018de0:	d807      	bhi.n	8018df2 <memmove+0x20>
 8018de2:	1e43      	subs	r3, r0, #1
 8018de4:	42a1      	cmp	r1, r4
 8018de6:	d008      	beq.n	8018dfa <memmove+0x28>
 8018de8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018dec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018df0:	e7f8      	b.n	8018de4 <memmove+0x12>
 8018df2:	4402      	add	r2, r0
 8018df4:	4601      	mov	r1, r0
 8018df6:	428a      	cmp	r2, r1
 8018df8:	d100      	bne.n	8018dfc <memmove+0x2a>
 8018dfa:	bd10      	pop	{r4, pc}
 8018dfc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018e00:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018e04:	e7f7      	b.n	8018df6 <memmove+0x24>

08018e06 <memset>:
 8018e06:	4402      	add	r2, r0
 8018e08:	4603      	mov	r3, r0
 8018e0a:	4293      	cmp	r3, r2
 8018e0c:	d100      	bne.n	8018e10 <memset+0xa>
 8018e0e:	4770      	bx	lr
 8018e10:	f803 1b01 	strb.w	r1, [r3], #1
 8018e14:	e7f9      	b.n	8018e0a <memset+0x4>
	...

08018e18 <_fstat_r>:
 8018e18:	b538      	push	{r3, r4, r5, lr}
 8018e1a:	4d07      	ldr	r5, [pc, #28]	@ (8018e38 <_fstat_r+0x20>)
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	4604      	mov	r4, r0
 8018e20:	4608      	mov	r0, r1
 8018e22:	4611      	mov	r1, r2
 8018e24:	602b      	str	r3, [r5, #0]
 8018e26:	f7e9 fb27 	bl	8002478 <_fstat>
 8018e2a:	1c43      	adds	r3, r0, #1
 8018e2c:	d102      	bne.n	8018e34 <_fstat_r+0x1c>
 8018e2e:	682b      	ldr	r3, [r5, #0]
 8018e30:	b103      	cbz	r3, 8018e34 <_fstat_r+0x1c>
 8018e32:	6023      	str	r3, [r4, #0]
 8018e34:	bd38      	pop	{r3, r4, r5, pc}
 8018e36:	bf00      	nop
 8018e38:	20015678 	.word	0x20015678

08018e3c <_isatty_r>:
 8018e3c:	b538      	push	{r3, r4, r5, lr}
 8018e3e:	4d06      	ldr	r5, [pc, #24]	@ (8018e58 <_isatty_r+0x1c>)
 8018e40:	2300      	movs	r3, #0
 8018e42:	4604      	mov	r4, r0
 8018e44:	4608      	mov	r0, r1
 8018e46:	602b      	str	r3, [r5, #0]
 8018e48:	f7e9 fb26 	bl	8002498 <_isatty>
 8018e4c:	1c43      	adds	r3, r0, #1
 8018e4e:	d102      	bne.n	8018e56 <_isatty_r+0x1a>
 8018e50:	682b      	ldr	r3, [r5, #0]
 8018e52:	b103      	cbz	r3, 8018e56 <_isatty_r+0x1a>
 8018e54:	6023      	str	r3, [r4, #0]
 8018e56:	bd38      	pop	{r3, r4, r5, pc}
 8018e58:	20015678 	.word	0x20015678

08018e5c <_sbrk_r>:
 8018e5c:	b538      	push	{r3, r4, r5, lr}
 8018e5e:	4d06      	ldr	r5, [pc, #24]	@ (8018e78 <_sbrk_r+0x1c>)
 8018e60:	2300      	movs	r3, #0
 8018e62:	4604      	mov	r4, r0
 8018e64:	4608      	mov	r0, r1
 8018e66:	602b      	str	r3, [r5, #0]
 8018e68:	f7e9 fb2e 	bl	80024c8 <_sbrk>
 8018e6c:	1c43      	adds	r3, r0, #1
 8018e6e:	d102      	bne.n	8018e76 <_sbrk_r+0x1a>
 8018e70:	682b      	ldr	r3, [r5, #0]
 8018e72:	b103      	cbz	r3, 8018e76 <_sbrk_r+0x1a>
 8018e74:	6023      	str	r3, [r4, #0]
 8018e76:	bd38      	pop	{r3, r4, r5, pc}
 8018e78:	20015678 	.word	0x20015678

08018e7c <__errno>:
 8018e7c:	4b01      	ldr	r3, [pc, #4]	@ (8018e84 <__errno+0x8>)
 8018e7e:	6818      	ldr	r0, [r3, #0]
 8018e80:	4770      	bx	lr
 8018e82:	bf00      	nop
 8018e84:	20000754 	.word	0x20000754

08018e88 <__libc_init_array>:
 8018e88:	b570      	push	{r4, r5, r6, lr}
 8018e8a:	4d0d      	ldr	r5, [pc, #52]	@ (8018ec0 <__libc_init_array+0x38>)
 8018e8c:	4c0d      	ldr	r4, [pc, #52]	@ (8018ec4 <__libc_init_array+0x3c>)
 8018e8e:	1b64      	subs	r4, r4, r5
 8018e90:	10a4      	asrs	r4, r4, #2
 8018e92:	2600      	movs	r6, #0
 8018e94:	42a6      	cmp	r6, r4
 8018e96:	d109      	bne.n	8018eac <__libc_init_array+0x24>
 8018e98:	4d0b      	ldr	r5, [pc, #44]	@ (8018ec8 <__libc_init_array+0x40>)
 8018e9a:	4c0c      	ldr	r4, [pc, #48]	@ (8018ecc <__libc_init_array+0x44>)
 8018e9c:	f001 f8f4 	bl	801a088 <_init>
 8018ea0:	1b64      	subs	r4, r4, r5
 8018ea2:	10a4      	asrs	r4, r4, #2
 8018ea4:	2600      	movs	r6, #0
 8018ea6:	42a6      	cmp	r6, r4
 8018ea8:	d105      	bne.n	8018eb6 <__libc_init_array+0x2e>
 8018eaa:	bd70      	pop	{r4, r5, r6, pc}
 8018eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8018eb0:	4798      	blx	r3
 8018eb2:	3601      	adds	r6, #1
 8018eb4:	e7ee      	b.n	8018e94 <__libc_init_array+0xc>
 8018eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8018eba:	4798      	blx	r3
 8018ebc:	3601      	adds	r6, #1
 8018ebe:	e7f2      	b.n	8018ea6 <__libc_init_array+0x1e>
 8018ec0:	0801b580 	.word	0x0801b580
 8018ec4:	0801b580 	.word	0x0801b580
 8018ec8:	0801b580 	.word	0x0801b580
 8018ecc:	0801b590 	.word	0x0801b590

08018ed0 <__retarget_lock_init_recursive>:
 8018ed0:	4770      	bx	lr

08018ed2 <__retarget_lock_acquire_recursive>:
 8018ed2:	4770      	bx	lr

08018ed4 <__retarget_lock_release_recursive>:
 8018ed4:	4770      	bx	lr

08018ed6 <memcpy>:
 8018ed6:	440a      	add	r2, r1
 8018ed8:	4291      	cmp	r1, r2
 8018eda:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018ede:	d100      	bne.n	8018ee2 <memcpy+0xc>
 8018ee0:	4770      	bx	lr
 8018ee2:	b510      	push	{r4, lr}
 8018ee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018ee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018eec:	4291      	cmp	r1, r2
 8018eee:	d1f9      	bne.n	8018ee4 <memcpy+0xe>
 8018ef0:	bd10      	pop	{r4, pc}

08018ef2 <strcpy>:
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018ef8:	f803 2b01 	strb.w	r2, [r3], #1
 8018efc:	2a00      	cmp	r2, #0
 8018efe:	d1f9      	bne.n	8018ef4 <strcpy+0x2>
 8018f00:	4770      	bx	lr
	...

08018f04 <__assert_func>:
 8018f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018f06:	4614      	mov	r4, r2
 8018f08:	461a      	mov	r2, r3
 8018f0a:	4b09      	ldr	r3, [pc, #36]	@ (8018f30 <__assert_func+0x2c>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	4605      	mov	r5, r0
 8018f10:	68d8      	ldr	r0, [r3, #12]
 8018f12:	b954      	cbnz	r4, 8018f2a <__assert_func+0x26>
 8018f14:	4b07      	ldr	r3, [pc, #28]	@ (8018f34 <__assert_func+0x30>)
 8018f16:	461c      	mov	r4, r3
 8018f18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018f1c:	9100      	str	r1, [sp, #0]
 8018f1e:	462b      	mov	r3, r5
 8018f20:	4905      	ldr	r1, [pc, #20]	@ (8018f38 <__assert_func+0x34>)
 8018f22:	f000 fd83 	bl	8019a2c <fiprintf>
 8018f26:	f000 fdd9 	bl	8019adc <abort>
 8018f2a:	4b04      	ldr	r3, [pc, #16]	@ (8018f3c <__assert_func+0x38>)
 8018f2c:	e7f4      	b.n	8018f18 <__assert_func+0x14>
 8018f2e:	bf00      	nop
 8018f30:	20000754 	.word	0x20000754
 8018f34:	0801b4d1 	.word	0x0801b4d1
 8018f38:	0801b4a3 	.word	0x0801b4a3
 8018f3c:	0801b496 	.word	0x0801b496

08018f40 <__env_lock>:
 8018f40:	4801      	ldr	r0, [pc, #4]	@ (8018f48 <__env_lock+0x8>)
 8018f42:	f7ff bfc6 	b.w	8018ed2 <__retarget_lock_acquire_recursive>
 8018f46:	bf00      	nop
 8018f48:	20015674 	.word	0x20015674

08018f4c <__env_unlock>:
 8018f4c:	4801      	ldr	r0, [pc, #4]	@ (8018f54 <__env_unlock+0x8>)
 8018f4e:	f7ff bfc1 	b.w	8018ed4 <__retarget_lock_release_recursive>
 8018f52:	bf00      	nop
 8018f54:	20015674 	.word	0x20015674

08018f58 <_free_r>:
 8018f58:	b538      	push	{r3, r4, r5, lr}
 8018f5a:	4605      	mov	r5, r0
 8018f5c:	2900      	cmp	r1, #0
 8018f5e:	d041      	beq.n	8018fe4 <_free_r+0x8c>
 8018f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f64:	1f0c      	subs	r4, r1, #4
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	bfb8      	it	lt
 8018f6a:	18e4      	addlt	r4, r4, r3
 8018f6c:	f7ff fb0a 	bl	8018584 <__malloc_lock>
 8018f70:	4a1d      	ldr	r2, [pc, #116]	@ (8018fe8 <_free_r+0x90>)
 8018f72:	6813      	ldr	r3, [r2, #0]
 8018f74:	b933      	cbnz	r3, 8018f84 <_free_r+0x2c>
 8018f76:	6063      	str	r3, [r4, #4]
 8018f78:	6014      	str	r4, [r2, #0]
 8018f7a:	4628      	mov	r0, r5
 8018f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f80:	f7ff bb06 	b.w	8018590 <__malloc_unlock>
 8018f84:	42a3      	cmp	r3, r4
 8018f86:	d908      	bls.n	8018f9a <_free_r+0x42>
 8018f88:	6820      	ldr	r0, [r4, #0]
 8018f8a:	1821      	adds	r1, r4, r0
 8018f8c:	428b      	cmp	r3, r1
 8018f8e:	bf01      	itttt	eq
 8018f90:	6819      	ldreq	r1, [r3, #0]
 8018f92:	685b      	ldreq	r3, [r3, #4]
 8018f94:	1809      	addeq	r1, r1, r0
 8018f96:	6021      	streq	r1, [r4, #0]
 8018f98:	e7ed      	b.n	8018f76 <_free_r+0x1e>
 8018f9a:	461a      	mov	r2, r3
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	b10b      	cbz	r3, 8018fa4 <_free_r+0x4c>
 8018fa0:	42a3      	cmp	r3, r4
 8018fa2:	d9fa      	bls.n	8018f9a <_free_r+0x42>
 8018fa4:	6811      	ldr	r1, [r2, #0]
 8018fa6:	1850      	adds	r0, r2, r1
 8018fa8:	42a0      	cmp	r0, r4
 8018faa:	d10b      	bne.n	8018fc4 <_free_r+0x6c>
 8018fac:	6820      	ldr	r0, [r4, #0]
 8018fae:	4401      	add	r1, r0
 8018fb0:	1850      	adds	r0, r2, r1
 8018fb2:	4283      	cmp	r3, r0
 8018fb4:	6011      	str	r1, [r2, #0]
 8018fb6:	d1e0      	bne.n	8018f7a <_free_r+0x22>
 8018fb8:	6818      	ldr	r0, [r3, #0]
 8018fba:	685b      	ldr	r3, [r3, #4]
 8018fbc:	6053      	str	r3, [r2, #4]
 8018fbe:	4408      	add	r0, r1
 8018fc0:	6010      	str	r0, [r2, #0]
 8018fc2:	e7da      	b.n	8018f7a <_free_r+0x22>
 8018fc4:	d902      	bls.n	8018fcc <_free_r+0x74>
 8018fc6:	230c      	movs	r3, #12
 8018fc8:	602b      	str	r3, [r5, #0]
 8018fca:	e7d6      	b.n	8018f7a <_free_r+0x22>
 8018fcc:	6820      	ldr	r0, [r4, #0]
 8018fce:	1821      	adds	r1, r4, r0
 8018fd0:	428b      	cmp	r3, r1
 8018fd2:	bf04      	itt	eq
 8018fd4:	6819      	ldreq	r1, [r3, #0]
 8018fd6:	685b      	ldreq	r3, [r3, #4]
 8018fd8:	6063      	str	r3, [r4, #4]
 8018fda:	bf04      	itt	eq
 8018fdc:	1809      	addeq	r1, r1, r0
 8018fde:	6021      	streq	r1, [r4, #0]
 8018fe0:	6054      	str	r4, [r2, #4]
 8018fe2:	e7ca      	b.n	8018f7a <_free_r+0x22>
 8018fe4:	bd38      	pop	{r3, r4, r5, pc}
 8018fe6:	bf00      	nop
 8018fe8:	20015534 	.word	0x20015534

08018fec <__ssputs_r>:
 8018fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ff0:	688e      	ldr	r6, [r1, #8]
 8018ff2:	461f      	mov	r7, r3
 8018ff4:	42be      	cmp	r6, r7
 8018ff6:	680b      	ldr	r3, [r1, #0]
 8018ff8:	4682      	mov	sl, r0
 8018ffa:	460c      	mov	r4, r1
 8018ffc:	4690      	mov	r8, r2
 8018ffe:	d82d      	bhi.n	801905c <__ssputs_r+0x70>
 8019000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019004:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019008:	d026      	beq.n	8019058 <__ssputs_r+0x6c>
 801900a:	6965      	ldr	r5, [r4, #20]
 801900c:	6909      	ldr	r1, [r1, #16]
 801900e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019012:	eba3 0901 	sub.w	r9, r3, r1
 8019016:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801901a:	1c7b      	adds	r3, r7, #1
 801901c:	444b      	add	r3, r9
 801901e:	106d      	asrs	r5, r5, #1
 8019020:	429d      	cmp	r5, r3
 8019022:	bf38      	it	cc
 8019024:	461d      	movcc	r5, r3
 8019026:	0553      	lsls	r3, r2, #21
 8019028:	d527      	bpl.n	801907a <__ssputs_r+0x8e>
 801902a:	4629      	mov	r1, r5
 801902c:	f7ff f9f6 	bl	801841c <_malloc_r>
 8019030:	4606      	mov	r6, r0
 8019032:	b360      	cbz	r0, 801908e <__ssputs_r+0xa2>
 8019034:	6921      	ldr	r1, [r4, #16]
 8019036:	464a      	mov	r2, r9
 8019038:	f7ff ff4d 	bl	8018ed6 <memcpy>
 801903c:	89a3      	ldrh	r3, [r4, #12]
 801903e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019046:	81a3      	strh	r3, [r4, #12]
 8019048:	6126      	str	r6, [r4, #16]
 801904a:	6165      	str	r5, [r4, #20]
 801904c:	444e      	add	r6, r9
 801904e:	eba5 0509 	sub.w	r5, r5, r9
 8019052:	6026      	str	r6, [r4, #0]
 8019054:	60a5      	str	r5, [r4, #8]
 8019056:	463e      	mov	r6, r7
 8019058:	42be      	cmp	r6, r7
 801905a:	d900      	bls.n	801905e <__ssputs_r+0x72>
 801905c:	463e      	mov	r6, r7
 801905e:	6820      	ldr	r0, [r4, #0]
 8019060:	4632      	mov	r2, r6
 8019062:	4641      	mov	r1, r8
 8019064:	f7ff feb5 	bl	8018dd2 <memmove>
 8019068:	68a3      	ldr	r3, [r4, #8]
 801906a:	1b9b      	subs	r3, r3, r6
 801906c:	60a3      	str	r3, [r4, #8]
 801906e:	6823      	ldr	r3, [r4, #0]
 8019070:	4433      	add	r3, r6
 8019072:	6023      	str	r3, [r4, #0]
 8019074:	2000      	movs	r0, #0
 8019076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801907a:	462a      	mov	r2, r5
 801907c:	f7ff fba6 	bl	80187cc <_realloc_r>
 8019080:	4606      	mov	r6, r0
 8019082:	2800      	cmp	r0, #0
 8019084:	d1e0      	bne.n	8019048 <__ssputs_r+0x5c>
 8019086:	6921      	ldr	r1, [r4, #16]
 8019088:	4650      	mov	r0, sl
 801908a:	f7ff ff65 	bl	8018f58 <_free_r>
 801908e:	230c      	movs	r3, #12
 8019090:	f8ca 3000 	str.w	r3, [sl]
 8019094:	89a3      	ldrh	r3, [r4, #12]
 8019096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801909a:	81a3      	strh	r3, [r4, #12]
 801909c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80190a0:	e7e9      	b.n	8019076 <__ssputs_r+0x8a>
	...

080190a4 <_svfiprintf_r>:
 80190a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a8:	4698      	mov	r8, r3
 80190aa:	898b      	ldrh	r3, [r1, #12]
 80190ac:	061b      	lsls	r3, r3, #24
 80190ae:	b09d      	sub	sp, #116	@ 0x74
 80190b0:	4607      	mov	r7, r0
 80190b2:	460d      	mov	r5, r1
 80190b4:	4614      	mov	r4, r2
 80190b6:	d510      	bpl.n	80190da <_svfiprintf_r+0x36>
 80190b8:	690b      	ldr	r3, [r1, #16]
 80190ba:	b973      	cbnz	r3, 80190da <_svfiprintf_r+0x36>
 80190bc:	2140      	movs	r1, #64	@ 0x40
 80190be:	f7ff f9ad 	bl	801841c <_malloc_r>
 80190c2:	6028      	str	r0, [r5, #0]
 80190c4:	6128      	str	r0, [r5, #16]
 80190c6:	b930      	cbnz	r0, 80190d6 <_svfiprintf_r+0x32>
 80190c8:	230c      	movs	r3, #12
 80190ca:	603b      	str	r3, [r7, #0]
 80190cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80190d0:	b01d      	add	sp, #116	@ 0x74
 80190d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190d6:	2340      	movs	r3, #64	@ 0x40
 80190d8:	616b      	str	r3, [r5, #20]
 80190da:	2300      	movs	r3, #0
 80190dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80190de:	2320      	movs	r3, #32
 80190e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80190e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80190e8:	2330      	movs	r3, #48	@ 0x30
 80190ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019288 <_svfiprintf_r+0x1e4>
 80190ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80190f2:	f04f 0901 	mov.w	r9, #1
 80190f6:	4623      	mov	r3, r4
 80190f8:	469a      	mov	sl, r3
 80190fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190fe:	b10a      	cbz	r2, 8019104 <_svfiprintf_r+0x60>
 8019100:	2a25      	cmp	r2, #37	@ 0x25
 8019102:	d1f9      	bne.n	80190f8 <_svfiprintf_r+0x54>
 8019104:	ebba 0b04 	subs.w	fp, sl, r4
 8019108:	d00b      	beq.n	8019122 <_svfiprintf_r+0x7e>
 801910a:	465b      	mov	r3, fp
 801910c:	4622      	mov	r2, r4
 801910e:	4629      	mov	r1, r5
 8019110:	4638      	mov	r0, r7
 8019112:	f7ff ff6b 	bl	8018fec <__ssputs_r>
 8019116:	3001      	adds	r0, #1
 8019118:	f000 80a7 	beq.w	801926a <_svfiprintf_r+0x1c6>
 801911c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801911e:	445a      	add	r2, fp
 8019120:	9209      	str	r2, [sp, #36]	@ 0x24
 8019122:	f89a 3000 	ldrb.w	r3, [sl]
 8019126:	2b00      	cmp	r3, #0
 8019128:	f000 809f 	beq.w	801926a <_svfiprintf_r+0x1c6>
 801912c:	2300      	movs	r3, #0
 801912e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019136:	f10a 0a01 	add.w	sl, sl, #1
 801913a:	9304      	str	r3, [sp, #16]
 801913c:	9307      	str	r3, [sp, #28]
 801913e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019142:	931a      	str	r3, [sp, #104]	@ 0x68
 8019144:	4654      	mov	r4, sl
 8019146:	2205      	movs	r2, #5
 8019148:	f814 1b01 	ldrb.w	r1, [r4], #1
 801914c:	484e      	ldr	r0, [pc, #312]	@ (8019288 <_svfiprintf_r+0x1e4>)
 801914e:	f7e7 f86f 	bl	8000230 <memchr>
 8019152:	9a04      	ldr	r2, [sp, #16]
 8019154:	b9d8      	cbnz	r0, 801918e <_svfiprintf_r+0xea>
 8019156:	06d0      	lsls	r0, r2, #27
 8019158:	bf44      	itt	mi
 801915a:	2320      	movmi	r3, #32
 801915c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019160:	0711      	lsls	r1, r2, #28
 8019162:	bf44      	itt	mi
 8019164:	232b      	movmi	r3, #43	@ 0x2b
 8019166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801916a:	f89a 3000 	ldrb.w	r3, [sl]
 801916e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019170:	d015      	beq.n	801919e <_svfiprintf_r+0xfa>
 8019172:	9a07      	ldr	r2, [sp, #28]
 8019174:	4654      	mov	r4, sl
 8019176:	2000      	movs	r0, #0
 8019178:	f04f 0c0a 	mov.w	ip, #10
 801917c:	4621      	mov	r1, r4
 801917e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019182:	3b30      	subs	r3, #48	@ 0x30
 8019184:	2b09      	cmp	r3, #9
 8019186:	d94b      	bls.n	8019220 <_svfiprintf_r+0x17c>
 8019188:	b1b0      	cbz	r0, 80191b8 <_svfiprintf_r+0x114>
 801918a:	9207      	str	r2, [sp, #28]
 801918c:	e014      	b.n	80191b8 <_svfiprintf_r+0x114>
 801918e:	eba0 0308 	sub.w	r3, r0, r8
 8019192:	fa09 f303 	lsl.w	r3, r9, r3
 8019196:	4313      	orrs	r3, r2
 8019198:	9304      	str	r3, [sp, #16]
 801919a:	46a2      	mov	sl, r4
 801919c:	e7d2      	b.n	8019144 <_svfiprintf_r+0xa0>
 801919e:	9b03      	ldr	r3, [sp, #12]
 80191a0:	1d19      	adds	r1, r3, #4
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	9103      	str	r1, [sp, #12]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	bfbb      	ittet	lt
 80191aa:	425b      	neglt	r3, r3
 80191ac:	f042 0202 	orrlt.w	r2, r2, #2
 80191b0:	9307      	strge	r3, [sp, #28]
 80191b2:	9307      	strlt	r3, [sp, #28]
 80191b4:	bfb8      	it	lt
 80191b6:	9204      	strlt	r2, [sp, #16]
 80191b8:	7823      	ldrb	r3, [r4, #0]
 80191ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80191bc:	d10a      	bne.n	80191d4 <_svfiprintf_r+0x130>
 80191be:	7863      	ldrb	r3, [r4, #1]
 80191c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80191c2:	d132      	bne.n	801922a <_svfiprintf_r+0x186>
 80191c4:	9b03      	ldr	r3, [sp, #12]
 80191c6:	1d1a      	adds	r2, r3, #4
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	9203      	str	r2, [sp, #12]
 80191cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80191d0:	3402      	adds	r4, #2
 80191d2:	9305      	str	r3, [sp, #20]
 80191d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019298 <_svfiprintf_r+0x1f4>
 80191d8:	7821      	ldrb	r1, [r4, #0]
 80191da:	2203      	movs	r2, #3
 80191dc:	4650      	mov	r0, sl
 80191de:	f7e7 f827 	bl	8000230 <memchr>
 80191e2:	b138      	cbz	r0, 80191f4 <_svfiprintf_r+0x150>
 80191e4:	9b04      	ldr	r3, [sp, #16]
 80191e6:	eba0 000a 	sub.w	r0, r0, sl
 80191ea:	2240      	movs	r2, #64	@ 0x40
 80191ec:	4082      	lsls	r2, r0
 80191ee:	4313      	orrs	r3, r2
 80191f0:	3401      	adds	r4, #1
 80191f2:	9304      	str	r3, [sp, #16]
 80191f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191f8:	4824      	ldr	r0, [pc, #144]	@ (801928c <_svfiprintf_r+0x1e8>)
 80191fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80191fe:	2206      	movs	r2, #6
 8019200:	f7e7 f816 	bl	8000230 <memchr>
 8019204:	2800      	cmp	r0, #0
 8019206:	d036      	beq.n	8019276 <_svfiprintf_r+0x1d2>
 8019208:	4b21      	ldr	r3, [pc, #132]	@ (8019290 <_svfiprintf_r+0x1ec>)
 801920a:	bb1b      	cbnz	r3, 8019254 <_svfiprintf_r+0x1b0>
 801920c:	9b03      	ldr	r3, [sp, #12]
 801920e:	3307      	adds	r3, #7
 8019210:	f023 0307 	bic.w	r3, r3, #7
 8019214:	3308      	adds	r3, #8
 8019216:	9303      	str	r3, [sp, #12]
 8019218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801921a:	4433      	add	r3, r6
 801921c:	9309      	str	r3, [sp, #36]	@ 0x24
 801921e:	e76a      	b.n	80190f6 <_svfiprintf_r+0x52>
 8019220:	fb0c 3202 	mla	r2, ip, r2, r3
 8019224:	460c      	mov	r4, r1
 8019226:	2001      	movs	r0, #1
 8019228:	e7a8      	b.n	801917c <_svfiprintf_r+0xd8>
 801922a:	2300      	movs	r3, #0
 801922c:	3401      	adds	r4, #1
 801922e:	9305      	str	r3, [sp, #20]
 8019230:	4619      	mov	r1, r3
 8019232:	f04f 0c0a 	mov.w	ip, #10
 8019236:	4620      	mov	r0, r4
 8019238:	f810 2b01 	ldrb.w	r2, [r0], #1
 801923c:	3a30      	subs	r2, #48	@ 0x30
 801923e:	2a09      	cmp	r2, #9
 8019240:	d903      	bls.n	801924a <_svfiprintf_r+0x1a6>
 8019242:	2b00      	cmp	r3, #0
 8019244:	d0c6      	beq.n	80191d4 <_svfiprintf_r+0x130>
 8019246:	9105      	str	r1, [sp, #20]
 8019248:	e7c4      	b.n	80191d4 <_svfiprintf_r+0x130>
 801924a:	fb0c 2101 	mla	r1, ip, r1, r2
 801924e:	4604      	mov	r4, r0
 8019250:	2301      	movs	r3, #1
 8019252:	e7f0      	b.n	8019236 <_svfiprintf_r+0x192>
 8019254:	ab03      	add	r3, sp, #12
 8019256:	9300      	str	r3, [sp, #0]
 8019258:	462a      	mov	r2, r5
 801925a:	4b0e      	ldr	r3, [pc, #56]	@ (8019294 <_svfiprintf_r+0x1f0>)
 801925c:	a904      	add	r1, sp, #16
 801925e:	4638      	mov	r0, r7
 8019260:	f3af 8000 	nop.w
 8019264:	1c42      	adds	r2, r0, #1
 8019266:	4606      	mov	r6, r0
 8019268:	d1d6      	bne.n	8019218 <_svfiprintf_r+0x174>
 801926a:	89ab      	ldrh	r3, [r5, #12]
 801926c:	065b      	lsls	r3, r3, #25
 801926e:	f53f af2d 	bmi.w	80190cc <_svfiprintf_r+0x28>
 8019272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019274:	e72c      	b.n	80190d0 <_svfiprintf_r+0x2c>
 8019276:	ab03      	add	r3, sp, #12
 8019278:	9300      	str	r3, [sp, #0]
 801927a:	462a      	mov	r2, r5
 801927c:	4b05      	ldr	r3, [pc, #20]	@ (8019294 <_svfiprintf_r+0x1f0>)
 801927e:	a904      	add	r1, sp, #16
 8019280:	4638      	mov	r0, r7
 8019282:	f000 f9bb 	bl	80195fc <_printf_i>
 8019286:	e7ed      	b.n	8019264 <_svfiprintf_r+0x1c0>
 8019288:	0801b4d2 	.word	0x0801b4d2
 801928c:	0801b4dc 	.word	0x0801b4dc
 8019290:	00000000 	.word	0x00000000
 8019294:	08018fed 	.word	0x08018fed
 8019298:	0801b4d8 	.word	0x0801b4d8

0801929c <__sfputc_r>:
 801929c:	6893      	ldr	r3, [r2, #8]
 801929e:	3b01      	subs	r3, #1
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	b410      	push	{r4}
 80192a4:	6093      	str	r3, [r2, #8]
 80192a6:	da08      	bge.n	80192ba <__sfputc_r+0x1e>
 80192a8:	6994      	ldr	r4, [r2, #24]
 80192aa:	42a3      	cmp	r3, r4
 80192ac:	db01      	blt.n	80192b2 <__sfputc_r+0x16>
 80192ae:	290a      	cmp	r1, #10
 80192b0:	d103      	bne.n	80192ba <__sfputc_r+0x1e>
 80192b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192b6:	f7ff bbe1 	b.w	8018a7c <__swbuf_r>
 80192ba:	6813      	ldr	r3, [r2, #0]
 80192bc:	1c58      	adds	r0, r3, #1
 80192be:	6010      	str	r0, [r2, #0]
 80192c0:	7019      	strb	r1, [r3, #0]
 80192c2:	4608      	mov	r0, r1
 80192c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192c8:	4770      	bx	lr

080192ca <__sfputs_r>:
 80192ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192cc:	4606      	mov	r6, r0
 80192ce:	460f      	mov	r7, r1
 80192d0:	4614      	mov	r4, r2
 80192d2:	18d5      	adds	r5, r2, r3
 80192d4:	42ac      	cmp	r4, r5
 80192d6:	d101      	bne.n	80192dc <__sfputs_r+0x12>
 80192d8:	2000      	movs	r0, #0
 80192da:	e007      	b.n	80192ec <__sfputs_r+0x22>
 80192dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192e0:	463a      	mov	r2, r7
 80192e2:	4630      	mov	r0, r6
 80192e4:	f7ff ffda 	bl	801929c <__sfputc_r>
 80192e8:	1c43      	adds	r3, r0, #1
 80192ea:	d1f3      	bne.n	80192d4 <__sfputs_r+0xa>
 80192ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080192f0 <_vfiprintf_r>:
 80192f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192f4:	460d      	mov	r5, r1
 80192f6:	b09d      	sub	sp, #116	@ 0x74
 80192f8:	4614      	mov	r4, r2
 80192fa:	4698      	mov	r8, r3
 80192fc:	4606      	mov	r6, r0
 80192fe:	b118      	cbz	r0, 8019308 <_vfiprintf_r+0x18>
 8019300:	6a03      	ldr	r3, [r0, #32]
 8019302:	b90b      	cbnz	r3, 8019308 <_vfiprintf_r+0x18>
 8019304:	f7ff fa4a 	bl	801879c <__sinit>
 8019308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801930a:	07d9      	lsls	r1, r3, #31
 801930c:	d405      	bmi.n	801931a <_vfiprintf_r+0x2a>
 801930e:	89ab      	ldrh	r3, [r5, #12]
 8019310:	059a      	lsls	r2, r3, #22
 8019312:	d402      	bmi.n	801931a <_vfiprintf_r+0x2a>
 8019314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019316:	f7ff fddc 	bl	8018ed2 <__retarget_lock_acquire_recursive>
 801931a:	89ab      	ldrh	r3, [r5, #12]
 801931c:	071b      	lsls	r3, r3, #28
 801931e:	d501      	bpl.n	8019324 <_vfiprintf_r+0x34>
 8019320:	692b      	ldr	r3, [r5, #16]
 8019322:	b99b      	cbnz	r3, 801934c <_vfiprintf_r+0x5c>
 8019324:	4629      	mov	r1, r5
 8019326:	4630      	mov	r0, r6
 8019328:	f7ff fbe6 	bl	8018af8 <__swsetup_r>
 801932c:	b170      	cbz	r0, 801934c <_vfiprintf_r+0x5c>
 801932e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019330:	07dc      	lsls	r4, r3, #31
 8019332:	d504      	bpl.n	801933e <_vfiprintf_r+0x4e>
 8019334:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019338:	b01d      	add	sp, #116	@ 0x74
 801933a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801933e:	89ab      	ldrh	r3, [r5, #12]
 8019340:	0598      	lsls	r0, r3, #22
 8019342:	d4f7      	bmi.n	8019334 <_vfiprintf_r+0x44>
 8019344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019346:	f7ff fdc5 	bl	8018ed4 <__retarget_lock_release_recursive>
 801934a:	e7f3      	b.n	8019334 <_vfiprintf_r+0x44>
 801934c:	2300      	movs	r3, #0
 801934e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019350:	2320      	movs	r3, #32
 8019352:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019356:	f8cd 800c 	str.w	r8, [sp, #12]
 801935a:	2330      	movs	r3, #48	@ 0x30
 801935c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801950c <_vfiprintf_r+0x21c>
 8019360:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019364:	f04f 0901 	mov.w	r9, #1
 8019368:	4623      	mov	r3, r4
 801936a:	469a      	mov	sl, r3
 801936c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019370:	b10a      	cbz	r2, 8019376 <_vfiprintf_r+0x86>
 8019372:	2a25      	cmp	r2, #37	@ 0x25
 8019374:	d1f9      	bne.n	801936a <_vfiprintf_r+0x7a>
 8019376:	ebba 0b04 	subs.w	fp, sl, r4
 801937a:	d00b      	beq.n	8019394 <_vfiprintf_r+0xa4>
 801937c:	465b      	mov	r3, fp
 801937e:	4622      	mov	r2, r4
 8019380:	4629      	mov	r1, r5
 8019382:	4630      	mov	r0, r6
 8019384:	f7ff ffa1 	bl	80192ca <__sfputs_r>
 8019388:	3001      	adds	r0, #1
 801938a:	f000 80a7 	beq.w	80194dc <_vfiprintf_r+0x1ec>
 801938e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019390:	445a      	add	r2, fp
 8019392:	9209      	str	r2, [sp, #36]	@ 0x24
 8019394:	f89a 3000 	ldrb.w	r3, [sl]
 8019398:	2b00      	cmp	r3, #0
 801939a:	f000 809f 	beq.w	80194dc <_vfiprintf_r+0x1ec>
 801939e:	2300      	movs	r3, #0
 80193a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80193a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80193a8:	f10a 0a01 	add.w	sl, sl, #1
 80193ac:	9304      	str	r3, [sp, #16]
 80193ae:	9307      	str	r3, [sp, #28]
 80193b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80193b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80193b6:	4654      	mov	r4, sl
 80193b8:	2205      	movs	r2, #5
 80193ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193be:	4853      	ldr	r0, [pc, #332]	@ (801950c <_vfiprintf_r+0x21c>)
 80193c0:	f7e6 ff36 	bl	8000230 <memchr>
 80193c4:	9a04      	ldr	r2, [sp, #16]
 80193c6:	b9d8      	cbnz	r0, 8019400 <_vfiprintf_r+0x110>
 80193c8:	06d1      	lsls	r1, r2, #27
 80193ca:	bf44      	itt	mi
 80193cc:	2320      	movmi	r3, #32
 80193ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80193d2:	0713      	lsls	r3, r2, #28
 80193d4:	bf44      	itt	mi
 80193d6:	232b      	movmi	r3, #43	@ 0x2b
 80193d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80193dc:	f89a 3000 	ldrb.w	r3, [sl]
 80193e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80193e2:	d015      	beq.n	8019410 <_vfiprintf_r+0x120>
 80193e4:	9a07      	ldr	r2, [sp, #28]
 80193e6:	4654      	mov	r4, sl
 80193e8:	2000      	movs	r0, #0
 80193ea:	f04f 0c0a 	mov.w	ip, #10
 80193ee:	4621      	mov	r1, r4
 80193f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80193f4:	3b30      	subs	r3, #48	@ 0x30
 80193f6:	2b09      	cmp	r3, #9
 80193f8:	d94b      	bls.n	8019492 <_vfiprintf_r+0x1a2>
 80193fa:	b1b0      	cbz	r0, 801942a <_vfiprintf_r+0x13a>
 80193fc:	9207      	str	r2, [sp, #28]
 80193fe:	e014      	b.n	801942a <_vfiprintf_r+0x13a>
 8019400:	eba0 0308 	sub.w	r3, r0, r8
 8019404:	fa09 f303 	lsl.w	r3, r9, r3
 8019408:	4313      	orrs	r3, r2
 801940a:	9304      	str	r3, [sp, #16]
 801940c:	46a2      	mov	sl, r4
 801940e:	e7d2      	b.n	80193b6 <_vfiprintf_r+0xc6>
 8019410:	9b03      	ldr	r3, [sp, #12]
 8019412:	1d19      	adds	r1, r3, #4
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	9103      	str	r1, [sp, #12]
 8019418:	2b00      	cmp	r3, #0
 801941a:	bfbb      	ittet	lt
 801941c:	425b      	neglt	r3, r3
 801941e:	f042 0202 	orrlt.w	r2, r2, #2
 8019422:	9307      	strge	r3, [sp, #28]
 8019424:	9307      	strlt	r3, [sp, #28]
 8019426:	bfb8      	it	lt
 8019428:	9204      	strlt	r2, [sp, #16]
 801942a:	7823      	ldrb	r3, [r4, #0]
 801942c:	2b2e      	cmp	r3, #46	@ 0x2e
 801942e:	d10a      	bne.n	8019446 <_vfiprintf_r+0x156>
 8019430:	7863      	ldrb	r3, [r4, #1]
 8019432:	2b2a      	cmp	r3, #42	@ 0x2a
 8019434:	d132      	bne.n	801949c <_vfiprintf_r+0x1ac>
 8019436:	9b03      	ldr	r3, [sp, #12]
 8019438:	1d1a      	adds	r2, r3, #4
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	9203      	str	r2, [sp, #12]
 801943e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019442:	3402      	adds	r4, #2
 8019444:	9305      	str	r3, [sp, #20]
 8019446:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801951c <_vfiprintf_r+0x22c>
 801944a:	7821      	ldrb	r1, [r4, #0]
 801944c:	2203      	movs	r2, #3
 801944e:	4650      	mov	r0, sl
 8019450:	f7e6 feee 	bl	8000230 <memchr>
 8019454:	b138      	cbz	r0, 8019466 <_vfiprintf_r+0x176>
 8019456:	9b04      	ldr	r3, [sp, #16]
 8019458:	eba0 000a 	sub.w	r0, r0, sl
 801945c:	2240      	movs	r2, #64	@ 0x40
 801945e:	4082      	lsls	r2, r0
 8019460:	4313      	orrs	r3, r2
 8019462:	3401      	adds	r4, #1
 8019464:	9304      	str	r3, [sp, #16]
 8019466:	f814 1b01 	ldrb.w	r1, [r4], #1
 801946a:	4829      	ldr	r0, [pc, #164]	@ (8019510 <_vfiprintf_r+0x220>)
 801946c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019470:	2206      	movs	r2, #6
 8019472:	f7e6 fedd 	bl	8000230 <memchr>
 8019476:	2800      	cmp	r0, #0
 8019478:	d03f      	beq.n	80194fa <_vfiprintf_r+0x20a>
 801947a:	4b26      	ldr	r3, [pc, #152]	@ (8019514 <_vfiprintf_r+0x224>)
 801947c:	bb1b      	cbnz	r3, 80194c6 <_vfiprintf_r+0x1d6>
 801947e:	9b03      	ldr	r3, [sp, #12]
 8019480:	3307      	adds	r3, #7
 8019482:	f023 0307 	bic.w	r3, r3, #7
 8019486:	3308      	adds	r3, #8
 8019488:	9303      	str	r3, [sp, #12]
 801948a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801948c:	443b      	add	r3, r7
 801948e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019490:	e76a      	b.n	8019368 <_vfiprintf_r+0x78>
 8019492:	fb0c 3202 	mla	r2, ip, r2, r3
 8019496:	460c      	mov	r4, r1
 8019498:	2001      	movs	r0, #1
 801949a:	e7a8      	b.n	80193ee <_vfiprintf_r+0xfe>
 801949c:	2300      	movs	r3, #0
 801949e:	3401      	adds	r4, #1
 80194a0:	9305      	str	r3, [sp, #20]
 80194a2:	4619      	mov	r1, r3
 80194a4:	f04f 0c0a 	mov.w	ip, #10
 80194a8:	4620      	mov	r0, r4
 80194aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194ae:	3a30      	subs	r2, #48	@ 0x30
 80194b0:	2a09      	cmp	r2, #9
 80194b2:	d903      	bls.n	80194bc <_vfiprintf_r+0x1cc>
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d0c6      	beq.n	8019446 <_vfiprintf_r+0x156>
 80194b8:	9105      	str	r1, [sp, #20]
 80194ba:	e7c4      	b.n	8019446 <_vfiprintf_r+0x156>
 80194bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80194c0:	4604      	mov	r4, r0
 80194c2:	2301      	movs	r3, #1
 80194c4:	e7f0      	b.n	80194a8 <_vfiprintf_r+0x1b8>
 80194c6:	ab03      	add	r3, sp, #12
 80194c8:	9300      	str	r3, [sp, #0]
 80194ca:	462a      	mov	r2, r5
 80194cc:	4b12      	ldr	r3, [pc, #72]	@ (8019518 <_vfiprintf_r+0x228>)
 80194ce:	a904      	add	r1, sp, #16
 80194d0:	4630      	mov	r0, r6
 80194d2:	f3af 8000 	nop.w
 80194d6:	4607      	mov	r7, r0
 80194d8:	1c78      	adds	r0, r7, #1
 80194da:	d1d6      	bne.n	801948a <_vfiprintf_r+0x19a>
 80194dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80194de:	07d9      	lsls	r1, r3, #31
 80194e0:	d405      	bmi.n	80194ee <_vfiprintf_r+0x1fe>
 80194e2:	89ab      	ldrh	r3, [r5, #12]
 80194e4:	059a      	lsls	r2, r3, #22
 80194e6:	d402      	bmi.n	80194ee <_vfiprintf_r+0x1fe>
 80194e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80194ea:	f7ff fcf3 	bl	8018ed4 <__retarget_lock_release_recursive>
 80194ee:	89ab      	ldrh	r3, [r5, #12]
 80194f0:	065b      	lsls	r3, r3, #25
 80194f2:	f53f af1f 	bmi.w	8019334 <_vfiprintf_r+0x44>
 80194f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80194f8:	e71e      	b.n	8019338 <_vfiprintf_r+0x48>
 80194fa:	ab03      	add	r3, sp, #12
 80194fc:	9300      	str	r3, [sp, #0]
 80194fe:	462a      	mov	r2, r5
 8019500:	4b05      	ldr	r3, [pc, #20]	@ (8019518 <_vfiprintf_r+0x228>)
 8019502:	a904      	add	r1, sp, #16
 8019504:	4630      	mov	r0, r6
 8019506:	f000 f879 	bl	80195fc <_printf_i>
 801950a:	e7e4      	b.n	80194d6 <_vfiprintf_r+0x1e6>
 801950c:	0801b4d2 	.word	0x0801b4d2
 8019510:	0801b4dc 	.word	0x0801b4dc
 8019514:	00000000 	.word	0x00000000
 8019518:	080192cb 	.word	0x080192cb
 801951c:	0801b4d8 	.word	0x0801b4d8

08019520 <_printf_common>:
 8019520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019524:	4616      	mov	r6, r2
 8019526:	4698      	mov	r8, r3
 8019528:	688a      	ldr	r2, [r1, #8]
 801952a:	690b      	ldr	r3, [r1, #16]
 801952c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019530:	4293      	cmp	r3, r2
 8019532:	bfb8      	it	lt
 8019534:	4613      	movlt	r3, r2
 8019536:	6033      	str	r3, [r6, #0]
 8019538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801953c:	4607      	mov	r7, r0
 801953e:	460c      	mov	r4, r1
 8019540:	b10a      	cbz	r2, 8019546 <_printf_common+0x26>
 8019542:	3301      	adds	r3, #1
 8019544:	6033      	str	r3, [r6, #0]
 8019546:	6823      	ldr	r3, [r4, #0]
 8019548:	0699      	lsls	r1, r3, #26
 801954a:	bf42      	ittt	mi
 801954c:	6833      	ldrmi	r3, [r6, #0]
 801954e:	3302      	addmi	r3, #2
 8019550:	6033      	strmi	r3, [r6, #0]
 8019552:	6825      	ldr	r5, [r4, #0]
 8019554:	f015 0506 	ands.w	r5, r5, #6
 8019558:	d106      	bne.n	8019568 <_printf_common+0x48>
 801955a:	f104 0a19 	add.w	sl, r4, #25
 801955e:	68e3      	ldr	r3, [r4, #12]
 8019560:	6832      	ldr	r2, [r6, #0]
 8019562:	1a9b      	subs	r3, r3, r2
 8019564:	42ab      	cmp	r3, r5
 8019566:	dc26      	bgt.n	80195b6 <_printf_common+0x96>
 8019568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801956c:	6822      	ldr	r2, [r4, #0]
 801956e:	3b00      	subs	r3, #0
 8019570:	bf18      	it	ne
 8019572:	2301      	movne	r3, #1
 8019574:	0692      	lsls	r2, r2, #26
 8019576:	d42b      	bmi.n	80195d0 <_printf_common+0xb0>
 8019578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801957c:	4641      	mov	r1, r8
 801957e:	4638      	mov	r0, r7
 8019580:	47c8      	blx	r9
 8019582:	3001      	adds	r0, #1
 8019584:	d01e      	beq.n	80195c4 <_printf_common+0xa4>
 8019586:	6823      	ldr	r3, [r4, #0]
 8019588:	6922      	ldr	r2, [r4, #16]
 801958a:	f003 0306 	and.w	r3, r3, #6
 801958e:	2b04      	cmp	r3, #4
 8019590:	bf02      	ittt	eq
 8019592:	68e5      	ldreq	r5, [r4, #12]
 8019594:	6833      	ldreq	r3, [r6, #0]
 8019596:	1aed      	subeq	r5, r5, r3
 8019598:	68a3      	ldr	r3, [r4, #8]
 801959a:	bf0c      	ite	eq
 801959c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80195a0:	2500      	movne	r5, #0
 80195a2:	4293      	cmp	r3, r2
 80195a4:	bfc4      	itt	gt
 80195a6:	1a9b      	subgt	r3, r3, r2
 80195a8:	18ed      	addgt	r5, r5, r3
 80195aa:	2600      	movs	r6, #0
 80195ac:	341a      	adds	r4, #26
 80195ae:	42b5      	cmp	r5, r6
 80195b0:	d11a      	bne.n	80195e8 <_printf_common+0xc8>
 80195b2:	2000      	movs	r0, #0
 80195b4:	e008      	b.n	80195c8 <_printf_common+0xa8>
 80195b6:	2301      	movs	r3, #1
 80195b8:	4652      	mov	r2, sl
 80195ba:	4641      	mov	r1, r8
 80195bc:	4638      	mov	r0, r7
 80195be:	47c8      	blx	r9
 80195c0:	3001      	adds	r0, #1
 80195c2:	d103      	bne.n	80195cc <_printf_common+0xac>
 80195c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80195c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195cc:	3501      	adds	r5, #1
 80195ce:	e7c6      	b.n	801955e <_printf_common+0x3e>
 80195d0:	18e1      	adds	r1, r4, r3
 80195d2:	1c5a      	adds	r2, r3, #1
 80195d4:	2030      	movs	r0, #48	@ 0x30
 80195d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80195da:	4422      	add	r2, r4
 80195dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80195e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80195e4:	3302      	adds	r3, #2
 80195e6:	e7c7      	b.n	8019578 <_printf_common+0x58>
 80195e8:	2301      	movs	r3, #1
 80195ea:	4622      	mov	r2, r4
 80195ec:	4641      	mov	r1, r8
 80195ee:	4638      	mov	r0, r7
 80195f0:	47c8      	blx	r9
 80195f2:	3001      	adds	r0, #1
 80195f4:	d0e6      	beq.n	80195c4 <_printf_common+0xa4>
 80195f6:	3601      	adds	r6, #1
 80195f8:	e7d9      	b.n	80195ae <_printf_common+0x8e>
	...

080195fc <_printf_i>:
 80195fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019600:	7e0f      	ldrb	r7, [r1, #24]
 8019602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019604:	2f78      	cmp	r7, #120	@ 0x78
 8019606:	4691      	mov	r9, r2
 8019608:	4680      	mov	r8, r0
 801960a:	460c      	mov	r4, r1
 801960c:	469a      	mov	sl, r3
 801960e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019612:	d807      	bhi.n	8019624 <_printf_i+0x28>
 8019614:	2f62      	cmp	r7, #98	@ 0x62
 8019616:	d80a      	bhi.n	801962e <_printf_i+0x32>
 8019618:	2f00      	cmp	r7, #0
 801961a:	f000 80d2 	beq.w	80197c2 <_printf_i+0x1c6>
 801961e:	2f58      	cmp	r7, #88	@ 0x58
 8019620:	f000 80b9 	beq.w	8019796 <_printf_i+0x19a>
 8019624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801962c:	e03a      	b.n	80196a4 <_printf_i+0xa8>
 801962e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019632:	2b15      	cmp	r3, #21
 8019634:	d8f6      	bhi.n	8019624 <_printf_i+0x28>
 8019636:	a101      	add	r1, pc, #4	@ (adr r1, 801963c <_printf_i+0x40>)
 8019638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801963c:	08019695 	.word	0x08019695
 8019640:	080196a9 	.word	0x080196a9
 8019644:	08019625 	.word	0x08019625
 8019648:	08019625 	.word	0x08019625
 801964c:	08019625 	.word	0x08019625
 8019650:	08019625 	.word	0x08019625
 8019654:	080196a9 	.word	0x080196a9
 8019658:	08019625 	.word	0x08019625
 801965c:	08019625 	.word	0x08019625
 8019660:	08019625 	.word	0x08019625
 8019664:	08019625 	.word	0x08019625
 8019668:	080197a9 	.word	0x080197a9
 801966c:	080196d3 	.word	0x080196d3
 8019670:	08019763 	.word	0x08019763
 8019674:	08019625 	.word	0x08019625
 8019678:	08019625 	.word	0x08019625
 801967c:	080197cb 	.word	0x080197cb
 8019680:	08019625 	.word	0x08019625
 8019684:	080196d3 	.word	0x080196d3
 8019688:	08019625 	.word	0x08019625
 801968c:	08019625 	.word	0x08019625
 8019690:	0801976b 	.word	0x0801976b
 8019694:	6833      	ldr	r3, [r6, #0]
 8019696:	1d1a      	adds	r2, r3, #4
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	6032      	str	r2, [r6, #0]
 801969c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80196a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80196a4:	2301      	movs	r3, #1
 80196a6:	e09d      	b.n	80197e4 <_printf_i+0x1e8>
 80196a8:	6833      	ldr	r3, [r6, #0]
 80196aa:	6820      	ldr	r0, [r4, #0]
 80196ac:	1d19      	adds	r1, r3, #4
 80196ae:	6031      	str	r1, [r6, #0]
 80196b0:	0606      	lsls	r6, r0, #24
 80196b2:	d501      	bpl.n	80196b8 <_printf_i+0xbc>
 80196b4:	681d      	ldr	r5, [r3, #0]
 80196b6:	e003      	b.n	80196c0 <_printf_i+0xc4>
 80196b8:	0645      	lsls	r5, r0, #25
 80196ba:	d5fb      	bpl.n	80196b4 <_printf_i+0xb8>
 80196bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80196c0:	2d00      	cmp	r5, #0
 80196c2:	da03      	bge.n	80196cc <_printf_i+0xd0>
 80196c4:	232d      	movs	r3, #45	@ 0x2d
 80196c6:	426d      	negs	r5, r5
 80196c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80196cc:	4859      	ldr	r0, [pc, #356]	@ (8019834 <_printf_i+0x238>)
 80196ce:	230a      	movs	r3, #10
 80196d0:	e011      	b.n	80196f6 <_printf_i+0xfa>
 80196d2:	6821      	ldr	r1, [r4, #0]
 80196d4:	6833      	ldr	r3, [r6, #0]
 80196d6:	0608      	lsls	r0, r1, #24
 80196d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80196dc:	d402      	bmi.n	80196e4 <_printf_i+0xe8>
 80196de:	0649      	lsls	r1, r1, #25
 80196e0:	bf48      	it	mi
 80196e2:	b2ad      	uxthmi	r5, r5
 80196e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80196e6:	4853      	ldr	r0, [pc, #332]	@ (8019834 <_printf_i+0x238>)
 80196e8:	6033      	str	r3, [r6, #0]
 80196ea:	bf14      	ite	ne
 80196ec:	230a      	movne	r3, #10
 80196ee:	2308      	moveq	r3, #8
 80196f0:	2100      	movs	r1, #0
 80196f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80196f6:	6866      	ldr	r6, [r4, #4]
 80196f8:	60a6      	str	r6, [r4, #8]
 80196fa:	2e00      	cmp	r6, #0
 80196fc:	bfa2      	ittt	ge
 80196fe:	6821      	ldrge	r1, [r4, #0]
 8019700:	f021 0104 	bicge.w	r1, r1, #4
 8019704:	6021      	strge	r1, [r4, #0]
 8019706:	b90d      	cbnz	r5, 801970c <_printf_i+0x110>
 8019708:	2e00      	cmp	r6, #0
 801970a:	d04b      	beq.n	80197a4 <_printf_i+0x1a8>
 801970c:	4616      	mov	r6, r2
 801970e:	fbb5 f1f3 	udiv	r1, r5, r3
 8019712:	fb03 5711 	mls	r7, r3, r1, r5
 8019716:	5dc7      	ldrb	r7, [r0, r7]
 8019718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801971c:	462f      	mov	r7, r5
 801971e:	42bb      	cmp	r3, r7
 8019720:	460d      	mov	r5, r1
 8019722:	d9f4      	bls.n	801970e <_printf_i+0x112>
 8019724:	2b08      	cmp	r3, #8
 8019726:	d10b      	bne.n	8019740 <_printf_i+0x144>
 8019728:	6823      	ldr	r3, [r4, #0]
 801972a:	07df      	lsls	r7, r3, #31
 801972c:	d508      	bpl.n	8019740 <_printf_i+0x144>
 801972e:	6923      	ldr	r3, [r4, #16]
 8019730:	6861      	ldr	r1, [r4, #4]
 8019732:	4299      	cmp	r1, r3
 8019734:	bfde      	ittt	le
 8019736:	2330      	movle	r3, #48	@ 0x30
 8019738:	f806 3c01 	strble.w	r3, [r6, #-1]
 801973c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019740:	1b92      	subs	r2, r2, r6
 8019742:	6122      	str	r2, [r4, #16]
 8019744:	f8cd a000 	str.w	sl, [sp]
 8019748:	464b      	mov	r3, r9
 801974a:	aa03      	add	r2, sp, #12
 801974c:	4621      	mov	r1, r4
 801974e:	4640      	mov	r0, r8
 8019750:	f7ff fee6 	bl	8019520 <_printf_common>
 8019754:	3001      	adds	r0, #1
 8019756:	d14a      	bne.n	80197ee <_printf_i+0x1f2>
 8019758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801975c:	b004      	add	sp, #16
 801975e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019762:	6823      	ldr	r3, [r4, #0]
 8019764:	f043 0320 	orr.w	r3, r3, #32
 8019768:	6023      	str	r3, [r4, #0]
 801976a:	4833      	ldr	r0, [pc, #204]	@ (8019838 <_printf_i+0x23c>)
 801976c:	2778      	movs	r7, #120	@ 0x78
 801976e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019772:	6823      	ldr	r3, [r4, #0]
 8019774:	6831      	ldr	r1, [r6, #0]
 8019776:	061f      	lsls	r7, r3, #24
 8019778:	f851 5b04 	ldr.w	r5, [r1], #4
 801977c:	d402      	bmi.n	8019784 <_printf_i+0x188>
 801977e:	065f      	lsls	r7, r3, #25
 8019780:	bf48      	it	mi
 8019782:	b2ad      	uxthmi	r5, r5
 8019784:	6031      	str	r1, [r6, #0]
 8019786:	07d9      	lsls	r1, r3, #31
 8019788:	bf44      	itt	mi
 801978a:	f043 0320 	orrmi.w	r3, r3, #32
 801978e:	6023      	strmi	r3, [r4, #0]
 8019790:	b11d      	cbz	r5, 801979a <_printf_i+0x19e>
 8019792:	2310      	movs	r3, #16
 8019794:	e7ac      	b.n	80196f0 <_printf_i+0xf4>
 8019796:	4827      	ldr	r0, [pc, #156]	@ (8019834 <_printf_i+0x238>)
 8019798:	e7e9      	b.n	801976e <_printf_i+0x172>
 801979a:	6823      	ldr	r3, [r4, #0]
 801979c:	f023 0320 	bic.w	r3, r3, #32
 80197a0:	6023      	str	r3, [r4, #0]
 80197a2:	e7f6      	b.n	8019792 <_printf_i+0x196>
 80197a4:	4616      	mov	r6, r2
 80197a6:	e7bd      	b.n	8019724 <_printf_i+0x128>
 80197a8:	6833      	ldr	r3, [r6, #0]
 80197aa:	6825      	ldr	r5, [r4, #0]
 80197ac:	6961      	ldr	r1, [r4, #20]
 80197ae:	1d18      	adds	r0, r3, #4
 80197b0:	6030      	str	r0, [r6, #0]
 80197b2:	062e      	lsls	r6, r5, #24
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	d501      	bpl.n	80197bc <_printf_i+0x1c0>
 80197b8:	6019      	str	r1, [r3, #0]
 80197ba:	e002      	b.n	80197c2 <_printf_i+0x1c6>
 80197bc:	0668      	lsls	r0, r5, #25
 80197be:	d5fb      	bpl.n	80197b8 <_printf_i+0x1bc>
 80197c0:	8019      	strh	r1, [r3, #0]
 80197c2:	2300      	movs	r3, #0
 80197c4:	6123      	str	r3, [r4, #16]
 80197c6:	4616      	mov	r6, r2
 80197c8:	e7bc      	b.n	8019744 <_printf_i+0x148>
 80197ca:	6833      	ldr	r3, [r6, #0]
 80197cc:	1d1a      	adds	r2, r3, #4
 80197ce:	6032      	str	r2, [r6, #0]
 80197d0:	681e      	ldr	r6, [r3, #0]
 80197d2:	6862      	ldr	r2, [r4, #4]
 80197d4:	2100      	movs	r1, #0
 80197d6:	4630      	mov	r0, r6
 80197d8:	f7e6 fd2a 	bl	8000230 <memchr>
 80197dc:	b108      	cbz	r0, 80197e2 <_printf_i+0x1e6>
 80197de:	1b80      	subs	r0, r0, r6
 80197e0:	6060      	str	r0, [r4, #4]
 80197e2:	6863      	ldr	r3, [r4, #4]
 80197e4:	6123      	str	r3, [r4, #16]
 80197e6:	2300      	movs	r3, #0
 80197e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80197ec:	e7aa      	b.n	8019744 <_printf_i+0x148>
 80197ee:	6923      	ldr	r3, [r4, #16]
 80197f0:	4632      	mov	r2, r6
 80197f2:	4649      	mov	r1, r9
 80197f4:	4640      	mov	r0, r8
 80197f6:	47d0      	blx	sl
 80197f8:	3001      	adds	r0, #1
 80197fa:	d0ad      	beq.n	8019758 <_printf_i+0x15c>
 80197fc:	6823      	ldr	r3, [r4, #0]
 80197fe:	079b      	lsls	r3, r3, #30
 8019800:	d413      	bmi.n	801982a <_printf_i+0x22e>
 8019802:	68e0      	ldr	r0, [r4, #12]
 8019804:	9b03      	ldr	r3, [sp, #12]
 8019806:	4298      	cmp	r0, r3
 8019808:	bfb8      	it	lt
 801980a:	4618      	movlt	r0, r3
 801980c:	e7a6      	b.n	801975c <_printf_i+0x160>
 801980e:	2301      	movs	r3, #1
 8019810:	4632      	mov	r2, r6
 8019812:	4649      	mov	r1, r9
 8019814:	4640      	mov	r0, r8
 8019816:	47d0      	blx	sl
 8019818:	3001      	adds	r0, #1
 801981a:	d09d      	beq.n	8019758 <_printf_i+0x15c>
 801981c:	3501      	adds	r5, #1
 801981e:	68e3      	ldr	r3, [r4, #12]
 8019820:	9903      	ldr	r1, [sp, #12]
 8019822:	1a5b      	subs	r3, r3, r1
 8019824:	42ab      	cmp	r3, r5
 8019826:	dcf2      	bgt.n	801980e <_printf_i+0x212>
 8019828:	e7eb      	b.n	8019802 <_printf_i+0x206>
 801982a:	2500      	movs	r5, #0
 801982c:	f104 0619 	add.w	r6, r4, #25
 8019830:	e7f5      	b.n	801981e <_printf_i+0x222>
 8019832:	bf00      	nop
 8019834:	0801b4e3 	.word	0x0801b4e3
 8019838:	0801b4f4 	.word	0x0801b4f4

0801983c <__sflush_r>:
 801983c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019844:	0716      	lsls	r6, r2, #28
 8019846:	4605      	mov	r5, r0
 8019848:	460c      	mov	r4, r1
 801984a:	d454      	bmi.n	80198f6 <__sflush_r+0xba>
 801984c:	684b      	ldr	r3, [r1, #4]
 801984e:	2b00      	cmp	r3, #0
 8019850:	dc02      	bgt.n	8019858 <__sflush_r+0x1c>
 8019852:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019854:	2b00      	cmp	r3, #0
 8019856:	dd48      	ble.n	80198ea <__sflush_r+0xae>
 8019858:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801985a:	2e00      	cmp	r6, #0
 801985c:	d045      	beq.n	80198ea <__sflush_r+0xae>
 801985e:	2300      	movs	r3, #0
 8019860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019864:	682f      	ldr	r7, [r5, #0]
 8019866:	6a21      	ldr	r1, [r4, #32]
 8019868:	602b      	str	r3, [r5, #0]
 801986a:	d030      	beq.n	80198ce <__sflush_r+0x92>
 801986c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801986e:	89a3      	ldrh	r3, [r4, #12]
 8019870:	0759      	lsls	r1, r3, #29
 8019872:	d505      	bpl.n	8019880 <__sflush_r+0x44>
 8019874:	6863      	ldr	r3, [r4, #4]
 8019876:	1ad2      	subs	r2, r2, r3
 8019878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801987a:	b10b      	cbz	r3, 8019880 <__sflush_r+0x44>
 801987c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801987e:	1ad2      	subs	r2, r2, r3
 8019880:	2300      	movs	r3, #0
 8019882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019884:	6a21      	ldr	r1, [r4, #32]
 8019886:	4628      	mov	r0, r5
 8019888:	47b0      	blx	r6
 801988a:	1c43      	adds	r3, r0, #1
 801988c:	89a3      	ldrh	r3, [r4, #12]
 801988e:	d106      	bne.n	801989e <__sflush_r+0x62>
 8019890:	6829      	ldr	r1, [r5, #0]
 8019892:	291d      	cmp	r1, #29
 8019894:	d82b      	bhi.n	80198ee <__sflush_r+0xb2>
 8019896:	4a2a      	ldr	r2, [pc, #168]	@ (8019940 <__sflush_r+0x104>)
 8019898:	410a      	asrs	r2, r1
 801989a:	07d6      	lsls	r6, r2, #31
 801989c:	d427      	bmi.n	80198ee <__sflush_r+0xb2>
 801989e:	2200      	movs	r2, #0
 80198a0:	6062      	str	r2, [r4, #4]
 80198a2:	04d9      	lsls	r1, r3, #19
 80198a4:	6922      	ldr	r2, [r4, #16]
 80198a6:	6022      	str	r2, [r4, #0]
 80198a8:	d504      	bpl.n	80198b4 <__sflush_r+0x78>
 80198aa:	1c42      	adds	r2, r0, #1
 80198ac:	d101      	bne.n	80198b2 <__sflush_r+0x76>
 80198ae:	682b      	ldr	r3, [r5, #0]
 80198b0:	b903      	cbnz	r3, 80198b4 <__sflush_r+0x78>
 80198b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80198b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80198b6:	602f      	str	r7, [r5, #0]
 80198b8:	b1b9      	cbz	r1, 80198ea <__sflush_r+0xae>
 80198ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80198be:	4299      	cmp	r1, r3
 80198c0:	d002      	beq.n	80198c8 <__sflush_r+0x8c>
 80198c2:	4628      	mov	r0, r5
 80198c4:	f7ff fb48 	bl	8018f58 <_free_r>
 80198c8:	2300      	movs	r3, #0
 80198ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80198cc:	e00d      	b.n	80198ea <__sflush_r+0xae>
 80198ce:	2301      	movs	r3, #1
 80198d0:	4628      	mov	r0, r5
 80198d2:	47b0      	blx	r6
 80198d4:	4602      	mov	r2, r0
 80198d6:	1c50      	adds	r0, r2, #1
 80198d8:	d1c9      	bne.n	801986e <__sflush_r+0x32>
 80198da:	682b      	ldr	r3, [r5, #0]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d0c6      	beq.n	801986e <__sflush_r+0x32>
 80198e0:	2b1d      	cmp	r3, #29
 80198e2:	d001      	beq.n	80198e8 <__sflush_r+0xac>
 80198e4:	2b16      	cmp	r3, #22
 80198e6:	d11e      	bne.n	8019926 <__sflush_r+0xea>
 80198e8:	602f      	str	r7, [r5, #0]
 80198ea:	2000      	movs	r0, #0
 80198ec:	e022      	b.n	8019934 <__sflush_r+0xf8>
 80198ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80198f2:	b21b      	sxth	r3, r3
 80198f4:	e01b      	b.n	801992e <__sflush_r+0xf2>
 80198f6:	690f      	ldr	r7, [r1, #16]
 80198f8:	2f00      	cmp	r7, #0
 80198fa:	d0f6      	beq.n	80198ea <__sflush_r+0xae>
 80198fc:	0793      	lsls	r3, r2, #30
 80198fe:	680e      	ldr	r6, [r1, #0]
 8019900:	bf08      	it	eq
 8019902:	694b      	ldreq	r3, [r1, #20]
 8019904:	600f      	str	r7, [r1, #0]
 8019906:	bf18      	it	ne
 8019908:	2300      	movne	r3, #0
 801990a:	eba6 0807 	sub.w	r8, r6, r7
 801990e:	608b      	str	r3, [r1, #8]
 8019910:	f1b8 0f00 	cmp.w	r8, #0
 8019914:	dde9      	ble.n	80198ea <__sflush_r+0xae>
 8019916:	6a21      	ldr	r1, [r4, #32]
 8019918:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801991a:	4643      	mov	r3, r8
 801991c:	463a      	mov	r2, r7
 801991e:	4628      	mov	r0, r5
 8019920:	47b0      	blx	r6
 8019922:	2800      	cmp	r0, #0
 8019924:	dc08      	bgt.n	8019938 <__sflush_r+0xfc>
 8019926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801992a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801992e:	81a3      	strh	r3, [r4, #12]
 8019930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019938:	4407      	add	r7, r0
 801993a:	eba8 0800 	sub.w	r8, r8, r0
 801993e:	e7e7      	b.n	8019910 <__sflush_r+0xd4>
 8019940:	dfbffffe 	.word	0xdfbffffe

08019944 <_fflush_r>:
 8019944:	b538      	push	{r3, r4, r5, lr}
 8019946:	690b      	ldr	r3, [r1, #16]
 8019948:	4605      	mov	r5, r0
 801994a:	460c      	mov	r4, r1
 801994c:	b913      	cbnz	r3, 8019954 <_fflush_r+0x10>
 801994e:	2500      	movs	r5, #0
 8019950:	4628      	mov	r0, r5
 8019952:	bd38      	pop	{r3, r4, r5, pc}
 8019954:	b118      	cbz	r0, 801995e <_fflush_r+0x1a>
 8019956:	6a03      	ldr	r3, [r0, #32]
 8019958:	b90b      	cbnz	r3, 801995e <_fflush_r+0x1a>
 801995a:	f7fe ff1f 	bl	801879c <__sinit>
 801995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019962:	2b00      	cmp	r3, #0
 8019964:	d0f3      	beq.n	801994e <_fflush_r+0xa>
 8019966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019968:	07d0      	lsls	r0, r2, #31
 801996a:	d404      	bmi.n	8019976 <_fflush_r+0x32>
 801996c:	0599      	lsls	r1, r3, #22
 801996e:	d402      	bmi.n	8019976 <_fflush_r+0x32>
 8019970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019972:	f7ff faae 	bl	8018ed2 <__retarget_lock_acquire_recursive>
 8019976:	4628      	mov	r0, r5
 8019978:	4621      	mov	r1, r4
 801997a:	f7ff ff5f 	bl	801983c <__sflush_r>
 801997e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019980:	07da      	lsls	r2, r3, #31
 8019982:	4605      	mov	r5, r0
 8019984:	d4e4      	bmi.n	8019950 <_fflush_r+0xc>
 8019986:	89a3      	ldrh	r3, [r4, #12]
 8019988:	059b      	lsls	r3, r3, #22
 801998a:	d4e1      	bmi.n	8019950 <_fflush_r+0xc>
 801998c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801998e:	f7ff faa1 	bl	8018ed4 <__retarget_lock_release_recursive>
 8019992:	e7dd      	b.n	8019950 <_fflush_r+0xc>

08019994 <_malloc_usable_size_r>:
 8019994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019998:	1f18      	subs	r0, r3, #4
 801999a:	2b00      	cmp	r3, #0
 801999c:	bfbc      	itt	lt
 801999e:	580b      	ldrlt	r3, [r1, r0]
 80199a0:	18c0      	addlt	r0, r0, r3
 80199a2:	4770      	bx	lr

080199a4 <__sread>:
 80199a4:	b510      	push	{r4, lr}
 80199a6:	460c      	mov	r4, r1
 80199a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199ac:	f000 f872 	bl	8019a94 <_read_r>
 80199b0:	2800      	cmp	r0, #0
 80199b2:	bfab      	itete	ge
 80199b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80199b6:	89a3      	ldrhlt	r3, [r4, #12]
 80199b8:	181b      	addge	r3, r3, r0
 80199ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80199be:	bfac      	ite	ge
 80199c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80199c2:	81a3      	strhlt	r3, [r4, #12]
 80199c4:	bd10      	pop	{r4, pc}

080199c6 <__swrite>:
 80199c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199ca:	461f      	mov	r7, r3
 80199cc:	898b      	ldrh	r3, [r1, #12]
 80199ce:	05db      	lsls	r3, r3, #23
 80199d0:	4605      	mov	r5, r0
 80199d2:	460c      	mov	r4, r1
 80199d4:	4616      	mov	r6, r2
 80199d6:	d505      	bpl.n	80199e4 <__swrite+0x1e>
 80199d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199dc:	2302      	movs	r3, #2
 80199de:	2200      	movs	r2, #0
 80199e0:	f000 f846 	bl	8019a70 <_lseek_r>
 80199e4:	89a3      	ldrh	r3, [r4, #12]
 80199e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80199ee:	81a3      	strh	r3, [r4, #12]
 80199f0:	4632      	mov	r2, r6
 80199f2:	463b      	mov	r3, r7
 80199f4:	4628      	mov	r0, r5
 80199f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199fa:	f000 b85d 	b.w	8019ab8 <_write_r>

080199fe <__sseek>:
 80199fe:	b510      	push	{r4, lr}
 8019a00:	460c      	mov	r4, r1
 8019a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a06:	f000 f833 	bl	8019a70 <_lseek_r>
 8019a0a:	1c43      	adds	r3, r0, #1
 8019a0c:	89a3      	ldrh	r3, [r4, #12]
 8019a0e:	bf15      	itete	ne
 8019a10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019a12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019a16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019a1a:	81a3      	strheq	r3, [r4, #12]
 8019a1c:	bf18      	it	ne
 8019a1e:	81a3      	strhne	r3, [r4, #12]
 8019a20:	bd10      	pop	{r4, pc}

08019a22 <__sclose>:
 8019a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a26:	f000 b813 	b.w	8019a50 <_close_r>
	...

08019a2c <fiprintf>:
 8019a2c:	b40e      	push	{r1, r2, r3}
 8019a2e:	b503      	push	{r0, r1, lr}
 8019a30:	4601      	mov	r1, r0
 8019a32:	ab03      	add	r3, sp, #12
 8019a34:	4805      	ldr	r0, [pc, #20]	@ (8019a4c <fiprintf+0x20>)
 8019a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a3a:	6800      	ldr	r0, [r0, #0]
 8019a3c:	9301      	str	r3, [sp, #4]
 8019a3e:	f7ff fc57 	bl	80192f0 <_vfiprintf_r>
 8019a42:	b002      	add	sp, #8
 8019a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a48:	b003      	add	sp, #12
 8019a4a:	4770      	bx	lr
 8019a4c:	20000754 	.word	0x20000754

08019a50 <_close_r>:
 8019a50:	b538      	push	{r3, r4, r5, lr}
 8019a52:	4d06      	ldr	r5, [pc, #24]	@ (8019a6c <_close_r+0x1c>)
 8019a54:	2300      	movs	r3, #0
 8019a56:	4604      	mov	r4, r0
 8019a58:	4608      	mov	r0, r1
 8019a5a:	602b      	str	r3, [r5, #0]
 8019a5c:	f7e8 fd00 	bl	8002460 <_close>
 8019a60:	1c43      	adds	r3, r0, #1
 8019a62:	d102      	bne.n	8019a6a <_close_r+0x1a>
 8019a64:	682b      	ldr	r3, [r5, #0]
 8019a66:	b103      	cbz	r3, 8019a6a <_close_r+0x1a>
 8019a68:	6023      	str	r3, [r4, #0]
 8019a6a:	bd38      	pop	{r3, r4, r5, pc}
 8019a6c:	20015678 	.word	0x20015678

08019a70 <_lseek_r>:
 8019a70:	b538      	push	{r3, r4, r5, lr}
 8019a72:	4d07      	ldr	r5, [pc, #28]	@ (8019a90 <_lseek_r+0x20>)
 8019a74:	4604      	mov	r4, r0
 8019a76:	4608      	mov	r0, r1
 8019a78:	4611      	mov	r1, r2
 8019a7a:	2200      	movs	r2, #0
 8019a7c:	602a      	str	r2, [r5, #0]
 8019a7e:	461a      	mov	r2, r3
 8019a80:	f7e8 fd15 	bl	80024ae <_lseek>
 8019a84:	1c43      	adds	r3, r0, #1
 8019a86:	d102      	bne.n	8019a8e <_lseek_r+0x1e>
 8019a88:	682b      	ldr	r3, [r5, #0]
 8019a8a:	b103      	cbz	r3, 8019a8e <_lseek_r+0x1e>
 8019a8c:	6023      	str	r3, [r4, #0]
 8019a8e:	bd38      	pop	{r3, r4, r5, pc}
 8019a90:	20015678 	.word	0x20015678

08019a94 <_read_r>:
 8019a94:	b538      	push	{r3, r4, r5, lr}
 8019a96:	4d07      	ldr	r5, [pc, #28]	@ (8019ab4 <_read_r+0x20>)
 8019a98:	4604      	mov	r4, r0
 8019a9a:	4608      	mov	r0, r1
 8019a9c:	4611      	mov	r1, r2
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	602a      	str	r2, [r5, #0]
 8019aa2:	461a      	mov	r2, r3
 8019aa4:	f7e8 fcbf 	bl	8002426 <_read>
 8019aa8:	1c43      	adds	r3, r0, #1
 8019aaa:	d102      	bne.n	8019ab2 <_read_r+0x1e>
 8019aac:	682b      	ldr	r3, [r5, #0]
 8019aae:	b103      	cbz	r3, 8019ab2 <_read_r+0x1e>
 8019ab0:	6023      	str	r3, [r4, #0]
 8019ab2:	bd38      	pop	{r3, r4, r5, pc}
 8019ab4:	20015678 	.word	0x20015678

08019ab8 <_write_r>:
 8019ab8:	b538      	push	{r3, r4, r5, lr}
 8019aba:	4d07      	ldr	r5, [pc, #28]	@ (8019ad8 <_write_r+0x20>)
 8019abc:	4604      	mov	r4, r0
 8019abe:	4608      	mov	r0, r1
 8019ac0:	4611      	mov	r1, r2
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	602a      	str	r2, [r5, #0]
 8019ac6:	461a      	mov	r2, r3
 8019ac8:	f7e8 f9ec 	bl	8001ea4 <_write>
 8019acc:	1c43      	adds	r3, r0, #1
 8019ace:	d102      	bne.n	8019ad6 <_write_r+0x1e>
 8019ad0:	682b      	ldr	r3, [r5, #0]
 8019ad2:	b103      	cbz	r3, 8019ad6 <_write_r+0x1e>
 8019ad4:	6023      	str	r3, [r4, #0]
 8019ad6:	bd38      	pop	{r3, r4, r5, pc}
 8019ad8:	20015678 	.word	0x20015678

08019adc <abort>:
 8019adc:	b508      	push	{r3, lr}
 8019ade:	2006      	movs	r0, #6
 8019ae0:	f000 f82c 	bl	8019b3c <raise>
 8019ae4:	2001      	movs	r0, #1
 8019ae6:	f7e8 fc93 	bl	8002410 <_exit>

08019aea <_raise_r>:
 8019aea:	291f      	cmp	r1, #31
 8019aec:	b538      	push	{r3, r4, r5, lr}
 8019aee:	4605      	mov	r5, r0
 8019af0:	460c      	mov	r4, r1
 8019af2:	d904      	bls.n	8019afe <_raise_r+0x14>
 8019af4:	2316      	movs	r3, #22
 8019af6:	6003      	str	r3, [r0, #0]
 8019af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019afc:	bd38      	pop	{r3, r4, r5, pc}
 8019afe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019b00:	b112      	cbz	r2, 8019b08 <_raise_r+0x1e>
 8019b02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019b06:	b94b      	cbnz	r3, 8019b1c <_raise_r+0x32>
 8019b08:	4628      	mov	r0, r5
 8019b0a:	f000 f831 	bl	8019b70 <_getpid_r>
 8019b0e:	4622      	mov	r2, r4
 8019b10:	4601      	mov	r1, r0
 8019b12:	4628      	mov	r0, r5
 8019b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b18:	f000 b818 	b.w	8019b4c <_kill_r>
 8019b1c:	2b01      	cmp	r3, #1
 8019b1e:	d00a      	beq.n	8019b36 <_raise_r+0x4c>
 8019b20:	1c59      	adds	r1, r3, #1
 8019b22:	d103      	bne.n	8019b2c <_raise_r+0x42>
 8019b24:	2316      	movs	r3, #22
 8019b26:	6003      	str	r3, [r0, #0]
 8019b28:	2001      	movs	r0, #1
 8019b2a:	e7e7      	b.n	8019afc <_raise_r+0x12>
 8019b2c:	2100      	movs	r1, #0
 8019b2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019b32:	4620      	mov	r0, r4
 8019b34:	4798      	blx	r3
 8019b36:	2000      	movs	r0, #0
 8019b38:	e7e0      	b.n	8019afc <_raise_r+0x12>
	...

08019b3c <raise>:
 8019b3c:	4b02      	ldr	r3, [pc, #8]	@ (8019b48 <raise+0xc>)
 8019b3e:	4601      	mov	r1, r0
 8019b40:	6818      	ldr	r0, [r3, #0]
 8019b42:	f7ff bfd2 	b.w	8019aea <_raise_r>
 8019b46:	bf00      	nop
 8019b48:	20000754 	.word	0x20000754

08019b4c <_kill_r>:
 8019b4c:	b538      	push	{r3, r4, r5, lr}
 8019b4e:	4d07      	ldr	r5, [pc, #28]	@ (8019b6c <_kill_r+0x20>)
 8019b50:	2300      	movs	r3, #0
 8019b52:	4604      	mov	r4, r0
 8019b54:	4608      	mov	r0, r1
 8019b56:	4611      	mov	r1, r2
 8019b58:	602b      	str	r3, [r5, #0]
 8019b5a:	f7e8 fc49 	bl	80023f0 <_kill>
 8019b5e:	1c43      	adds	r3, r0, #1
 8019b60:	d102      	bne.n	8019b68 <_kill_r+0x1c>
 8019b62:	682b      	ldr	r3, [r5, #0]
 8019b64:	b103      	cbz	r3, 8019b68 <_kill_r+0x1c>
 8019b66:	6023      	str	r3, [r4, #0]
 8019b68:	bd38      	pop	{r3, r4, r5, pc}
 8019b6a:	bf00      	nop
 8019b6c:	20015678 	.word	0x20015678

08019b70 <_getpid_r>:
 8019b70:	f7e8 bc36 	b.w	80023e0 <_getpid>

08019b74 <atan2>:
 8019b74:	f000 b800 	b.w	8019b78 <__ieee754_atan2>

08019b78 <__ieee754_atan2>:
 8019b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b7c:	ec57 6b11 	vmov	r6, r7, d1
 8019b80:	4273      	negs	r3, r6
 8019b82:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8019d00 <__ieee754_atan2+0x188>
 8019b86:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8019b8a:	4333      	orrs	r3, r6
 8019b8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019b90:	4543      	cmp	r3, r8
 8019b92:	ec51 0b10 	vmov	r0, r1, d0
 8019b96:	4635      	mov	r5, r6
 8019b98:	d809      	bhi.n	8019bae <__ieee754_atan2+0x36>
 8019b9a:	4244      	negs	r4, r0
 8019b9c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019ba0:	4304      	orrs	r4, r0
 8019ba2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019ba6:	4544      	cmp	r4, r8
 8019ba8:	468e      	mov	lr, r1
 8019baa:	4681      	mov	r9, r0
 8019bac:	d907      	bls.n	8019bbe <__ieee754_atan2+0x46>
 8019bae:	4632      	mov	r2, r6
 8019bb0:	463b      	mov	r3, r7
 8019bb2:	f7e6 fb93 	bl	80002dc <__adddf3>
 8019bb6:	ec41 0b10 	vmov	d0, r0, r1
 8019bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bbe:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8019bc2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8019bc6:	4334      	orrs	r4, r6
 8019bc8:	d103      	bne.n	8019bd2 <__ieee754_atan2+0x5a>
 8019bca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bce:	f000 b8b7 	b.w	8019d40 <atan>
 8019bd2:	17bc      	asrs	r4, r7, #30
 8019bd4:	f004 0402 	and.w	r4, r4, #2
 8019bd8:	ea53 0909 	orrs.w	r9, r3, r9
 8019bdc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019be0:	d107      	bne.n	8019bf2 <__ieee754_atan2+0x7a>
 8019be2:	2c02      	cmp	r4, #2
 8019be4:	d05f      	beq.n	8019ca6 <__ieee754_atan2+0x12e>
 8019be6:	2c03      	cmp	r4, #3
 8019be8:	d1e5      	bne.n	8019bb6 <__ieee754_atan2+0x3e>
 8019bea:	a141      	add	r1, pc, #260	@ (adr r1, 8019cf0 <__ieee754_atan2+0x178>)
 8019bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bf0:	e7e1      	b.n	8019bb6 <__ieee754_atan2+0x3e>
 8019bf2:	4315      	orrs	r5, r2
 8019bf4:	d106      	bne.n	8019c04 <__ieee754_atan2+0x8c>
 8019bf6:	f1be 0f00 	cmp.w	lr, #0
 8019bfa:	da5f      	bge.n	8019cbc <__ieee754_atan2+0x144>
 8019bfc:	a13e      	add	r1, pc, #248	@ (adr r1, 8019cf8 <__ieee754_atan2+0x180>)
 8019bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c02:	e7d8      	b.n	8019bb6 <__ieee754_atan2+0x3e>
 8019c04:	4542      	cmp	r2, r8
 8019c06:	d10f      	bne.n	8019c28 <__ieee754_atan2+0xb0>
 8019c08:	4293      	cmp	r3, r2
 8019c0a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8019c0e:	d107      	bne.n	8019c20 <__ieee754_atan2+0xa8>
 8019c10:	2c02      	cmp	r4, #2
 8019c12:	d84c      	bhi.n	8019cae <__ieee754_atan2+0x136>
 8019c14:	4b34      	ldr	r3, [pc, #208]	@ (8019ce8 <__ieee754_atan2+0x170>)
 8019c16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019c1e:	e7ca      	b.n	8019bb6 <__ieee754_atan2+0x3e>
 8019c20:	2c02      	cmp	r4, #2
 8019c22:	d848      	bhi.n	8019cb6 <__ieee754_atan2+0x13e>
 8019c24:	4b31      	ldr	r3, [pc, #196]	@ (8019cec <__ieee754_atan2+0x174>)
 8019c26:	e7f6      	b.n	8019c16 <__ieee754_atan2+0x9e>
 8019c28:	4543      	cmp	r3, r8
 8019c2a:	d0e4      	beq.n	8019bf6 <__ieee754_atan2+0x7e>
 8019c2c:	1a9b      	subs	r3, r3, r2
 8019c2e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8019c32:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019c36:	da1e      	bge.n	8019c76 <__ieee754_atan2+0xfe>
 8019c38:	2f00      	cmp	r7, #0
 8019c3a:	da01      	bge.n	8019c40 <__ieee754_atan2+0xc8>
 8019c3c:	323c      	adds	r2, #60	@ 0x3c
 8019c3e:	db1e      	blt.n	8019c7e <__ieee754_atan2+0x106>
 8019c40:	4632      	mov	r2, r6
 8019c42:	463b      	mov	r3, r7
 8019c44:	f7e6 fe2a 	bl	800089c <__aeabi_ddiv>
 8019c48:	ec41 0b10 	vmov	d0, r0, r1
 8019c4c:	f000 fa10 	bl	801a070 <fabs>
 8019c50:	f000 f876 	bl	8019d40 <atan>
 8019c54:	ec51 0b10 	vmov	r0, r1, d0
 8019c58:	2c01      	cmp	r4, #1
 8019c5a:	d013      	beq.n	8019c84 <__ieee754_atan2+0x10c>
 8019c5c:	2c02      	cmp	r4, #2
 8019c5e:	d015      	beq.n	8019c8c <__ieee754_atan2+0x114>
 8019c60:	2c00      	cmp	r4, #0
 8019c62:	d0a8      	beq.n	8019bb6 <__ieee754_atan2+0x3e>
 8019c64:	a318      	add	r3, pc, #96	@ (adr r3, 8019cc8 <__ieee754_atan2+0x150>)
 8019c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c6a:	f7e6 fb35 	bl	80002d8 <__aeabi_dsub>
 8019c6e:	a318      	add	r3, pc, #96	@ (adr r3, 8019cd0 <__ieee754_atan2+0x158>)
 8019c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c74:	e014      	b.n	8019ca0 <__ieee754_atan2+0x128>
 8019c76:	a118      	add	r1, pc, #96	@ (adr r1, 8019cd8 <__ieee754_atan2+0x160>)
 8019c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c7c:	e7ec      	b.n	8019c58 <__ieee754_atan2+0xe0>
 8019c7e:	2000      	movs	r0, #0
 8019c80:	2100      	movs	r1, #0
 8019c82:	e7e9      	b.n	8019c58 <__ieee754_atan2+0xe0>
 8019c84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019c88:	4619      	mov	r1, r3
 8019c8a:	e794      	b.n	8019bb6 <__ieee754_atan2+0x3e>
 8019c8c:	a30e      	add	r3, pc, #56	@ (adr r3, 8019cc8 <__ieee754_atan2+0x150>)
 8019c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c92:	f7e6 fb21 	bl	80002d8 <__aeabi_dsub>
 8019c96:	4602      	mov	r2, r0
 8019c98:	460b      	mov	r3, r1
 8019c9a:	a10d      	add	r1, pc, #52	@ (adr r1, 8019cd0 <__ieee754_atan2+0x158>)
 8019c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ca0:	f7e6 fb1a 	bl	80002d8 <__aeabi_dsub>
 8019ca4:	e787      	b.n	8019bb6 <__ieee754_atan2+0x3e>
 8019ca6:	a10a      	add	r1, pc, #40	@ (adr r1, 8019cd0 <__ieee754_atan2+0x158>)
 8019ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cac:	e783      	b.n	8019bb6 <__ieee754_atan2+0x3e>
 8019cae:	a10c      	add	r1, pc, #48	@ (adr r1, 8019ce0 <__ieee754_atan2+0x168>)
 8019cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cb4:	e77f      	b.n	8019bb6 <__ieee754_atan2+0x3e>
 8019cb6:	2000      	movs	r0, #0
 8019cb8:	2100      	movs	r1, #0
 8019cba:	e77c      	b.n	8019bb6 <__ieee754_atan2+0x3e>
 8019cbc:	a106      	add	r1, pc, #24	@ (adr r1, 8019cd8 <__ieee754_atan2+0x160>)
 8019cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cc2:	e778      	b.n	8019bb6 <__ieee754_atan2+0x3e>
 8019cc4:	f3af 8000 	nop.w
 8019cc8:	33145c07 	.word	0x33145c07
 8019ccc:	3ca1a626 	.word	0x3ca1a626
 8019cd0:	54442d18 	.word	0x54442d18
 8019cd4:	400921fb 	.word	0x400921fb
 8019cd8:	54442d18 	.word	0x54442d18
 8019cdc:	3ff921fb 	.word	0x3ff921fb
 8019ce0:	54442d18 	.word	0x54442d18
 8019ce4:	3fe921fb 	.word	0x3fe921fb
 8019ce8:	0801b520 	.word	0x0801b520
 8019cec:	0801b508 	.word	0x0801b508
 8019cf0:	54442d18 	.word	0x54442d18
 8019cf4:	c00921fb 	.word	0xc00921fb
 8019cf8:	54442d18 	.word	0x54442d18
 8019cfc:	bff921fb 	.word	0xbff921fb
 8019d00:	7ff00000 	.word	0x7ff00000

08019d04 <sqrtf>:
 8019d04:	b508      	push	{r3, lr}
 8019d06:	ed2d 8b02 	vpush	{d8}
 8019d0a:	eeb0 8a40 	vmov.f32	s16, s0
 8019d0e:	f000 f9b7 	bl	801a080 <__ieee754_sqrtf>
 8019d12:	eeb4 8a48 	vcmp.f32	s16, s16
 8019d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d1a:	d60c      	bvs.n	8019d36 <sqrtf+0x32>
 8019d1c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8019d3c <sqrtf+0x38>
 8019d20:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d28:	d505      	bpl.n	8019d36 <sqrtf+0x32>
 8019d2a:	f7ff f8a7 	bl	8018e7c <__errno>
 8019d2e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019d32:	2321      	movs	r3, #33	@ 0x21
 8019d34:	6003      	str	r3, [r0, #0]
 8019d36:	ecbd 8b02 	vpop	{d8}
 8019d3a:	bd08      	pop	{r3, pc}
 8019d3c:	00000000 	.word	0x00000000

08019d40 <atan>:
 8019d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d44:	ec55 4b10 	vmov	r4, r5, d0
 8019d48:	4bbf      	ldr	r3, [pc, #764]	@ (801a048 <atan+0x308>)
 8019d4a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8019d4e:	429e      	cmp	r6, r3
 8019d50:	46ab      	mov	fp, r5
 8019d52:	d918      	bls.n	8019d86 <atan+0x46>
 8019d54:	4bbd      	ldr	r3, [pc, #756]	@ (801a04c <atan+0x30c>)
 8019d56:	429e      	cmp	r6, r3
 8019d58:	d801      	bhi.n	8019d5e <atan+0x1e>
 8019d5a:	d109      	bne.n	8019d70 <atan+0x30>
 8019d5c:	b144      	cbz	r4, 8019d70 <atan+0x30>
 8019d5e:	4622      	mov	r2, r4
 8019d60:	462b      	mov	r3, r5
 8019d62:	4620      	mov	r0, r4
 8019d64:	4629      	mov	r1, r5
 8019d66:	f7e6 fab9 	bl	80002dc <__adddf3>
 8019d6a:	4604      	mov	r4, r0
 8019d6c:	460d      	mov	r5, r1
 8019d6e:	e006      	b.n	8019d7e <atan+0x3e>
 8019d70:	f1bb 0f00 	cmp.w	fp, #0
 8019d74:	f340 812b 	ble.w	8019fce <atan+0x28e>
 8019d78:	a597      	add	r5, pc, #604	@ (adr r5, 8019fd8 <atan+0x298>)
 8019d7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019d7e:	ec45 4b10 	vmov	d0, r4, r5
 8019d82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d86:	4bb2      	ldr	r3, [pc, #712]	@ (801a050 <atan+0x310>)
 8019d88:	429e      	cmp	r6, r3
 8019d8a:	d813      	bhi.n	8019db4 <atan+0x74>
 8019d8c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8019d90:	429e      	cmp	r6, r3
 8019d92:	d80c      	bhi.n	8019dae <atan+0x6e>
 8019d94:	a392      	add	r3, pc, #584	@ (adr r3, 8019fe0 <atan+0x2a0>)
 8019d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d9a:	4620      	mov	r0, r4
 8019d9c:	4629      	mov	r1, r5
 8019d9e:	f7e6 fa9d 	bl	80002dc <__adddf3>
 8019da2:	4bac      	ldr	r3, [pc, #688]	@ (801a054 <atan+0x314>)
 8019da4:	2200      	movs	r2, #0
 8019da6:	f7e6 fedf 	bl	8000b68 <__aeabi_dcmpgt>
 8019daa:	2800      	cmp	r0, #0
 8019dac:	d1e7      	bne.n	8019d7e <atan+0x3e>
 8019dae:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8019db2:	e029      	b.n	8019e08 <atan+0xc8>
 8019db4:	f000 f95c 	bl	801a070 <fabs>
 8019db8:	4ba7      	ldr	r3, [pc, #668]	@ (801a058 <atan+0x318>)
 8019dba:	429e      	cmp	r6, r3
 8019dbc:	ec55 4b10 	vmov	r4, r5, d0
 8019dc0:	f200 80bc 	bhi.w	8019f3c <atan+0x1fc>
 8019dc4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8019dc8:	429e      	cmp	r6, r3
 8019dca:	f200 809e 	bhi.w	8019f0a <atan+0x1ca>
 8019dce:	4622      	mov	r2, r4
 8019dd0:	462b      	mov	r3, r5
 8019dd2:	4620      	mov	r0, r4
 8019dd4:	4629      	mov	r1, r5
 8019dd6:	f7e6 fa81 	bl	80002dc <__adddf3>
 8019dda:	4b9e      	ldr	r3, [pc, #632]	@ (801a054 <atan+0x314>)
 8019ddc:	2200      	movs	r2, #0
 8019dde:	f7e6 fa7b 	bl	80002d8 <__aeabi_dsub>
 8019de2:	2200      	movs	r2, #0
 8019de4:	4606      	mov	r6, r0
 8019de6:	460f      	mov	r7, r1
 8019de8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8019dec:	4620      	mov	r0, r4
 8019dee:	4629      	mov	r1, r5
 8019df0:	f7e6 fa74 	bl	80002dc <__adddf3>
 8019df4:	4602      	mov	r2, r0
 8019df6:	460b      	mov	r3, r1
 8019df8:	4630      	mov	r0, r6
 8019dfa:	4639      	mov	r1, r7
 8019dfc:	f7e6 fd4e 	bl	800089c <__aeabi_ddiv>
 8019e00:	f04f 0a00 	mov.w	sl, #0
 8019e04:	4604      	mov	r4, r0
 8019e06:	460d      	mov	r5, r1
 8019e08:	4622      	mov	r2, r4
 8019e0a:	462b      	mov	r3, r5
 8019e0c:	4620      	mov	r0, r4
 8019e0e:	4629      	mov	r1, r5
 8019e10:	f7e6 fc1a 	bl	8000648 <__aeabi_dmul>
 8019e14:	4602      	mov	r2, r0
 8019e16:	460b      	mov	r3, r1
 8019e18:	4680      	mov	r8, r0
 8019e1a:	4689      	mov	r9, r1
 8019e1c:	f7e6 fc14 	bl	8000648 <__aeabi_dmul>
 8019e20:	a371      	add	r3, pc, #452	@ (adr r3, 8019fe8 <atan+0x2a8>)
 8019e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e26:	4606      	mov	r6, r0
 8019e28:	460f      	mov	r7, r1
 8019e2a:	f7e6 fc0d 	bl	8000648 <__aeabi_dmul>
 8019e2e:	a370      	add	r3, pc, #448	@ (adr r3, 8019ff0 <atan+0x2b0>)
 8019e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e34:	f7e6 fa52 	bl	80002dc <__adddf3>
 8019e38:	4632      	mov	r2, r6
 8019e3a:	463b      	mov	r3, r7
 8019e3c:	f7e6 fc04 	bl	8000648 <__aeabi_dmul>
 8019e40:	a36d      	add	r3, pc, #436	@ (adr r3, 8019ff8 <atan+0x2b8>)
 8019e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e46:	f7e6 fa49 	bl	80002dc <__adddf3>
 8019e4a:	4632      	mov	r2, r6
 8019e4c:	463b      	mov	r3, r7
 8019e4e:	f7e6 fbfb 	bl	8000648 <__aeabi_dmul>
 8019e52:	a36b      	add	r3, pc, #428	@ (adr r3, 801a000 <atan+0x2c0>)
 8019e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e58:	f7e6 fa40 	bl	80002dc <__adddf3>
 8019e5c:	4632      	mov	r2, r6
 8019e5e:	463b      	mov	r3, r7
 8019e60:	f7e6 fbf2 	bl	8000648 <__aeabi_dmul>
 8019e64:	a368      	add	r3, pc, #416	@ (adr r3, 801a008 <atan+0x2c8>)
 8019e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e6a:	f7e6 fa37 	bl	80002dc <__adddf3>
 8019e6e:	4632      	mov	r2, r6
 8019e70:	463b      	mov	r3, r7
 8019e72:	f7e6 fbe9 	bl	8000648 <__aeabi_dmul>
 8019e76:	a366      	add	r3, pc, #408	@ (adr r3, 801a010 <atan+0x2d0>)
 8019e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e7c:	f7e6 fa2e 	bl	80002dc <__adddf3>
 8019e80:	4642      	mov	r2, r8
 8019e82:	464b      	mov	r3, r9
 8019e84:	f7e6 fbe0 	bl	8000648 <__aeabi_dmul>
 8019e88:	a363      	add	r3, pc, #396	@ (adr r3, 801a018 <atan+0x2d8>)
 8019e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e8e:	4680      	mov	r8, r0
 8019e90:	4689      	mov	r9, r1
 8019e92:	4630      	mov	r0, r6
 8019e94:	4639      	mov	r1, r7
 8019e96:	f7e6 fbd7 	bl	8000648 <__aeabi_dmul>
 8019e9a:	a361      	add	r3, pc, #388	@ (adr r3, 801a020 <atan+0x2e0>)
 8019e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ea0:	f7e6 fa1a 	bl	80002d8 <__aeabi_dsub>
 8019ea4:	4632      	mov	r2, r6
 8019ea6:	463b      	mov	r3, r7
 8019ea8:	f7e6 fbce 	bl	8000648 <__aeabi_dmul>
 8019eac:	a35e      	add	r3, pc, #376	@ (adr r3, 801a028 <atan+0x2e8>)
 8019eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eb2:	f7e6 fa11 	bl	80002d8 <__aeabi_dsub>
 8019eb6:	4632      	mov	r2, r6
 8019eb8:	463b      	mov	r3, r7
 8019eba:	f7e6 fbc5 	bl	8000648 <__aeabi_dmul>
 8019ebe:	a35c      	add	r3, pc, #368	@ (adr r3, 801a030 <atan+0x2f0>)
 8019ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ec4:	f7e6 fa08 	bl	80002d8 <__aeabi_dsub>
 8019ec8:	4632      	mov	r2, r6
 8019eca:	463b      	mov	r3, r7
 8019ecc:	f7e6 fbbc 	bl	8000648 <__aeabi_dmul>
 8019ed0:	a359      	add	r3, pc, #356	@ (adr r3, 801a038 <atan+0x2f8>)
 8019ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ed6:	f7e6 f9ff 	bl	80002d8 <__aeabi_dsub>
 8019eda:	4632      	mov	r2, r6
 8019edc:	463b      	mov	r3, r7
 8019ede:	f7e6 fbb3 	bl	8000648 <__aeabi_dmul>
 8019ee2:	4602      	mov	r2, r0
 8019ee4:	460b      	mov	r3, r1
 8019ee6:	4640      	mov	r0, r8
 8019ee8:	4649      	mov	r1, r9
 8019eea:	f7e6 f9f7 	bl	80002dc <__adddf3>
 8019eee:	4622      	mov	r2, r4
 8019ef0:	462b      	mov	r3, r5
 8019ef2:	f7e6 fba9 	bl	8000648 <__aeabi_dmul>
 8019ef6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8019efa:	4602      	mov	r2, r0
 8019efc:	460b      	mov	r3, r1
 8019efe:	d148      	bne.n	8019f92 <atan+0x252>
 8019f00:	4620      	mov	r0, r4
 8019f02:	4629      	mov	r1, r5
 8019f04:	f7e6 f9e8 	bl	80002d8 <__aeabi_dsub>
 8019f08:	e72f      	b.n	8019d6a <atan+0x2a>
 8019f0a:	4b52      	ldr	r3, [pc, #328]	@ (801a054 <atan+0x314>)
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	4620      	mov	r0, r4
 8019f10:	4629      	mov	r1, r5
 8019f12:	f7e6 f9e1 	bl	80002d8 <__aeabi_dsub>
 8019f16:	4b4f      	ldr	r3, [pc, #316]	@ (801a054 <atan+0x314>)
 8019f18:	4606      	mov	r6, r0
 8019f1a:	460f      	mov	r7, r1
 8019f1c:	2200      	movs	r2, #0
 8019f1e:	4620      	mov	r0, r4
 8019f20:	4629      	mov	r1, r5
 8019f22:	f7e6 f9db 	bl	80002dc <__adddf3>
 8019f26:	4602      	mov	r2, r0
 8019f28:	460b      	mov	r3, r1
 8019f2a:	4630      	mov	r0, r6
 8019f2c:	4639      	mov	r1, r7
 8019f2e:	f7e6 fcb5 	bl	800089c <__aeabi_ddiv>
 8019f32:	f04f 0a01 	mov.w	sl, #1
 8019f36:	4604      	mov	r4, r0
 8019f38:	460d      	mov	r5, r1
 8019f3a:	e765      	b.n	8019e08 <atan+0xc8>
 8019f3c:	4b47      	ldr	r3, [pc, #284]	@ (801a05c <atan+0x31c>)
 8019f3e:	429e      	cmp	r6, r3
 8019f40:	d21c      	bcs.n	8019f7c <atan+0x23c>
 8019f42:	4b47      	ldr	r3, [pc, #284]	@ (801a060 <atan+0x320>)
 8019f44:	2200      	movs	r2, #0
 8019f46:	4620      	mov	r0, r4
 8019f48:	4629      	mov	r1, r5
 8019f4a:	f7e6 f9c5 	bl	80002d8 <__aeabi_dsub>
 8019f4e:	4b44      	ldr	r3, [pc, #272]	@ (801a060 <atan+0x320>)
 8019f50:	4606      	mov	r6, r0
 8019f52:	460f      	mov	r7, r1
 8019f54:	2200      	movs	r2, #0
 8019f56:	4620      	mov	r0, r4
 8019f58:	4629      	mov	r1, r5
 8019f5a:	f7e6 fb75 	bl	8000648 <__aeabi_dmul>
 8019f5e:	4b3d      	ldr	r3, [pc, #244]	@ (801a054 <atan+0x314>)
 8019f60:	2200      	movs	r2, #0
 8019f62:	f7e6 f9bb 	bl	80002dc <__adddf3>
 8019f66:	4602      	mov	r2, r0
 8019f68:	460b      	mov	r3, r1
 8019f6a:	4630      	mov	r0, r6
 8019f6c:	4639      	mov	r1, r7
 8019f6e:	f7e6 fc95 	bl	800089c <__aeabi_ddiv>
 8019f72:	f04f 0a02 	mov.w	sl, #2
 8019f76:	4604      	mov	r4, r0
 8019f78:	460d      	mov	r5, r1
 8019f7a:	e745      	b.n	8019e08 <atan+0xc8>
 8019f7c:	4622      	mov	r2, r4
 8019f7e:	462b      	mov	r3, r5
 8019f80:	4938      	ldr	r1, [pc, #224]	@ (801a064 <atan+0x324>)
 8019f82:	2000      	movs	r0, #0
 8019f84:	f7e6 fc8a 	bl	800089c <__aeabi_ddiv>
 8019f88:	f04f 0a03 	mov.w	sl, #3
 8019f8c:	4604      	mov	r4, r0
 8019f8e:	460d      	mov	r5, r1
 8019f90:	e73a      	b.n	8019e08 <atan+0xc8>
 8019f92:	4b35      	ldr	r3, [pc, #212]	@ (801a068 <atan+0x328>)
 8019f94:	4e35      	ldr	r6, [pc, #212]	@ (801a06c <atan+0x32c>)
 8019f96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f9e:	f7e6 f99b 	bl	80002d8 <__aeabi_dsub>
 8019fa2:	4622      	mov	r2, r4
 8019fa4:	462b      	mov	r3, r5
 8019fa6:	f7e6 f997 	bl	80002d8 <__aeabi_dsub>
 8019faa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8019fae:	4602      	mov	r2, r0
 8019fb0:	460b      	mov	r3, r1
 8019fb2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8019fb6:	f7e6 f98f 	bl	80002d8 <__aeabi_dsub>
 8019fba:	f1bb 0f00 	cmp.w	fp, #0
 8019fbe:	4604      	mov	r4, r0
 8019fc0:	460d      	mov	r5, r1
 8019fc2:	f6bf aedc 	bge.w	8019d7e <atan+0x3e>
 8019fc6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019fca:	461d      	mov	r5, r3
 8019fcc:	e6d7      	b.n	8019d7e <atan+0x3e>
 8019fce:	a51c      	add	r5, pc, #112	@ (adr r5, 801a040 <atan+0x300>)
 8019fd0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019fd4:	e6d3      	b.n	8019d7e <atan+0x3e>
 8019fd6:	bf00      	nop
 8019fd8:	54442d18 	.word	0x54442d18
 8019fdc:	3ff921fb 	.word	0x3ff921fb
 8019fe0:	8800759c 	.word	0x8800759c
 8019fe4:	7e37e43c 	.word	0x7e37e43c
 8019fe8:	e322da11 	.word	0xe322da11
 8019fec:	3f90ad3a 	.word	0x3f90ad3a
 8019ff0:	24760deb 	.word	0x24760deb
 8019ff4:	3fa97b4b 	.word	0x3fa97b4b
 8019ff8:	a0d03d51 	.word	0xa0d03d51
 8019ffc:	3fb10d66 	.word	0x3fb10d66
 801a000:	c54c206e 	.word	0xc54c206e
 801a004:	3fb745cd 	.word	0x3fb745cd
 801a008:	920083ff 	.word	0x920083ff
 801a00c:	3fc24924 	.word	0x3fc24924
 801a010:	5555550d 	.word	0x5555550d
 801a014:	3fd55555 	.word	0x3fd55555
 801a018:	2c6a6c2f 	.word	0x2c6a6c2f
 801a01c:	bfa2b444 	.word	0xbfa2b444
 801a020:	52defd9a 	.word	0x52defd9a
 801a024:	3fadde2d 	.word	0x3fadde2d
 801a028:	af749a6d 	.word	0xaf749a6d
 801a02c:	3fb3b0f2 	.word	0x3fb3b0f2
 801a030:	fe231671 	.word	0xfe231671
 801a034:	3fbc71c6 	.word	0x3fbc71c6
 801a038:	9998ebc4 	.word	0x9998ebc4
 801a03c:	3fc99999 	.word	0x3fc99999
 801a040:	54442d18 	.word	0x54442d18
 801a044:	bff921fb 	.word	0xbff921fb
 801a048:	440fffff 	.word	0x440fffff
 801a04c:	7ff00000 	.word	0x7ff00000
 801a050:	3fdbffff 	.word	0x3fdbffff
 801a054:	3ff00000 	.word	0x3ff00000
 801a058:	3ff2ffff 	.word	0x3ff2ffff
 801a05c:	40038000 	.word	0x40038000
 801a060:	3ff80000 	.word	0x3ff80000
 801a064:	bff00000 	.word	0xbff00000
 801a068:	0801b538 	.word	0x0801b538
 801a06c:	0801b558 	.word	0x0801b558

0801a070 <fabs>:
 801a070:	ec51 0b10 	vmov	r0, r1, d0
 801a074:	4602      	mov	r2, r0
 801a076:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a07a:	ec43 2b10 	vmov	d0, r2, r3
 801a07e:	4770      	bx	lr

0801a080 <__ieee754_sqrtf>:
 801a080:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a084:	4770      	bx	lr
	...

0801a088 <_init>:
 801a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a08a:	bf00      	nop
 801a08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a08e:	bc08      	pop	{r3}
 801a090:	469e      	mov	lr, r3
 801a092:	4770      	bx	lr

0801a094 <_fini>:
 801a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a096:	bf00      	nop
 801a098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a09a:	bc08      	pop	{r3}
 801a09c:	469e      	mov	lr, r3
 801a09e:	4770      	bx	lr
